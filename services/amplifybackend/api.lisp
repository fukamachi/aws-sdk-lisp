;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/amplifybackend/api (:use)
                             (:nicknames #:aws/amplifybackend)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/amplifybackend/api)
(common-lisp:progn
 (common-lisp:define-condition amplifybackend-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'amplifybackend-error))
(common-lisp:progn
 (common-lisp:defclass amplifybackend-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "amplifybackend"
                        :api-version "2020-08-11" :host-prefix "amplifybackend"
                        :signing-name "amplifybackend" :global-host
                        common-lisp:nil))
 (common-lisp:export 'amplifybackend-request))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("GatewayTimeoutException" . gateway-timeout-exception)
    ("NotFoundException" . not-found-exception)
    ("TooManyRequestsException" . too-many-requests-exception)))
(common-lisp:deftype auth-resources () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass backend-apiapp-sync-auth-settings common-lisp:nil
                       ((cognito-user-pool-id :initarg :cognito-user-pool-id
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apiapp-sync-auth-settings-cognito-user-pool-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "cognitoUserPoolId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apiapp-sync-auth-settings-description
                         :shape "__string" :location common-lisp:nil
                         :location-name "description")
                        (expiration-time :initarg :expiration-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-backend-apiapp-sync-auth-settings-expiration-time
                         :shape "__double" :location common-lisp:nil
                         :location-name "expirationTime")
                        (open-idauth-ttl :initarg :open-idauth-ttl :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apiapp-sync-auth-settings-open-idauth-ttl
                         :shape "__string" :location common-lisp:nil
                         :location-name "openIDAuthTTL")
                        (open-idclient-id :initarg :open-idclient-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apiapp-sync-auth-settings-open-idclient-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "openIDClientId")
                        (open-idiat-ttl :initarg :open-idiat-ttl :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apiapp-sync-auth-settings-open-idiat-ttl
                         :shape "__string" :location common-lisp:nil
                         :location-name "openIDIatTTL")
                        (open-idissue-url :initarg :open-idissue-url :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apiapp-sync-auth-settings-open-idissue-url
                         :shape "__string" :location common-lisp:nil
                         :location-name "openIDIssueURL")
                        (open-idprovider-name :initarg :open-idprovider-name
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apiapp-sync-auth-settings-open-idprovider-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "openIDProviderName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-apiapp-sync-auth-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'backend-apiapp-sync-auth-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-apiapp-sync-auth-settings
                    'make-backend-apiapp-sync-auth-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiapp-sync-auth-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiapp-sync-auth-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-user-pool-id))
      (common-lisp:list
       (common-lisp:cons "CognitoUserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-idauth-ttl))
      (common-lisp:list
       (common-lisp:cons "OpenIDAuthTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-idclient-id))
      (common-lisp:list
       (common-lisp:cons "OpenIDClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-idiat-ttl))
      (common-lisp:list
       (common-lisp:cons "OpenIDIatTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-idissue-url))
      (common-lisp:list
       (common-lisp:cons "OpenIDIssueURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idprovider-name))
      (common-lisp:list
       (common-lisp:cons "OpenIDProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiapp-sync-auth-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-apiauth-type common-lisp:nil
                       ((mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or mode common-lisp:null) :accessor
                         struct-shape-backend-apiauth-type-mode :shape "Mode"
                         :location common-lisp:nil :location-name "mode")
                        (settings :initarg :settings :initform common-lisp:nil
                         :type
                         (common-lisp:or backend-apiapp-sync-auth-settings
                                         common-lisp:null)
                         :accessor struct-shape-backend-apiauth-type-settings
                         :shape "BackendAPIAppSyncAuthSettings" :location
                         common-lisp:nil :location-name "settings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-apiauth-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend-apiauth-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-apiauth-type 'make-backend-apiauth-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend-apiauth-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend-apiauth-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend-apiauth-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-apicodegen-req-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apicodegen-req-obj-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-apicodegen-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend-apicodegen-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-apicodegen-req-obj
                    'make-backend-apicodegen-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-apicodegen-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-apicodegen-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-apicodegen-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-apicodegen-resp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apicodegen-resp-obj-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-backend-apicodegen-resp-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apicodegen-resp-obj-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-backend-apicodegen-resp-obj-job-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apicodegen-resp-obj-operation
                         :shape "__string" :location common-lisp:nil
                         :location-name "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-backend-apicodegen-resp-obj-status :shape
                         "__string" :location common-lisp:nil :location-name
                         "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-apicodegen-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend-apicodegen-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-apicodegen-resp-obj
                    'make-backend-apicodegen-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-apicodegen-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-apicodegen-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-apicodegen-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-apiconflict-resolution common-lisp:nil
                       ((resolution-strategy :initarg :resolution-strategy
                         :initform common-lisp:nil :type
                         (common-lisp:or resolution-strategy common-lisp:null)
                         :accessor
                         struct-shape-backend-apiconflict-resolution-resolution-strategy
                         :shape "ResolutionStrategy" :location common-lisp:nil
                         :location-name "resolutionStrategy"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-apiconflict-resolution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'backend-apiconflict-resolution
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-apiconflict-resolution
                    'make-backend-apiconflict-resolution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiconflict-resolution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiconflict-resolution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-strategy))
      (common-lisp:list
       (common-lisp:cons "ResolutionStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiconflict-resolution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-apireq-obj common-lisp:nil
                       ((resource-config :initarg :resource-config :initform
                         common-lisp:nil :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-backend-apireq-obj-resource-config :shape
                         "BackendAPIResourceConfig" :location common-lisp:nil
                         :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apireq-obj-resource-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-apireq-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend-apireq-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-apireq-obj 'make-backend-apireq-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend-apireq-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend-apireq-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend-apireq-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-apiresource-config common-lisp:nil
                       ((additional-auth-types :initarg :additional-auth-types
                         :initform common-lisp:nil :type
                         (common-lisp:or list-of-backend-apiauth-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-backend-apiresource-config-additional-auth-types
                         :shape "ListOfBackendAPIAuthType" :location
                         common-lisp:nil :location-name "additionalAuthTypes")
                        (api-name :initarg :api-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-backend-apiresource-config-api-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "apiName")
                        (conflict-resolution :initarg :conflict-resolution
                         :initform common-lisp:nil :type
                         (common-lisp:or backend-apiconflict-resolution
                                         common-lisp:null)
                         :accessor
                         struct-shape-backend-apiresource-config-conflict-resolution
                         :shape "BackendAPIConflictResolution" :location
                         common-lisp:nil :location-name "conflictResolution")
                        (default-auth-type :initarg :default-auth-type
                         :initform common-lisp:nil :type
                         (common-lisp:or backend-apiauth-type common-lisp:null)
                         :accessor
                         struct-shape-backend-apiresource-config-default-auth-type
                         :shape "BackendAPIAuthType" :location common-lisp:nil
                         :location-name "defaultAuthType")
                        (service :initarg :service :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-backend-apiresource-config-service :shape
                         "__string" :location common-lisp:nil :location-name
                         "service")
                        (transform-schema :initarg :transform-schema :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apiresource-config-transform-schema
                         :shape "__string" :location common-lisp:nil
                         :location-name "transformSchema"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-apiresource-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend-apiresource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-apiresource-config
                    'make-backend-apiresource-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiresource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiresource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-auth-types))
      (common-lisp:list
       (common-lisp:cons "AdditionalAuthTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-name))
      (common-lisp:list
       (common-lisp:cons "ApiName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-resolution))
      (common-lisp:list
       (common-lisp:cons "ConflictResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-auth-type))
      (common-lisp:list
       (common-lisp:cons "DefaultAuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-schema))
      (common-lisp:list
       (common-lisp:cons "TransformSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiresource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-apiresp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apiresp-obj-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-backend-apiresp-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apiresp-obj-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-backend-apiresp-obj-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-apiresp-obj-operation :shape
                         "__string" :location common-lisp:nil :location-name
                         "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-backend-apiresp-obj-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-apiresp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend-apiresp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-apiresp-obj 'make-backend-apiresp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend-apiresp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend-apiresp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend-apiresp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-auth-apple-provider-config common-lisp:nil
                       ((client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-auth-apple-provider-config-client-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "client_id")
                        (key-id :initarg :key-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-backend-auth-apple-provider-config-key-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "key_id")
                        (private-key :initarg :private-key :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-auth-apple-provider-config-private-key
                         :shape "__string" :location common-lisp:nil
                         :location-name "private_key")
                        (team-id :initarg :team-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-backend-auth-apple-provider-config-team-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "team_id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-auth-apple-provider-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'backend-auth-apple-provider-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-auth-apple-provider-config
                    'make-backend-auth-apple-provider-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-apple-provider-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-apple-provider-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "TeamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-apple-provider-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-auth-resp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-auth-resp-obj-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-backend-auth-resp-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-auth-resp-obj-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-backend-auth-resp-obj-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-auth-resp-obj-operation :shape
                         "__string" :location common-lisp:nil :location-name
                         "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-backend-auth-resp-obj-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-auth-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend-auth-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-auth-resp-obj 'make-backend-auth-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-auth-social-provider-config common-lisp:nil
                       ((client-id :initarg :client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-auth-social-provider-config-client-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "client_id")
                        (client-secret :initarg :client-secret :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-auth-social-provider-config-client-secret
                         :shape "__string" :location common-lisp:nil
                         :location-name "client_secret"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-auth-social-provider-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'backend-auth-social-provider-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-auth-social-provider-config
                    'make-backend-auth-social-provider-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-social-provider-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-social-provider-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "ClientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-social-provider-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-config-resp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-backend-config-resp-obj-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-manager-app-id :initarg
                         :backend-manager-app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-backend-config-resp-obj-backend-manager-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendManagerAppId")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-config-resp-obj-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (login-auth-config :initarg :login-auth-config
                         :initform common-lisp:nil :type
                         (common-lisp:or login-auth-config-req-obj
                                         common-lisp:null)
                         :accessor
                         struct-shape-backend-config-resp-obj-login-auth-config
                         :shape "LoginAuthConfigReqObj" :location
                         common-lisp:nil :location-name "loginAuthConfig"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-config-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend-config-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-config-resp-obj 'make-backend-config-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-config-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-config-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-manager-app-id))
      (common-lisp:list
       (common-lisp:cons "BackendManagerAppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-auth-config))
      (common-lisp:list
       (common-lisp:cons "LoginAuthConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-config-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-job-req-obj common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-job-req-obj-operation :shape
                         "__string" :location common-lisp:nil :location-name
                         "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-backend-job-req-obj-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-job-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend-job-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-job-req-obj 'make-backend-job-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend-job-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend-job-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend-job-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-job-resp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-job-resp-obj-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-backend-job-resp-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-job-resp-obj-create-time :shape
                         "__string" :location common-lisp:nil :location-name
                         "createTime")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-job-resp-obj-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-backend-job-resp-obj-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-job-resp-obj-operation :shape
                         "__string" :location common-lisp:nil :location-name
                         "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-backend-job-resp-obj-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status")
                        (update-time :initarg :update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-job-resp-obj-update-time :shape
                         "__string" :location common-lisp:nil :location-name
                         "updateTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-job-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend-job-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-job-resp-obj 'make-backend-job-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend-job-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend-job-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend-job-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-storage-permissions common-lisp:nil
                       ((authenticated :initarg :authenticated :initform
                         (common-lisp:error ":authenticated is required") :type
                         (common-lisp:or list-of-authenticated-element
                                         common-lisp:null)
                         :accessor
                         struct-shape-backend-storage-permissions-authenticated
                         :shape "ListOfAuthenticatedElement" :location
                         common-lisp:nil :location-name "authenticated")
                        (un-authenticated :initarg :un-authenticated :initform
                         common-lisp:nil :type
                         (common-lisp:or list-of-un-authenticated-element
                                         common-lisp:null)
                         :accessor
                         struct-shape-backend-storage-permissions-un-authenticated
                         :shape "ListOfUnAuthenticatedElement" :location
                         common-lisp:nil :location-name "unAuthenticated"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-storage-permissions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend-storage-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-storage-permissions
                    'make-backend-storage-permissions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-storage-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-storage-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authenticated))
      (common-lisp:list
       (common-lisp:cons "Authenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'un-authenticated))
      (common-lisp:list
       (common-lisp:cons "UnAuthenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-storage-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-storage-resp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-storage-resp-obj-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-backend-storage-resp-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-storage-resp-obj-job-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "jobId")
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-backend-storage-resp-obj-status :shape
                         "__string" :location common-lisp:nil :location-name
                         "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backend-storage-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backend-storage-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'backend-storage-resp-obj 'make-backend-storage-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-storage-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-storage-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-storage-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (amplifybackend-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass clone-backend-req-obj common-lisp:nil
                       ((target-environment-name :initarg
                         :target-environment-name :initform
                         (common-lisp:error
                          ":target-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-clone-backend-req-obj-target-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetEnvironmentName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-clone-backend-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'clone-backend-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'clone-backend-req-obj 'make-clone-backend-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-environment-name))
      (common-lisp:list
       (common-lisp:cons "TargetEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass clone-backend-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-clone-backend-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-clone-backend-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (target-environment-name :initarg
                         :target-environment-name :initform
                         (common-lisp:error
                          ":target-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-clone-backend-request-target-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "targetEnvironmentName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-clone-backend-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'clone-backend-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'clone-backend-request 'make-clone-backend-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-environment-name))
      (common-lisp:list
       (common-lisp:cons "TargetEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass clone-backend-resp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-clone-backend-resp-obj-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-clone-backend-resp-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-clone-backend-resp-obj-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-clone-backend-resp-obj-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-clone-backend-resp-obj-operation :shape
                         "__string" :location common-lisp:nil :location-name
                         "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-clone-backend-resp-obj-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-clone-backend-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'clone-backend-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'clone-backend-resp-obj 'make-clone-backend-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass clone-backend-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-clone-backend-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-clone-backend-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-clone-backend-response-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-clone-backend-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-clone-backend-response-operation :shape
                         "__string" :location common-lisp:nil :location-name
                         "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-clone-backend-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-clone-backend-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'clone-backend-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'clone-backend-response 'make-clone-backend-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-apireq-obj common-lisp:nil
                       ((backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-apireq-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         (common-lisp:error ":resource-config is required")
                         :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-backend-apireq-obj-resource-config
                         :shape "BackendAPIResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-apireq-obj-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-apireq-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-apireq-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-apireq-obj
                    'make-create-backend-apireq-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apireq-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apireq-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apireq-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-apirequest common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-apirequest-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-apirequest-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         (common-lisp:error ":resource-config is required")
                         :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-backend-apirequest-resource-config
                         :shape "BackendAPIResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-apirequest-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-apirequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-apirequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-apirequest
                    'make-create-backend-apirequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apirequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apirequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apirequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-apiresponse common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-apiresponse-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-apiresponse-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-apiresponse-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-apiresponse-job-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-apiresponse-operation
                         :shape "__string" :location common-lisp:nil
                         :location-name "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-apiresponse-status :shape
                         "__string" :location common-lisp:nil :location-name
                         "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-apiresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-apiresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-apiresponse
                    'make-create-backend-apiresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apiresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apiresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apiresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-forgot-password-config
                       common-lisp:nil
                       ((delivery-method :initarg :delivery-method :initform
                         (common-lisp:error ":delivery-method is required")
                         :type
                         (common-lisp:or delivery-method common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-forgot-password-config-delivery-method
                         :shape "DeliveryMethod" :location common-lisp:nil
                         :location-name "deliveryMethod")
                        (email-settings :initarg :email-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or email-settings common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-forgot-password-config-email-settings
                         :shape "EmailSettings" :location common-lisp:nil
                         :location-name "emailSettings")
                        (sms-settings :initarg :sms-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or sms-settings common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-forgot-password-config-sms-settings
                         :shape "SmsSettings" :location common-lisp:nil
                         :location-name "smsSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-auth-forgot-password-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-forgot-password-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-forgot-password-config
                    'make-create-backend-auth-forgot-password-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-forgot-password-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-forgot-password-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-method))
      (common-lisp:list
       (common-lisp:cons "DeliveryMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-settings))
      (common-lisp:list
       (common-lisp:cons "EmailSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-settings))
      (common-lisp:list
       (common-lisp:cons "SmsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-forgot-password-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-identity-pool-config common-lisp:nil
                       ((identity-pool-name :initarg :identity-pool-name
                         :initform
                         (common-lisp:error ":identity-pool-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-identity-pool-config-identity-pool-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "identityPoolName")
                        (unauthenticated-login :initarg :unauthenticated-login
                         :initform
                         (common-lisp:error
                          ":unauthenticated-login is required")
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-identity-pool-config-unauthenticated-login
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "unauthenticatedLogin"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-auth-identity-pool-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-identity-pool-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-identity-pool-config
                    'make-create-backend-auth-identity-pool-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-identity-pool-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-identity-pool-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-name))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unauthenticated-login))
      (common-lisp:list
       (common-lisp:cons "UnauthenticatedLogin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-identity-pool-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-mfaconfig common-lisp:nil
                       ((mfamode :initarg :mfamode :initform
                         (common-lisp:error ":mfamode is required") :type
                         (common-lisp:or mfamode common-lisp:null) :accessor
                         struct-shape-create-backend-auth-mfaconfig-mfamode
                         :shape "MFAMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type (common-lisp:or settings common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-mfaconfig-settings
                         :shape "Settings" :location common-lisp:nil
                         :location-name "settings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-auth-mfaconfig
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-mfaconfig
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-mfaconfig
                    'make-create-backend-auth-mfaconfig))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-mfaconfig))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-mfaconfig))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfamode))
      (common-lisp:list
       (common-lisp:cons "MFAMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-mfaconfig))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-oauth-config common-lisp:nil
                       ((domain-prefix :initarg :domain-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-auth-oauth-config-domain-prefix
                         :shape "__string" :location common-lisp:nil
                         :location-name "domainPrefix")
                        (oauth-grant-type :initarg :oauth-grant-type :initform
                         (common-lisp:error ":oauth-grant-type is required")
                         :type
                         (common-lisp:or oauth-grant-type common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-oauth-config-oauth-grant-type
                         :shape "OAuthGrantType" :location common-lisp:nil
                         :location-name "oAuthGrantType")
                        (oauth-scopes :initarg :oauth-scopes :initform
                         (common-lisp:error ":oauth-scopes is required") :type
                         (common-lisp:or list-of-oauth-scopes-element
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-oauth-config-oauth-scopes
                         :shape "ListOfOAuthScopesElement" :location
                         common-lisp:nil :location-name "oAuthScopes")
                        (redirect-sign-in-uris :initarg :redirect-sign-in-uris
                         :initform
                         (common-lisp:error
                          ":redirect-sign-in-uris is required")
                         :type (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-oauth-config-redirect-sign-in-uris
                         :shape "ListOf__string" :location common-lisp:nil
                         :location-name "redirectSignInURIs")
                        (redirect-sign-out-uris :initarg
                         :redirect-sign-out-uris :initform
                         (common-lisp:error
                          ":redirect-sign-out-uris is required")
                         :type (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-oauth-config-redirect-sign-out-uris
                         :shape "ListOf__string" :location common-lisp:nil
                         :location-name "redirectSignOutURIs")
                        (social-provider-settings :initarg
                         :social-provider-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or social-provider-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-oauth-config-social-provider-settings
                         :shape "SocialProviderSettings" :location
                         common-lisp:nil :location-name
                         "socialProviderSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-auth-oauth-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-oauth-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-oauth-config
                    'make-create-backend-auth-oauth-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-oauth-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-oauth-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-prefix))
      (common-lisp:list
       (common-lisp:cons "DomainPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth-grant-type))
      (common-lisp:list
       (common-lisp:cons "OAuthGrantType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth-scopes))
      (common-lisp:list
       (common-lisp:cons "OAuthScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-sign-in-uris))
      (common-lisp:list
       (common-lisp:cons "RedirectSignInURIs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-sign-out-uris))
      (common-lisp:list
       (common-lisp:cons "RedirectSignOutURIs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'social-provider-settings))
      (common-lisp:list
       (common-lisp:cons "SocialProviderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-oauth-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-password-policy-config
                       common-lisp:nil
                       ((additional-constraints :initarg
                         :additional-constraints :initform common-lisp:nil
                         :type
                         (common-lisp:or list-of-additional-constraints-element
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-password-policy-config-additional-constraints
                         :shape "ListOfAdditionalConstraintsElement" :location
                         common-lisp:nil :location-name
                         "additionalConstraints")
                        (minimum-length :initarg :minimum-length :initform
                         (common-lisp:error ":minimum-length is required")
                         :type (common-lisp:or |__double| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-password-policy-config-minimum-length
                         :shape "__double" :location common-lisp:nil
                         :location-name "minimumLength"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-auth-password-policy-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-password-policy-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-password-policy-config
                    'make-create-backend-auth-password-policy-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-password-policy-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-password-policy-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-constraints))
      (common-lisp:list
       (common-lisp:cons "AdditionalConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-length))
      (common-lisp:list
       (common-lisp:cons "MinimumLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-password-policy-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-req-obj common-lisp:nil
                       ((backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-req-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         (common-lisp:error ":resource-config is required")
                         :type
                         (common-lisp:or create-backend-auth-resource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-req-obj-resource-config
                         :shape "CreateBackendAuthResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-auth-req-obj-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-auth-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-auth-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-req-obj
                    'make-create-backend-auth-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-auth-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-request-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         (common-lisp:error ":resource-config is required")
                         :type
                         (common-lisp:or create-backend-auth-resource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-request-resource-config
                         :shape "CreateBackendAuthResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-auth-request-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-auth-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-auth-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-request
                    'make-create-backend-auth-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-resource-config common-lisp:nil
                       ((auth-resources :initarg :auth-resources :initform
                         (common-lisp:error ":auth-resources is required")
                         :type (common-lisp:or auth-resources common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-resource-config-auth-resources
                         :shape "AuthResources" :location common-lisp:nil
                         :location-name "authResources")
                        (identity-pool-configs :initarg :identity-pool-configs
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          create-backend-auth-identity-pool-config
                          common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-resource-config-identity-pool-configs
                         :shape "CreateBackendAuthIdentityPoolConfig" :location
                         common-lisp:nil :location-name "identityPoolConfigs")
                        (service :initarg :service :initform
                         (common-lisp:error ":service is required") :type
                         (common-lisp:or service common-lisp:null) :accessor
                         struct-shape-create-backend-auth-resource-config-service
                         :shape "Service" :location common-lisp:nil
                         :location-name "service")
                        (user-pool-configs :initarg :user-pool-configs
                         :initform
                         (common-lisp:error ":user-pool-configs is required")
                         :type
                         (common-lisp:or create-backend-auth-user-pool-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-resource-config-user-pool-configs
                         :shape "CreateBackendAuthUserPoolConfig" :location
                         common-lisp:nil :location-name "userPoolConfigs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-auth-resource-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-resource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-resource-config
                    'make-create-backend-auth-resource-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-resources))
      (common-lisp:list
       (common-lisp:cons "AuthResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-pool-configs))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-configs))
      (common-lisp:list
       (common-lisp:cons "UserPoolConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-auth-response-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-auth-response-operation
                         :shape "__string" :location common-lisp:nil
                         :location-name "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-auth-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-auth-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-response
                    'make-create-backend-auth-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-user-pool-config common-lisp:nil
                       ((forgot-password :initarg :forgot-password :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          create-backend-auth-forgot-password-config
                          common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-user-pool-config-forgot-password
                         :shape "CreateBackendAuthForgotPasswordConfig"
                         :location common-lisp:nil :location-name
                         "forgotPassword")
                        (mfa :initarg :mfa :initform common-lisp:nil :type
                         (common-lisp:or create-backend-auth-mfaconfig
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-user-pool-config-mfa
                         :shape "CreateBackendAuthMFAConfig" :location
                         common-lisp:nil :location-name "mfa")
                        (oauth :initarg :oauth :initform common-lisp:nil :type
                         (common-lisp:or create-backend-auth-oauth-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-user-pool-config-oauth
                         :shape "CreateBackendAuthOAuthConfig" :location
                         common-lisp:nil :location-name "oAuth")
                        (password-policy :initarg :password-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          create-backend-auth-password-policy-config
                          common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-user-pool-config-password-policy
                         :shape "CreateBackendAuthPasswordPolicyConfig"
                         :location common-lisp:nil :location-name
                         "passwordPolicy")
                        (required-sign-up-attributes :initarg
                         :required-sign-up-attributes :initform
                         (common-lisp:error
                          ":required-sign-up-attributes is required")
                         :type
                         (common-lisp:or
                          list-of-required-sign-up-attributes-element
                          common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-user-pool-config-required-sign-up-attributes
                         :shape "ListOfRequiredSignUpAttributesElement"
                         :location common-lisp:nil :location-name
                         "requiredSignUpAttributes")
                        (sign-in-method :initarg :sign-in-method :initform
                         (common-lisp:error ":sign-in-method is required")
                         :type (common-lisp:or sign-in-method common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-user-pool-config-sign-in-method
                         :shape "SignInMethod" :location common-lisp:nil
                         :location-name "signInMethod")
                        (user-pool-name :initarg :user-pool-name :initform
                         (common-lisp:error ":user-pool-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-user-pool-config-user-pool-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "userPoolName")
                        (verification-message :initarg :verification-message
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          create-backend-auth-verification-message-config
                          common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-user-pool-config-verification-message
                         :shape "CreateBackendAuthVerificationMessageConfig"
                         :location common-lisp:nil :location-name
                         "verificationMessage"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-auth-user-pool-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-user-pool-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-user-pool-config
                    'make-create-backend-auth-user-pool-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-user-pool-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-user-pool-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forgot-password))
      (common-lisp:list
       (common-lisp:cons "ForgotPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:list
       (common-lisp:cons "Mfa"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth))
      (common-lisp:list
       (common-lisp:cons "OAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-policy))
      (common-lisp:list
       (common-lisp:cons "PasswordPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'required-sign-up-attributes))
      (common-lisp:list
       (common-lisp:cons "RequiredSignUpAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sign-in-method))
      (common-lisp:list
       (common-lisp:cons "SignInMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-name))
      (common-lisp:list
       (common-lisp:cons "UserPoolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-message))
      (common-lisp:list
       (common-lisp:cons "VerificationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-user-pool-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-verification-message-config
                       common-lisp:nil
                       ((delivery-method :initarg :delivery-method :initform
                         (common-lisp:error ":delivery-method is required")
                         :type
                         (common-lisp:or delivery-method common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-verification-message-config-delivery-method
                         :shape "DeliveryMethod" :location common-lisp:nil
                         :location-name "deliveryMethod")
                        (email-settings :initarg :email-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or email-settings common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-verification-message-config-email-settings
                         :shape "EmailSettings" :location common-lisp:nil
                         :location-name "emailSettings")
                        (sms-settings :initarg :sms-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or sms-settings common-lisp:null)
                         :accessor
                         struct-shape-create-backend-auth-verification-message-config-sms-settings
                         :shape "SmsSettings" :location common-lisp:nil
                         :location-name "smsSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-auth-verification-message-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-verification-message-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-verification-message-config
                    'make-create-backend-auth-verification-message-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-verification-message-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-verification-message-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-method))
      (common-lisp:list
       (common-lisp:cons "DeliveryMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-settings))
      (common-lisp:list
       (common-lisp:cons "EmailSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-settings))
      (common-lisp:list
       (common-lisp:cons "SmsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-verification-message-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-config-req-obj common-lisp:nil
                       ((backend-manager-app-id :initarg
                         :backend-manager-app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-config-req-obj-backend-manager-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendManagerAppId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-config-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-config-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-config-req-obj
                    'make-create-backend-config-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-manager-app-id))
      (common-lisp:list
       (common-lisp:cons "BackendManagerAppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-config-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-config-request-app-id
                         :shape "__string" :location "uri" :location-name
                         "appId")
                        (backend-manager-app-id :initarg
                         :backend-manager-app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-config-request-backend-manager-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendManagerAppId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-config-request
                    'make-create-backend-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-manager-app-id))
      (common-lisp:list
       (common-lisp:cons "BackendManagerAppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-config-resp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-config-resp-obj-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-config-resp-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-config-resp-obj-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-config-resp-obj-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-config-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-config-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-config-resp-obj
                    'make-create-backend-config-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-config-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-config-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-config-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-config-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-config-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-config-response
                    'make-create-backend-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-req-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-req-obj-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (app-name :initarg :app-name :initform
                         (common-lisp:error ":app-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-req-obj-app-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "appName")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-req-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-config common-lisp:null)
                         :accessor
                         struct-shape-create-backend-req-obj-resource-config
                         :shape "ResourceConfig" :location common-lisp:nil
                         :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-req-obj-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-req-obj 'make-create-backend-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-request-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (app-name :initarg :app-name :initform
                         (common-lisp:error ":app-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-request-app-name :shape
                         "__string" :location common-lisp:nil :location-name
                         "appName")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-request-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-config common-lisp:null)
                         :accessor
                         struct-shape-create-backend-request-resource-config
                         :shape "ResourceConfig" :location common-lisp:nil
                         :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-request-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-request 'make-create-backend-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-resp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-resp-obj-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-resp-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-resp-obj-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-create-backend-resp-obj-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-resp-obj-operation :shape
                         "__string" :location common-lisp:nil :location-name
                         "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-create-backend-resp-obj-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-resp-obj 'make-create-backend-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-create-backend-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-response-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-create-backend-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-response-operation :shape
                         "__string" :location common-lisp:nil :location-name
                         "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-create-backend-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-response 'make-create-backend-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-storage-req-obj common-lisp:nil
                       ((backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-storage-req-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         (common-lisp:error ":resource-config is required")
                         :type
                         (common-lisp:or create-backend-storage-resource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-backend-storage-req-obj-resource-config
                         :shape "CreateBackendStorageResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-storage-req-obj-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-storage-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-storage-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-storage-req-obj
                    'make-create-backend-storage-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-storage-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-storage-request-app-id
                         :shape "__string" :location "uri" :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-storage-request-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         (common-lisp:error ":resource-config is required")
                         :type
                         (common-lisp:or create-backend-storage-resource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-backend-storage-request-resource-config
                         :shape "CreateBackendStorageResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-storage-request-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-storage-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-storage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-storage-request
                    'make-create-backend-storage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-storage-resource-config common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-backend-storage-resource-config-bucket-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "bucketName")
                        (permissions :initarg :permissions :initform
                         (common-lisp:error ":permissions is required") :type
                         (common-lisp:or backend-storage-permissions
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-backend-storage-resource-config-permissions
                         :shape "BackendStoragePermissions" :location
                         common-lisp:nil :location-name "permissions")
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-create-backend-storage-resource-config-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name "serviceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-storage-resource-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-storage-resource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-storage-resource-config
                    'make-create-backend-storage-resource-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-storage-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-storage-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-storage-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-storage-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-backend-storage-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-backend-storage-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-storage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-backend-storage-response
                    'make-create-backend-storage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-token-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-token-request-app-id :shape
                         "__string" :location "uri" :location-name "appId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-token-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-token-request 'make-create-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-token-resp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-token-resp-obj-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (challenge-code :initarg :challenge-code :initform
                         (common-lisp:error ":challenge-code is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-create-token-resp-obj-challenge-code
                         :shape "__string" :location common-lisp:nil
                         :location-name "challengeCode")
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-token-resp-obj-session-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "sessionId")
                        (ttl :initarg :ttl :initform
                         (common-lisp:error ":ttl is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-token-resp-obj-ttl :shape
                         "__string" :location common-lisp:nil :location-name
                         "ttl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-token-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-token-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-token-resp-obj 'make-create-token-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-token-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-token-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-code))
      (common-lisp:list
       (common-lisp:cons "ChallengeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "Ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-token-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-token-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-create-token-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (challenge-code :initarg :challenge-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-token-response-challenge-code
                         :shape "__string" :location common-lisp:nil
                         :location-name "challengeCode")
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-token-response-session-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "sessionId")
                        (ttl :initarg :ttl :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-create-token-response-ttl :shape
                         "__string" :location common-lisp:nil :location-name
                         "ttl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-token-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-token-response 'make-create-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-code))
      (common-lisp:list
       (common-lisp:cons "ChallengeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "Ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-apirequest common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-apirequest-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-apirequest-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         common-lisp:nil :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-apirequest-resource-config
                         :shape "BackendAPIResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-apirequest-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-backend-apirequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backend-apirequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-backend-apirequest
                    'make-delete-backend-apirequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-apirequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-apirequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-apirequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-apiresponse common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-apiresponse-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-apiresponse-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-apiresponse-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-apiresponse-job-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-apiresponse-operation
                         :shape "__string" :location common-lisp:nil
                         :location-name "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-apiresponse-status :shape
                         "__string" :location common-lisp:nil :location-name
                         "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-backend-apiresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backend-apiresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-backend-apiresponse
                    'make-delete-backend-apiresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-apiresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-apiresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-apiresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-auth-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-auth-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-auth-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-auth-request-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-backend-auth-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backend-auth-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-backend-auth-request
                    'make-delete-backend-auth-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-auth-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-auth-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-auth-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-auth-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-auth-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-auth-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-auth-response-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-auth-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-auth-response-operation
                         :shape "__string" :location common-lisp:nil
                         :location-name "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-auth-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-backend-auth-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backend-auth-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-backend-auth-response
                    'make-delete-backend-auth-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-auth-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-auth-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-auth-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-backend-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backend-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-backend-request 'make-delete-backend-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-resp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-resp-obj-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-resp-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-resp-obj-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-delete-backend-resp-obj-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-resp-obj-operation :shape
                         "__string" :location common-lisp:nil :location-name
                         "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-delete-backend-resp-obj-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-backend-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backend-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-backend-resp-obj 'make-delete-backend-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-delete-backend-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-response-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-delete-backend-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-response-operation :shape
                         "__string" :location common-lisp:nil :location-name
                         "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-delete-backend-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-backend-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backend-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-backend-response 'make-delete-backend-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-storage-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-storage-request-app-id
                         :shape "__string" :location "uri" :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-storage-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-backend-storage-request-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName")
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-storage-request-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name "serviceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-backend-storage-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-backend-storage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-backend-storage-request
                    'make-delete-backend-storage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-storage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-storage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-storage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-storage-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-storage-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-storage-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-storage-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-delete-backend-storage-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-backend-storage-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-backend-storage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-backend-storage-response
                    'make-delete-backend-storage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-storage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-storage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-storage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-token-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-token-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-delete-token-request-session-id :shape
                         "__string" :location "uri" :location-name
                         "sessionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-token-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-token-request 'make-delete-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-token-resp-obj common-lisp:nil
                       ((is-success :initarg :is-success :initform
                         (common-lisp:error ":is-success is required") :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-delete-token-resp-obj-is-success :shape
                         "__boolean" :location common-lisp:nil :location-name
                         "isSuccess"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-token-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-token-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-token-resp-obj 'make-delete-token-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-success))
      (common-lisp:list
       (common-lisp:cons "IsSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-token-response common-lisp:nil
                       ((is-success :initarg :is-success :initform
                         common-lisp:nil :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-delete-token-response-is-success :shape
                         "__boolean" :location common-lisp:nil :location-name
                         "isSuccess"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-token-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-token-response 'make-delete-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-success))
      (common-lisp:list
       (common-lisp:cons "IsSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-response))
   common-lisp:nil))
(common-lisp:deftype delivery-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass email-settings common-lisp:nil
                       ((email-message :initarg :email-message :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-email-settings-email-message :shape
                         "__string" :location common-lisp:nil :location-name
                         "emailMessage")
                        (email-subject :initarg :email-subject :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-email-settings-email-subject :shape
                         "__string" :location common-lisp:nil :location-name
                         "emailSubject"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-email-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'email-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'email-settings 'make-email-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input email-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input email-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-message))
      (common-lisp:list
       (common-lisp:cons "EmailMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-subject))
      (common-lisp:list
       (common-lisp:cons "EmailSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input email-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition gateway-timeout-exception
     (amplifybackend-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       gateway-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'gateway-timeout-exception
                    'gateway-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defclass generate-backend-apimodels-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-generate-backend-apimodels-request-app-id
                         :shape "__string" :location "uri" :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-generate-backend-apimodels-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-generate-backend-apimodels-request-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-backend-apimodels-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-backend-apimodels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-backend-apimodels-request
                    'make-generate-backend-apimodels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-backend-apimodels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-backend-apimodels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-backend-apimodels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-backend-apimodels-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-generate-backend-apimodels-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-generate-backend-apimodels-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-generate-backend-apimodels-response-error
                         :shape "__string" :location common-lisp:nil
                         :location-name "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-generate-backend-apimodels-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-generate-backend-apimodels-response-operation
                         :shape "__string" :location common-lisp:nil
                         :location-name "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-generate-backend-apimodels-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generate-backend-apimodels-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-backend-apimodels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generate-backend-apimodels-response
                    'make-generate-backend-apimodels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-backend-apimodels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-backend-apimodels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-backend-apimodels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-apimodels-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-apimodels-request-app-id
                         :shape "__string" :location "uri" :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-apimodels-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-apimodels-request-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-apimodels-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-backend-apimodels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-apimodels-request
                    'make-get-backend-apimodels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apimodels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apimodels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apimodels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-apimodels-response common-lisp:nil
                       ((models :initarg :models :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-apimodels-response-models
                         :shape "__string" :location common-lisp:nil
                         :location-name "models")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or status common-lisp:null)
                         :accessor
                         struct-shape-get-backend-apimodels-response-status
                         :shape "Status" :location common-lisp:nil
                         :location-name "status")
                        (model-introspection-schema :initarg
                         :model-introspection-schema :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-apimodels-response-model-introspection-schema
                         :shape "__string" :location common-lisp:nil
                         :location-name "modelIntrospectionSchema"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-apimodels-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-backend-apimodels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-apimodels-response
                    'make-get-backend-apimodels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apimodels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apimodels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'models))
      (common-lisp:list
       (common-lisp:cons "Models"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-introspection-schema))
      (common-lisp:list
       (common-lisp:cons "ModelIntrospectionSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apimodels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-apirequest common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-apirequest-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-apirequest-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         common-lisp:nil :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-backend-apirequest-resource-config
                         :shape "BackendAPIResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-apirequest-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-apirequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-apirequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-apirequest 'make-get-backend-apirequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apirequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apirequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apirequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-apiresp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-apiresp-obj-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-apiresp-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-apiresp-obj-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (resource-config :initarg :resource-config :initform
                         common-lisp:nil :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-backend-apiresp-obj-resource-config
                         :shape "BackendAPIResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-apiresp-obj-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-apiresp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-apiresp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-apiresp-obj 'make-get-backend-apiresp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apiresp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apiresp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apiresp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-apiresponse common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-get-backend-apiresponse-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-apiresponse-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-apiresponse-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (resource-config :initarg :resource-config :initform
                         common-lisp:nil :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-backend-apiresponse-resource-config
                         :shape "BackendAPIResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-apiresponse-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-apiresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-apiresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-apiresponse 'make-get-backend-apiresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apiresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apiresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apiresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-auth-req-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-auth-req-obj-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-auth-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-auth-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-auth-req-obj 'make-get-backend-auth-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-auth-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-auth-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-auth-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-auth-request-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-auth-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-auth-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-auth-request 'make-get-backend-auth-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-auth-resp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-auth-resp-obj-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-auth-resp-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-auth-resp-obj-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (resource-config :initarg :resource-config :initform
                         common-lisp:nil :type
                         (common-lisp:or create-backend-auth-resource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-backend-auth-resp-obj-resource-config
                         :shape "CreateBackendAuthResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-auth-resp-obj-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-auth-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-auth-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-auth-resp-obj
                    'make-get-backend-auth-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-auth-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-auth-response-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-auth-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-auth-response-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (resource-config :initarg :resource-config :initform
                         common-lisp:nil :type
                         (common-lisp:or create-backend-auth-resource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-backend-auth-response-resource-config
                         :shape "CreateBackendAuthResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-auth-response-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-auth-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-auth-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-auth-response
                    'make-get-backend-auth-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-job-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-job-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-job-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-job-request-job-id :shape
                         "__string" :location "uri" :location-name "jobId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-job-request 'make-get-backend-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-job-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-get-backend-job-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-job-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-job-response-create-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "createTime")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-job-response-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-get-backend-job-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-job-response-operation :shape
                         "__string" :location common-lisp:nil :location-name
                         "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-get-backend-job-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status")
                        (update-time :initarg :update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-job-response-update-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "updateTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-job-response 'make-get-backend-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-req-obj common-lisp:nil
                       ((backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-req-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-req-obj 'make-get-backend-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-backend-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-backend-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-backend-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-request-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-request 'make-get-backend-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-backend-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-backend-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-backend-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-resp-obj common-lisp:nil
                       ((amplify-feature-flags :initarg :amplify-feature-flags
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-resp-obj-amplify-feature-flags
                         :shape "__string" :location common-lisp:nil
                         :location-name "amplifyFeatureFlags")
                        (amplify-meta-config :initarg :amplify-meta-config
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-resp-obj-amplify-meta-config
                         :shape "__string" :location common-lisp:nil
                         :location-name "amplifyMetaConfig")
                        (app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-resp-obj-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (app-name :initarg :app-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-get-backend-resp-obj-app-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "appName")
                        (backend-environment-list :initarg
                         :backend-environment-list :initform common-lisp:nil
                         :type (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         struct-shape-get-backend-resp-obj-backend-environment-list
                         :shape "ListOf__string" :location common-lisp:nil
                         :location-name "backendEnvironmentList")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-resp-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-resp-obj-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-resp-obj 'make-get-backend-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-backend-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-backend-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amplify-feature-flags))
      (common-lisp:list
       (common-lisp:cons "AmplifyFeatureFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amplify-meta-config))
      (common-lisp:list
       (common-lisp:cons "AmplifyMetaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-list))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-backend-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-response common-lisp:nil
                       ((amplify-feature-flags :initarg :amplify-feature-flags
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-response-amplify-feature-flags
                         :shape "__string" :location common-lisp:nil
                         :location-name "amplifyFeatureFlags")
                        (amplify-meta-config :initarg :amplify-meta-config
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-response-amplify-meta-config
                         :shape "__string" :location common-lisp:nil
                         :location-name "amplifyMetaConfig")
                        (app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-get-backend-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (app-name :initarg :app-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-get-backend-response-app-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "appName")
                        (backend-environment-list :initarg
                         :backend-environment-list :initform common-lisp:nil
                         :type (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         struct-shape-get-backend-response-backend-environment-list
                         :shape "ListOf__string" :location common-lisp:nil
                         :location-name "backendEnvironmentList")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-response-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-response 'make-get-backend-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-backend-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-backend-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amplify-feature-flags))
      (common-lisp:list
       (common-lisp:cons "AmplifyFeatureFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amplify-meta-config))
      (common-lisp:list
       (common-lisp:cons "AmplifyMetaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-list))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-backend-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-storage-req-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-storage-req-obj-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-storage-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-storage-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-storage-req-obj
                    'make-get-backend-storage-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-storage-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-storage-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-storage-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-storage-request-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-storage-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-storage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-storage-request
                    'make-get-backend-storage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-storage-resource-config common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-storage-resource-config-bucket-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "bucketName")
                        (imported :initarg :imported :initform
                         (common-lisp:error ":imported is required") :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-storage-resource-config-imported
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "imported")
                        (permissions :initarg :permissions :initform
                         common-lisp:nil :type
                         (common-lisp:or backend-storage-permissions
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-backend-storage-resource-config-permissions
                         :shape "BackendStoragePermissions" :location
                         common-lisp:nil :location-name "permissions")
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-get-backend-storage-resource-config-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name "serviceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-storage-resource-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-backend-storage-resource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-storage-resource-config
                    'make-get-backend-storage-resource-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imported))
      (common-lisp:list
       (common-lisp:cons "Imported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-storage-resp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-storage-resp-obj-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-storage-resp-obj-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         common-lisp:nil :type
                         (common-lisp:or get-backend-storage-resource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-backend-storage-resp-obj-resource-config
                         :shape "GetBackendStorageResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-storage-resp-obj-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-storage-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-storage-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-storage-resp-obj
                    'make-get-backend-storage-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-storage-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-storage-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-backend-storage-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         common-lisp:nil :type
                         (common-lisp:or get-backend-storage-resource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-backend-storage-response-resource-config
                         :shape "GetBackendStorageResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-backend-storage-response-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-backend-storage-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-storage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-backend-storage-response
                    'make-get-backend-storage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-token-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-token-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-token-request-session-id :shape
                         "__string" :location "uri" :location-name
                         "sessionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-token-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-token-request 'make-get-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-token-resp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-token-resp-obj-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (challenge-code :initarg :challenge-code :initform
                         (common-lisp:error ":challenge-code is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-get-token-resp-obj-challenge-code :shape
                         "__string" :location common-lisp:nil :location-name
                         "challengeCode")
                        (session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-token-resp-obj-session-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "sessionId")
                        (ttl :initarg :ttl :initform
                         (common-lisp:error ":ttl is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-token-resp-obj-ttl :shape "__string"
                         :location common-lisp:nil :location-name "ttl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-token-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-token-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-token-resp-obj 'make-get-token-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-token-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-token-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-code))
      (common-lisp:list
       (common-lisp:cons "ChallengeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "Ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-token-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-token-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-get-token-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (challenge-code :initarg :challenge-code :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-token-response-challenge-code :shape
                         "__string" :location common-lisp:nil :location-name
                         "challengeCode")
                        (session-id :initarg :session-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-token-response-session-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "sessionId")
                        (ttl :initarg :ttl :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-get-token-response-ttl :shape "__string"
                         :location common-lisp:nil :location-name "ttl"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-token-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-token-response 'make-get-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-code))
      (common-lisp:list
       (common-lisp:cons "ChallengeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "Ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-backend-auth-req-obj common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-import-backend-auth-req-obj-identity-pool-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "identityPoolId")
                        (native-client-id :initarg :native-client-id :initform
                         (common-lisp:error ":native-client-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-import-backend-auth-req-obj-native-client-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "nativeClientId")
                        (user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-import-backend-auth-req-obj-user-pool-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "userPoolId")
                        (web-client-id :initarg :web-client-id :initform
                         (common-lisp:error ":web-client-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-import-backend-auth-req-obj-web-client-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "webClientId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-backend-auth-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-backend-auth-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-backend-auth-req-obj
                    'make-import-backend-auth-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'native-client-id))
      (common-lisp:list
       (common-lisp:cons "NativeClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-client-id))
      (common-lisp:list
       (common-lisp:cons "WebClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-backend-auth-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-import-backend-auth-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-import-backend-auth-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (identity-pool-id :initarg :identity-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-import-backend-auth-request-identity-pool-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "identityPoolId")
                        (native-client-id :initarg :native-client-id :initform
                         (common-lisp:error ":native-client-id is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-import-backend-auth-request-native-client-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "nativeClientId")
                        (user-pool-id :initarg :user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-import-backend-auth-request-user-pool-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "userPoolId")
                        (web-client-id :initarg :web-client-id :initform
                         (common-lisp:error ":web-client-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-import-backend-auth-request-web-client-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "webClientId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-backend-auth-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-backend-auth-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-backend-auth-request
                    'make-import-backend-auth-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'native-client-id))
      (common-lisp:list
       (common-lisp:cons "NativeClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-client-id))
      (common-lisp:list
       (common-lisp:cons "WebClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-backend-auth-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-import-backend-auth-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-import-backend-auth-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-import-backend-auth-response-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-import-backend-auth-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-import-backend-auth-response-operation
                         :shape "__string" :location common-lisp:nil
                         :location-name "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-import-backend-auth-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-backend-auth-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'import-backend-auth-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-backend-auth-response
                    'make-import-backend-auth-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-backend-storage-req-obj common-lisp:nil
                       ((bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-import-backend-storage-req-obj-bucket-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "bucketName")
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-import-backend-storage-req-obj-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name "serviceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-backend-storage-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-backend-storage-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-backend-storage-req-obj
                    'make-import-backend-storage-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-backend-storage-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-import-backend-storage-request-app-id
                         :shape "__string" :location "uri" :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-import-backend-storage-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (bucket-name :initarg :bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-import-backend-storage-request-bucket-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "bucketName")
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-import-backend-storage-request-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name "serviceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-backend-storage-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-backend-storage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-backend-storage-request
                    'make-import-backend-storage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-backend-storage-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-import-backend-storage-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-import-backend-storage-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-import-backend-storage-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-import-backend-storage-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-backend-storage-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-backend-storage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-backend-storage-response
                    'make-import-backend-storage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass internal-service-exception common-lisp:nil
                       ((message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-internal-service-exception-message :shape
                         "__string" :location common-lisp:nil :location-name
                         "message"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-internal-service-exception
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'internal-service-exception
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'make-internal-service-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass limit-exceeded-exception common-lisp:nil
                       ((limit-type :initarg :limit-type :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-limit-exceeded-exception-limit-type
                         :shape "__string" :location common-lisp:nil
                         :location-name "limitType")
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-limit-exceeded-exception-message :shape
                         "__string" :location common-lisp:nil :location-name
                         "message"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-limit-exceeded-exception
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'limit-exceeded-exception
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'make-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          limit-exceeded-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          limit-exceeded-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-type))
      (common-lisp:list
       (common-lisp:cons "LimitType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          limit-exceeded-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backend-job-req-obj common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-list-backend-job-req-obj-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1Max25| common-lisp:null)
                         :accessor
                         struct-shape-list-backend-job-req-obj-max-results
                         :shape "__integerMin1Max25" :location common-lisp:nil
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-backend-job-req-obj-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-backend-job-req-obj-operation :shape
                         "__string" :location common-lisp:nil :location-name
                         "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor struct-shape-list-backend-job-req-obj-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-backend-job-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-backend-job-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-backend-job-req-obj 'make-list-backend-job-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-job-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-job-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-job-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backend-job-resp-obj common-lisp:nil
                       ((jobs :initarg :jobs :initform common-lisp:nil :type
                         (common-lisp:or list-of-backend-job-resp-obj
                                         common-lisp:null)
                         :accessor struct-shape-list-backend-job-resp-obj-jobs
                         :shape "ListOfBackendJobRespObj" :location
                         common-lisp:nil :location-name "jobs")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-backend-job-resp-obj-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-backend-job-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-backend-job-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-backend-job-resp-obj
                    'make-list-backend-job-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-job-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-job-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-job-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backend-jobs-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-backend-jobs-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-list-backend-jobs-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-list-backend-jobs-request-job-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "jobId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or |__integerMin1Max25| common-lisp:null)
                         :accessor
                         struct-shape-list-backend-jobs-request-max-results
                         :shape "__integerMin1Max25" :location common-lisp:nil
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-backend-jobs-request-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-backend-jobs-request-operation
                         :shape "__string" :location common-lisp:nil
                         :location-name "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-list-backend-jobs-request-status :shape
                         "__string" :location common-lisp:nil :location-name
                         "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-backend-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-backend-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-backend-jobs-request
                    'make-list-backend-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backend-jobs-response common-lisp:nil
                       ((jobs :initarg :jobs :initform common-lisp:nil :type
                         (common-lisp:or list-of-backend-job-resp-obj
                                         common-lisp:null)
                         :accessor struct-shape-list-backend-jobs-response-jobs
                         :shape "ListOfBackendJobRespObj" :location
                         common-lisp:nil :location-name "jobs")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-backend-jobs-response-next-token
                         :shape "__string" :location common-lisp:nil
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-backend-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-backend-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-backend-jobs-response
                    'make-list-backend-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-s3buckets-req-obj common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-s3buckets-req-obj-next-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-s3buckets-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-s3buckets-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-s3buckets-req-obj 'make-list-s3buckets-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-s3buckets-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-s3buckets-request-next-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-s3buckets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-s3buckets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-s3buckets-request 'make-list-s3buckets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-s3buckets-resp-obj common-lisp:nil
                       ((buckets :initarg :buckets :initform
                         (common-lisp:error ":buckets is required") :type
                         (common-lisp:or list-of-s3bucket-info
                                         common-lisp:null)
                         :accessor struct-shape-list-s3buckets-resp-obj-buckets
                         :shape "ListOfS3BucketInfo" :location common-lisp:nil
                         :location-name "buckets")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-s3buckets-resp-obj-next-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-s3buckets-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-s3buckets-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-s3buckets-resp-obj 'make-list-s3buckets-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "Buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-s3buckets-response common-lisp:nil
                       ((buckets :initarg :buckets :initform common-lisp:nil
                         :type
                         (common-lisp:or list-of-s3bucket-info
                                         common-lisp:null)
                         :accessor struct-shape-list-s3buckets-response-buckets
                         :shape "ListOfS3BucketInfo" :location common-lisp:nil
                         :location-name "buckets")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-list-s3buckets-response-next-token :shape
                         "__string" :location common-lisp:nil :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-s3buckets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-s3buckets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-s3buckets-response 'make-list-s3buckets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "Buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass login-auth-config-req-obj common-lisp:nil
                       ((aws-cognito-identity-pool-id :initarg
                         :aws-cognito-identity-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-login-auth-config-req-obj-aws-cognito-identity-pool-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "aws_cognito_identity_pool_id")
                        (aws-cognito-region :initarg :aws-cognito-region
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-login-auth-config-req-obj-aws-cognito-region
                         :shape "__string" :location common-lisp:nil
                         :location-name "aws_cognito_region")
                        (aws-user-pools-id :initarg :aws-user-pools-id
                         :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-login-auth-config-req-obj-aws-user-pools-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "aws_user_pools_id")
                        (aws-user-pools-web-client-id :initarg
                         :aws-user-pools-web-client-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-login-auth-config-req-obj-aws-user-pools-web-client-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "aws_user_pools_web_client_id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-login-auth-config-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'login-auth-config-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'login-auth-config-req-obj
                    'make-login-auth-config-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          login-auth-config-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          login-auth-config-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-cognito-identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "AwsCognitoIdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-cognito-region))
      (common-lisp:list
       (common-lisp:cons "AwsCognitoRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-user-pools-id))
      (common-lisp:list
       (common-lisp:cons "AwsUserPoolsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-user-pools-web-client-id))
      (common-lisp:list
       (common-lisp:cons "AwsUserPoolsWebClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          login-auth-config-req-obj))
   common-lisp:nil))
(common-lisp:deftype mfamode () 'common-lisp:string)
(common-lisp:deftype mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (amplifybackend-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message
                    'not-found-exception-resource-type)))
(common-lisp:deftype oauth-grant-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass remove-all-backends-req-obj common-lisp:nil
                       ((clean-amplify-app :initarg :clean-amplify-app
                         :initform common-lisp:nil :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-remove-all-backends-req-obj-clean-amplify-app
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "cleanAmplifyApp"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-all-backends-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-all-backends-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-all-backends-req-obj
                    'make-remove-all-backends-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clean-amplify-app))
      (common-lisp:list
       (common-lisp:cons "CleanAmplifyApp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-all-backends-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-all-backends-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (clean-amplify-app :initarg :clean-amplify-app
                         :initform common-lisp:nil :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-remove-all-backends-request-clean-amplify-app
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "cleanAmplifyApp"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-all-backends-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-all-backends-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-all-backends-request
                    'make-remove-all-backends-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clean-amplify-app))
      (common-lisp:list
       (common-lisp:cons "CleanAmplifyApp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-all-backends-resp-obj common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-all-backends-resp-obj-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-all-backends-resp-obj-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-remove-all-backends-resp-obj-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-all-backends-resp-obj-operation
                         :shape "__string" :location common-lisp:nil
                         :location-name "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-remove-all-backends-resp-obj-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-all-backends-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-all-backends-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-all-backends-resp-obj
                    'make-remove-all-backends-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-all-backends-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-remove-all-backends-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-all-backends-response-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-remove-all-backends-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-all-backends-response-operation
                         :shape "__string" :location common-lisp:nil
                         :location-name "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-remove-all-backends-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-all-backends-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-all-backends-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-all-backends-response
                    'make-remove-all-backends-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-backend-auth-req-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-backend-auth-req-obj-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-backend-auth-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-backend-auth-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-backend-auth-req-obj
                    'make-remove-backend-auth-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-auth-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-auth-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-auth-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-backend-config-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-backend-config-request-app-id
                         :shape "__string" :location "uri" :location-name
                         "appId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-backend-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-backend-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-backend-config-request
                    'make-remove-backend-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-backend-config-resp-obj common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-backend-config-resp-obj-error
                         :shape "__string" :location common-lisp:nil
                         :location-name "error"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-backend-config-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-backend-config-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-backend-config-resp-obj
                    'make-remove-backend-config-resp-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-backend-config-response common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-backend-config-response-error
                         :shape "__string" :location common-lisp:nil
                         :location-name "error"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-backend-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-backend-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-backend-config-response
                    'make-remove-backend-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-backend-storage-req-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-remove-backend-storage-req-obj-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName")
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-remove-backend-storage-req-obj-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name "serviceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-backend-storage-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-backend-storage-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-backend-storage-req-obj
                    'make-remove-backend-storage-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-storage-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-storage-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-storage-req-obj))
   common-lisp:nil))
(common-lisp:deftype resolution-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-config common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource-config 'make-resource-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3bucket-info common-lisp:nil
                       ((creation-date :initarg :creation-date :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-s3bucket-info-creation-date :shape
                         "__string" :location common-lisp:nil :location-name
                         "creationDate")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-s3bucket-info-name :shape "__string"
                         :location common-lisp:nil :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3bucket-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3bucket-info 'make-s3bucket-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3bucket-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3bucket-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3bucket-info))
   common-lisp:nil))
(common-lisp:deftype service () 'common-lisp:string)
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass settings common-lisp:nil
                       ((mfa-types :initarg :mfa-types :initform
                         common-lisp:nil :type
                         (common-lisp:or list-of-mfa-types-element
                                         common-lisp:null)
                         :accessor struct-shape-settings-mfa-types :shape
                         "ListOfMfaTypesElement" :location common-lisp:nil
                         :location-name "mfaTypes")
                        (sms-message :initarg :sms-message :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-settings-sms-message :shape "__string"
                         :location common-lisp:nil :location-name
                         "smsMessage"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'settings 'make-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa-types))
      (common-lisp:list
       (common-lisp:cons "MfaTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-message))
      (common-lisp:list
       (common-lisp:cons "SmsMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input settings))
   common-lisp:nil))
(common-lisp:deftype sign-in-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sms-settings common-lisp:nil
                       ((sms-message :initarg :sms-message :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-sms-settings-sms-message :shape
                         "__string" :location common-lisp:nil :location-name
                         "smsMessage"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sms-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sms-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sms-settings 'make-sms-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sms-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sms-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-message))
      (common-lisp:list
       (common-lisp:cons "SmsMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sms-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass social-provider-settings common-lisp:nil
                       ((facebook :initarg :facebook :initform common-lisp:nil
                         :type
                         (common-lisp:or backend-auth-social-provider-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-social-provider-settings-facebook :shape
                         "BackendAuthSocialProviderConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (google :initarg :google :initform common-lisp:nil
                         :type
                         (common-lisp:or backend-auth-social-provider-config
                                         common-lisp:null)
                         :accessor struct-shape-social-provider-settings-google
                         :shape "BackendAuthSocialProviderConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (login-with-amazon :initarg :login-with-amazon
                         :initform common-lisp:nil :type
                         (common-lisp:or backend-auth-social-provider-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-social-provider-settings-login-with-amazon
                         :shape "BackendAuthSocialProviderConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sign-in-with-apple :initarg :sign-in-with-apple
                         :initform common-lisp:nil :type
                         (common-lisp:or backend-auth-apple-provider-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-social-provider-settings-sign-in-with-apple
                         :shape "BackendAuthAppleProviderConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-social-provider-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'social-provider-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'social-provider-settings 'make-social-provider-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          social-provider-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          social-provider-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facebook))
      (common-lisp:list
       (common-lisp:cons "Facebook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'google))
      (common-lisp:list
       (common-lisp:cons "Google"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-with-amazon))
      (common-lisp:list
       (common-lisp:cons "LoginWithAmazon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sign-in-with-apple))
      (common-lisp:list
       (common-lisp:cons "SignInWithApple"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          social-provider-settings))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (amplifybackend-error)
     ((limit-type :initarg :limit-type :initform common-lisp:nil :reader
       too-many-requests-exception-limit-type)
      (message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-limit-type
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defclass update-backend-apirequest common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-apirequest-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-apirequest-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         common-lisp:nil :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-apirequest-resource-config
                         :shape "BackendAPIResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-apirequest-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-apirequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-backend-apirequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-apirequest
                    'make-update-backend-apirequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-apirequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-apirequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-apirequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-apiresponse common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-apiresponse-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-apiresponse-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-apiresponse-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-apiresponse-job-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-apiresponse-operation
                         :shape "__string" :location common-lisp:nil
                         :location-name "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-apiresponse-status :shape
                         "__string" :location common-lisp:nil :location-name
                         "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-apiresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-backend-apiresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-apiresponse
                    'make-update-backend-apiresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-apiresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-apiresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-apiresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-forgot-password-config
                       common-lisp:nil
                       ((delivery-method :initarg :delivery-method :initform
                         common-lisp:nil :type
                         (common-lisp:or delivery-method common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-forgot-password-config-delivery-method
                         :shape "DeliveryMethod" :location common-lisp:nil
                         :location-name "deliveryMethod")
                        (email-settings :initarg :email-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or email-settings common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-forgot-password-config-email-settings
                         :shape "EmailSettings" :location common-lisp:nil
                         :location-name "emailSettings")
                        (sms-settings :initarg :sms-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or sms-settings common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-forgot-password-config-sms-settings
                         :shape "SmsSettings" :location common-lisp:nil
                         :location-name "smsSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-auth-forgot-password-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-forgot-password-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-forgot-password-config
                    'make-update-backend-auth-forgot-password-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-forgot-password-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-forgot-password-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-method))
      (common-lisp:list
       (common-lisp:cons "DeliveryMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-settings))
      (common-lisp:list
       (common-lisp:cons "EmailSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-settings))
      (common-lisp:list
       (common-lisp:cons "SmsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-forgot-password-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-identity-pool-config common-lisp:nil
                       ((unauthenticated-login :initarg :unauthenticated-login
                         :initform common-lisp:nil :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-identity-pool-config-unauthenticated-login
                         :shape "__boolean" :location common-lisp:nil
                         :location-name "unauthenticatedLogin"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-auth-identity-pool-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-identity-pool-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-identity-pool-config
                    'make-update-backend-auth-identity-pool-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-identity-pool-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-identity-pool-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unauthenticated-login))
      (common-lisp:list
       (common-lisp:cons "UnauthenticatedLogin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-identity-pool-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-mfaconfig common-lisp:nil
                       ((mfamode :initarg :mfamode :initform common-lisp:nil
                         :type (common-lisp:or mfamode common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-mfaconfig-mfamode
                         :shape "MFAMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (settings :initarg :settings :initform common-lisp:nil
                         :type (common-lisp:or settings common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-mfaconfig-settings
                         :shape "Settings" :location common-lisp:nil
                         :location-name "settings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-auth-mfaconfig
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-mfaconfig
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-mfaconfig
                    'make-update-backend-auth-mfaconfig))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-mfaconfig))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-mfaconfig))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfamode))
      (common-lisp:list
       (common-lisp:cons "MFAMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-mfaconfig))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-oauth-config common-lisp:nil
                       ((domain-prefix :initarg :domain-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-auth-oauth-config-domain-prefix
                         :shape "__string" :location common-lisp:nil
                         :location-name "domainPrefix")
                        (oauth-grant-type :initarg :oauth-grant-type :initform
                         common-lisp:nil :type
                         (common-lisp:or oauth-grant-type common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-oauth-config-oauth-grant-type
                         :shape "OAuthGrantType" :location common-lisp:nil
                         :location-name "oAuthGrantType")
                        (oauth-scopes :initarg :oauth-scopes :initform
                         common-lisp:nil :type
                         (common-lisp:or list-of-oauth-scopes-element
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-oauth-config-oauth-scopes
                         :shape "ListOfOAuthScopesElement" :location
                         common-lisp:nil :location-name "oAuthScopes")
                        (redirect-sign-in-uris :initarg :redirect-sign-in-uris
                         :initform common-lisp:nil :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-oauth-config-redirect-sign-in-uris
                         :shape "ListOf__string" :location common-lisp:nil
                         :location-name "redirectSignInURIs")
                        (redirect-sign-out-uris :initarg
                         :redirect-sign-out-uris :initform common-lisp:nil
                         :type (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-oauth-config-redirect-sign-out-uris
                         :shape "ListOf__string" :location common-lisp:nil
                         :location-name "redirectSignOutURIs")
                        (social-provider-settings :initarg
                         :social-provider-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or social-provider-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-oauth-config-social-provider-settings
                         :shape "SocialProviderSettings" :location
                         common-lisp:nil :location-name
                         "socialProviderSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-auth-oauth-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-oauth-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-oauth-config
                    'make-update-backend-auth-oauth-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-oauth-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-oauth-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-prefix))
      (common-lisp:list
       (common-lisp:cons "DomainPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth-grant-type))
      (common-lisp:list
       (common-lisp:cons "OAuthGrantType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth-scopes))
      (common-lisp:list
       (common-lisp:cons "OAuthScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-sign-in-uris))
      (common-lisp:list
       (common-lisp:cons "RedirectSignInURIs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-sign-out-uris))
      (common-lisp:list
       (common-lisp:cons "RedirectSignOutURIs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'social-provider-settings))
      (common-lisp:list
       (common-lisp:cons "SocialProviderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-oauth-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-password-policy-config
                       common-lisp:nil
                       ((additional-constraints :initarg
                         :additional-constraints :initform common-lisp:nil
                         :type
                         (common-lisp:or list-of-additional-constraints-element
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-password-policy-config-additional-constraints
                         :shape "ListOfAdditionalConstraintsElement" :location
                         common-lisp:nil :location-name
                         "additionalConstraints")
                        (minimum-length :initarg :minimum-length :initform
                         common-lisp:nil :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         struct-shape-update-backend-auth-password-policy-config-minimum-length
                         :shape "__double" :location common-lisp:nil
                         :location-name "minimumLength"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-auth-password-policy-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-password-policy-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-password-policy-config
                    'make-update-backend-auth-password-policy-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-password-policy-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-password-policy-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-constraints))
      (common-lisp:list
       (common-lisp:cons "AdditionalConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-length))
      (common-lisp:list
       (common-lisp:cons "MinimumLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-password-policy-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-req-obj common-lisp:nil
                       ((resource-config :initarg :resource-config :initform
                         (common-lisp:error ":resource-config is required")
                         :type
                         (common-lisp:or update-backend-auth-resource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-req-obj-resource-config
                         :shape "UpdateBackendAuthResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-auth-req-obj-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-auth-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-backend-auth-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-req-obj
                    'make-update-backend-auth-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-auth-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         (common-lisp:error ":resource-config is required")
                         :type
                         (common-lisp:or update-backend-auth-resource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-request-resource-config
                         :shape "UpdateBackendAuthResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-auth-request-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-auth-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-backend-auth-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-request
                    'make-update-backend-auth-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-resource-config common-lisp:nil
                       ((auth-resources :initarg :auth-resources :initform
                         (common-lisp:error ":auth-resources is required")
                         :type (common-lisp:or auth-resources common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-resource-config-auth-resources
                         :shape "AuthResources" :location common-lisp:nil
                         :location-name "authResources")
                        (identity-pool-configs :initarg :identity-pool-configs
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          update-backend-auth-identity-pool-config
                          common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-resource-config-identity-pool-configs
                         :shape "UpdateBackendAuthIdentityPoolConfig" :location
                         common-lisp:nil :location-name "identityPoolConfigs")
                        (service :initarg :service :initform
                         (common-lisp:error ":service is required") :type
                         (common-lisp:or service common-lisp:null) :accessor
                         struct-shape-update-backend-auth-resource-config-service
                         :shape "Service" :location common-lisp:nil
                         :location-name "service")
                        (user-pool-configs :initarg :user-pool-configs
                         :initform
                         (common-lisp:error ":user-pool-configs is required")
                         :type
                         (common-lisp:or update-backend-auth-user-pool-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-resource-config-user-pool-configs
                         :shape "UpdateBackendAuthUserPoolConfig" :location
                         common-lisp:nil :location-name "userPoolConfigs"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-auth-resource-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-resource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-resource-config
                    'make-update-backend-auth-resource-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-resources))
      (common-lisp:list
       (common-lisp:cons "AuthResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-pool-configs))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-configs))
      (common-lisp:list
       (common-lisp:cons "UserPoolConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-auth-response-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-auth-response-operation
                         :shape "__string" :location common-lisp:nil
                         :location-name "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-auth-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-backend-auth-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-response
                    'make-update-backend-auth-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-user-pool-config common-lisp:nil
                       ((forgot-password :initarg :forgot-password :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          update-backend-auth-forgot-password-config
                          common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-user-pool-config-forgot-password
                         :shape "UpdateBackendAuthForgotPasswordConfig"
                         :location common-lisp:nil :location-name
                         "forgotPassword")
                        (mfa :initarg :mfa :initform common-lisp:nil :type
                         (common-lisp:or update-backend-auth-mfaconfig
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-user-pool-config-mfa
                         :shape "UpdateBackendAuthMFAConfig" :location
                         common-lisp:nil :location-name "mfa")
                        (oauth :initarg :oauth :initform common-lisp:nil :type
                         (common-lisp:or update-backend-auth-oauth-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-user-pool-config-oauth
                         :shape "UpdateBackendAuthOAuthConfig" :location
                         common-lisp:nil :location-name "oAuth")
                        (password-policy :initarg :password-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          update-backend-auth-password-policy-config
                          common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-user-pool-config-password-policy
                         :shape "UpdateBackendAuthPasswordPolicyConfig"
                         :location common-lisp:nil :location-name
                         "passwordPolicy")
                        (verification-message :initarg :verification-message
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          update-backend-auth-verification-message-config
                          common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-user-pool-config-verification-message
                         :shape "UpdateBackendAuthVerificationMessageConfig"
                         :location common-lisp:nil :location-name
                         "verificationMessage"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-auth-user-pool-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-user-pool-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-user-pool-config
                    'make-update-backend-auth-user-pool-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-user-pool-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-user-pool-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forgot-password))
      (common-lisp:list
       (common-lisp:cons "ForgotPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:list
       (common-lisp:cons "Mfa"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth))
      (common-lisp:list
       (common-lisp:cons "OAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-policy))
      (common-lisp:list
       (common-lisp:cons "PasswordPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-message))
      (common-lisp:list
       (common-lisp:cons "VerificationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-user-pool-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-verification-message-config
                       common-lisp:nil
                       ((delivery-method :initarg :delivery-method :initform
                         (common-lisp:error ":delivery-method is required")
                         :type
                         (common-lisp:or delivery-method common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-verification-message-config-delivery-method
                         :shape "DeliveryMethod" :location common-lisp:nil
                         :location-name "deliveryMethod")
                        (email-settings :initarg :email-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or email-settings common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-verification-message-config-email-settings
                         :shape "EmailSettings" :location common-lisp:nil
                         :location-name "emailSettings")
                        (sms-settings :initarg :sms-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or sms-settings common-lisp:null)
                         :accessor
                         struct-shape-update-backend-auth-verification-message-config-sms-settings
                         :shape "SmsSettings" :location common-lisp:nil
                         :location-name "smsSettings"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-auth-verification-message-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-verification-message-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-verification-message-config
                    'make-update-backend-auth-verification-message-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-verification-message-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-verification-message-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-method))
      (common-lisp:list
       (common-lisp:cons "DeliveryMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-settings))
      (common-lisp:list
       (common-lisp:cons "EmailSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-settings))
      (common-lisp:list
       (common-lisp:cons "SmsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-verification-message-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-config-req-obj common-lisp:nil
                       ((login-auth-config :initarg :login-auth-config
                         :initform common-lisp:nil :type
                         (common-lisp:or login-auth-config-req-obj
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-config-req-obj-login-auth-config
                         :shape "LoginAuthConfigReqObj" :location
                         common-lisp:nil :location-name "loginAuthConfig"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-config-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-config-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-config-req-obj
                    'make-update-backend-config-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-auth-config))
      (common-lisp:list
       (common-lisp:cons "LoginAuthConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-config-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-config-request-app-id
                         :shape "__string" :location "uri" :location-name
                         "appId")
                        (login-auth-config :initarg :login-auth-config
                         :initform common-lisp:nil :type
                         (common-lisp:or login-auth-config-req-obj
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-config-request-login-auth-config
                         :shape "LoginAuthConfigReqObj" :location
                         common-lisp:nil :location-name "loginAuthConfig"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-config-request
                    'make-update-backend-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-auth-config))
      (common-lisp:list
       (common-lisp:cons "LoginAuthConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-config-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-config-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-manager-app-id :initarg
                         :backend-manager-app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-config-response-backend-manager-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendManagerAppId")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-config-response-error
                         :shape "__string" :location common-lisp:nil
                         :location-name "error")
                        (login-auth-config :initarg :login-auth-config
                         :initform common-lisp:nil :type
                         (common-lisp:or login-auth-config-req-obj
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-config-response-login-auth-config
                         :shape "LoginAuthConfigReqObj" :location
                         common-lisp:nil :location-name "loginAuthConfig"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-config-response
                    'make-update-backend-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-manager-app-id))
      (common-lisp:list
       (common-lisp:cons "BackendManagerAppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-auth-config))
      (common-lisp:list
       (common-lisp:cons "LoginAuthConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-job-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-job-request-app-id :shape
                         "__string" :location "uri" :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-job-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-job-request-job-id :shape
                         "__string" :location "uri" :location-name "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-job-request-operation
                         :shape "__string" :location common-lisp:nil
                         :location-name "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-job-request-status :shape
                         "__string" :location common-lisp:nil :location-name
                         "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-backend-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-job-request
                    'make-update-backend-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-job-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-job-response-app-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-job-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-job-response-create-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "createTime")
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-job-response-error :shape
                         "__string" :location common-lisp:nil :location-name
                         "error")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-job-response-job-id :shape
                         "__string" :location common-lisp:nil :location-name
                         "jobId")
                        (operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-job-response-operation
                         :shape "__string" :location common-lisp:nil
                         :location-name "operation")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-job-response-status :shape
                         "__string" :location common-lisp:nil :location-name
                         "status")
                        (update-time :initarg :update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-job-response-update-time
                         :shape "__string" :location common-lisp:nil
                         :location-name "updateTime"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-backend-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-job-response
                    'make-update-backend-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-storage-req-obj common-lisp:nil
                       ((resource-config :initarg :resource-config :initform
                         (common-lisp:error ":resource-config is required")
                         :type
                         (common-lisp:or update-backend-storage-resource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-storage-req-obj-resource-config
                         :shape "UpdateBackendStorageResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-storage-req-obj-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-storage-req-obj
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-storage-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-storage-req-obj
                    'make-update-backend-storage-req-obj))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-storage-request common-lisp:nil
                       ((app-id :initarg :app-id :initform
                         (common-lisp:error ":app-id is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-storage-request-app-id
                         :shape "__string" :location "uri" :location-name
                         "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform
                         (common-lisp:error
                          ":backend-environment-name is required")
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-storage-request-backend-environment-name
                         :shape "__string" :location "uri" :location-name
                         "backendEnvironmentName")
                        (resource-config :initarg :resource-config :initform
                         (common-lisp:error ":resource-config is required")
                         :type
                         (common-lisp:or update-backend-storage-resource-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-storage-request-resource-config
                         :shape "UpdateBackendStorageResourceConfig" :location
                         common-lisp:nil :location-name "resourceConfig")
                        (resource-name :initarg :resource-name :initform
                         (common-lisp:error ":resource-name is required") :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         struct-shape-update-backend-storage-request-resource-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "resourceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-storage-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-storage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-storage-request
                    'make-update-backend-storage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-storage-resource-config common-lisp:nil
                       ((permissions :initarg :permissions :initform
                         (common-lisp:error ":permissions is required") :type
                         (common-lisp:or backend-storage-permissions
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-backend-storage-resource-config-permissions
                         :shape "BackendStoragePermissions" :location
                         common-lisp:nil :location-name "permissions")
                        (service-name :initarg :service-name :initform
                         (common-lisp:error ":service-name is required") :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         struct-shape-update-backend-storage-resource-config-service-name
                         :shape "ServiceName" :location common-lisp:nil
                         :location-name "serviceName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-storage-resource-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-storage-resource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-storage-resource-config
                    'make-update-backend-storage-resource-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-storage-response common-lisp:nil
                       ((app-id :initarg :app-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-storage-response-app-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "appId")
                        (backend-environment-name :initarg
                         :backend-environment-name :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-storage-response-backend-environment-name
                         :shape "__string" :location common-lisp:nil
                         :location-name "backendEnvironmentName")
                        (job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-storage-response-job-id
                         :shape "__string" :location common-lisp:nil
                         :location-name "jobId")
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         struct-shape-update-backend-storage-response-status
                         :shape "__string" :location common-lisp:nil
                         :location-name "status"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-backend-storage-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-storage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-backend-storage-response
                    'make-update-backend-storage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-response))
   common-lisp:nil))
(common-lisp:deftype additional-constraints-element () 'common-lisp:string)
(common-lisp:deftype authenticated-element () 'common-lisp:string)
(common-lisp:deftype mfa-types-element () 'common-lisp:string)
(common-lisp:deftype oauth-scopes-element () 'common-lisp:string)
(common-lisp:deftype required-sign-up-attributes-element () 'common-lisp:string)
(common-lisp:deftype un-authenticated-element () 'common-lisp:string)
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max25| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype list-of-backend-apiauth-type ()
   '(trivial-types:proper-list backend-apiauth-type))
 (common-lisp:defun make-list-of-backend-apiauth-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backend-apiauth-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-backend-job-resp-obj ()
   '(trivial-types:proper-list backend-job-resp-obj))
 (common-lisp:defun make-list-of-backend-job-resp-obj
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backend-job-resp-obj))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-s3bucket-info ()
   '(trivial-types:proper-list s3bucket-info))
 (common-lisp:defun make-list-of-s3bucket-info
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3bucket-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-additional-constraints-element ()
   '(trivial-types:proper-list additional-constraints-element))
 (common-lisp:defun make-list-of-additional-constraints-element
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            additional-constraints-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-authenticated-element ()
   '(trivial-types:proper-list authenticated-element))
 (common-lisp:defun make-list-of-authenticated-element
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list authenticated-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-mfa-types-element ()
   '(trivial-types:proper-list mfa-types-element))
 (common-lisp:defun make-list-of-mfa-types-element
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mfa-types-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-oauth-scopes-element ()
   '(trivial-types:proper-list oauth-scopes-element))
 (common-lisp:defun make-list-of-oauth-scopes-element
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list oauth-scopes-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-required-sign-up-attributes-element ()
   '(trivial-types:proper-list required-sign-up-attributes-element))
 (common-lisp:defun make-list-of-required-sign-up-attributes-element
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            required-sign-up-attributes-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-un-authenticated-element ()
   '(trivial-types:proper-list un-authenticated-element))
 (common-lisp:defun make-list-of-un-authenticated-element
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            un-authenticated-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-string ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun make-list-of-string
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |__long| () 'common-lisp:integer)
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:deftype |__timestampUnix| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun clone-backend
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     target-environment-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name
     target-environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-clone-backend-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/environments/~A/clone"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "CloneBackend"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'clone-backend))
(common-lisp:progn
 (common-lisp:defun create-backend
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id app-name backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id app-name backend-environment-name
     resource-config resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-backend-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/backend"
                                                        "CreateBackend"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-backend))
(common-lisp:progn
 (common-lisp:defun create-backend-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-backend-apirequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/api"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "CreateBackendAPI"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-backend-api))
(common-lisp:progn
 (common-lisp:defun create-backend-auth
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-backend-auth-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/auth"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "CreateBackendAuth"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-backend-auth))
(common-lisp:progn
 (common-lisp:defun create-backend-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-manager-app-id)
   (common-lisp:declare (common-lisp:ignorable app-id backend-manager-app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-backend-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "CreateBackendConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-backend-config))
(common-lisp:progn
 (common-lisp:defun create-backend-storage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-backend-storage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/storage"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "CreateBackendStorage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-backend-storage))
(common-lisp:progn
 (common-lisp:defun create-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/challenge"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "CreateToken"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-token))
(common-lisp:progn
 (common-lisp:defun delete-backend
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-backend-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/environments/~A/remove"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "DeleteBackend"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-backend))
(common-lisp:progn
 (common-lisp:defun delete-backend-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-backend-apirequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/api/~A/remove"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "DeleteBackendAPI"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-backend-api))
(common-lisp:progn
 (common-lisp:defun delete-backend-auth
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-backend-auth-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/auth/~A/remove"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "DeleteBackendAuth"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-backend-auth))
(common-lisp:progn
 (common-lisp:defun delete-backend-storage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-name
     service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-backend-storage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/storage/~A/remove"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "DeleteBackendStorage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-backend-storage))
(common-lisp:progn
 (common-lisp:defun delete-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id session-id)
   (common-lisp:declare (common-lisp:ignorable app-id session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/challenge/~A/remove"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "DeleteToken"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-token))
(common-lisp:progn
 (common-lisp:defun generate-backend-apimodels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-backend-apimodels-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/api/~A/generateModels"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "GenerateBackendAPIModels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'generate-backend-apimodels))
(common-lisp:progn
 (common-lisp:defun get-backend
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backend-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "GetBackend"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-backend))
(common-lisp:progn
 (common-lisp:defun get-backend-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backend-apirequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/api/~A/details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "GetBackendAPI"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-backend-api))
(common-lisp:progn
 (common-lisp:defun get-backend-apimodels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backend-apimodels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/api/~A/getModels"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "GetBackendAPIModels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-backend-apimodels))
(common-lisp:progn
 (common-lisp:defun get-backend-auth
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backend-auth-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/auth/~A/details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "GetBackendAuth"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-backend-auth))
(common-lisp:progn
 (common-lisp:defun get-backend-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name job-id)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backend-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/job/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "GetBackendJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-backend-job))
(common-lisp:progn
 (common-lisp:defun get-backend-storage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backend-storage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/storage/~A/details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "GetBackendStorage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-backend-storage))
(common-lisp:progn
 (common-lisp:defun get-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id session-id)
   (common-lisp:declare (common-lisp:ignorable app-id session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/challenge/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "GetToken"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-token))
(common-lisp:progn
 (common-lisp:defun import-backend-auth
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     identity-pool-id native-client-id user-pool-id
                     web-client-id)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name identity-pool-id
     native-client-id user-pool-id web-client-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-backend-auth-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/auth/~A/import"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "ImportBackendAuth"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'import-backend-auth))
(common-lisp:progn
 (common-lisp:defun import-backend-storage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     bucket-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name bucket-name
     service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-backend-storage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/storage/~A/import"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "ImportBackendStorage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'import-backend-storage))
(common-lisp:progn
 (common-lisp:defun list-backend-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name job-id
                     max-results next-token operation status)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name job-id max-results
     next-token operation status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-backend-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/job/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "ListBackendJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-backend-jobs))
(common-lisp:progn
 (common-lisp:defun list-s3buckets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-s3buckets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/s3Buckets"
                                                        "ListS3Buckets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-s3buckets))
(common-lisp:progn
 (common-lisp:defun remove-all-backends
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id clean-amplify-app)
   (common-lisp:declare (common-lisp:ignorable app-id clean-amplify-app))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-all-backends-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/remove"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "RemoveAllBackends"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-all-backends))
(common-lisp:progn
 (common-lisp:defun remove-backend-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-backend-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/config/remove"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "RemoveBackendConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-backend-config))
(common-lisp:progn
 (common-lisp:defun update-backend-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-backend-apirequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/api/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "UpdateBackendAPI"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-backend-api))
(common-lisp:progn
 (common-lisp:defun update-backend-auth
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-backend-auth-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/auth/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "UpdateBackendAuth"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-backend-auth))
(common-lisp:progn
 (common-lisp:defun update-backend-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id login-auth-config)
   (common-lisp:declare (common-lisp:ignorable app-id login-auth-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-backend-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/config/update"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "UpdateBackendConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-backend-config))
(common-lisp:progn
 (common-lisp:defun update-backend-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name job-id
                     operation status)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name job-id operation
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-backend-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/job/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "UpdateBackendJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-backend-job))
(common-lisp:progn
 (common-lisp:defun update-backend-storage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-backend-storage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/storage/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "UpdateBackendStorage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-backend-storage))
