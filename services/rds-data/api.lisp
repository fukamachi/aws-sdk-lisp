;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/rds-data/api
  (:use)
  (:nicknames #:aws/rds-data)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/rds-data/api)
(common-lisp:progn
 (common-lisp:define-condition rds-data-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'rds-data-error))
(common-lisp:progn
 (common-lisp:defclass rds-data-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "rds-data" :api-version
                        "2018-08-01" :host-prefix "rds-data" :signing-name
                        "rds-data" :global-host common-lisp:nil))
 (common-lisp:export 'rds-data-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("DatabaseErrorException" . database-error-exception)
    ("DatabaseNotFoundException" . database-not-found-exception)
    ("DatabaseUnavailableException" . database-unavailable-exception)
    ("ForbiddenException" . forbidden-exception)
    ("HttpEndpointNotEnabledException" . http-endpoint-not-enabled-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("InvalidSecretException" . invalid-secret-exception)
    ("NotFoundException" . not-found-exception)
    ("SecretsErrorException" . secrets-error-exception)
    ("ServiceUnavailableError" . service-unavailable-error)
    ("StatementTimeoutException" . statement-timeout-exception)
    ("TransactionNotFoundException" . transaction-not-found-exception)
    ("UnsupportedResultException" . unsupported-result-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (rds-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype array-of-array ()
   '(trivial-types:proper-list array-value))
 (common-lisp:defun make-array-of-array
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list array-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass array-value common-lisp:nil
                       ((boolean-values :initarg :boolean-values :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-array common-lisp:null)
                         :accessor struct-shape-array-value-boolean-values
                         :shape "BooleanArray" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-values :initarg :long-values :initform
                         common-lisp:nil :type
                         (common-lisp:or long-array common-lisp:null) :accessor
                         struct-shape-array-value-long-values :shape
                         "LongArray" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (double-values :initarg :double-values :initform
                         common-lisp:nil :type
                         (common-lisp:or double-array common-lisp:null)
                         :accessor struct-shape-array-value-double-values
                         :shape "DoubleArray" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (string-values :initarg :string-values :initform
                         common-lisp:nil :type
                         (common-lisp:or string-array common-lisp:null)
                         :accessor struct-shape-array-value-string-values
                         :shape "StringArray" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (array-values :initarg :array-values :initform
                         common-lisp:nil :type
                         (common-lisp:or array-of-array common-lisp:null)
                         :accessor struct-shape-array-value-array-values :shape
                         "ArrayOfArray" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-array-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'array-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'array-value 'make-array-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input array-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input array-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-values))
      (common-lisp:list
       (common-lisp:cons "booleanValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-values))
      (common-lisp:list
       (common-lisp:cons "longValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-values))
      (common-lisp:list
       (common-lisp:cons "doubleValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-values))
      (common-lisp:list
       (common-lisp:cons "stringValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'array-values))
      (common-lisp:list
       (common-lisp:cons "arrayValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input array-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype array-value-list () '(trivial-types:proper-list value))
 (common-lisp:defun make-array-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (rds-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass batch-execute-statement-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-batch-execute-statement-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secret-arn :initarg :secret-arn :initform
                         (common-lisp:error ":secretarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-batch-execute-statement-request-secret-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sql :initarg :sql :initform
                         (common-lisp:error ":sql is required") :type
                         (common-lisp:or sql-statement common-lisp:null)
                         :accessor
                         struct-shape-batch-execute-statement-request-sql
                         :shape "SqlStatement" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database :initarg :database :initform common-lisp:nil
                         :type (common-lisp:or db-name common-lisp:null)
                         :accessor
                         struct-shape-batch-execute-statement-request-database
                         :shape "DbName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or db-name common-lisp:null)
                         :accessor
                         struct-shape-batch-execute-statement-request-schema
                         :shape "DbName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-sets :initarg :parameter-sets :initform
                         common-lisp:nil :type
                         (common-lisp:or sql-parameter-sets common-lisp:null)
                         :accessor
                         struct-shape-batch-execute-statement-request-parameter-sets
                         :shape "SqlParameterSets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transaction-id :initarg :transaction-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-batch-execute-statement-request-transaction-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-execute-statement-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-execute-statement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-execute-statement-request
                    'make-batch-execute-statement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql))
      (common-lisp:list
       (common-lisp:cons "sql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-sets))
      (common-lisp:list
       (common-lisp:cons "parameterSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "transactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-execute-statement-response common-lisp:nil
                       ((update-results :initarg :update-results :initform
                         common-lisp:nil :type
                         (common-lisp:or update-results common-lisp:null)
                         :accessor
                         struct-shape-batch-execute-statement-response-update-results
                         :shape "UpdateResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-execute-statement-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-execute-statement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-execute-statement-response
                    'make-batch-execute-statement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-results))
      (common-lisp:list
       (common-lisp:cons "updateResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-execute-statement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass begin-transaction-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-begin-transaction-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secret-arn :initarg :secret-arn :initform
                         (common-lisp:error ":secretarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-begin-transaction-request-secret-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform common-lisp:nil
                         :type (common-lisp:or db-name common-lisp:null)
                         :accessor
                         struct-shape-begin-transaction-request-database :shape
                         "DbName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or db-name common-lisp:null)
                         :accessor
                         struct-shape-begin-transaction-request-schema :shape
                         "DbName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-begin-transaction-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'begin-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'begin-transaction-request
                    'make-begin-transaction-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          begin-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          begin-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          begin-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass begin-transaction-response common-lisp:nil
                       ((transaction-id :initarg :transaction-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-begin-transaction-response-transaction-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-begin-transaction-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'begin-transaction-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'begin-transaction-response
                    'make-begin-transaction-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          begin-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          begin-transaction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "transactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          begin-transaction-response))
   common-lisp:nil))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype boolean-array ()
   '(trivial-types:proper-list boxed-boolean))
 (common-lisp:defun make-boolean-array
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list boxed-boolean))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-double () 'common-lisp:double-float)
(common-lisp:deftype boxed-float () 'common-lisp:single-float)
(common-lisp:deftype boxed-integer () 'common-lisp:integer)
(common-lisp:deftype boxed-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass column-metadata common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-column-metadata-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-column-metadata-type :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type-name :initarg :type-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-column-metadata-type-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (label :initarg :label :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-column-metadata-label :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-column-metadata-schema-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-column-metadata-table-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-auto-increment :initarg :is-auto-increment
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-column-metadata-is-auto-increment :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-signed :initarg :is-signed :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-column-metadata-is-signed :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-currency :initarg :is-currency :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-column-metadata-is-currency :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-case-sensitive :initarg :is-case-sensitive
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-column-metadata-is-case-sensitive :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (nullable :initarg :nullable :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-column-metadata-nullable :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (precision :initarg :precision :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-column-metadata-precision :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scale :initarg :scale :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-column-metadata-scale :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (array-base-column-type :initarg
                         :array-base-column-type :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-column-metadata-array-base-column-type
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'column-metadata 'make-column-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "typeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "schemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-auto-increment))
      (common-lisp:list
       (common-lisp:cons "isAutoIncrement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-signed))
      (common-lisp:list
       (common-lisp:cons "isSigned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-currency))
      (common-lisp:list
       (common-lisp:cons "isCurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-case-sensitive))
      (common-lisp:list
       (common-lisp:cons "isCaseSensitive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nullable))
      (common-lisp:list
       (common-lisp:cons "nullable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'array-base-column-type))
      (common-lisp:list
       (common-lisp:cons "arrayBaseColumnType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass commit-transaction-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-commit-transaction-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secret-arn :initarg :secret-arn :initform
                         (common-lisp:error ":secretarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-commit-transaction-request-secret-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (transaction-id :initarg :transaction-id :initform
                         (common-lisp:error ":transactionid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-commit-transaction-request-transaction-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-commit-transaction-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'commit-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'commit-transaction-request
                    'make-commit-transaction-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "transactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass commit-transaction-response common-lisp:nil
                       ((transaction-status :initarg :transaction-status
                         :initform common-lisp:nil :type
                         (common-lisp:or transaction-status common-lisp:null)
                         :accessor
                         struct-shape-commit-transaction-response-transaction-status
                         :shape "TransactionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-commit-transaction-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'commit-transaction-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'commit-transaction-response
                    'make-commit-transaction-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-status))
      (common-lisp:list
       (common-lisp:cons "transactionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          commit-transaction-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition database-error-exception
     (rds-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       database-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'database-error-exception
                    'database-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition database-not-found-exception
     (rds-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       database-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'database-not-found-exception
                    'database-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition database-unavailable-exception
     (rds-data-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'database-unavailable-exception)))
(common-lisp:deftype db-name () 'common-lisp:string)
(common-lisp:deftype decimal-return-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype double-array ()
   '(trivial-types:proper-list boxed-double))
 (common-lisp:defun make-double-array
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list boxed-double))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execute-sql-request common-lisp:nil
                       ((db-cluster-or-instance-arn :initarg
                         :db-cluster-or-instance-arn :initform
                         (common-lisp:error
                          ":dbclusterorinstancearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-execute-sql-request-db-cluster-or-instance-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aws-secret-store-arn :initarg :aws-secret-store-arn
                         :initform
                         (common-lisp:error ":awssecretstorearn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-execute-sql-request-aws-secret-store-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sql-statements :initarg :sql-statements :initform
                         (common-lisp:error ":sqlstatements is required") :type
                         (common-lisp:or sql-statement common-lisp:null)
                         :accessor
                         struct-shape-execute-sql-request-sql-statements :shape
                         "SqlStatement" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database :initarg :database :initform common-lisp:nil
                         :type (common-lisp:or db-name common-lisp:null)
                         :accessor struct-shape-execute-sql-request-database
                         :shape "DbName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or db-name common-lisp:null)
                         :accessor struct-shape-execute-sql-request-schema
                         :shape "DbName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-sql-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-sql-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-sql-request 'make-execute-sql-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execute-sql-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execute-sql-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'db-cluster-or-instance-arn))
      (common-lisp:list
       (common-lisp:cons "dbClusterOrInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-secret-store-arn))
      (common-lisp:list
       (common-lisp:cons "awsSecretStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-statements))
      (common-lisp:list
       (common-lisp:cons "sqlStatements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execute-sql-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-sql-response common-lisp:nil
                       ((sql-statement-results :initarg :sql-statement-results
                         :initform common-lisp:nil :type
                         (common-lisp:or sql-statement-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-execute-sql-response-sql-statement-results
                         :shape "SqlStatementResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-sql-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-sql-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-sql-response 'make-execute-sql-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execute-sql-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execute-sql-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-statement-results))
      (common-lisp:list
       (common-lisp:cons "sqlStatementResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execute-sql-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-statement-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-execute-statement-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secret-arn :initarg :secret-arn :initform
                         (common-lisp:error ":secretarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-execute-statement-request-secret-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sql :initarg :sql :initform
                         (common-lisp:error ":sql is required") :type
                         (common-lisp:or sql-statement common-lisp:null)
                         :accessor struct-shape-execute-statement-request-sql
                         :shape "SqlStatement" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database :initarg :database :initform common-lisp:nil
                         :type (common-lisp:or db-name common-lisp:null)
                         :accessor
                         struct-shape-execute-statement-request-database :shape
                         "DbName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or db-name common-lisp:null)
                         :accessor
                         struct-shape-execute-statement-request-schema :shape
                         "DbName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or sql-parameters-list common-lisp:null)
                         :accessor
                         struct-shape-execute-statement-request-parameters
                         :shape "SqlParametersList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transaction-id :initarg :transaction-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-execute-statement-request-transaction-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (include-result-metadata :initarg
                         :include-result-metadata :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-execute-statement-request-include-result-metadata
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (continue-after-timeout :initarg
                         :continue-after-timeout :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-execute-statement-request-continue-after-timeout
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-set-options :initarg :result-set-options
                         :initform common-lisp:nil :type
                         (common-lisp:or result-set-options common-lisp:null)
                         :accessor
                         struct-shape-execute-statement-request-result-set-options
                         :shape "ResultSetOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format-records-as :initarg :format-records-as
                         :initform common-lisp:nil :type
                         (common-lisp:or records-format-type common-lisp:null)
                         :accessor
                         struct-shape-execute-statement-request-format-records-as
                         :shape "RecordsFormatType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-statement-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-statement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-statement-request
                    'make-execute-statement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql))
      (common-lisp:list
       (common-lisp:cons "sql"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "transactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-result-metadata))
      (common-lisp:list
       (common-lisp:cons "includeResultMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continue-after-timeout))
      (common-lisp:list
       (common-lisp:cons "continueAfterTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-set-options))
      (common-lisp:list
       (common-lisp:cons "resultSetOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-records-as))
      (common-lisp:list
       (common-lisp:cons "formatRecordsAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-statement-response common-lisp:nil
                       ((records :initarg :records :initform common-lisp:nil
                         :type (common-lisp:or sql-records common-lisp:null)
                         :accessor
                         struct-shape-execute-statement-response-records :shape
                         "SqlRecords" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (column-metadata :initarg :column-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         struct-shape-execute-statement-response-column-metadata
                         :shape "Metadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-records-updated :initarg
                         :number-of-records-updated :initform common-lisp:nil
                         :type
                         (common-lisp:or records-updated common-lisp:null)
                         :accessor
                         struct-shape-execute-statement-response-number-of-records-updated
                         :shape "RecordsUpdated" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generated-fields :initarg :generated-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or field-list common-lisp:null) :accessor
                         struct-shape-execute-statement-response-generated-fields
                         :shape "FieldList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (formatted-records :initarg :formatted-records
                         :initform common-lisp:nil :type
                         (common-lisp:or formatted-sql-records
                                         common-lisp:null)
                         :accessor
                         struct-shape-execute-statement-response-formatted-records
                         :shape "FormattedSqlRecords" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-statement-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execute-statement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-statement-response
                    'make-execute-statement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-metadata))
      (common-lisp:list
       (common-lisp:cons "columnMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-records-updated))
      (common-lisp:list
       (common-lisp:cons "numberOfRecordsUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generated-fields))
      (common-lisp:list
       (common-lisp:cons "generatedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formatted-records))
      (common-lisp:list
       (common-lisp:cons "formattedRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-statement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass field common-lisp:nil
                       ((is-null :initarg :is-null :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-field-is-null :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (boolean-value :initarg :boolean-value :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-field-boolean-value :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-value :initarg :long-value :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-long common-lisp:null) :accessor
                         struct-shape-field-long-value :shape "BoxedLong"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (double-value :initarg :double-value :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-double common-lisp:null)
                         :accessor struct-shape-field-double-value :shape
                         "BoxedDouble" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (string-value :initarg :string-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-field-string-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (blob-value :initarg :blob-value :initform
                         common-lisp:nil :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-field-blob-value :shape "Blob" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (array-value :initarg :array-value :initform
                         common-lisp:nil :type
                         (common-lisp:or array-value common-lisp:null)
                         :accessor struct-shape-field-array-value :shape
                         "ArrayValue" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'field 'make-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-null))
      (common-lisp:list
       (common-lisp:cons "isNull"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-value))
      (common-lisp:list
       (common-lisp:cons "booleanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-value))
      (common-lisp:list
       (common-lisp:cons "longValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blob-value))
      (common-lisp:list
       (common-lisp:cons "blobValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'array-value))
      (common-lisp:list
       (common-lisp:cons "arrayValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-list () '(trivial-types:proper-list field))
 (common-lisp:defun make-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (rds-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:deftype formatted-sql-records () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition http-endpoint-not-enabled-exception
     (rds-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       http-endpoint-not-enabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'http-endpoint-not-enabled-exception
                    'http-endpoint-not-enabled-exception-message)))
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (rds-data-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'internal-server-error-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-secret-exception
     (rds-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-secret-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-secret-exception
                    'invalid-secret-exception-message)))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype long-array () '(trivial-types:proper-list boxed-long))
 (common-lisp:defun make-long-array
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list boxed-long))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long-return-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metadata () '(trivial-types:proper-list column-metadata))
 (common-lisp:defun make-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (rds-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype parameter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass record common-lisp:nil
                       ((values :initarg :values :initform common-lisp:nil
                         :type (common-lisp:or row common-lisp:null) :accessor
                         struct-shape-record-values :shape "Row" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'record
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'record 'make-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype records () '(trivial-types:proper-list record))
 (common-lisp:defun make-records
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype records-format-type () 'common-lisp:string)
(common-lisp:deftype records-updated () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass result-frame common-lisp:nil
                       ((result-set-metadata :initarg :result-set-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or result-set-metadata common-lisp:null)
                         :accessor
                         struct-shape-result-frame-result-set-metadata :shape
                         "ResultSetMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (records :initarg :records :initform common-lisp:nil
                         :type (common-lisp:or records common-lisp:null)
                         :accessor struct-shape-result-frame-records :shape
                         "Records" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-result-frame
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'result-frame
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'result-frame 'make-result-frame))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-frame))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-frame))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-set-metadata))
      (common-lisp:list
       (common-lisp:cons "resultSetMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-frame))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-set-metadata common-lisp:nil
                       ((column-count :initarg :column-count :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-result-set-metadata-column-count :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (column-metadata :initarg :column-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         struct-shape-result-set-metadata-column-metadata
                         :shape "Metadata" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-result-set-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'result-set-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'result-set-metadata 'make-result-set-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-set-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-set-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-count))
      (common-lisp:list
       (common-lisp:cons "columnCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-metadata))
      (common-lisp:list
       (common-lisp:cons "columnMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-set-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass result-set-options common-lisp:nil
                       ((decimal-return-type :initarg :decimal-return-type
                         :initform common-lisp:nil :type
                         (common-lisp:or decimal-return-type common-lisp:null)
                         :accessor
                         struct-shape-result-set-options-decimal-return-type
                         :shape "DecimalReturnType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (long-return-type :initarg :long-return-type :initform
                         common-lisp:nil :type
                         (common-lisp:or long-return-type common-lisp:null)
                         :accessor
                         struct-shape-result-set-options-long-return-type
                         :shape "LongReturnType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-result-set-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'result-set-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'result-set-options 'make-result-set-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-set-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-set-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decimal-return-type))
      (common-lisp:list
       (common-lisp:cons "decimalReturnType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'long-return-type))
      (common-lisp:list
       (common-lisp:cons "longReturnType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-set-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rollback-transaction-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-rollback-transaction-request-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (secret-arn :initarg :secret-arn :initform
                         (common-lisp:error ":secretarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-rollback-transaction-request-secret-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (transaction-id :initarg :transaction-id :initform
                         (common-lisp:error ":transactionid is required") :type
                         (common-lisp:or id common-lisp:null) :accessor
                         struct-shape-rollback-transaction-request-transaction-id
                         :shape "Id" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rollback-transaction-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rollback-transaction-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rollback-transaction-request
                    'make-rollback-transaction-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rollback-transaction-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rollback-transaction-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "secretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "transactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rollback-transaction-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rollback-transaction-response common-lisp:nil
                       ((transaction-status :initarg :transaction-status
                         :initform common-lisp:nil :type
                         (common-lisp:or transaction-status common-lisp:null)
                         :accessor
                         struct-shape-rollback-transaction-response-transaction-status
                         :shape "TransactionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rollback-transaction-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rollback-transaction-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rollback-transaction-response
                    'make-rollback-transaction-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rollback-transaction-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rollback-transaction-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-status))
      (common-lisp:list
       (common-lisp:cons "transactionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rollback-transaction-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype row () '(trivial-types:proper-list value))
 (common-lisp:defun make-row
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition secrets-error-exception
     (rds-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       secrets-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'secrets-error-exception 'secrets-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-error
     (rds-data-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'service-unavailable-error)))
(common-lisp:progn
 (common-lisp:defclass sql-parameter common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or parameter-name common-lisp:null)
                         :accessor struct-shape-sql-parameter-name :shape
                         "ParameterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or field common-lisp:null) :accessor
                         struct-shape-sql-parameter-value :shape "Field"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type-hint :initarg :type-hint :initform
                         common-lisp:nil :type
                         (common-lisp:or type-hint common-lisp:null) :accessor
                         struct-shape-sql-parameter-type-hint :shape "TypeHint"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sql-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sql-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sql-parameter 'make-sql-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sql-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sql-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-hint))
      (common-lisp:list
       (common-lisp:cons "typeHint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sql-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sql-parameter-sets ()
   '(trivial-types:proper-list sql-parameters-list))
 (common-lisp:defun make-sql-parameter-sets
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sql-parameters-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype sql-parameters-list ()
   '(trivial-types:proper-list sql-parameter))
 (common-lisp:defun make-sql-parameters-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sql-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype sql-records () '(trivial-types:proper-list field-list))
 (common-lisp:defun make-sql-records
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-list))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sql-statement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sql-statement-result common-lisp:nil
                       ((result-frame :initarg :result-frame :initform
                         common-lisp:nil :type
                         (common-lisp:or result-frame common-lisp:null)
                         :accessor
                         struct-shape-sql-statement-result-result-frame :shape
                         "ResultFrame" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-records-updated :initarg
                         :number-of-records-updated :initform common-lisp:nil
                         :type
                         (common-lisp:or records-updated common-lisp:null)
                         :accessor
                         struct-shape-sql-statement-result-number-of-records-updated
                         :shape "RecordsUpdated" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sql-statement-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sql-statement-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sql-statement-result 'make-sql-statement-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sql-statement-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sql-statement-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-frame))
      (common-lisp:list
       (common-lisp:cons "resultFrame"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-records-updated))
      (common-lisp:list
       (common-lisp:cons "numberOfRecordsUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sql-statement-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sql-statement-results ()
   '(trivial-types:proper-list sql-statement-result))
 (common-lisp:defun make-sql-statement-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sql-statement-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition statement-timeout-exception
     (rds-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       statement-timeout-exception-message)
      (db-connection-id :initarg :db-connection-id :initform common-lisp:nil
       :reader statement-timeout-exception-db-connection-id)))
 (common-lisp:export
  (common-lisp:list 'statement-timeout-exception
                    'statement-timeout-exception-message
                    'statement-timeout-exception-db-connection-id)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-array () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-array
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass struct-value common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or array-value-list common-lisp:null)
                         :accessor struct-shape-struct-value-attributes :shape
                         "ArrayValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-struct-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'struct-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'struct-value 'make-struct-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input struct-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input struct-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input struct-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition transaction-not-found-exception
     (rds-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       transaction-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'transaction-not-found-exception
                    'transaction-not-found-exception-message)))
(common-lisp:deftype transaction-status () 'common-lisp:string)
(common-lisp:deftype type-hint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-result-exception
     (rds-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-result-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-result-exception
                    'unsupported-result-exception-message)))
(common-lisp:progn
 (common-lisp:defclass update-result common-lisp:nil
                       ((generated-fields :initarg :generated-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or field-list common-lisp:null) :accessor
                         struct-shape-update-result-generated-fields :shape
                         "FieldList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'update-result 'make-update-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generated-fields))
      (common-lisp:list
       (common-lisp:cons "generatedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-results ()
   '(trivial-types:proper-list update-result))
 (common-lisp:defun make-update-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass value common-lisp:nil
                       ((is-null :initarg :is-null :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-value-is-null :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bit-value :initarg :bit-value :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-value-bit-value :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (big-int-value :initarg :big-int-value :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-long common-lisp:null) :accessor
                         struct-shape-value-big-int-value :shape "BoxedLong"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (int-value :initarg :int-value :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor struct-shape-value-int-value :shape
                         "BoxedInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (double-value :initarg :double-value :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-double common-lisp:null)
                         :accessor struct-shape-value-double-value :shape
                         "BoxedDouble" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (real-value :initarg :real-value :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-float common-lisp:null)
                         :accessor struct-shape-value-real-value :shape
                         "BoxedFloat" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (string-value :initarg :string-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-value-string-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (blob-value :initarg :blob-value :initform
                         common-lisp:nil :type
                         (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-value-blob-value :shape "Blob" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (array-values :initarg :array-values :initform
                         common-lisp:nil :type
                         (common-lisp:or array-value-list common-lisp:null)
                         :accessor struct-shape-value-array-values :shape
                         "ArrayValueList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (struct-value :initarg :struct-value :initform
                         common-lisp:nil :type
                         (common-lisp:or struct-value common-lisp:null)
                         :accessor struct-shape-value-struct-value :shape
                         "StructValue" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'value 'make-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-null))
      (common-lisp:list
       (common-lisp:cons "isNull"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-value))
      (common-lisp:list
       (common-lisp:cons "bitValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'big-int-value))
      (common-lisp:list
       (common-lisp:cons "bigIntValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'int-value))
      (common-lisp:list
       (common-lisp:cons "intValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'real-value))
      (common-lisp:list
       (common-lisp:cons "realValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blob-value))
      (common-lisp:list
       (common-lisp:cons "blobValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'array-values))
      (common-lisp:list
       (common-lisp:cons "arrayValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'struct-value))
      (common-lisp:list
       (common-lisp:cons "structValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun batch-execute-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn secret-arn sql database
                     schema parameter-sets transaction-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn secret-arn sql database schema
     parameter-sets transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-execute-statement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/BatchExecute"
                                                        "BatchExecuteStatement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-execute-statement))
(common-lisp:progn
 (common-lisp:defun begin-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn secret-arn database schema)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn secret-arn database schema))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-begin-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/BeginTransaction"
                                                        "BeginTransaction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'begin-transaction))
(common-lisp:progn
 (common-lisp:defun commit-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn secret-arn transaction-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn secret-arn transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-commit-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/CommitTransaction"
                                                        "CommitTransaction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'commit-transaction))
(common-lisp:progn
 (common-lisp:defun execute-sql
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key db-cluster-or-instance-arn
                     aws-secret-store-arn sql-statements database schema)
   (common-lisp:declare
    (common-lisp:ignorable db-cluster-or-instance-arn aws-secret-store-arn
     sql-statements database schema))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-sql-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/ExecuteSql"
                                                        "ExecuteSql"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'execute-sql))
(common-lisp:progn
 (common-lisp:defun execute-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn secret-arn sql database
                     schema parameters transaction-id include-result-metadata
                     continue-after-timeout result-set-options
                     format-records-as)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn secret-arn sql database schema
     parameters transaction-id include-result-metadata continue-after-timeout
     result-set-options format-records-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-statement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/Execute"
                                                        "ExecuteStatement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'execute-statement))
(common-lisp:progn
 (common-lisp:defun rollback-transaction
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn secret-arn transaction-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn secret-arn transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-rollback-transaction-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rds-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/RollbackTransaction"
                                                        "RollbackTransaction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'rollback-transaction))
