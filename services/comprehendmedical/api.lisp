;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/comprehendmedical/api
  (:use)
  (:nicknames #:aws/comprehendmedical)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/comprehendmedical/api)
(common-lisp:progn
 (common-lisp:define-condition comprehendmedical-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'comprehendmedical-error))
(common-lisp:progn
 (common-lisp:defclass comprehendmedical-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "comprehendmedical"
                        :api-version "2018-10-30" :host-prefix
                        "comprehendmedical" :signing-name "comprehendmedical"
                        :global-host common-lisp:nil :target-prefix
                        "ComprehendMedical_20181030" :json-version "1.1"))
 (common-lisp:export 'comprehendmedical-request))
(common-lisp:defvar *error-map*
  '(("InternalServerException" . internal-server-exception)
    ("InvalidEncodingException" . invalid-encoding-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("TextSizeLimitExceededException" . text-size-limit-exceeded-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype any-length-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attribute common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or entity-sub-type common-lisp:null)
                         :accessor struct-shape-attribute-type :shape
                         "EntitySubType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-attribute-score :shape "Float" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (relationship-score :initarg :relationship-score
                         :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-attribute-relationship-score :shape
                         "Float" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (relationship-type :initarg :relationship-type
                         :initform common-lisp:nil :type
                         (common-lisp:or relationship-type common-lisp:null)
                         :accessor struct-shape-attribute-relationship-type
                         :shape "RelationshipType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-attribute-id :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (begin-offset :initarg :begin-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-attribute-begin-offset :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-offset :initarg :end-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-attribute-end-offset :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-attribute-text :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type (common-lisp:or entity-type common-lisp:null)
                         :accessor struct-shape-attribute-category :shape
                         "EntityType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (traits :initarg :traits :initform common-lisp:nil
                         :type (common-lisp:or trait-list common-lisp:null)
                         :accessor struct-shape-attribute-traits :shape
                         "TraitList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'attribute 'make-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-score))
      (common-lisp:list
       (common-lisp:cons "RelationshipScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-type))
      (common-lisp:list
       (common-lisp:cons "RelationshipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset))
      (common-lisp:list
       (common-lisp:cons "BeginOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset))
      (common-lisp:list
       (common-lisp:cons "EndOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traits))
      (common-lisp:list
       (common-lisp:cons "Traits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-list () '(trivial-types:proper-list attribute))
 (common-lisp:defun make-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:deftype bounded-length-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass characters common-lisp:nil
                       ((original-text-characters :initarg
                         :original-text-characters :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-characters-original-text-characters
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-characters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'characters
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'characters 'make-characters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input characters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input characters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'original-text-characters))
      (common-lisp:list
       (common-lisp:cons "OriginalTextCharacters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input characters))
   common-lisp:nil))
(common-lisp:deftype client-request-token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass comprehend-medical-async-job-filter common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or job-name common-lisp:null)
                         :accessor
                         struct-shape-comprehend-medical-async-job-filter-job-name
                         :shape "JobName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-status :initarg :job-status :initform
                         common-lisp:nil :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         struct-shape-comprehend-medical-async-job-filter-job-status
                         :shape "JobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (submit-time-before :initarg :submit-time-before
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-comprehend-medical-async-job-filter-submit-time-before
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (submit-time-after :initarg :submit-time-after
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-comprehend-medical-async-job-filter-submit-time-after
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-comprehend-medical-async-job-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'comprehend-medical-async-job-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'comprehend-medical-async-job-filter
                    'make-comprehend-medical-async-job-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          comprehend-medical-async-job-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          comprehend-medical-async-job-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submit-time-before))
      (common-lisp:list
       (common-lisp:cons "SubmitTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submit-time-after))
      (common-lisp:list
       (common-lisp:cons "SubmitTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          comprehend-medical-async-job-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass comprehend-medical-async-job-properties common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-comprehend-medical-async-job-properties-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or job-name common-lisp:null)
                         :accessor
                         struct-shape-comprehend-medical-async-job-properties-job-name
                         :shape "JobName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-status :initarg :job-status :initform
                         common-lisp:nil :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         struct-shape-comprehend-medical-async-job-properties-job-status
                         :shape "JobStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or any-length-string common-lisp:null)
                         :accessor
                         struct-shape-comprehend-medical-async-job-properties-message
                         :shape "AnyLengthString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (submit-time :initarg :submit-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-comprehend-medical-async-job-properties-submit-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-comprehend-medical-async-job-properties-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration-time :initarg :expiration-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-comprehend-medical-async-job-properties-expiration-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-data-config :initarg :input-data-config
                         :initform common-lisp:nil :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         struct-shape-comprehend-medical-async-job-properties-input-data-config
                         :shape "InputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-data-config :initarg :output-data-config
                         :initform common-lisp:nil :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor
                         struct-shape-comprehend-medical-async-job-properties-output-data-config
                         :shape "OutputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         common-lisp:nil :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-comprehend-medical-async-job-properties-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         struct-shape-comprehend-medical-async-job-properties-data-access-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (manifest-file-path :initarg :manifest-file-path
                         :initform common-lisp:nil :type
                         (common-lisp:or manifest-file-path common-lisp:null)
                         :accessor
                         struct-shape-comprehend-medical-async-job-properties-manifest-file-path
                         :shape "ManifestFilePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kmskey :initarg :kmskey :initform common-lisp:nil
                         :type (common-lisp:or kmskey common-lisp:null)
                         :accessor
                         struct-shape-comprehend-medical-async-job-properties-kmskey
                         :shape "KMSKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-version :initarg :model-version :initform
                         common-lisp:nil :type
                         (common-lisp:or model-version common-lisp:null)
                         :accessor
                         struct-shape-comprehend-medical-async-job-properties-model-version
                         :shape "ModelVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-comprehend-medical-async-job-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'comprehend-medical-async-job-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'comprehend-medical-async-job-properties
                    'make-comprehend-medical-async-job-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          comprehend-medical-async-job-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          comprehend-medical-async-job-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submit-time))
      (common-lisp:list
       (common-lisp:cons "SubmitTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-file-path))
      (common-lisp:list
       (common-lisp:cons "ManifestFilePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey))
      (common-lisp:list
       (common-lisp:cons "KMSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          comprehend-medical-async-job-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype comprehend-medical-async-job-properties-list ()
   '(trivial-types:proper-list comprehend-medical-async-job-properties))
 (common-lisp:defun make-comprehend-medical-async-job-properties-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            comprehend-medical-async-job-properties))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass describe-entities-detection-v2job-request
                       common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-describe-entities-detection-v2job-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-entities-detection-v2job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-entities-detection-v2job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-entities-detection-v2job-request
                    'make-describe-entities-detection-v2job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-entities-detection-v2job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-entities-detection-v2job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-entities-detection-v2job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-entities-detection-v2job-response
                       common-lisp:nil
                       ((comprehend-medical-async-job-properties :initarg
                         :comprehend-medical-async-job-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          comprehend-medical-async-job-properties
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-entities-detection-v2job-response-comprehend-medical-async-job-properties
                         :shape "ComprehendMedicalAsyncJobProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-entities-detection-v2job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-entities-detection-v2job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-entities-detection-v2job-response
                    'make-describe-entities-detection-v2job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-entities-detection-v2job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-entities-detection-v2job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'comprehend-medical-async-job-properties))
      (common-lisp:list
       (common-lisp:cons "ComprehendMedicalAsyncJobProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-entities-detection-v2job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-icd10cminference-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-describe-icd10cminference-job-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-icd10cminference-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-icd10cminference-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-icd10cminference-job-request
                    'make-describe-icd10cminference-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-icd10cminference-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-icd10cminference-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-icd10cminference-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-icd10cminference-job-response common-lisp:nil
                       ((comprehend-medical-async-job-properties :initarg
                         :comprehend-medical-async-job-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          comprehend-medical-async-job-properties
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-icd10cminference-job-response-comprehend-medical-async-job-properties
                         :shape "ComprehendMedicalAsyncJobProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-icd10cminference-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-icd10cminference-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-icd10cminference-job-response
                    'make-describe-icd10cminference-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-icd10cminference-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-icd10cminference-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'comprehend-medical-async-job-properties))
      (common-lisp:list
       (common-lisp:cons "ComprehendMedicalAsyncJobProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-icd10cminference-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-phidetection-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-describe-phidetection-job-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-phidetection-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-phidetection-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-phidetection-job-request
                    'make-describe-phidetection-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-phidetection-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-phidetection-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-phidetection-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-phidetection-job-response common-lisp:nil
                       ((comprehend-medical-async-job-properties :initarg
                         :comprehend-medical-async-job-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          comprehend-medical-async-job-properties
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-phidetection-job-response-comprehend-medical-async-job-properties
                         :shape "ComprehendMedicalAsyncJobProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-phidetection-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-phidetection-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-phidetection-job-response
                    'make-describe-phidetection-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-phidetection-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-phidetection-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'comprehend-medical-async-job-properties))
      (common-lisp:list
       (common-lisp:cons "ComprehendMedicalAsyncJobProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-phidetection-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-rx-norm-inference-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-describe-rx-norm-inference-job-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-rx-norm-inference-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-rx-norm-inference-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-rx-norm-inference-job-request
                    'make-describe-rx-norm-inference-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rx-norm-inference-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rx-norm-inference-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rx-norm-inference-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-rx-norm-inference-job-response common-lisp:nil
                       ((comprehend-medical-async-job-properties :initarg
                         :comprehend-medical-async-job-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          comprehend-medical-async-job-properties
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-rx-norm-inference-job-response-comprehend-medical-async-job-properties
                         :shape "ComprehendMedicalAsyncJobProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-rx-norm-inference-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-rx-norm-inference-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-rx-norm-inference-job-response
                    'make-describe-rx-norm-inference-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rx-norm-inference-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rx-norm-inference-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'comprehend-medical-async-job-properties))
      (common-lisp:list
       (common-lisp:cons "ComprehendMedicalAsyncJobProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rx-norm-inference-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-snomedctinference-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-describe-snomedctinference-job-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-snomedctinference-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-snomedctinference-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-snomedctinference-job-request
                    'make-describe-snomedctinference-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snomedctinference-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snomedctinference-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snomedctinference-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-snomedctinference-job-response common-lisp:nil
                       ((comprehend-medical-async-job-properties :initarg
                         :comprehend-medical-async-job-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          comprehend-medical-async-job-properties
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-snomedctinference-job-response-comprehend-medical-async-job-properties
                         :shape "ComprehendMedicalAsyncJobProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-snomedctinference-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-snomedctinference-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-snomedctinference-job-response
                    'make-describe-snomedctinference-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-snomedctinference-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-snomedctinference-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'comprehend-medical-async-job-properties))
      (common-lisp:list
       (common-lisp:cons "ComprehendMedicalAsyncJobProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-snomedctinference-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-entities-request common-lisp:nil
                       ((text :initarg :text :initform
                         (common-lisp:error ":text is required") :type
                         (common-lisp:or bounded-length-string
                                         common-lisp:null)
                         :accessor struct-shape-detect-entities-request-text
                         :shape "BoundedLengthString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-entities-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-entities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-entities-request 'make-detect-entities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-entities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-entities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-entities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-entities-response common-lisp:nil
                       ((entities :initarg :entities :initform
                         (common-lisp:error ":entities is required") :type
                         (common-lisp:or entity-list common-lisp:null)
                         :accessor
                         struct-shape-detect-entities-response-entities :shape
                         "EntityList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unmapped-attributes :initarg :unmapped-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or unmapped-attribute-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-entities-response-unmapped-attributes
                         :shape "UnmappedAttributeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pagination-token :initarg :pagination-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-detect-entities-response-pagination-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-version :initarg :model-version :initform
                         (common-lisp:error ":model-version is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-detect-entities-response-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-entities-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-entities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-entities-response 'make-detect-entities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-entities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-entities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "Entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unmapped-attributes))
      (common-lisp:list
       (common-lisp:cons "UnmappedAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-token))
      (common-lisp:list
       (common-lisp:cons "PaginationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-entities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-entities-v2request common-lisp:nil
                       ((text :initarg :text :initform
                         (common-lisp:error ":text is required") :type
                         (common-lisp:or bounded-length-string
                                         common-lisp:null)
                         :accessor struct-shape-detect-entities-v2request-text
                         :shape "BoundedLengthString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-entities-v2request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-entities-v2request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-entities-v2request
                    'make-detect-entities-v2request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-entities-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-entities-v2request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-entities-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-entities-v2response common-lisp:nil
                       ((entities :initarg :entities :initform
                         (common-lisp:error ":entities is required") :type
                         (common-lisp:or entity-list common-lisp:null)
                         :accessor
                         struct-shape-detect-entities-v2response-entities
                         :shape "EntityList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unmapped-attributes :initarg :unmapped-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or unmapped-attribute-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-detect-entities-v2response-unmapped-attributes
                         :shape "UnmappedAttributeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pagination-token :initarg :pagination-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-detect-entities-v2response-pagination-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-version :initarg :model-version :initform
                         (common-lisp:error ":model-version is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-detect-entities-v2response-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-entities-v2response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-entities-v2response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-entities-v2response
                    'make-detect-entities-v2response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-entities-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-entities-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "Entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unmapped-attributes))
      (common-lisp:list
       (common-lisp:cons "UnmappedAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-token))
      (common-lisp:list
       (common-lisp:cons "PaginationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-entities-v2response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-phirequest common-lisp:nil
                       ((text :initarg :text :initform
                         (common-lisp:error ":text is required") :type
                         (common-lisp:or bounded-length-string
                                         common-lisp:null)
                         :accessor struct-shape-detect-phirequest-text :shape
                         "BoundedLengthString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-phirequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-phirequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-phirequest 'make-detect-phirequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detect-phirequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detect-phirequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detect-phirequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-phiresponse common-lisp:nil
                       ((entities :initarg :entities :initform
                         (common-lisp:error ":entities is required") :type
                         (common-lisp:or entity-list common-lisp:null)
                         :accessor struct-shape-detect-phiresponse-entities
                         :shape "EntityList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pagination-token :initarg :pagination-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-detect-phiresponse-pagination-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-version :initarg :model-version :initform
                         (common-lisp:error ":model-version is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-detect-phiresponse-model-version :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-detect-phiresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'detect-phiresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'detect-phiresponse 'make-detect-phiresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detect-phiresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detect-phiresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "Entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-token))
      (common-lisp:list
       (common-lisp:cons "PaginationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detect-phiresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass entity common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-entity-id :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (begin-offset :initarg :begin-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-entity-begin-offset :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-offset :initarg :end-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-entity-end-offset :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-entity-score :shape "Float" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-entity-text :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type (common-lisp:or entity-type common-lisp:null)
                         :accessor struct-shape-entity-category :shape
                         "EntityType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or entity-sub-type common-lisp:null)
                         :accessor struct-shape-entity-type :shape
                         "EntitySubType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (traits :initarg :traits :initform common-lisp:nil
                         :type (common-lisp:or trait-list common-lisp:null)
                         :accessor struct-shape-entity-traits :shape
                         "TraitList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute-list common-lisp:null)
                         :accessor struct-shape-entity-attributes :shape
                         "AttributeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-entity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'entity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'entity 'make-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset))
      (common-lisp:list
       (common-lisp:cons "BeginOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset))
      (common-lisp:list
       (common-lisp:cons "EndOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traits))
      (common-lisp:list
       (common-lisp:cons "Traits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-list () '(trivial-types:proper-list entity))
 (common-lisp:defun make-entity-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entity-sub-type () 'common-lisp:string)
(common-lisp:deftype entity-type () 'common-lisp:string)
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defclass icd10cmattribute common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or icd10cmattribute-type
                                         common-lisp:null)
                         :accessor struct-shape-icd10cmattribute-type :shape
                         "ICD10CMAttributeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-icd10cmattribute-score :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (relationship-score :initarg :relationship-score
                         :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-icd10cmattribute-relationship-score
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-icd10cmattribute-id :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (begin-offset :initarg :begin-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-icd10cmattribute-begin-offset :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-offset :initarg :end-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-icd10cmattribute-end-offset :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-icd10cmattribute-text :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (traits :initarg :traits :initform common-lisp:nil
                         :type
                         (common-lisp:or icd10cmtrait-list common-lisp:null)
                         :accessor struct-shape-icd10cmattribute-traits :shape
                         "ICD10CMTraitList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type
                         (common-lisp:or icd10cmentity-type common-lisp:null)
                         :accessor struct-shape-icd10cmattribute-category
                         :shape "ICD10CMEntityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relationship-type :initarg :relationship-type
                         :initform common-lisp:nil :type
                         (common-lisp:or icd10cmrelationship-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-icd10cmattribute-relationship-type :shape
                         "ICD10CMRelationshipType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-icd10cmattribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'icd10cmattribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'icd10cmattribute 'make-icd10cmattribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input icd10cmattribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input icd10cmattribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-score))
      (common-lisp:list
       (common-lisp:cons "RelationshipScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset))
      (common-lisp:list
       (common-lisp:cons "BeginOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset))
      (common-lisp:list
       (common-lisp:cons "EndOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traits))
      (common-lisp:list
       (common-lisp:cons "Traits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-type))
      (common-lisp:list
       (common-lisp:cons "RelationshipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input icd10cmattribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype icd10cmattribute-list ()
   '(trivial-types:proper-list icd10cmattribute))
 (common-lisp:defun make-icd10cmattribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list icd10cmattribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype icd10cmattribute-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass icd10cmconcept common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-icd10cmconcept-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-icd10cmconcept-code :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-icd10cmconcept-score :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-icd10cmconcept
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'icd10cmconcept
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'icd10cmconcept 'make-icd10cmconcept))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input icd10cmconcept))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input icd10cmconcept))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input icd10cmconcept))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype icd10cmconcept-list ()
   '(trivial-types:proper-list icd10cmconcept))
 (common-lisp:defun make-icd10cmconcept-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list icd10cmconcept))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass icd10cmentity common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-icd10cmentity-id :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or ontology-linking-bounded-length-string
                                         common-lisp:null)
                         :accessor struct-shape-icd10cmentity-text :shape
                         "OntologyLinkingBoundedLengthString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type
                         (common-lisp:or icd10cmentity-category
                                         common-lisp:null)
                         :accessor struct-shape-icd10cmentity-category :shape
                         "ICD10CMEntityCategory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or icd10cmentity-type common-lisp:null)
                         :accessor struct-shape-icd10cmentity-type :shape
                         "ICD10CMEntityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-icd10cmentity-score :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (begin-offset :initarg :begin-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-icd10cmentity-begin-offset :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-offset :initarg :end-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-icd10cmentity-end-offset :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or icd10cmattribute-list
                                         common-lisp:null)
                         :accessor struct-shape-icd10cmentity-attributes :shape
                         "ICD10CMAttributeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (traits :initarg :traits :initform common-lisp:nil
                         :type
                         (common-lisp:or icd10cmtrait-list common-lisp:null)
                         :accessor struct-shape-icd10cmentity-traits :shape
                         "ICD10CMTraitList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (icd10cmconcepts :initarg :icd10cmconcepts :initform
                         common-lisp:nil :type
                         (common-lisp:or icd10cmconcept-list common-lisp:null)
                         :accessor struct-shape-icd10cmentity-icd10cmconcepts
                         :shape "ICD10CMConceptList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-icd10cmentity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'icd10cmentity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'icd10cmentity 'make-icd10cmentity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input icd10cmentity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input icd10cmentity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset))
      (common-lisp:list
       (common-lisp:cons "BeginOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset))
      (common-lisp:list
       (common-lisp:cons "EndOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traits))
      (common-lisp:list
       (common-lisp:cons "Traits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icd10cmconcepts))
      (common-lisp:list
       (common-lisp:cons "ICD10CMConcepts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input icd10cmentity))
   common-lisp:nil))
(common-lisp:deftype icd10cmentity-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype icd10cmentity-list ()
   '(trivial-types:proper-list icd10cmentity))
 (common-lisp:defun make-icd10cmentity-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list icd10cmentity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype icd10cmentity-type () 'common-lisp:string)
(common-lisp:deftype icd10cmrelationship-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass icd10cmtrait common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or icd10cmtrait-name common-lisp:null)
                         :accessor struct-shape-icd10cmtrait-name :shape
                         "ICD10CMTraitName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-icd10cmtrait-score :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-icd10cmtrait
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'icd10cmtrait
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'icd10cmtrait 'make-icd10cmtrait))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input icd10cmtrait))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input icd10cmtrait))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input icd10cmtrait))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype icd10cmtrait-list ()
   '(trivial-types:proper-list icd10cmtrait))
 (common-lisp:defun make-icd10cmtrait-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list icd10cmtrait))
   aws-sdk/generator/shape::members))
(common-lisp:deftype icd10cmtrait-name () 'common-lisp:string)
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass infer-icd10cmrequest common-lisp:nil
                       ((text :initarg :text :initform
                         (common-lisp:error ":text is required") :type
                         (common-lisp:or ontology-linking-bounded-length-string
                                         common-lisp:null)
                         :accessor struct-shape-infer-icd10cmrequest-text
                         :shape "OntologyLinkingBoundedLengthString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-infer-icd10cmrequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'infer-icd10cmrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'infer-icd10cmrequest 'make-infer-icd10cmrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input infer-icd10cmrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input infer-icd10cmrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input infer-icd10cmrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass infer-icd10cmresponse common-lisp:nil
                       ((entities :initarg :entities :initform
                         (common-lisp:error ":entities is required") :type
                         (common-lisp:or icd10cmentity-list common-lisp:null)
                         :accessor struct-shape-infer-icd10cmresponse-entities
                         :shape "ICD10CMEntityList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pagination-token :initarg :pagination-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-infer-icd10cmresponse-pagination-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-version :initarg :model-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-infer-icd10cmresponse-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-infer-icd10cmresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'infer-icd10cmresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'infer-icd10cmresponse 'make-infer-icd10cmresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          infer-icd10cmresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          infer-icd10cmresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "Entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-token))
      (common-lisp:list
       (common-lisp:cons "PaginationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          infer-icd10cmresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass infer-rx-norm-request common-lisp:nil
                       ((text :initarg :text :initform
                         (common-lisp:error ":text is required") :type
                         (common-lisp:or ontology-linking-bounded-length-string
                                         common-lisp:null)
                         :accessor struct-shape-infer-rx-norm-request-text
                         :shape "OntologyLinkingBoundedLengthString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-infer-rx-norm-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'infer-rx-norm-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'infer-rx-norm-request 'make-infer-rx-norm-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          infer-rx-norm-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          infer-rx-norm-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          infer-rx-norm-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass infer-rx-norm-response common-lisp:nil
                       ((entities :initarg :entities :initform
                         (common-lisp:error ":entities is required") :type
                         (common-lisp:or rx-norm-entity-list common-lisp:null)
                         :accessor struct-shape-infer-rx-norm-response-entities
                         :shape "RxNormEntityList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pagination-token :initarg :pagination-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-infer-rx-norm-response-pagination-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-version :initarg :model-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-infer-rx-norm-response-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-infer-rx-norm-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'infer-rx-norm-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'infer-rx-norm-response 'make-infer-rx-norm-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          infer-rx-norm-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          infer-rx-norm-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "Entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-token))
      (common-lisp:list
       (common-lisp:cons "PaginationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          infer-rx-norm-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass infer-snomedctrequest common-lisp:nil
                       ((text :initarg :text :initform
                         (common-lisp:error ":text is required") :type
                         (common-lisp:or ontology-linking-bounded-length-string
                                         common-lisp:null)
                         :accessor struct-shape-infer-snomedctrequest-text
                         :shape "OntologyLinkingBoundedLengthString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-infer-snomedctrequest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'infer-snomedctrequest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'infer-snomedctrequest 'make-infer-snomedctrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          infer-snomedctrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          infer-snomedctrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          infer-snomedctrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass infer-snomedctresponse common-lisp:nil
                       ((entities :initarg :entities :initform
                         (common-lisp:error ":entities is required") :type
                         (common-lisp:or snomedctentity-list common-lisp:null)
                         :accessor struct-shape-infer-snomedctresponse-entities
                         :shape "SNOMEDCTEntityList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pagination-token :initarg :pagination-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-infer-snomedctresponse-pagination-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model-version :initarg :model-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-infer-snomedctresponse-model-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snomedctdetails :initarg :snomedctdetails :initform
                         common-lisp:nil :type
                         (common-lisp:or snomedctdetails common-lisp:null)
                         :accessor
                         struct-shape-infer-snomedctresponse-snomedctdetails
                         :shape "SNOMEDCTDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (characters :initarg :characters :initform
                         common-lisp:nil :type
                         (common-lisp:or characters common-lisp:null) :accessor
                         struct-shape-infer-snomedctresponse-characters :shape
                         "Characters" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-infer-snomedctresponse
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'infer-snomedctresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'infer-snomedctresponse 'make-infer-snomedctresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          infer-snomedctresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          infer-snomedctresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entities))
      (common-lisp:list
       (common-lisp:cons "Entities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pagination-token))
      (common-lisp:list
       (common-lisp:cons "PaginationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snomedctdetails))
      (common-lisp:list
       (common-lisp:cons "SNOMEDCTDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'characters))
      (common-lisp:list
       (common-lisp:cons "Characters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          infer-snomedctresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-data-config common-lisp:nil
                       ((s3bucket :initarg :s3bucket :initform
                         (common-lisp:error ":s3bucket is required") :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         struct-shape-input-data-config-s3bucket :shape
                         "S3Bucket" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3key :initarg :s3key :initform common-lisp:nil :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-input-data-config-s3key :shape "S3Key"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-input-data-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'input-data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'input-data-config 'make-input-data-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-data-config))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (comprehendmedical-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-encoding-exception
     (comprehendmedical-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-encoding-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-encoding-exception
                    'invalid-encoding-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (comprehendmedical-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:deftype job-name () 'common-lisp:string)
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:deftype kmskey () 'common-lisp:string)
(common-lisp:deftype language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-entities-detection-v2jobs-request common-lisp:nil
                       ((filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or comprehend-medical-async-job-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-entities-detection-v2jobs-request-filter
                         :shape "ComprehendMedicalAsyncJobFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-entities-detection-v2jobs-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor
                         struct-shape-list-entities-detection-v2jobs-request-max-results
                         :shape "MaxResultsInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-entities-detection-v2jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-entities-detection-v2jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-entities-detection-v2jobs-request
                    'make-list-entities-detection-v2jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-detection-v2jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-detection-v2jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-detection-v2jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entities-detection-v2jobs-response common-lisp:nil
                       ((comprehend-medical-async-job-properties-list :initarg
                         :comprehend-medical-async-job-properties-list
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          comprehend-medical-async-job-properties-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-entities-detection-v2jobs-response-comprehend-medical-async-job-properties-list
                         :shape "ComprehendMedicalAsyncJobPropertiesList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-entities-detection-v2jobs-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-entities-detection-v2jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-entities-detection-v2jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-entities-detection-v2jobs-response
                    'make-list-entities-detection-v2jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-detection-v2jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-detection-v2jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'comprehend-medical-async-job-properties-list))
      (common-lisp:list
       (common-lisp:cons "ComprehendMedicalAsyncJobPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-detection-v2jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-icd10cminference-jobs-request common-lisp:nil
                       ((filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or comprehend-medical-async-job-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-icd10cminference-jobs-request-filter
                         :shape "ComprehendMedicalAsyncJobFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-icd10cminference-jobs-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor
                         struct-shape-list-icd10cminference-jobs-request-max-results
                         :shape "MaxResultsInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-icd10cminference-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-icd10cminference-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-icd10cminference-jobs-request
                    'make-list-icd10cminference-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-icd10cminference-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-icd10cminference-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-icd10cminference-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-icd10cminference-jobs-response common-lisp:nil
                       ((comprehend-medical-async-job-properties-list :initarg
                         :comprehend-medical-async-job-properties-list
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          comprehend-medical-async-job-properties-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-icd10cminference-jobs-response-comprehend-medical-async-job-properties-list
                         :shape "ComprehendMedicalAsyncJobPropertiesList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-icd10cminference-jobs-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-icd10cminference-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-icd10cminference-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-icd10cminference-jobs-response
                    'make-list-icd10cminference-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-icd10cminference-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-icd10cminference-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'comprehend-medical-async-job-properties-list))
      (common-lisp:list
       (common-lisp:cons "ComprehendMedicalAsyncJobPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-icd10cminference-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-phidetection-jobs-request common-lisp:nil
                       ((filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or comprehend-medical-async-job-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-phidetection-jobs-request-filter
                         :shape "ComprehendMedicalAsyncJobFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-phidetection-jobs-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor
                         struct-shape-list-phidetection-jobs-request-max-results
                         :shape "MaxResultsInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-phidetection-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-phidetection-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-phidetection-jobs-request
                    'make-list-phidetection-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-phidetection-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-phidetection-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-phidetection-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-phidetection-jobs-response common-lisp:nil
                       ((comprehend-medical-async-job-properties-list :initarg
                         :comprehend-medical-async-job-properties-list
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          comprehend-medical-async-job-properties-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-phidetection-jobs-response-comprehend-medical-async-job-properties-list
                         :shape "ComprehendMedicalAsyncJobPropertiesList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-phidetection-jobs-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-phidetection-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-phidetection-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-phidetection-jobs-response
                    'make-list-phidetection-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-phidetection-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-phidetection-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'comprehend-medical-async-job-properties-list))
      (common-lisp:list
       (common-lisp:cons "ComprehendMedicalAsyncJobPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-phidetection-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rx-norm-inference-jobs-request common-lisp:nil
                       ((filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or comprehend-medical-async-job-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-rx-norm-inference-jobs-request-filter
                         :shape "ComprehendMedicalAsyncJobFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-rx-norm-inference-jobs-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor
                         struct-shape-list-rx-norm-inference-jobs-request-max-results
                         :shape "MaxResultsInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-rx-norm-inference-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-rx-norm-inference-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-rx-norm-inference-jobs-request
                    'make-list-rx-norm-inference-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rx-norm-inference-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rx-norm-inference-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rx-norm-inference-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rx-norm-inference-jobs-response common-lisp:nil
                       ((comprehend-medical-async-job-properties-list :initarg
                         :comprehend-medical-async-job-properties-list
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          comprehend-medical-async-job-properties-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-rx-norm-inference-jobs-response-comprehend-medical-async-job-properties-list
                         :shape "ComprehendMedicalAsyncJobPropertiesList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-rx-norm-inference-jobs-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-rx-norm-inference-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-rx-norm-inference-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-rx-norm-inference-jobs-response
                    'make-list-rx-norm-inference-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rx-norm-inference-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rx-norm-inference-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'comprehend-medical-async-job-properties-list))
      (common-lisp:list
       (common-lisp:cons "ComprehendMedicalAsyncJobPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rx-norm-inference-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-snomedctinference-jobs-request common-lisp:nil
                       ((filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or comprehend-medical-async-job-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-snomedctinference-jobs-request-filter
                         :shape "ComprehendMedicalAsyncJobFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-snomedctinference-jobs-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor
                         struct-shape-list-snomedctinference-jobs-request-max-results
                         :shape "MaxResultsInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-snomedctinference-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-snomedctinference-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-snomedctinference-jobs-request
                    'make-list-snomedctinference-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-snomedctinference-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-snomedctinference-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-snomedctinference-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-snomedctinference-jobs-response common-lisp:nil
                       ((comprehend-medical-async-job-properties-list :initarg
                         :comprehend-medical-async-job-properties-list
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          comprehend-medical-async-job-properties-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-snomedctinference-jobs-response-comprehend-medical-async-job-properties-list
                         :shape "ComprehendMedicalAsyncJobPropertiesList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-snomedctinference-jobs-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-snomedctinference-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-snomedctinference-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-snomedctinference-jobs-response
                    'make-list-snomedctinference-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-snomedctinference-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-snomedctinference-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'comprehend-medical-async-job-properties-list))
      (common-lisp:list
       (common-lisp:cons "ComprehendMedicalAsyncJobPropertiesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-snomedctinference-jobs-response))
   common-lisp:nil))
(common-lisp:deftype manifest-file-path () 'common-lisp:string)
(common-lisp:deftype max-results-integer () 'common-lisp:integer)
(common-lisp:deftype model-version () 'common-lisp:string)
(common-lisp:deftype ontology-linking-bounded-length-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass output-data-config common-lisp:nil
                       ((s3bucket :initarg :s3bucket :initform
                         (common-lisp:error ":s3bucket is required") :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         struct-shape-output-data-config-s3bucket :shape
                         "S3Bucket" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3key :initarg :s3key :initform common-lisp:nil :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-output-data-config-s3key :shape "S3Key"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-output-data-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'output-data-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'output-data-config 'make-output-data-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "S3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-data-config))
   common-lisp:nil))
(common-lisp:deftype relationship-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (comprehendmedical-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass rx-norm-attribute common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or rx-norm-attribute-type
                                         common-lisp:null)
                         :accessor struct-shape-rx-norm-attribute-type :shape
                         "RxNormAttributeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-rx-norm-attribute-score :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (relationship-score :initarg :relationship-score
                         :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-rx-norm-attribute-relationship-score
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-rx-norm-attribute-id :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (begin-offset :initarg :begin-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-rx-norm-attribute-begin-offset :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-offset :initarg :end-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-rx-norm-attribute-end-offset :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rx-norm-attribute-text :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (traits :initarg :traits :initform common-lisp:nil
                         :type
                         (common-lisp:or rx-norm-trait-list common-lisp:null)
                         :accessor struct-shape-rx-norm-attribute-traits :shape
                         "RxNormTraitList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rx-norm-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rx-norm-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rx-norm-attribute 'make-rx-norm-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rx-norm-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rx-norm-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-score))
      (common-lisp:list
       (common-lisp:cons "RelationshipScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset))
      (common-lisp:list
       (common-lisp:cons "BeginOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset))
      (common-lisp:list
       (common-lisp:cons "EndOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traits))
      (common-lisp:list
       (common-lisp:cons "Traits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rx-norm-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rx-norm-attribute-list ()
   '(trivial-types:proper-list rx-norm-attribute))
 (common-lisp:defun make-rx-norm-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rx-norm-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rx-norm-attribute-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rx-norm-concept common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rx-norm-concept-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rx-norm-concept-code :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-rx-norm-concept-score :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rx-norm-concept
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rx-norm-concept
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rx-norm-concept 'make-rx-norm-concept))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rx-norm-concept))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rx-norm-concept))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rx-norm-concept))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rx-norm-concept-list ()
   '(trivial-types:proper-list rx-norm-concept))
 (common-lisp:defun make-rx-norm-concept-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rx-norm-concept))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rx-norm-entity common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-rx-norm-entity-id :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or ontology-linking-bounded-length-string
                                         common-lisp:null)
                         :accessor struct-shape-rx-norm-entity-text :shape
                         "OntologyLinkingBoundedLengthString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type
                         (common-lisp:or rx-norm-entity-category
                                         common-lisp:null)
                         :accessor struct-shape-rx-norm-entity-category :shape
                         "RxNormEntityCategory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or rx-norm-entity-type common-lisp:null)
                         :accessor struct-shape-rx-norm-entity-type :shape
                         "RxNormEntityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-rx-norm-entity-score :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (begin-offset :initarg :begin-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-rx-norm-entity-begin-offset :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-offset :initarg :end-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-rx-norm-entity-end-offset :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or rx-norm-attribute-list
                                         common-lisp:null)
                         :accessor struct-shape-rx-norm-entity-attributes
                         :shape "RxNormAttributeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (traits :initarg :traits :initform common-lisp:nil
                         :type
                         (common-lisp:or rx-norm-trait-list common-lisp:null)
                         :accessor struct-shape-rx-norm-entity-traits :shape
                         "RxNormTraitList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rx-norm-concepts :initarg :rx-norm-concepts :initform
                         common-lisp:nil :type
                         (common-lisp:or rx-norm-concept-list common-lisp:null)
                         :accessor struct-shape-rx-norm-entity-rx-norm-concepts
                         :shape "RxNormConceptList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rx-norm-entity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rx-norm-entity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rx-norm-entity 'make-rx-norm-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rx-norm-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rx-norm-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset))
      (common-lisp:list
       (common-lisp:cons "BeginOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset))
      (common-lisp:list
       (common-lisp:cons "EndOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traits))
      (common-lisp:list
       (common-lisp:cons "Traits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rx-norm-concepts))
      (common-lisp:list
       (common-lisp:cons "RxNormConcepts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rx-norm-entity))
   common-lisp:nil))
(common-lisp:deftype rx-norm-entity-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rx-norm-entity-list ()
   '(trivial-types:proper-list rx-norm-entity))
 (common-lisp:defun make-rx-norm-entity-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rx-norm-entity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rx-norm-entity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rx-norm-trait common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or rx-norm-trait-name common-lisp:null)
                         :accessor struct-shape-rx-norm-trait-name :shape
                         "RxNormTraitName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-rx-norm-trait-score :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rx-norm-trait
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rx-norm-trait
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rx-norm-trait 'make-rx-norm-trait))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rx-norm-trait))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rx-norm-trait))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rx-norm-trait))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rx-norm-trait-list ()
   '(trivial-types:proper-list rx-norm-trait))
 (common-lisp:defun make-rx-norm-trait-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rx-norm-trait))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rx-norm-trait-name () 'common-lisp:string)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass snomedctattribute common-lisp:nil
                       ((category :initarg :category :initform common-lisp:nil
                         :type
                         (common-lisp:or snomedctentity-category
                                         common-lisp:null)
                         :accessor struct-shape-snomedctattribute-category
                         :shape "SNOMEDCTEntityCategory" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or snomedctattribute-type
                                         common-lisp:null)
                         :accessor struct-shape-snomedctattribute-type :shape
                         "SNOMEDCTAttributeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-snomedctattribute-score :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (relationship-score :initarg :relationship-score
                         :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-snomedctattribute-relationship-score
                         :shape "Float" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relationship-type :initarg :relationship-type
                         :initform common-lisp:nil :type
                         (common-lisp:or snomedctrelationship-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-snomedctattribute-relationship-type
                         :shape "SNOMEDCTRelationshipType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-snomedctattribute-id :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (begin-offset :initarg :begin-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-snomedctattribute-begin-offset :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-offset :initarg :end-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-snomedctattribute-end-offset :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snomedctattribute-text :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (traits :initarg :traits :initform common-lisp:nil
                         :type
                         (common-lisp:or snomedcttrait-list common-lisp:null)
                         :accessor struct-shape-snomedctattribute-traits :shape
                         "SNOMEDCTTraitList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snomedctconcepts :initarg :snomedctconcepts :initform
                         common-lisp:nil :type
                         (common-lisp:or snomedctconcept-list common-lisp:null)
                         :accessor
                         struct-shape-snomedctattribute-snomedctconcepts :shape
                         "SNOMEDCTConceptList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snomedctattribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snomedctattribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'snomedctattribute 'make-snomedctattribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snomedctattribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snomedctattribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-score))
      (common-lisp:list
       (common-lisp:cons "RelationshipScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-type))
      (common-lisp:list
       (common-lisp:cons "RelationshipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset))
      (common-lisp:list
       (common-lisp:cons "BeginOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset))
      (common-lisp:list
       (common-lisp:cons "EndOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traits))
      (common-lisp:list
       (common-lisp:cons "Traits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snomedctconcepts))
      (common-lisp:list
       (common-lisp:cons "SNOMEDCTConcepts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snomedctattribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype snomedctattribute-list ()
   '(trivial-types:proper-list snomedctattribute))
 (common-lisp:defun make-snomedctattribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snomedctattribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype snomedctattribute-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass snomedctconcept common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snomedctconcept-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snomedctconcept-code :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-snomedctconcept-score :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snomedctconcept
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snomedctconcept
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'snomedctconcept 'make-snomedctconcept))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snomedctconcept))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snomedctconcept))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snomedctconcept))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype snomedctconcept-list ()
   '(trivial-types:proper-list snomedctconcept))
 (common-lisp:defun make-snomedctconcept-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snomedctconcept))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass snomedctdetails common-lisp:nil
                       ((edition :initarg :edition :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-snomedctdetails-edition :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (language :initarg :language :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-snomedctdetails-language :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-date :initarg :version-date :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-snomedctdetails-version-date :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snomedctdetails
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snomedctdetails
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'snomedctdetails 'make-snomedctdetails))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snomedctdetails))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snomedctdetails))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edition))
      (common-lisp:list
       (common-lisp:cons "Edition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-date))
      (common-lisp:list
       (common-lisp:cons "VersionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snomedctdetails))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snomedctentity common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-snomedctentity-id :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (text :initarg :text :initform common-lisp:nil :type
                         (common-lisp:or ontology-linking-bounded-length-string
                                         common-lisp:null)
                         :accessor struct-shape-snomedctentity-text :shape
                         "OntologyLinkingBoundedLengthString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (category :initarg :category :initform common-lisp:nil
                         :type
                         (common-lisp:or snomedctentity-category
                                         common-lisp:null)
                         :accessor struct-shape-snomedctentity-category :shape
                         "SNOMEDCTEntityCategory" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or snomedctentity-type common-lisp:null)
                         :accessor struct-shape-snomedctentity-type :shape
                         "SNOMEDCTEntityType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-snomedctentity-score :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (begin-offset :initarg :begin-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-snomedctentity-begin-offset :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-offset :initarg :end-offset :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-snomedctentity-end-offset :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or snomedctattribute-list
                                         common-lisp:null)
                         :accessor struct-shape-snomedctentity-attributes
                         :shape "SNOMEDCTAttributeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (traits :initarg :traits :initform common-lisp:nil
                         :type
                         (common-lisp:or snomedcttrait-list common-lisp:null)
                         :accessor struct-shape-snomedctentity-traits :shape
                         "SNOMEDCTTraitList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snomedctconcepts :initarg :snomedctconcepts :initform
                         common-lisp:nil :type
                         (common-lisp:or snomedctconcept-list common-lisp:null)
                         :accessor struct-shape-snomedctentity-snomedctconcepts
                         :shape "SNOMEDCTConceptList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snomedctentity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snomedctentity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'snomedctentity 'make-snomedctentity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snomedctentity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snomedctentity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "Text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-offset))
      (common-lisp:list
       (common-lisp:cons "BeginOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-offset))
      (common-lisp:list
       (common-lisp:cons "EndOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traits))
      (common-lisp:list
       (common-lisp:cons "Traits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snomedctconcepts))
      (common-lisp:list
       (common-lisp:cons "SNOMEDCTConcepts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snomedctentity))
   common-lisp:nil))
(common-lisp:deftype snomedctentity-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype snomedctentity-list ()
   '(trivial-types:proper-list snomedctentity))
 (common-lisp:defun make-snomedctentity-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snomedctentity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype snomedctentity-type () 'common-lisp:string)
(common-lisp:deftype snomedctrelationship-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass snomedcttrait common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or snomedcttrait-name common-lisp:null)
                         :accessor struct-shape-snomedcttrait-name :shape
                         "SNOMEDCTTraitName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-snomedcttrait-score :shape "Float"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snomedcttrait
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snomedcttrait
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'snomedcttrait 'make-snomedcttrait))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snomedcttrait))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snomedcttrait))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snomedcttrait))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype snomedcttrait-list ()
   '(trivial-types:proper-list snomedcttrait))
 (common-lisp:defun make-snomedcttrait-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list snomedcttrait))
   aws-sdk/generator/shape::members))
(common-lisp:deftype snomedcttrait-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (comprehendmedical-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:progn
 (common-lisp:defclass start-entities-detection-v2job-request common-lisp:nil
                       ((input-data-config :initarg :input-data-config
                         :initform
                         (common-lisp:error ":input-data-config is required")
                         :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         struct-shape-start-entities-detection-v2job-request-input-data-config
                         :shape "InputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-data-config :initarg :output-data-config
                         :initform
                         (common-lisp:error ":output-data-config is required")
                         :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor
                         struct-shape-start-entities-detection-v2job-request-output-data-config
                         :shape "OutputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform
                         (common-lisp:error
                          ":data-access-role-arn is required")
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         struct-shape-start-entities-detection-v2job-request-data-access-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or job-name common-lisp:null)
                         :accessor
                         struct-shape-start-entities-detection-v2job-request-job-name
                         :shape "JobName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-entities-detection-v2job-request-client-request-token
                         :shape "ClientRequestTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kmskey :initarg :kmskey :initform common-lisp:nil
                         :type (common-lisp:or kmskey common-lisp:null)
                         :accessor
                         struct-shape-start-entities-detection-v2job-request-kmskey
                         :shape "KMSKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-start-entities-detection-v2job-request-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-entities-detection-v2job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-entities-detection-v2job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-entities-detection-v2job-request
                    'make-start-entities-detection-v2job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-entities-detection-v2job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-entities-detection-v2job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey))
      (common-lisp:list
       (common-lisp:cons "KMSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-entities-detection-v2job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-entities-detection-v2job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-start-entities-detection-v2job-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-entities-detection-v2job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-entities-detection-v2job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-entities-detection-v2job-response
                    'make-start-entities-detection-v2job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-entities-detection-v2job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-entities-detection-v2job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-entities-detection-v2job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-icd10cminference-job-request common-lisp:nil
                       ((input-data-config :initarg :input-data-config
                         :initform
                         (common-lisp:error ":input-data-config is required")
                         :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         struct-shape-start-icd10cminference-job-request-input-data-config
                         :shape "InputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-data-config :initarg :output-data-config
                         :initform
                         (common-lisp:error ":output-data-config is required")
                         :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor
                         struct-shape-start-icd10cminference-job-request-output-data-config
                         :shape "OutputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform
                         (common-lisp:error
                          ":data-access-role-arn is required")
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         struct-shape-start-icd10cminference-job-request-data-access-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or job-name common-lisp:null)
                         :accessor
                         struct-shape-start-icd10cminference-job-request-job-name
                         :shape "JobName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-icd10cminference-job-request-client-request-token
                         :shape "ClientRequestTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kmskey :initarg :kmskey :initform common-lisp:nil
                         :type (common-lisp:or kmskey common-lisp:null)
                         :accessor
                         struct-shape-start-icd10cminference-job-request-kmskey
                         :shape "KMSKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-start-icd10cminference-job-request-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-icd10cminference-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-icd10cminference-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-icd10cminference-job-request
                    'make-start-icd10cminference-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-icd10cminference-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-icd10cminference-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey))
      (common-lisp:list
       (common-lisp:cons "KMSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-icd10cminference-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-icd10cminference-job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-start-icd10cminference-job-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-icd10cminference-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-icd10cminference-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-icd10cminference-job-response
                    'make-start-icd10cminference-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-icd10cminference-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-icd10cminference-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-icd10cminference-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-phidetection-job-request common-lisp:nil
                       ((input-data-config :initarg :input-data-config
                         :initform
                         (common-lisp:error ":input-data-config is required")
                         :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         struct-shape-start-phidetection-job-request-input-data-config
                         :shape "InputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-data-config :initarg :output-data-config
                         :initform
                         (common-lisp:error ":output-data-config is required")
                         :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor
                         struct-shape-start-phidetection-job-request-output-data-config
                         :shape "OutputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform
                         (common-lisp:error
                          ":data-access-role-arn is required")
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         struct-shape-start-phidetection-job-request-data-access-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or job-name common-lisp:null)
                         :accessor
                         struct-shape-start-phidetection-job-request-job-name
                         :shape "JobName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-phidetection-job-request-client-request-token
                         :shape "ClientRequestTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kmskey :initarg :kmskey :initform common-lisp:nil
                         :type (common-lisp:or kmskey common-lisp:null)
                         :accessor
                         struct-shape-start-phidetection-job-request-kmskey
                         :shape "KMSKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-start-phidetection-job-request-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-phidetection-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-phidetection-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-phidetection-job-request
                    'make-start-phidetection-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-phidetection-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-phidetection-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey))
      (common-lisp:list
       (common-lisp:cons "KMSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-phidetection-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-phidetection-job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-start-phidetection-job-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-phidetection-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-phidetection-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-phidetection-job-response
                    'make-start-phidetection-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-phidetection-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-phidetection-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-phidetection-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-rx-norm-inference-job-request common-lisp:nil
                       ((input-data-config :initarg :input-data-config
                         :initform
                         (common-lisp:error ":input-data-config is required")
                         :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         struct-shape-start-rx-norm-inference-job-request-input-data-config
                         :shape "InputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-data-config :initarg :output-data-config
                         :initform
                         (common-lisp:error ":output-data-config is required")
                         :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor
                         struct-shape-start-rx-norm-inference-job-request-output-data-config
                         :shape "OutputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform
                         (common-lisp:error
                          ":data-access-role-arn is required")
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         struct-shape-start-rx-norm-inference-job-request-data-access-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or job-name common-lisp:null)
                         :accessor
                         struct-shape-start-rx-norm-inference-job-request-job-name
                         :shape "JobName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-rx-norm-inference-job-request-client-request-token
                         :shape "ClientRequestTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kmskey :initarg :kmskey :initform common-lisp:nil
                         :type (common-lisp:or kmskey common-lisp:null)
                         :accessor
                         struct-shape-start-rx-norm-inference-job-request-kmskey
                         :shape "KMSKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-start-rx-norm-inference-job-request-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-rx-norm-inference-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-rx-norm-inference-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-rx-norm-inference-job-request
                    'make-start-rx-norm-inference-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-rx-norm-inference-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-rx-norm-inference-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey))
      (common-lisp:list
       (common-lisp:cons "KMSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-rx-norm-inference-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-rx-norm-inference-job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-start-rx-norm-inference-job-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-rx-norm-inference-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-rx-norm-inference-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-rx-norm-inference-job-response
                    'make-start-rx-norm-inference-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-rx-norm-inference-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-rx-norm-inference-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-rx-norm-inference-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-snomedctinference-job-request common-lisp:nil
                       ((input-data-config :initarg :input-data-config
                         :initform
                         (common-lisp:error ":input-data-config is required")
                         :type
                         (common-lisp:or input-data-config common-lisp:null)
                         :accessor
                         struct-shape-start-snomedctinference-job-request-input-data-config
                         :shape "InputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-data-config :initarg :output-data-config
                         :initform
                         (common-lisp:error ":output-data-config is required")
                         :type
                         (common-lisp:or output-data-config common-lisp:null)
                         :accessor
                         struct-shape-start-snomedctinference-job-request-output-data-config
                         :shape "OutputDataConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-access-role-arn :initarg :data-access-role-arn
                         :initform
                         (common-lisp:error
                          ":data-access-role-arn is required")
                         :type (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         struct-shape-start-snomedctinference-job-request-data-access-role-arn
                         :shape "IamRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or job-name common-lisp:null)
                         :accessor
                         struct-shape-start-snomedctinference-job-request-job-name
                         :shape "JobName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :initform common-lisp:nil :type
                         (common-lisp:or client-request-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-snomedctinference-job-request-client-request-token
                         :shape "ClientRequestTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kmskey :initarg :kmskey :initform common-lisp:nil
                         :type (common-lisp:or kmskey common-lisp:null)
                         :accessor
                         struct-shape-start-snomedctinference-job-request-kmskey
                         :shape "KMSKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language-code :initarg :language-code :initform
                         (common-lisp:error ":language-code is required") :type
                         (common-lisp:or language-code common-lisp:null)
                         :accessor
                         struct-shape-start-snomedctinference-job-request-language-code
                         :shape "LanguageCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-snomedctinference-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-snomedctinference-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-snomedctinference-job-request
                    'make-start-snomedctinference-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-snomedctinference-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-snomedctinference-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kmskey))
      (common-lisp:list
       (common-lisp:cons "KMSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-snomedctinference-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-snomedctinference-job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-start-snomedctinference-job-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-snomedctinference-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-snomedctinference-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-snomedctinference-job-response
                    'make-start-snomedctinference-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-snomedctinference-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-snomedctinference-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-snomedctinference-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-entities-detection-v2job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-stop-entities-detection-v2job-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-entities-detection-v2job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-entities-detection-v2job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-entities-detection-v2job-request
                    'make-stop-entities-detection-v2job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-entities-detection-v2job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-entities-detection-v2job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-entities-detection-v2job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-entities-detection-v2job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-stop-entities-detection-v2job-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-entities-detection-v2job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-entities-detection-v2job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-entities-detection-v2job-response
                    'make-stop-entities-detection-v2job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-entities-detection-v2job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-entities-detection-v2job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-entities-detection-v2job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-icd10cminference-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-stop-icd10cminference-job-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-icd10cminference-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-icd10cminference-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-icd10cminference-job-request
                    'make-stop-icd10cminference-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-icd10cminference-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-icd10cminference-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-icd10cminference-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-icd10cminference-job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-stop-icd10cminference-job-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-icd10cminference-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-icd10cminference-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-icd10cminference-job-response
                    'make-stop-icd10cminference-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-icd10cminference-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-icd10cminference-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-icd10cminference-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-phidetection-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-stop-phidetection-job-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-phidetection-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-phidetection-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-phidetection-job-request
                    'make-stop-phidetection-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-phidetection-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-phidetection-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-phidetection-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-phidetection-job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-stop-phidetection-job-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-phidetection-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-phidetection-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-phidetection-job-response
                    'make-stop-phidetection-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-phidetection-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-phidetection-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-phidetection-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-rx-norm-inference-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-stop-rx-norm-inference-job-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-rx-norm-inference-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-rx-norm-inference-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-rx-norm-inference-job-request
                    'make-stop-rx-norm-inference-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-rx-norm-inference-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-rx-norm-inference-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-rx-norm-inference-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-rx-norm-inference-job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-stop-rx-norm-inference-job-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-rx-norm-inference-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-rx-norm-inference-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-rx-norm-inference-job-response
                    'make-stop-rx-norm-inference-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-rx-norm-inference-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-rx-norm-inference-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-rx-norm-inference-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-snomedctinference-job-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":job-id is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-stop-snomedctinference-job-request-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-snomedctinference-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-snomedctinference-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-snomedctinference-job-request
                    'make-stop-snomedctinference-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-snomedctinference-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-snomedctinference-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-snomedctinference-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-snomedctinference-job-response common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or job-id common-lisp:null)
                         :accessor
                         struct-shape-stop-snomedctinference-job-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-snomedctinference-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-snomedctinference-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-snomedctinference-job-response
                    'make-stop-snomedctinference-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-snomedctinference-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-snomedctinference-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-snomedctinference-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition text-size-limit-exceeded-exception
     (comprehendmedical-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       text-size-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'text-size-limit-exceeded-exception
                    'text-size-limit-exceeded-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (comprehendmedical-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defclass trait common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or attribute-name common-lisp:null)
                         :accessor struct-shape-trait-name :shape
                         "AttributeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or float common-lisp:null) :accessor
                         struct-shape-trait-score :shape "Float" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trait
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trait
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trait 'make-trait))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trait))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trait))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trait))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trait-list () '(trivial-types:proper-list trait))
 (common-lisp:defun make-trait-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trait))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unmapped-attribute common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor struct-shape-unmapped-attribute-type :shape
                         "EntityType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attribute :initarg :attribute :initform
                         common-lisp:nil :type
                         (common-lisp:or attribute common-lisp:null) :accessor
                         struct-shape-unmapped-attribute-attribute :shape
                         "Attribute" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unmapped-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unmapped-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unmapped-attribute 'make-unmapped-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unmapped-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unmapped-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unmapped-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unmapped-attribute-list ()
   '(trivial-types:proper-list unmapped-attribute))
 (common-lisp:defun make-unmapped-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unmapped-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (comprehendmedical-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun describe-entities-detection-v2job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-entities-detection-v2job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeEntitiesDetectionV2Job"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-entities-detection-v2job))
(common-lisp:progn
 (common-lisp:defun describe-icd10cminference-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-icd10cminference-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeICD10CMInferenceJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-icd10cminference-job))
(common-lisp:progn
 (common-lisp:defun describe-phidetection-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-phidetection-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "DescribePHIDetectionJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-phidetection-job))
(common-lisp:progn
 (common-lisp:defun describe-rx-norm-inference-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-rx-norm-inference-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeRxNormInferenceJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-rx-norm-inference-job))
(common-lisp:progn
 (common-lisp:defun describe-snomedctinference-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-snomedctinference-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeSNOMEDCTInferenceJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-snomedctinference-job))
(common-lisp:progn
 (common-lisp:defun detect-entities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key text)
   (common-lisp:declare (common-lisp:ignorable text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-entities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "DetectEntities"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detect-entities))
(common-lisp:progn
 (common-lisp:defun detect-entities-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key text)
   (common-lisp:declare (common-lisp:ignorable text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-entities-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "DetectEntitiesV2"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detect-entities-v2))
(common-lisp:progn
 (common-lisp:defun detect-phi
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key text)
   (common-lisp:declare (common-lisp:ignorable text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-phirequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "DetectPHI"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'detect-phi))
(common-lisp:progn
 (common-lisp:defun infer-icd10cm
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key text)
   (common-lisp:declare (common-lisp:ignorable text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-infer-icd10cmrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "InferICD10CM"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'infer-icd10cm))
(common-lisp:progn
 (common-lisp:defun infer-rx-norm
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key text)
   (common-lisp:declare (common-lisp:ignorable text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-infer-rx-norm-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "InferRxNorm"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'infer-rx-norm))
(common-lisp:progn
 (common-lisp:defun infer-snomedct
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key text)
   (common-lisp:declare (common-lisp:ignorable text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-infer-snomedctrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "InferSNOMEDCT"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'infer-snomedct))
(common-lisp:progn
 (common-lisp:defun list-entities-detection-v2jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-entities-detection-v2jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "ListEntitiesDetectionV2Jobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-entities-detection-v2jobs))
(common-lisp:progn
 (common-lisp:defun list-icd10cminference-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-icd10cminference-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "ListICD10CMInferenceJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-icd10cminference-jobs))
(common-lisp:progn
 (common-lisp:defun list-phidetection-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-phidetection-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "ListPHIDetectionJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-phidetection-jobs))
(common-lisp:progn
 (common-lisp:defun list-rx-norm-inference-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-rx-norm-inference-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "ListRxNormInferenceJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-rx-norm-inference-jobs))
(common-lisp:progn
 (common-lisp:defun list-snomedctinference-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-snomedctinference-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "ListSNOMEDCTInferenceJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-snomedctinference-jobs))
(common-lisp:progn
 (common-lisp:defun start-entities-detection-v2job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-data-config output-data-config
                     data-access-role-arn job-name client-request-token kmskey
                     language-code)
   (common-lisp:declare
    (common-lisp:ignorable input-data-config output-data-config
     data-access-role-arn job-name client-request-token kmskey language-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-entities-detection-v2job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "StartEntitiesDetectionV2Job"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-entities-detection-v2job))
(common-lisp:progn
 (common-lisp:defun start-icd10cminference-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-data-config output-data-config
                     data-access-role-arn job-name client-request-token kmskey
                     language-code)
   (common-lisp:declare
    (common-lisp:ignorable input-data-config output-data-config
     data-access-role-arn job-name client-request-token kmskey language-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-icd10cminference-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "StartICD10CMInferenceJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-icd10cminference-job))
(common-lisp:progn
 (common-lisp:defun start-phidetection-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-data-config output-data-config
                     data-access-role-arn job-name client-request-token kmskey
                     language-code)
   (common-lisp:declare
    (common-lisp:ignorable input-data-config output-data-config
     data-access-role-arn job-name client-request-token kmskey language-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-phidetection-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "StartPHIDetectionJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-phidetection-job))
(common-lisp:progn
 (common-lisp:defun start-rx-norm-inference-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-data-config output-data-config
                     data-access-role-arn job-name client-request-token kmskey
                     language-code)
   (common-lisp:declare
    (common-lisp:ignorable input-data-config output-data-config
     data-access-role-arn job-name client-request-token kmskey language-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-rx-norm-inference-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "StartRxNormInferenceJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-rx-norm-inference-job))
(common-lisp:progn
 (common-lisp:defun start-snomedctinference-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-data-config output-data-config
                     data-access-role-arn job-name client-request-token kmskey
                     language-code)
   (common-lisp:declare
    (common-lisp:ignorable input-data-config output-data-config
     data-access-role-arn job-name client-request-token kmskey language-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-snomedctinference-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "StartSNOMEDCTInferenceJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-snomedctinference-job))
(common-lisp:progn
 (common-lisp:defun stop-entities-detection-v2job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-entities-detection-v2job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "StopEntitiesDetectionV2Job"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-entities-detection-v2job))
(common-lisp:progn
 (common-lisp:defun stop-icd10cminference-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-icd10cminference-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "StopICD10CMInferenceJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-icd10cminference-job))
(common-lisp:progn
 (common-lisp:defun stop-phidetection-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-phidetection-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "StopPHIDetectionJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-phidetection-job))
(common-lisp:progn
 (common-lisp:defun stop-rx-norm-inference-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-rx-norm-inference-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "StopRxNormInferenceJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-rx-norm-inference-job))
(common-lisp:progn
 (common-lisp:defun stop-snomedctinference-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-snomedctinference-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'comprehendmedical-request aws-sdk/generator/operation::input "POST"
        "/" "StopSNOMEDCTInferenceJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-snomedctinference-job))
