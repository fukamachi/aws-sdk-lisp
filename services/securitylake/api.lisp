;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/securitylake/api (:use)
                             (:nicknames #:aws/securitylake)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/securitylake/api)
(common-lisp:progn
 (common-lisp:define-condition securitylake-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'securitylake-error))
(common-lisp:progn
 (common-lisp:defclass securitylake-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "securitylake" :api-version
                        "2018-05-10" :host-prefix "securitylake" :signing-name
                        "securitylake" :global-host common-lisp:nil))
 (common-lisp:export 'securitylake-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (securitylake-error)
     ((error-code :initarg :error-code :initform common-lisp:nil :reader
       access-denied-exception-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception
                    'access-denied-exception-error-code
                    'access-denied-exception-message)))
(common-lisp:deftype access-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype access-type-list ()
   '(trivial-types:proper-list access-type))
 (common-lisp:defun make-access-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype account-list ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun make-account-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-identity common-lisp:nil
                       ((external-id :initarg :external-id :initform
                         (common-lisp:error ":externalid is required") :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor struct-shape-aws-identity-external-id :shape
                         "ExternalId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (principal :initarg :principal :initform
                         (common-lisp:error ":principal is required") :type
                         (common-lisp:or aws-principal common-lisp:null)
                         :accessor struct-shape-aws-identity-principal :shape
                         "AwsPrincipal" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-identity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aws-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'aws-identity 'make-aws-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "externalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-log-source-configuration common-lisp:nil
                       ((accounts :initarg :accounts :initform common-lisp:nil
                         :type (common-lisp:or account-list common-lisp:null)
                         :accessor
                         struct-shape-aws-log-source-configuration-accounts
                         :shape "AccountList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regions :initarg :regions :initform
                         (common-lisp:error ":regions is required") :type
                         (common-lisp:or region-list common-lisp:null)
                         :accessor
                         struct-shape-aws-log-source-configuration-regions
                         :shape "RegionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-name :initarg :source-name :initform
                         (common-lisp:error ":sourcename is required") :type
                         (common-lisp:or aws-log-source-name common-lisp:null)
                         :accessor
                         struct-shape-aws-log-source-configuration-source-name
                         :shape "AwsLogSourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-version :initarg :source-version :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-log-source-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-aws-log-source-configuration-source-version
                         :shape "AwsLogSourceVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-log-source-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aws-log-source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-log-source-configuration
                    'make-aws-log-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-log-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-log-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "sourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "sourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-log-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-log-source-configuration-list ()
   '(trivial-types:proper-list aws-log-source-configuration))
 (common-lisp:defun make-aws-log-source-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aws-log-source-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-log-source-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aws-log-source-resource common-lisp:nil
                       ((source-name :initarg :source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-log-source-name common-lisp:null)
                         :accessor
                         struct-shape-aws-log-source-resource-source-name
                         :shape "AwsLogSourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-version :initarg :source-version :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-log-source-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-aws-log-source-resource-source-version
                         :shape "AwsLogSourceVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-log-source-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aws-log-source-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aws-log-source-resource 'make-aws-log-source-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aws-log-source-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aws-log-source-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "sourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "sourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aws-log-source-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aws-log-source-resource-list ()
   '(trivial-types:proper-list aws-log-source-resource))
 (common-lisp:defun make-aws-log-source-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-log-source-resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-log-source-version () 'common-lisp:string)
(common-lisp:deftype aws-principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       conflict-exception-resource-name)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-name
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass create-aws-log-source-request common-lisp:nil
                       ((sources :initarg :sources :initform
                         (common-lisp:error ":sources is required") :type
                         (common-lisp:or aws-log-source-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-aws-log-source-request-sources
                         :shape "AwsLogSourceConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-aws-log-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-aws-log-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-aws-log-source-request
                    'make-create-aws-log-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-aws-log-source-response common-lisp:nil
                       ((failed :initarg :failed :initform common-lisp:nil
                         :type (common-lisp:or account-list common-lisp:null)
                         :accessor
                         struct-shape-create-aws-log-source-response-failed
                         :shape "AccountList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-aws-log-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-aws-log-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-aws-log-source-response
                    'make-create-aws-log-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-aws-log-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-log-source-request common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         (common-lisp:error ":configuration is required") :type
                         (common-lisp:or custom-log-source-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-log-source-request-configuration
                         :shape "CustomLogSourceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (event-classes :initarg :event-classes :initform
                         common-lisp:nil :type
                         (common-lisp:or ocsf-event-class-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-log-source-request-event-classes
                         :shape "OcsfEventClassList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-name :initarg :source-name :initform
                         (common-lisp:error ":sourcename is required") :type
                         (common-lisp:or custom-log-source-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-log-source-request-source-name
                         :shape "CustomLogSourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-version :initarg :source-version :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-log-source-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-log-source-request-source-version
                         :shape "CustomLogSourceVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-log-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-log-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-log-source-request
                    'make-create-custom-log-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-classes))
      (common-lisp:list
       (common-lisp:cons "eventClasses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "sourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "sourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-log-source-response common-lisp:nil
                       ((source :initarg :source :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-log-source-resource
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-custom-log-source-response-source
                         :shape "CustomLogSourceResource" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-log-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-log-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-log-source-response
                    'make-create-custom-log-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-log-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-lake-exception-subscription-request
                       common-lisp:nil
                       ((exception-time-to-live :initarg
                         :exception-time-to-live :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          create-data-lake-exception-subscription-request-exception-time-to-live-long
                          common-lisp:null)
                         :accessor
                         struct-shape-create-data-lake-exception-subscription-request-exception-time-to-live
                         :shape
                         "CreateDataLakeExceptionSubscriptionRequestExceptionTimeToLiveLong"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (notification-endpoint :initarg :notification-endpoint
                         :initform
                         (common-lisp:error
                          ":notificationendpoint is required")
                         :type (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         struct-shape-create-data-lake-exception-subscription-request-notification-endpoint
                         :shape "SafeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-protocol :initarg :subscription-protocol
                         :initform
                         (common-lisp:error
                          ":subscriptionprotocol is required")
                         :type
                         (common-lisp:or subscription-protocol
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-lake-exception-subscription-request-subscription-protocol
                         :shape "SubscriptionProtocol" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-lake-exception-subscription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-lake-exception-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-lake-exception-subscription-request
                    'make-create-data-lake-exception-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-exception-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-exception-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exception-time-to-live))
      (common-lisp:list
       (common-lisp:cons "exceptionTimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-endpoint))
      (common-lisp:list
       (common-lisp:cons "notificationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-protocol))
      (common-lisp:list
       (common-lisp:cons "subscriptionProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-exception-subscription-request))
   common-lisp:nil))
(common-lisp:deftype create-data-lake-exception-subscription-request-exception-time-to-live-long
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-data-lake-exception-subscription-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-lake-exception-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-lake-exception-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-lake-exception-subscription-response
                    'make-create-data-lake-exception-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-exception-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-exception-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-exception-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-lake-organization-configuration-request
                       common-lisp:nil
                       ((auto-enable-new-account :initarg
                         :auto-enable-new-account :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          data-lake-auto-enable-new-account-configuration-list
                          common-lisp:null)
                         :accessor
                         struct-shape-create-data-lake-organization-configuration-request-auto-enable-new-account
                         :shape "DataLakeAutoEnableNewAccountConfigurationList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-lake-organization-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-lake-organization-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-lake-organization-configuration-request
                    'make-create-data-lake-organization-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-organization-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-new-account))
      (common-lisp:list
       (common-lisp:cons "autoEnableNewAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-lake-organization-configuration-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-lake-organization-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-lake-organization-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-lake-organization-configuration-response
                    'make-create-data-lake-organization-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-lake-request common-lisp:nil
                       ((configurations :initarg :configurations :initform
                         (common-lisp:error ":configurations is required")
                         :type
                         (common-lisp:or data-lake-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-lake-request-configurations
                         :shape "DataLakeConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (meta-store-manager-role-arn :initarg
                         :meta-store-manager-role-arn :initform
                         (common-lisp:error
                          ":metastoremanagerrolearn is required")
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-data-lake-request-meta-store-manager-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-data-lake-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-lake-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-lake-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-lake-request 'make-create-data-lake-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'meta-store-manager-role-arn))
      (common-lisp:list
       (common-lisp:cons "metaStoreManagerRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-lake-response common-lisp:nil
                       ((data-lakes :initarg :data-lakes :initform
                         common-lisp:nil :type
                         (common-lisp:or data-lake-resource-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-lake-response-data-lakes
                         :shape "DataLakeResourceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-lake-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-lake-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-lake-response
                    'make-create-data-lake-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-lakes))
      (common-lisp:list
       (common-lisp:cons "dataLakes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-lake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-subscriber-notification-request common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         (common-lisp:error ":configuration is required") :type
                         (common-lisp:or notification-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscriber-notification-request-configuration
                         :shape "NotificationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscriber-id :initarg :subscriber-id :initform
                         (common-lisp:error ":subscriberid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-create-subscriber-notification-request-subscriber-id
                         :shape "UUID" :location "uri" :location-name
                         "subscriberId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-subscriber-notification-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-subscriber-notification-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-subscriber-notification-request
                    'make-create-subscriber-notification-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-notification-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-notification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-notification-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-subscriber-notification-response common-lisp:nil
                       ((subscriber-endpoint :initarg :subscriber-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         struct-shape-create-subscriber-notification-response-subscriber-endpoint
                         :shape "SafeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-subscriber-notification-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-subscriber-notification-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-subscriber-notification-response
                    'make-create-subscriber-notification-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-notification-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-notification-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-endpoint))
      (common-lisp:list
       (common-lisp:cons "subscriberEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-notification-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-subscriber-request common-lisp:nil
                       ((access-types :initarg :access-types :initform
                         common-lisp:nil :type
                         (common-lisp:or access-type-list common-lisp:null)
                         :accessor
                         struct-shape-create-subscriber-request-access-types
                         :shape "AccessTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sources :initarg :sources :initform
                         (common-lisp:error ":sources is required") :type
                         (common-lisp:or log-source-resource-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-subscriber-request-sources :shape
                         "LogSourceResourceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscriber-description :initarg
                         :subscriber-description :initform common-lisp:nil
                         :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-create-subscriber-request-subscriber-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscriber-identity :initarg :subscriber-identity
                         :initform
                         (common-lisp:error ":subscriberidentity is required")
                         :type (common-lisp:or aws-identity common-lisp:null)
                         :accessor
                         struct-shape-create-subscriber-request-subscriber-identity
                         :shape "AwsIdentity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscriber-name :initarg :subscriber-name :initform
                         (common-lisp:error ":subscribername is required")
                         :type
                         (common-lisp:or
                          create-subscriber-request-subscriber-name-string
                          common-lisp:null)
                         :accessor
                         struct-shape-create-subscriber-request-subscriber-name
                         :shape "CreateSubscriberRequestSubscriberNameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-subscriber-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-subscriber-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-subscriber-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-subscriber-request
                    'make-create-subscriber-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-types))
      (common-lisp:list
       (common-lisp:cons "accessTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscriber-description))
      (common-lisp:list
       (common-lisp:cons "subscriberDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-identity))
      (common-lisp:list
       (common-lisp:cons "subscriberIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-name))
      (common-lisp:list
       (common-lisp:cons "subscriberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-request))
   common-lisp:nil))
(common-lisp:deftype create-subscriber-request-subscriber-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-subscriber-response common-lisp:nil
                       ((subscriber :initarg :subscriber :initform
                         common-lisp:nil :type
                         (common-lisp:or subscriber-resource common-lisp:null)
                         :accessor
                         struct-shape-create-subscriber-response-subscriber
                         :shape "SubscriberResource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-subscriber-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-subscriber-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-subscriber-response
                    'make-create-subscriber-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber))
      (common-lisp:list
       (common-lisp:cons "subscriber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-subscriber-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-log-source-attributes common-lisp:nil
                       ((crawler-arn :initarg :crawler-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-custom-log-source-attributes-crawler-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-arn :initarg :database-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-custom-log-source-attributes-database-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-arn :initarg :table-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-custom-log-source-attributes-table-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-log-source-attributes
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-log-source-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-log-source-attributes
                    'make-custom-log-source-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-arn))
      (common-lisp:list
       (common-lisp:cons "crawlerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-arn))
      (common-lisp:list
       (common-lisp:cons "databaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-arn))
      (common-lisp:list
       (common-lisp:cons "tableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-log-source-configuration common-lisp:nil
                       ((crawler-configuration :initarg :crawler-configuration
                         :initform
                         (common-lisp:error
                          ":crawlerconfiguration is required")
                         :type
                         (common-lisp:or
                          custom-log-source-crawler-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-custom-log-source-configuration-crawler-configuration
                         :shape "CustomLogSourceCrawlerConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (provider-identity :initarg :provider-identity
                         :initform
                         (common-lisp:error ":provideridentity is required")
                         :type (common-lisp:or aws-identity common-lisp:null)
                         :accessor
                         struct-shape-custom-log-source-configuration-provider-identity
                         :shape "AwsIdentity" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-log-source-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-log-source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-log-source-configuration
                    'make-custom-log-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawler-configuration))
      (common-lisp:list
       (common-lisp:cons "crawlerConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-identity))
      (common-lisp:list
       (common-lisp:cons "providerIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-log-source-crawler-configuration common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-custom-log-source-crawler-configuration-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-log-source-crawler-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'custom-log-source-crawler-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-log-source-crawler-configuration
                    'make-custom-log-source-crawler-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-crawler-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-crawler-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-crawler-configuration))
   common-lisp:nil))
(common-lisp:deftype custom-log-source-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass custom-log-source-provider common-lisp:nil
                       ((location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or s3uri common-lisp:null)
                         :accessor
                         struct-shape-custom-log-source-provider-location
                         :shape "S3URI" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-custom-log-source-provider-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-log-source-provider
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-log-source-provider
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-log-source-provider
                    'make-custom-log-source-provider))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-provider))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-provider))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-provider))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-log-source-resource common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-log-source-attributes
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-log-source-resource-attributes
                         :shape "CustomLogSourceAttributes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (provider :initarg :provider :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-log-source-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-log-source-resource-provider
                         :shape "CustomLogSourceProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-name :initarg :source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-log-source-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-log-source-resource-source-name
                         :shape "CustomLogSourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-version :initarg :source-version :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-log-source-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-log-source-resource-source-version
                         :shape "CustomLogSourceVersion" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-log-source-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-log-source-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-log-source-resource
                    'make-custom-log-source-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "sourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "sourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-log-source-resource))
   common-lisp:nil))
(common-lisp:deftype custom-log-source-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-lake-auto-enable-new-account-configuration
                       common-lisp:nil
                       ((region :initarg :region :initform
                         (common-lisp:error ":region is required") :type
                         (common-lisp:or region common-lisp:null) :accessor
                         struct-shape-data-lake-auto-enable-new-account-configuration-region
                         :shape "Region" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sources :initarg :sources :initform
                         (common-lisp:error ":sources is required") :type
                         (common-lisp:or aws-log-source-resource-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-lake-auto-enable-new-account-configuration-sources
                         :shape "AwsLogSourceResourceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-lake-auto-enable-new-account-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-lake-auto-enable-new-account-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-lake-auto-enable-new-account-configuration
                    'make-data-lake-auto-enable-new-account-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-auto-enable-new-account-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-auto-enable-new-account-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-auto-enable-new-account-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-lake-auto-enable-new-account-configuration-list ()
   '(trivial-types:proper-list
     data-lake-auto-enable-new-account-configuration))
 (common-lisp:defun make-data-lake-auto-enable-new-account-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-lake-auto-enable-new-account-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-lake-configuration common-lisp:nil
                       ((encryption-configuration :initarg
                         :encryption-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or data-lake-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-lake-configuration-encryption-configuration
                         :shape "DataLakeEncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lifecycle-configuration :initarg
                         :lifecycle-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or data-lake-lifecycle-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-lake-configuration-lifecycle-configuration
                         :shape "DataLakeLifecycleConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (region :initarg :region :initform
                         (common-lisp:error ":region is required") :type
                         (common-lisp:or region common-lisp:null) :accessor
                         struct-shape-data-lake-configuration-region :shape
                         "Region" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-configuration :initarg
                         :replication-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or data-lake-replication-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-lake-configuration-replication-configuration
                         :shape "DataLakeReplicationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-lake-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-lake-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-lake-configuration 'make-data-lake-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "encryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-configuration))
      (common-lisp:list
       (common-lisp:cons "lifecycleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "replicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-lake-configuration-list ()
   '(trivial-types:proper-list data-lake-configuration))
 (common-lisp:defun make-data-lake-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-lake-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-lake-encryption-configuration common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-lake-encryption-configuration-kms-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-lake-encryption-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-lake-encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-lake-encryption-configuration
                    'make-data-lake-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-lake-exception common-lisp:nil
                       ((exception :initarg :exception :initform
                         common-lisp:nil :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor struct-shape-data-lake-exception-exception
                         :shape "SafeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or region common-lisp:null)
                         :accessor struct-shape-data-lake-exception-region
                         :shape "Region" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remediation :initarg :remediation :initform
                         common-lisp:nil :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor struct-shape-data-lake-exception-remediation
                         :shape "SafeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-data-lake-exception-timestamp
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-lake-exception
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-lake-exception
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-lake-exception 'make-data-lake-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-lake-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-lake-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exception))
      (common-lisp:list
       (common-lisp:cons "exception"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remediation))
      (common-lisp:list
       (common-lisp:cons "remediation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-lake-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-lake-exception-list ()
   '(trivial-types:proper-list data-lake-exception))
 (common-lisp:defun make-data-lake-exception-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-lake-exception))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-lake-lifecycle-configuration common-lisp:nil
                       ((expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or data-lake-lifecycle-expiration
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-lake-lifecycle-configuration-expiration
                         :shape "DataLakeLifecycleExpiration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (transitions :initarg :transitions :initform
                         common-lisp:nil :type
                         (common-lisp:or data-lake-lifecycle-transition-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-lake-lifecycle-configuration-transitions
                         :shape "DataLakeLifecycleTransitionList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-lake-lifecycle-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-lake-lifecycle-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-lake-lifecycle-configuration
                    'make-data-lake-lifecycle-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-lifecycle-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-lifecycle-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transitions))
      (common-lisp:list
       (common-lisp:cons "transitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-lifecycle-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-lake-lifecycle-expiration common-lisp:nil
                       ((days :initarg :days :initform common-lisp:nil :type
                         (common-lisp:or
                          data-lake-lifecycle-expiration-days-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-data-lake-lifecycle-expiration-days
                         :shape "DataLakeLifecycleExpirationDaysInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-lake-lifecycle-expiration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-lake-lifecycle-expiration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-lake-lifecycle-expiration
                    'make-data-lake-lifecycle-expiration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-lifecycle-expiration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-lifecycle-expiration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-lifecycle-expiration))
   common-lisp:nil))
(common-lisp:deftype data-lake-lifecycle-expiration-days-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass data-lake-lifecycle-transition common-lisp:nil
                       ((days :initarg :days :initform common-lisp:nil :type
                         (common-lisp:or
                          data-lake-lifecycle-transition-days-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-data-lake-lifecycle-transition-days
                         :shape "DataLakeLifecycleTransitionDaysInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-class :initarg :storage-class :initform
                         common-lisp:nil :type
                         (common-lisp:or data-lake-storage-class
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-lake-lifecycle-transition-storage-class
                         :shape "DataLakeStorageClass" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-lake-lifecycle-transition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-lake-lifecycle-transition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-lake-lifecycle-transition
                    'make-data-lake-lifecycle-transition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-lifecycle-transition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-lifecycle-transition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'days))
      (common-lisp:list
       (common-lisp:cons "days"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-class))
      (common-lisp:list
       (common-lisp:cons "storageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-lifecycle-transition))
   common-lisp:nil))
(common-lisp:deftype data-lake-lifecycle-transition-days-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype data-lake-lifecycle-transition-list ()
   '(trivial-types:proper-list data-lake-lifecycle-transition))
 (common-lisp:defun make-data-lake-lifecycle-transition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-lake-lifecycle-transition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-lake-replication-configuration common-lisp:nil
                       ((regions :initarg :regions :initform common-lisp:nil
                         :type (common-lisp:or region-list common-lisp:null)
                         :accessor
                         struct-shape-data-lake-replication-configuration-regions
                         :shape "RegionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-data-lake-replication-configuration-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-lake-replication-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-lake-replication-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-lake-replication-configuration
                    'make-data-lake-replication-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-replication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-replication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-replication-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-lake-resource common-lisp:nil
                       ((create-status :initarg :create-status :initform
                         common-lisp:nil :type
                         (common-lisp:or data-lake-status common-lisp:null)
                         :accessor
                         struct-shape-data-lake-resource-create-status :shape
                         "DataLakeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-lake-arn :initarg :data-lake-arn :initform
                         (common-lisp:error ":datalakearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-data-lake-resource-data-lake-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or data-lake-encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-lake-resource-encryption-configuration
                         :shape "DataLakeEncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lifecycle-configuration :initarg
                         :lifecycle-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or data-lake-lifecycle-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-lake-resource-lifecycle-configuration
                         :shape "DataLakeLifecycleConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (region :initarg :region :initform
                         (common-lisp:error ":region is required") :type
                         (common-lisp:or region common-lisp:null) :accessor
                         struct-shape-data-lake-resource-region :shape "Region"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (replication-configuration :initarg
                         :replication-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or data-lake-replication-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-lake-resource-replication-configuration
                         :shape "DataLakeReplicationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3bucket-arn :initarg :s3bucket-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or s3bucket-arn common-lisp:null)
                         :accessor struct-shape-data-lake-resource-s3bucket-arn
                         :shape "S3BucketArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-status :initarg :update-status :initform
                         common-lisp:nil :type
                         (common-lisp:or data-lake-update-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-lake-resource-update-status :shape
                         "DataLakeUpdateStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-lake-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-lake-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-lake-resource 'make-data-lake-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-lake-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-lake-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-status))
      (common-lisp:list
       (common-lisp:cons "createStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-lake-arn))
      (common-lisp:list
       (common-lisp:cons "dataLakeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "encryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-configuration))
      (common-lisp:list
       (common-lisp:cons "lifecycleConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-configuration))
      (common-lisp:list
       (common-lisp:cons "replicationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "s3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "updateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-lake-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-lake-resource-list ()
   '(trivial-types:proper-list data-lake-resource))
 (common-lisp:defun make-data-lake-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-lake-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-lake-source common-lisp:nil
                       ((account :initarg :account :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-data-lake-source-account :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-classes :initarg :event-classes :initform
                         common-lisp:nil :type
                         (common-lisp:or ocsf-event-class-list
                                         common-lisp:null)
                         :accessor struct-shape-data-lake-source-event-classes
                         :shape "OcsfEventClassList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-name :initarg :source-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-lake-source-source-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-statuses :initarg :source-statuses :initform
                         common-lisp:nil :type
                         (common-lisp:or data-lake-source-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-lake-source-source-statuses :shape
                         "DataLakeSourceStatusList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-lake-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-lake-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-lake-source 'make-data-lake-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-lake-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-lake-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-classes))
      (common-lisp:list
       (common-lisp:cons "eventClasses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "sourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-statuses))
      (common-lisp:list
       (common-lisp:cons "sourceStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-lake-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-lake-source-list ()
   '(trivial-types:proper-list data-lake-source))
 (common-lisp:defun make-data-lake-source-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-lake-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-lake-source-status common-lisp:nil
                       ((resource :initarg :resource :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-data-lake-source-status-resource :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or source-collection-status
                                         common-lisp:null)
                         :accessor struct-shape-data-lake-source-status-status
                         :shape "SourceCollectionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-lake-source-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-lake-source-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-lake-source-status 'make-data-lake-source-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-source-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-source-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-source-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-lake-source-status-list ()
   '(trivial-types:proper-list data-lake-source-status))
 (common-lisp:defun make-data-lake-source-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-lake-source-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-lake-status () 'common-lisp:string)
(common-lisp:deftype data-lake-storage-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-lake-update-exception common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-lake-update-exception-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reason :initarg :reason :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-data-lake-update-exception-reason :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-lake-update-exception
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-lake-update-exception
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-lake-update-exception
                    'make-data-lake-update-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-update-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-update-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-update-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-lake-update-status common-lisp:nil
                       ((exception :initarg :exception :initform
                         common-lisp:nil :type
                         (common-lisp:or data-lake-update-exception
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-lake-update-status-exception :shape
                         "DataLakeUpdateException" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-id :initarg :request-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-data-lake-update-status-request-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-lake-status common-lisp:null)
                         :accessor struct-shape-data-lake-update-status-status
                         :shape "DataLakeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-lake-update-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-lake-update-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-lake-update-status 'make-data-lake-update-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-update-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-update-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exception))
      (common-lisp:list
       (common-lisp:cons "exception"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "requestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-lake-update-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-aws-log-source-request common-lisp:nil
                       ((sources :initarg :sources :initform
                         (common-lisp:error ":sources is required") :type
                         (common-lisp:or aws-log-source-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-aws-log-source-request-sources
                         :shape "AwsLogSourceConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-aws-log-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-aws-log-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-aws-log-source-request
                    'make-delete-aws-log-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-aws-log-source-response common-lisp:nil
                       ((failed :initarg :failed :initform common-lisp:nil
                         :type (common-lisp:or account-list common-lisp:null)
                         :accessor
                         struct-shape-delete-aws-log-source-response-failed
                         :shape "AccountList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-aws-log-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-aws-log-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-aws-log-source-response
                    'make-delete-aws-log-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-aws-log-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-log-source-request common-lisp:nil
                       ((source-name :initarg :source-name :initform
                         (common-lisp:error ":sourcename is required") :type
                         (common-lisp:or custom-log-source-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-log-source-request-source-name
                         :shape "CustomLogSourceName" :location "uri"
                         :location-name "sourceName")
                        (source-version :initarg :source-version :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-log-source-version
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-log-source-request-source-version
                         :shape "CustomLogSourceVersion" :location
                         "querystring" :location-name "sourceVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-log-source-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-log-source-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-log-source-request
                    'make-delete-custom-log-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-log-source-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-log-source-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-log-source-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-log-source-response
                    'make-delete-custom-log-source-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-log-source-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-lake-exception-subscription-request
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-lake-exception-subscription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-data-lake-exception-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-lake-exception-subscription-request
                    'make-delete-data-lake-exception-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-exception-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-exception-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-exception-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-lake-exception-subscription-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-lake-exception-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-data-lake-exception-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-lake-exception-subscription-response
                    'make-delete-data-lake-exception-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-exception-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-exception-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-exception-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-lake-organization-configuration-request
                       common-lisp:nil
                       ((auto-enable-new-account :initarg
                         :auto-enable-new-account :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          data-lake-auto-enable-new-account-configuration-list
                          common-lisp:null)
                         :accessor
                         struct-shape-delete-data-lake-organization-configuration-request-auto-enable-new-account
                         :shape "DataLakeAutoEnableNewAccountConfigurationList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-lake-organization-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-data-lake-organization-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-lake-organization-configuration-request
                    'make-delete-data-lake-organization-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-organization-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-new-account))
      (common-lisp:list
       (common-lisp:cons "autoEnableNewAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-lake-organization-configuration-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-lake-organization-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-data-lake-organization-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-lake-organization-configuration-response
                    'make-delete-data-lake-organization-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-lake-request common-lisp:nil
                       ((regions :initarg :regions :initform
                         (common-lisp:error ":regions is required") :type
                         (common-lisp:or region-list common-lisp:null)
                         :accessor
                         struct-shape-delete-data-lake-request-regions :shape
                         "RegionList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-lake-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-lake-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-lake-request 'make-delete-data-lake-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-lake-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-lake-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-data-lake-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-lake-response
                    'make-delete-data-lake-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-lake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subscriber-notification-request common-lisp:nil
                       ((subscriber-id :initarg :subscriber-id :initform
                         (common-lisp:error ":subscriberid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-delete-subscriber-notification-request-subscriber-id
                         :shape "UUID" :location "uri" :location-name
                         "subscriberId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-subscriber-notification-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-subscriber-notification-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-subscriber-notification-request
                    'make-delete-subscriber-notification-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-notification-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-notification-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-notification-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subscriber-notification-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-subscriber-notification-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-subscriber-notification-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-subscriber-notification-response
                    'make-delete-subscriber-notification-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-notification-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-notification-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-notification-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subscriber-request common-lisp:nil
                       ((subscriber-id :initarg :subscriber-id :initform
                         (common-lisp:error ":subscriberid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-delete-subscriber-request-subscriber-id
                         :shape "UUID" :location "uri" :location-name
                         "subscriberId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-subscriber-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-subscriber-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-subscriber-request
                    'make-delete-subscriber-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-subscriber-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-subscriber-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-subscriber-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-subscriber-response
                    'make-delete-subscriber-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-subscriber-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-data-lake-delegated-administrator-request
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-data-lake-delegated-administrator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-data-lake-delegated-administrator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-data-lake-delegated-administrator-request
                    'make-deregister-data-lake-delegated-administrator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-data-lake-delegated-administrator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-data-lake-delegated-administrator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-data-lake-delegated-administrator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-data-lake-delegated-administrator-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-data-lake-delegated-administrator-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-data-lake-delegated-administrator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-data-lake-delegated-administrator-response
                    'make-deregister-data-lake-delegated-administrator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-data-lake-delegated-administrator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-data-lake-delegated-administrator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-data-lake-delegated-administrator-response))
   common-lisp:nil))
(common-lisp:deftype description-string () 'common-lisp:string)
(common-lisp:deftype external-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-data-lake-exception-subscription-request
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-lake-exception-subscription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-lake-exception-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-lake-exception-subscription-request
                    'make-get-data-lake-exception-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-exception-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-exception-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-exception-subscription-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-lake-exception-subscription-response
                       common-lisp:nil
                       ((exception-time-to-live :initarg
                         :exception-time-to-live :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-get-data-lake-exception-subscription-response-exception-time-to-live
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (notification-endpoint :initarg :notification-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-lake-exception-subscription-response-notification-endpoint
                         :shape "SafeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-protocol :initarg :subscription-protocol
                         :initform common-lisp:nil :type
                         (common-lisp:or subscription-protocol
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-lake-exception-subscription-response-subscription-protocol
                         :shape "SubscriptionProtocol" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-lake-exception-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-lake-exception-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-lake-exception-subscription-response
                    'make-get-data-lake-exception-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-exception-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-exception-subscription-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exception-time-to-live))
      (common-lisp:list
       (common-lisp:cons "exceptionTimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-endpoint))
      (common-lisp:list
       (common-lisp:cons "notificationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-protocol))
      (common-lisp:list
       (common-lisp:cons "subscriptionProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-exception-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-lake-organization-configuration-request
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-lake-organization-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-lake-organization-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-lake-organization-configuration-request
                    'make-get-data-lake-organization-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-organization-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-organization-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-lake-organization-configuration-response
                       common-lisp:nil
                       ((auto-enable-new-account :initarg
                         :auto-enable-new-account :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          data-lake-auto-enable-new-account-configuration-list
                          common-lisp:null)
                         :accessor
                         struct-shape-get-data-lake-organization-configuration-response-auto-enable-new-account
                         :shape "DataLakeAutoEnableNewAccountConfigurationList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-lake-organization-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-lake-organization-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-lake-organization-configuration-response
                    'make-get-data-lake-organization-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-organization-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-organization-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-enable-new-account))
      (common-lisp:list
       (common-lisp:cons "autoEnableNewAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-organization-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-lake-sources-request common-lisp:nil
                       ((accounts :initarg :accounts :initform common-lisp:nil
                         :type (common-lisp:or account-list common-lisp:null)
                         :accessor
                         struct-shape-get-data-lake-sources-request-accounts
                         :shape "AccountList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-data-lake-sources-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-data-lake-sources-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-lake-sources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-lake-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-lake-sources-request
                    'make-get-data-lake-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-lake-sources-response common-lisp:nil
                       ((data-lake-arn :initarg :data-lake-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-get-data-lake-sources-response-data-lake-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-lake-sources :initarg :data-lake-sources
                         :initform common-lisp:nil :type
                         (common-lisp:or data-lake-source-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-lake-sources-response-data-lake-sources
                         :shape "DataLakeSourceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-data-lake-sources-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-lake-sources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-lake-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-lake-sources-response
                    'make-get-data-lake-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-lake-arn))
      (common-lisp:list
       (common-lisp:cons "dataLakeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-lake-sources))
      (common-lisp:list
       (common-lisp:cons "dataLakeSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-lake-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-subscriber-request common-lisp:nil
                       ((subscriber-id :initarg :subscriber-id :initform
                         (common-lisp:error ":subscriberid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-subscriber-request-subscriber-id
                         :shape "UUID" :location "uri" :location-name
                         "subscriberId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-subscriber-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-subscriber-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-subscriber-request 'make-get-subscriber-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-subscriber-response common-lisp:nil
                       ((subscriber :initarg :subscriber :initform
                         common-lisp:nil :type
                         (common-lisp:or subscriber-resource common-lisp:null)
                         :accessor
                         struct-shape-get-subscriber-response-subscriber :shape
                         "SubscriberResource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-subscriber-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-subscriber-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-subscriber-response 'make-get-subscriber-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber))
      (common-lisp:list
       (common-lisp:cons "subscriber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-subscriber-response))
   common-lisp:nil))
(common-lisp:deftype http-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass https-notification-configuration common-lisp:nil
                       ((authorization-api-key-name :initarg
                         :authorization-api-key-name :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-https-notification-configuration-authorization-api-key-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorization-api-key-value :initarg
                         :authorization-api-key-value :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-https-notification-configuration-authorization-api-key-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint :initarg :endpoint :initform
                         (common-lisp:error ":endpoint is required") :type
                         (common-lisp:or
                          https-notification-configuration-endpoint-string
                          common-lisp:null)
                         :accessor
                         struct-shape-https-notification-configuration-endpoint
                         :shape "HttpsNotificationConfigurationEndpointString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (http-method :initarg :http-method :initform
                         common-lisp:nil :type
                         (common-lisp:or http-method common-lisp:null)
                         :accessor
                         struct-shape-https-notification-configuration-http-method
                         :shape "HttpMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-role-arn :initarg :target-role-arn :initform
                         (common-lisp:error ":targetrolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-https-notification-configuration-target-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-https-notification-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'https-notification-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'https-notification-configuration
                    'make-https-notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          https-notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          https-notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-api-key-name))
      (common-lisp:list
       (common-lisp:cons "authorizationApiKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-api-key-value))
      (common-lisp:list
       (common-lisp:cons "authorizationApiKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-method))
      (common-lisp:list
       (common-lisp:cons "httpMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-role-arn))
      (common-lisp:list
       (common-lisp:cons "targetRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          https-notification-configuration))
   common-lisp:nil))
(common-lisp:deftype https-notification-configuration-endpoint-string ()
  'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-data-lake-exceptions-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-data-lake-exceptions-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-data-lake-exceptions-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regions :initarg :regions :initform common-lisp:nil
                         :type (common-lisp:or region-list common-lisp:null)
                         :accessor
                         struct-shape-list-data-lake-exceptions-request-regions
                         :shape "RegionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-lake-exceptions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-lake-exceptions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-lake-exceptions-request
                    'make-list-data-lake-exceptions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-lake-exceptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-lake-exceptions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-lake-exceptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-lake-exceptions-response common-lisp:nil
                       ((exceptions :initarg :exceptions :initform
                         common-lisp:nil :type
                         (common-lisp:or data-lake-exception-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-data-lake-exceptions-response-exceptions
                         :shape "DataLakeExceptionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-data-lake-exceptions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-lake-exceptions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-lake-exceptions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-lake-exceptions-response
                    'make-list-data-lake-exceptions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-lake-exceptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-lake-exceptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exceptions))
      (common-lisp:list
       (common-lisp:cons "exceptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-lake-exceptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-lakes-request common-lisp:nil
                       ((regions :initarg :regions :initform common-lisp:nil
                         :type (common-lisp:or region-list common-lisp:null)
                         :accessor struct-shape-list-data-lakes-request-regions
                         :shape "RegionList" :location "querystring"
                         :location-name "regions"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-lakes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-lakes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-lakes-request 'make-list-data-lakes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-lakes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-lakes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-lakes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-lakes-response common-lisp:nil
                       ((data-lakes :initarg :data-lakes :initform
                         common-lisp:nil :type
                         (common-lisp:or data-lake-resource-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-data-lakes-response-data-lakes
                         :shape "DataLakeResourceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-lakes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-lakes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-lakes-response 'make-list-data-lakes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-lakes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-lakes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-lakes))
      (common-lisp:list
       (common-lisp:cons "dataLakes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-lakes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-log-sources-request common-lisp:nil
                       ((accounts :initarg :accounts :initform common-lisp:nil
                         :type (common-lisp:or account-list common-lisp:null)
                         :accessor
                         struct-shape-list-log-sources-request-accounts :shape
                         "AccountList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-log-sources-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-log-sources-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regions :initarg :regions :initform common-lisp:nil
                         :type (common-lisp:or region-list common-lisp:null)
                         :accessor
                         struct-shape-list-log-sources-request-regions :shape
                         "RegionList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or log-source-resource-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-log-sources-request-sources :shape
                         "LogSourceResourceList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-log-sources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-log-sources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-log-sources-request 'make-list-log-sources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-log-sources-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-log-sources-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or log-source-list common-lisp:null)
                         :accessor
                         struct-shape-list-log-sources-response-sources :shape
                         "LogSourceList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-log-sources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-log-sources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-log-sources-response
                    'make-list-log-sources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-sources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-subscribers-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-subscribers-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-subscribers-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-subscribers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-subscribers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-subscribers-request 'make-list-subscribers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-subscribers-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-subscribers-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscribers :initarg :subscribers :initform
                         common-lisp:nil :type
                         (common-lisp:or subscriber-resource-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-subscribers-response-subscribers
                         :shape "SubscriberResourceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-subscribers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-subscribers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-subscribers-response
                    'make-list-subscribers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribers))
      (common-lisp:list
       (common-lisp:cons "subscribers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "AmazonResourceName" :location "uri"
                         :location-name "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass log-source common-lisp:nil
                       ((account :initarg :account :initform common-lisp:nil
                         :type (common-lisp:or aws-account-id common-lisp:null)
                         :accessor struct-shape-log-source-account :shape
                         "AwsAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or region common-lisp:null)
                         :accessor struct-shape-log-source-region :shape
                         "Region" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or log-source-resource-list
                                         common-lisp:null)
                         :accessor struct-shape-log-source-sources :shape
                         "LogSourceResourceList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'log-source 'make-log-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-source-list ()
   '(trivial-types:proper-list log-source))
 (common-lisp:defun make-log-source-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass log-source-resource common-lisp:nil
                       ((aws-log-source :initarg :aws-log-source :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-log-source-resource
                                         common-lisp:null)
                         :accessor
                         struct-shape-log-source-resource-aws-log-source :shape
                         "AwsLogSourceResource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-log-source :initarg :custom-log-source
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-log-source-resource
                                         common-lisp:null)
                         :accessor
                         struct-shape-log-source-resource-custom-log-source
                         :shape "CustomLogSourceResource" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-source-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-source-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'log-source-resource 'make-log-source-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-source-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-source-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-log-source))
      (common-lisp:list
       (common-lisp:cons "awsLogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-log-source))
      (common-lisp:list
       (common-lisp:cons "customLogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-source-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-source-resource-list ()
   '(trivial-types:proper-list log-source-resource))
 (common-lisp:defun make-log-source-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-source-resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notification-configuration common-lisp:nil
                       ((https-notification-configuration :initarg
                         :https-notification-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or https-notification-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-notification-configuration-https-notification-configuration
                         :shape "HttpsNotificationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sqs-notification-configuration :initarg
                         :sqs-notification-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or sqs-notification-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-notification-configuration-sqs-notification-configuration
                         :shape "SqsNotificationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notification-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notification-configuration
                    'make-notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'https-notification-configuration))
      (common-lisp:list
       (common-lisp:cons "httpsNotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sqs-notification-configuration))
      (common-lisp:list
       (common-lisp:cons "sqsNotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   common-lisp:nil))
(common-lisp:deftype ocsf-event-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ocsf-event-class-list ()
   '(trivial-types:proper-list ocsf-event-class))
 (common-lisp:defun make-ocsf-event-class-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ocsf-event-class))
   aws-sdk/generator/shape::members))
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype region-list () '(trivial-types:proper-list region))
 (common-lisp:defun make-region-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass register-data-lake-delegated-administrator-request
                       common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":accountid is required") :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         struct-shape-register-data-lake-delegated-administrator-request-account-id
                         :shape "SafeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-data-lake-delegated-administrator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-data-lake-delegated-administrator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-data-lake-delegated-administrator-request
                    'make-register-data-lake-delegated-administrator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-data-lake-delegated-administrator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-data-lake-delegated-administrator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-data-lake-delegated-administrator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-data-lake-delegated-administrator-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-data-lake-delegated-administrator-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-data-lake-delegated-administrator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-data-lake-delegated-administrator-response
                    'make-register-data-lake-delegated-administrator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-data-lake-delegated-administrator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-data-lake-delegated-administrator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-data-lake-delegated-administrator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-name
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-share-arn () 'common-lisp:string)
(common-lisp:deftype resource-share-name () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-arn () 'common-lisp:string)
(common-lisp:deftype s3uri () 'common-lisp:string)
(common-lisp:deftype safe-string () 'common-lisp:string)
(common-lisp:deftype source-collection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sqs-notification-configuration common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sqs-notification-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'sqs-notification-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sqs-notification-configuration
                    'make-sqs-notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sqs-notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sqs-notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sqs-notification-configuration))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subscriber-resource common-lisp:nil
                       ((access-types :initarg :access-types :initform
                         common-lisp:nil :type
                         (common-lisp:or access-type-list common-lisp:null)
                         :accessor
                         struct-shape-subscriber-resource-access-types :shape
                         "AccessTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-subscriber-resource-created-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-share-arn :initarg :resource-share-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-share-arn common-lisp:null)
                         :accessor
                         struct-shape-subscriber-resource-resource-share-arn
                         :shape "ResourceShareArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-share-name :initarg :resource-share-name
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-share-name common-lisp:null)
                         :accessor
                         struct-shape-subscriber-resource-resource-share-name
                         :shape "ResourceShareName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-subscriber-resource-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-arn :initarg :s3bucket-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or s3bucket-arn common-lisp:null)
                         :accessor
                         struct-shape-subscriber-resource-s3bucket-arn :shape
                         "S3BucketArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sources :initarg :sources :initform
                         (common-lisp:error ":sources is required") :type
                         (common-lisp:or log-source-resource-list
                                         common-lisp:null)
                         :accessor struct-shape-subscriber-resource-sources
                         :shape "LogSourceResourceList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscriber-arn :initarg :subscriber-arn :initform
                         (common-lisp:error ":subscriberarn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-subscriber-resource-subscriber-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscriber-description :initarg
                         :subscriber-description :initform common-lisp:nil
                         :type (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         struct-shape-subscriber-resource-subscriber-description
                         :shape "SafeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscriber-endpoint :initarg :subscriber-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         struct-shape-subscriber-resource-subscriber-endpoint
                         :shape "SafeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscriber-id :initarg :subscriber-id :initform
                         (common-lisp:error ":subscriberid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-subscriber-resource-subscriber-id :shape
                         "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subscriber-identity :initarg :subscriber-identity
                         :initform
                         (common-lisp:error ":subscriberidentity is required")
                         :type (common-lisp:or aws-identity common-lisp:null)
                         :accessor
                         struct-shape-subscriber-resource-subscriber-identity
                         :shape "AwsIdentity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscriber-name :initarg :subscriber-name :initform
                         (common-lisp:error ":subscribername is required")
                         :type (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         struct-shape-subscriber-resource-subscriber-name
                         :shape "SafeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscriber-status :initarg :subscriber-status
                         :initform common-lisp:nil :type
                         (common-lisp:or subscriber-status common-lisp:null)
                         :accessor
                         struct-shape-subscriber-resource-subscriber-status
                         :shape "SubscriberStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or synthetic-timestamp-date-time
                                         common-lisp:null)
                         :accessor struct-shape-subscriber-resource-updated-at
                         :shape "SyntheticTimestamp_date_time" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-subscriber-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'subscriber-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'subscriber-resource 'make-subscriber-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscriber-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscriber-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-types))
      (common-lisp:list
       (common-lisp:cons "accessTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-share-arn))
      (common-lisp:list
       (common-lisp:cons "resourceShareArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-share-name))
      (common-lisp:list
       (common-lisp:cons "resourceShareName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "s3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-arn))
      (common-lisp:list
       (common-lisp:cons "subscriberArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscriber-description))
      (common-lisp:list
       (common-lisp:cons "subscriberDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-endpoint))
      (common-lisp:list
       (common-lisp:cons "subscriberEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-id))
      (common-lisp:list
       (common-lisp:cons "subscriberId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-identity))
      (common-lisp:list
       (common-lisp:cons "subscriberIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-name))
      (common-lisp:list
       (common-lisp:cons "subscriberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-status))
      (common-lisp:list
       (common-lisp:cons "subscriberStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscriber-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscriber-resource-list ()
   '(trivial-types:proper-list subscriber-resource))
 (common-lisp:defun make-subscriber-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscriber-resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subscriber-status () 'common-lisp:string)
(common-lisp:deftype subscription-protocol () 'common-lisp:string)
(common-lisp:deftype synthetic-timestamp-date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "AmazonResourceName" :location "uri" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (securitylake-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-service-code)))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "AmazonResourceName" :location "uri"
                         :location-name "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-lake-exception-subscription-request
                       common-lisp:nil
                       ((exception-time-to-live :initarg
                         :exception-time-to-live :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          update-data-lake-exception-subscription-request-exception-time-to-live-long
                          common-lisp:null)
                         :accessor
                         struct-shape-update-data-lake-exception-subscription-request-exception-time-to-live
                         :shape
                         "UpdateDataLakeExceptionSubscriptionRequestExceptionTimeToLiveLong"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (notification-endpoint :initarg :notification-endpoint
                         :initform
                         (common-lisp:error
                          ":notificationendpoint is required")
                         :type (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         struct-shape-update-data-lake-exception-subscription-request-notification-endpoint
                         :shape "SafeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscription-protocol :initarg :subscription-protocol
                         :initform
                         (common-lisp:error
                          ":subscriptionprotocol is required")
                         :type
                         (common-lisp:or subscription-protocol
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-lake-exception-subscription-request-subscription-protocol
                         :shape "SubscriptionProtocol" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-data-lake-exception-subscription-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-data-lake-exception-subscription-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-data-lake-exception-subscription-request
                    'make-update-data-lake-exception-subscription-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-lake-exception-subscription-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-lake-exception-subscription-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exception-time-to-live))
      (common-lisp:list
       (common-lisp:cons "exceptionTimeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-endpoint))
      (common-lisp:list
       (common-lisp:cons "notificationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscription-protocol))
      (common-lisp:list
       (common-lisp:cons "subscriptionProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-lake-exception-subscription-request))
   common-lisp:nil))
(common-lisp:deftype update-data-lake-exception-subscription-request-exception-time-to-live-long
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass update-data-lake-exception-subscription-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-data-lake-exception-subscription-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-data-lake-exception-subscription-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-data-lake-exception-subscription-response
                    'make-update-data-lake-exception-subscription-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-lake-exception-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-lake-exception-subscription-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-lake-exception-subscription-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-lake-request common-lisp:nil
                       ((configurations :initarg :configurations :initform
                         (common-lisp:error ":configurations is required")
                         :type
                         (common-lisp:or data-lake-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-lake-request-configurations
                         :shape "DataLakeConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (meta-store-manager-role-arn :initarg
                         :meta-store-manager-role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-data-lake-request-meta-store-manager-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-data-lake-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-lake-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-data-lake-request 'make-update-data-lake-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-lake-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-lake-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'meta-store-manager-role-arn))
      (common-lisp:list
       (common-lisp:cons "metaStoreManagerRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-lake-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-lake-response common-lisp:nil
                       ((data-lakes :initarg :data-lakes :initform
                         common-lisp:nil :type
                         (common-lisp:or data-lake-resource-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-lake-response-data-lakes
                         :shape "DataLakeResourceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-data-lake-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-data-lake-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-data-lake-response
                    'make-update-data-lake-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-lake-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-lake-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-lakes))
      (common-lisp:list
       (common-lisp:cons "dataLakes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-lake-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subscriber-notification-request common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         (common-lisp:error ":configuration is required") :type
                         (common-lisp:or notification-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscriber-notification-request-configuration
                         :shape "NotificationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscriber-id :initarg :subscriber-id :initform
                         (common-lisp:error ":subscriberid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-update-subscriber-notification-request-subscriber-id
                         :shape "UUID" :location "uri" :location-name
                         "subscriberId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-subscriber-notification-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-subscriber-notification-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-subscriber-notification-request
                    'make-update-subscriber-notification-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-notification-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-notification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-notification-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subscriber-notification-response common-lisp:nil
                       ((subscriber-endpoint :initarg :subscriber-endpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or safe-string common-lisp:null)
                         :accessor
                         struct-shape-update-subscriber-notification-response-subscriber-endpoint
                         :shape "SafeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-subscriber-notification-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-subscriber-notification-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-subscriber-notification-response
                    'make-update-subscriber-notification-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-notification-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-notification-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-endpoint))
      (common-lisp:list
       (common-lisp:cons "subscriberEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-notification-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-subscriber-request common-lisp:nil
                       ((sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or log-source-resource-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-subscriber-request-sources :shape
                         "LogSourceResourceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscriber-description :initarg
                         :subscriber-description :initform common-lisp:nil
                         :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-update-subscriber-request-subscriber-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscriber-id :initarg :subscriber-id :initform
                         (common-lisp:error ":subscriberid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-update-subscriber-request-subscriber-id
                         :shape "UUID" :location "uri" :location-name
                         "subscriberId")
                        (subscriber-identity :initarg :subscriber-identity
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-identity common-lisp:null)
                         :accessor
                         struct-shape-update-subscriber-request-subscriber-identity
                         :shape "AwsIdentity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subscriber-name :initarg :subscriber-name :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          update-subscriber-request-subscriber-name-string
                          common-lisp:null)
                         :accessor
                         struct-shape-update-subscriber-request-subscriber-name
                         :shape "UpdateSubscriberRequestSubscriberNameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-subscriber-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-subscriber-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-subscriber-request
                    'make-update-subscriber-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscriber-description))
      (common-lisp:list
       (common-lisp:cons "subscriberDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-identity))
      (common-lisp:list
       (common-lisp:cons "subscriberIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber-name))
      (common-lisp:list
       (common-lisp:cons "subscriberName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-request))
   common-lisp:nil))
(common-lisp:deftype update-subscriber-request-subscriber-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-subscriber-response common-lisp:nil
                       ((subscriber :initarg :subscriber :initform
                         common-lisp:nil :type
                         (common-lisp:or subscriber-resource common-lisp:null)
                         :accessor
                         struct-shape-update-subscriber-response-subscriber
                         :shape "SubscriberResource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-subscriber-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-subscriber-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-subscriber-response
                    'make-update-subscriber-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriber))
      (common-lisp:list
       (common-lisp:cons "subscriber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-subscriber-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-aws-log-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sources)
   (common-lisp:declare (common-lisp:ignorable sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-aws-log-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/logsources/aws"
                                                        "CreateAwsLogSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-aws-log-source))
(common-lisp:progn
 (common-lisp:defun create-custom-log-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration event-classes source-name
                     source-version)
   (common-lisp:declare
    (common-lisp:ignorable configuration event-classes source-name
     source-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-custom-log-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/logsources/custom"
                                                        "CreateCustomLogSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-custom-log-source))
(common-lisp:progn
 (common-lisp:defun create-data-lake
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configurations
                     meta-store-manager-role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable configurations meta-store-manager-role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-lake-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/datalake"
                                                        "CreateDataLake"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-data-lake))
(common-lisp:progn
 (common-lisp:defun create-data-lake-exception-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key exception-time-to-live
                     notification-endpoint subscription-protocol)
   (common-lisp:declare
    (common-lisp:ignorable exception-time-to-live notification-endpoint
     subscription-protocol))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-data-lake-exception-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/exceptions/subscription"
                                                        "CreateDataLakeExceptionSubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-data-lake-exception-subscription))
(common-lisp:progn
 (common-lisp:defun create-data-lake-organization-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-enable-new-account)
   (common-lisp:declare (common-lisp:ignorable auto-enable-new-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-data-lake-organization-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/organization/configuration"
                                                        "CreateDataLakeOrganizationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-data-lake-organization-configuration))
(common-lisp:progn
 (common-lisp:defun create-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-types sources
                     subscriber-description subscriber-identity subscriber-name
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable access-types sources subscriber-description
     subscriber-identity subscriber-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/subscribers"
                                                        "CreateSubscriber"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-subscriber))
(common-lisp:progn
 (common-lisp:defun create-subscriber-notification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration subscriber-id)
   (common-lisp:declare (common-lisp:ignorable configuration subscriber-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-subscriber-notification-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/subscribers/~A/notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'subscriber-id))))
                                                        "CreateSubscriberNotification"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-subscriber-notification))
(common-lisp:progn
 (common-lisp:defun delete-aws-log-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sources)
   (common-lisp:declare (common-lisp:ignorable sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-aws-log-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/logsources/aws/delete"
                                                        "DeleteAwsLogSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-aws-log-source))
(common-lisp:progn
 (common-lisp:defun delete-custom-log-source
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-name source-version)
   (common-lisp:declare (common-lisp:ignorable source-name source-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-custom-log-source-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/datalake/logsources/custom/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'source-name))))
                                                        "DeleteCustomLogSource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-custom-log-source))
(common-lisp:progn
 (common-lisp:defun delete-data-lake
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key regions)
   (common-lisp:declare (common-lisp:ignorable regions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-data-lake-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/delete"
                                                        "DeleteDataLake"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-data-lake))
(common-lisp:progn
 (common-lisp:defun delete-data-lake-exception-subscription ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "DELETE" :path
                                "/v1/datalake/exceptions/subscription"
                                :operation
                                "DeleteDataLakeExceptionSubscription"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-data-lake-exception-subscription))
(common-lisp:progn
 (common-lisp:defun delete-data-lake-organization-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-enable-new-account)
   (common-lisp:declare (common-lisp:ignorable auto-enable-new-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-data-lake-organization-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/organization/configuration/delete"
                                                        "DeleteDataLakeOrganizationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-data-lake-organization-configuration))
(common-lisp:progn
 (common-lisp:defun delete-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscriber-id)
   (common-lisp:declare (common-lisp:ignorable subscriber-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/subscribers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'subscriber-id))))
                                                        "DeleteSubscriber"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-subscriber))
(common-lisp:progn
 (common-lisp:defun delete-subscriber-notification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscriber-id)
   (common-lisp:declare (common-lisp:ignorable subscriber-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-subscriber-notification-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/subscribers/~A/notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'subscriber-id))))
                                                        "DeleteSubscriberNotification"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-subscriber-notification))
(common-lisp:progn
 (common-lisp:defun deregister-data-lake-delegated-administrator ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "DELETE" :path
                                "/v1/datalake/delegate" :operation
                                "DeregisterDataLakeDelegatedAdministrator"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'deregister-data-lake-delegated-administrator))
(common-lisp:progn
 (common-lisp:defun get-data-lake-exception-subscription ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "GET" :path
                                "/v1/datalake/exceptions/subscription"
                                :operation "GetDataLakeExceptionSubscription"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-data-lake-exception-subscription))
(common-lisp:progn
 (common-lisp:defun get-data-lake-organization-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'securitylake-request :method "GET" :path
                                "/v1/datalake/organization/configuration"
                                :operation
                                "GetDataLakeOrganizationConfiguration"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-data-lake-organization-configuration))
(common-lisp:progn
 (common-lisp:defun get-data-lake-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accounts max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable accounts max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-lake-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/sources"
                                                        "GetDataLakeSources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-data-lake-sources))
(common-lisp:progn
 (common-lisp:defun get-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subscriber-id)
   (common-lisp:declare (common-lisp:ignorable subscriber-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/subscribers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'subscriber-id))))
                                                        "GetSubscriber"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-subscriber))
(common-lisp:progn
 (common-lisp:defun list-data-lake-exceptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token regions)
   (common-lisp:declare (common-lisp:ignorable max-results next-token regions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-lake-exceptions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/exceptions"
                                                        "ListDataLakeExceptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-data-lake-exceptions))
(common-lisp:progn
 (common-lisp:defun list-data-lakes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key regions)
   (common-lisp:declare (common-lisp:ignorable regions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-lakes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/datalakes"
                                                        "ListDataLakes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-data-lakes))
(common-lisp:progn
 (common-lisp:defun list-log-sources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accounts max-results next-token regions
                     sources)
   (common-lisp:declare
    (common-lisp:ignorable accounts max-results next-token regions sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-log-sources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/logsources/list"
                                                        "ListLogSources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-log-sources))
(common-lisp:progn
 (common-lisp:defun list-subscribers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-subscribers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/subscribers"
                                                        "ListSubscribers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-subscribers))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun register-data-lake-delegated-administrator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id)
   (common-lisp:declare (common-lisp:ignorable account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-data-lake-delegated-administrator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/datalake/delegate"
                                                        "RegisterDataLakeDelegatedAdministrator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-data-lake-delegated-administrator))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-data-lake
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configurations
                     meta-store-manager-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable configurations meta-store-manager-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-data-lake-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/v1/datalake"
                                                        "UpdateDataLake"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-data-lake))
(common-lisp:progn
 (common-lisp:defun update-data-lake-exception-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key exception-time-to-live
                     notification-endpoint subscription-protocol)
   (common-lisp:declare
    (common-lisp:ignorable exception-time-to-live notification-endpoint
     subscription-protocol))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-data-lake-exception-subscription-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/v1/datalake/exceptions/subscription"
                                                        "UpdateDataLakeExceptionSubscription"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-data-lake-exception-subscription))
(common-lisp:progn
 (common-lisp:defun update-subscriber
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sources subscriber-description
                     subscriber-id subscriber-identity subscriber-name)
   (common-lisp:declare
    (common-lisp:ignorable sources subscriber-description subscriber-id
     subscriber-identity subscriber-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-subscriber-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/subscribers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'subscriber-id))))
                                                        "UpdateSubscriber"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-subscriber))
(common-lisp:progn
 (common-lisp:defun update-subscriber-notification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration subscriber-id)
   (common-lisp:declare (common-lisp:ignorable configuration subscriber-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-subscriber-notification-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'securitylake-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/v1/subscribers/~A/notification"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'subscriber-id))))
                                                        "UpdateSubscriberNotification"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-subscriber-notification))
