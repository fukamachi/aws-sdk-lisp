;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/glue/api (:use)
                             (:nicknames #:aws/glue)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/glue/api)
(common-lisp:progn
 (common-lisp:define-condition glue-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'glue-error))
(common-lisp:progn
 (common-lisp:defclass glue-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "glue" :api-version
                        "2017-03-31" :host-prefix "glue" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "AWSGlue" :json-version "1.1"))
 (common-lisp:export 'glue-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AlreadyExistsException" . already-exists-exception)
    ("ColumnStatisticsTaskNotRunningException"
     . column-statistics-task-not-running-exception)
    ("ColumnStatisticsTaskRunningException"
     . column-statistics-task-running-exception)
    ("ColumnStatisticsTaskStoppingException"
     . column-statistics-task-stopping-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("ConcurrentRunsExceededException" . concurrent-runs-exceeded-exception)
    ("ConditionCheckFailureException" . condition-check-failure-exception)
    ("ConflictException" . conflict-exception)
    ("CrawlerNotRunningException" . crawler-not-running-exception)
    ("CrawlerRunningException" . crawler-running-exception)
    ("CrawlerStoppingException" . crawler-stopping-exception)
    ("EntityNotFoundException" . entity-not-found-exception)
    ("FederatedResourceAlreadyExistsException"
     . federated-resource-already-exists-exception)
    ("FederationSourceException" . federation-source-exception)
    ("FederationSourceRetryableException"
     . federation-source-retryable-exception)
    ("GlueEncryptionException" . glue-encryption-exception)
    ("IdempotentParameterMismatchException"
     . idempotent-parameter-mismatch-exception)
    ("IllegalBlueprintStateException" . illegal-blueprint-state-exception)
    ("IllegalSessionStateException" . illegal-session-state-exception)
    ("IllegalWorkflowStateException" . illegal-workflow-state-exception)
    ("InternalServiceException" . internal-service-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("InvalidStateException" . invalid-state-exception)
    ("MLTransformNotReadyException" . mltransform-not-ready-exception)
    ("NoScheduleException" . no-schedule-exception)
    ("OperationTimeoutException" . operation-timeout-exception)
    ("PermissionTypeMismatchException" . permission-type-mismatch-exception)
    ("ResourceNotReadyException" . resource-not-ready-exception)
    ("ResourceNumberLimitExceededException"
     . resource-number-limit-exceeded-exception)
    ("SchedulerNotRunningException" . scheduler-not-running-exception)
    ("SchedulerRunningException" . scheduler-running-exception)
    ("SchedulerTransitioningException" . scheduler-transitioning-exception)
    ("ValidationException" . validation-exception)
    ("VersionMismatchException" . version-mismatch-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass action common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-action-job-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arguments :initarg :arguments :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-map common-lisp:null)
                         :accessor struct-shape-action-arguments :shape
                         "GenericMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor struct-shape-action-timeout :shape "Timeout"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-action-security-configuration
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-property :initarg :notification-property
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-property
                                         common-lisp:null)
                         :accessor struct-shape-action-notification-property
                         :shape "NotificationProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (crawler-name :initarg :crawler-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-action-crawler-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arguments))
      (common-lisp:list
       (common-lisp:cons "Arguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-property))
      (common-lisp:list
       (common-lisp:cons "NotificationProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name))
      (common-lisp:list
       (common-lisp:cons "CrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list action))
 (common-lisp:defun make-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype additional-context-map () 'common-lisp:hash-table)
 (common-lisp:defun make-additional-context-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype additional-option-keys () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype additional-options () 'common-lisp:hash-table)
 (common-lisp:defun make-additional-options
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype additional-plan-options-map () 'common-lisp:hash-table)
 (common-lisp:defun make-additional-plan-options-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype agg-function () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aggregate common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-aggregate-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-aggregate-inputs :shape "OneInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (groups :initarg :groups :initform
                         (common-lisp:error ":groups is required") :type
                         (common-lisp:or glue-studio-path-list
                                         common-lisp:null)
                         :accessor struct-shape-aggregate-groups :shape
                         "GlueStudioPathList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggs :initarg :aggs :initform
                         (common-lisp:error ":aggs is required") :type
                         (common-lisp:or aggregate-operations common-lisp:null)
                         :accessor struct-shape-aggregate-aggs :shape
                         "AggregateOperations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aggregate
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'aggregate 'make-aggregate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggs))
      (common-lisp:list
       (common-lisp:cons "Aggs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aggregate-operation common-lisp:nil
                       ((column :initarg :column :initform
                         (common-lisp:error ":column is required") :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor struct-shape-aggregate-operation-column
                         :shape "EnclosedInStringProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (agg-func :initarg :agg-func :initform
                         (common-lisp:error ":agg-func is required") :type
                         (common-lisp:or agg-function common-lisp:null)
                         :accessor struct-shape-aggregate-operation-agg-func
                         :shape "AggFunction" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregate-operation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aggregate-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregate-operation 'make-aggregate-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregate-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregate-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agg-func))
      (common-lisp:list
       (common-lisp:cons "AggFunc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregate-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregate-operations ()
   '(trivial-types:proper-list aggregate-operation))
 (common-lisp:defun make-aggregate-operations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregate-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition already-exists-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'already-exists-exception
                    'already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defclass amazon-redshift-advanced-option common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-advanced-option-key
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-advanced-option-value
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-amazon-redshift-advanced-option
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'amazon-redshift-advanced-option
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'amazon-redshift-advanced-option
                    'make-amazon-redshift-advanced-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amazon-redshift-advanced-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amazon-redshift-advanced-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amazon-redshift-advanced-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype amazon-redshift-advanced-options ()
   '(trivial-types:proper-list amazon-redshift-advanced-option))
 (common-lisp:defun make-amazon-redshift-advanced-options
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            amazon-redshift-advanced-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass amazon-redshift-node-data common-lisp:nil
                       ((access-type :initarg :access-type :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-limited-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-access-type
                         :shape "GenericLimitedString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-limited-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-source-type
                         :shape "GenericLimitedString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection :initarg :connection :initform
                         common-lisp:nil :type
                         (common-lisp:or option common-lisp:null) :accessor
                         struct-shape-amazon-redshift-node-data-connection
                         :shape "Option" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or option common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-schema :shape
                         "Option" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (table :initarg :table :initform common-lisp:nil :type
                         (common-lisp:or option common-lisp:null) :accessor
                         struct-shape-amazon-redshift-node-data-table :shape
                         "Option" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (catalog-database :initarg :catalog-database :initform
                         common-lisp:nil :type
                         (common-lisp:or option common-lisp:null) :accessor
                         struct-shape-amazon-redshift-node-data-catalog-database
                         :shape "Option" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-table :initarg :catalog-table :initform
                         common-lisp:nil :type
                         (common-lisp:or option common-lisp:null) :accessor
                         struct-shape-amazon-redshift-node-data-catalog-table
                         :shape "Option" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-redshift-schema :initarg
                         :catalog-redshift-schema :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-catalog-redshift-schema
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-redshift-table :initarg
                         :catalog-redshift-table :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-catalog-redshift-table
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (temp-dir :initarg :temp-dir :initform common-lisp:nil
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-temp-dir :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iam-role :initarg :iam-role :initform common-lisp:nil
                         :type (common-lisp:or option common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-iam-role :shape
                         "Option" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (advanced-options :initarg :advanced-options :initform
                         common-lisp:nil :type
                         (common-lisp:or amazon-redshift-advanced-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-advanced-options
                         :shape "AmazonRedshiftAdvancedOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sample-query :initarg :sample-query :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-sample-query
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-action :initarg :pre-action :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-pre-action
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (post-action :initarg :post-action :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-post-action
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-action :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-prefix :initarg :table-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-limited-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-table-prefix
                         :shape "GenericLimitedString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (upsert :initarg :upsert :initform common-lisp:nil
                         :type (common-lisp:or boolean-value common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-upsert :shape
                         "BooleanValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (merge-action :initarg :merge-action :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-limited-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-merge-action
                         :shape "GenericLimitedString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (merge-when-matched :initarg :merge-when-matched
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-limited-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-merge-when-matched
                         :shape "GenericLimitedString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (merge-when-not-matched :initarg
                         :merge-when-not-matched :initform common-lisp:nil
                         :type
                         (common-lisp:or generic-limited-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-merge-when-not-matched
                         :shape "GenericLimitedString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (merge-clause :initarg :merge-clause :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-merge-clause
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (crawler-connection :initarg :crawler-connection
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-crawler-connection
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-schema :initarg :table-schema :initform
                         common-lisp:nil :type
                         (common-lisp:or option-list common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-table-schema
                         :shape "OptionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (staging-table :initarg :staging-table :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-staging-table
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selected-columns :initarg :selected-columns :initform
                         common-lisp:nil :type
                         (common-lisp:or option-list common-lisp:null)
                         :accessor
                         struct-shape-amazon-redshift-node-data-selected-columns
                         :shape "OptionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-amazon-redshift-node-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'amazon-redshift-node-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'amazon-redshift-node-data
                    'make-amazon-redshift-node-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amazon-redshift-node-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amazon-redshift-node-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-type))
      (common-lisp:list
       (common-lisp:cons "AccessType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-database))
      (common-lisp:list
       (common-lisp:cons "CatalogDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-table))
      (common-lisp:list
       (common-lisp:cons "CatalogTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'catalog-redshift-schema))
      (common-lisp:list
       (common-lisp:cons "CatalogRedshiftSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'catalog-redshift-table))
      (common-lisp:list
       (common-lisp:cons "CatalogRedshiftTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temp-dir))
      (common-lisp:list
       (common-lisp:cons "TempDir"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "IamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-query))
      (common-lisp:list
       (common-lisp:cons "SampleQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-action))
      (common-lisp:list
       (common-lisp:cons "PreAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-action))
      (common-lisp:list
       (common-lisp:cons "PostAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-prefix))
      (common-lisp:list
       (common-lisp:cons "TablePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upsert))
      (common-lisp:list
       (common-lisp:cons "Upsert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-action))
      (common-lisp:list
       (common-lisp:cons "MergeAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-when-matched))
      (common-lisp:list
       (common-lisp:cons "MergeWhenMatched"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'merge-when-not-matched))
      (common-lisp:list
       (common-lisp:cons "MergeWhenNotMatched"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-clause))
      (common-lisp:list
       (common-lisp:cons "MergeClause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-connection))
      (common-lisp:list
       (common-lisp:cons "CrawlerConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-schema))
      (common-lisp:list
       (common-lisp:cons "TableSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-table))
      (common-lisp:list
       (common-lisp:cons "StagingTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-columns))
      (common-lisp:list
       (common-lisp:cons "SelectedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amazon-redshift-node-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass amazon-redshift-source common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-amazon-redshift-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data :initarg :data :initform common-lisp:nil :type
                         (common-lisp:or amazon-redshift-node-data
                                         common-lisp:null)
                         :accessor struct-shape-amazon-redshift-source-data
                         :shape "AmazonRedshiftNodeData" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-amazon-redshift-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'amazon-redshift-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'amazon-redshift-source 'make-amazon-redshift-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amazon-redshift-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amazon-redshift-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amazon-redshift-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass amazon-redshift-target common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-amazon-redshift-target-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data :initarg :data :initform common-lisp:nil :type
                         (common-lisp:or amazon-redshift-node-data
                                         common-lisp:null)
                         :accessor struct-shape-amazon-redshift-target-data
                         :shape "AmazonRedshiftNodeData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (inputs :initarg :inputs :initform common-lisp:nil
                         :type (common-lisp:or one-input common-lisp:null)
                         :accessor struct-shape-amazon-redshift-target-inputs
                         :shape "OneInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-amazon-redshift-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'amazon-redshift-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'amazon-redshift-target 'make-amazon-redshift-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amazon-redshift-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amazon-redshift-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amazon-redshift-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass apply-mapping common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-apply-mapping-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-apply-mapping-inputs :shape "OneInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (mapping :initarg :mapping :initform
                         (common-lisp:error ":mapping is required") :type
                         (common-lisp:or mappings common-lisp:null) :accessor
                         struct-shape-apply-mapping-mapping :shape "Mappings"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-apply-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'apply-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'apply-mapping 'make-apply-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input apply-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input apply-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping))
      (common-lisp:list
       (common-lisp:cons "Mapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input apply-mapping))
   common-lisp:nil))
(common-lisp:deftype arn-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass athena-connector-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-athena-connector-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         (common-lisp:error ":connection-name is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-athena-connector-source-connection-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connector-name :initarg :connector-name :initform
                         (common-lisp:error ":connector-name is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-athena-connector-source-connector-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-type :initarg :connection-type :initform
                         (common-lisp:error ":connection-type is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-athena-connector-source-connection-type
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-table :initarg :connection-table :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property-with-quote
                                         common-lisp:null)
                         :accessor
                         struct-shape-athena-connector-source-connection-table
                         :shape "EnclosedInStringPropertyWithQuote" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         (common-lisp:error ":schema-name is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-athena-connector-source-schema-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor
                         struct-shape-athena-connector-source-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-athena-connector-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'athena-connector-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'athena-connector-source 'make-athena-connector-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          athena-connector-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          athena-connector-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "ConnectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-table))
      (common-lisp:list
       (common-lisp:cons "ConnectionTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          athena-connector-source))
   common-lisp:nil))
(common-lisp:deftype attempt-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype audit-column-names-list ()
   '(trivial-types:proper-list column-name-string))
 (common-lisp:defun make-audit-column-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass audit-context common-lisp:nil
                       ((additional-audit-context :initarg
                         :additional-audit-context :initform common-lisp:nil
                         :type
                         (common-lisp:or audit-context-string common-lisp:null)
                         :accessor
                         struct-shape-audit-context-additional-audit-context
                         :shape "AuditContextString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requested-columns :initarg :requested-columns
                         :initform common-lisp:nil :type
                         (common-lisp:or audit-column-names-list
                                         common-lisp:null)
                         :accessor struct-shape-audit-context-requested-columns
                         :shape "AuditColumnNamesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (all-columns-requested :initarg :all-columns-requested
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-audit-context-all-columns-requested
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-audit-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'audit-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'audit-context 'make-audit-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audit-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audit-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-audit-context))
      (common-lisp:list
       (common-lisp:cons "AdditionalAuditContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requested-columns))
      (common-lisp:list
       (common-lisp:cons "RequestedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'all-columns-requested))
      (common-lisp:list
       (common-lisp:cons "AllColumnsRequested"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audit-context))
   common-lisp:nil))
(common-lisp:deftype audit-context-string () 'common-lisp:string)
(common-lisp:deftype auth-token-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass backfill-error common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or backfill-error-code common-lisp:null)
                         :accessor struct-shape-backfill-error-code :shape
                         "BackfillErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partitions :initarg :partitions :initform
                         common-lisp:nil :type
                         (common-lisp:or backfill-errored-partitions-list
                                         common-lisp:null)
                         :accessor struct-shape-backfill-error-partitions
                         :shape "BackfillErroredPartitionsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-backfill-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'backfill-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'backfill-error 'make-backfill-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backfill-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backfill-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partitions))
      (common-lisp:list
       (common-lisp:cons "Partitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backfill-error))
   common-lisp:nil))
(common-lisp:deftype backfill-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype backfill-errored-partitions-list ()
   '(trivial-types:proper-list partition-value-list))
 (common-lisp:defun make-backfill-errored-partitions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-value-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype backfill-errors ()
   '(trivial-types:proper-list backfill-error))
 (common-lisp:defun make-backfill-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backfill-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass basic-catalog-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-basic-catalog-target-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-basic-catalog-target-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-basic-catalog-target-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-basic-catalog-target-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-basic-catalog-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'basic-catalog-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'basic-catalog-target 'make-basic-catalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input basic-catalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input basic-catalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input basic-catalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-partition-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-batch-create-partition-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-batch-create-partition-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-batch-create-partition-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-input-list :initarg :partition-input-list
                         :initform
                         (common-lisp:error
                          ":partition-input-list is required")
                         :type
                         (common-lisp:or partition-input-list common-lisp:null)
                         :accessor
                         struct-shape-batch-create-partition-request-partition-input-list
                         :shape "PartitionInputList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-create-partition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-partition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-create-partition-request
                    'make-batch-create-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-input-list))
      (common-lisp:list
       (common-lisp:cons "PartitionInputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-partition-response common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or partition-errors common-lisp:null)
                         :accessor
                         struct-shape-batch-create-partition-response-errors
                         :shape "PartitionErrors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-create-partition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-partition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-create-partition-response
                    'make-batch-create-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-partition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-connection-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-connection-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-name-list :initarg :connection-name-list
                         :initform
                         (common-lisp:error
                          ":connection-name-list is required")
                         :type
                         (common-lisp:or delete-connection-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-connection-request-connection-name-list
                         :shape "DeleteConnectionNameList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-connection-request
                    'make-batch-delete-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-name-list))
      (common-lisp:list
       (common-lisp:cons "ConnectionNameList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-connection-response common-lisp:nil
                       ((succeeded :initarg :succeeded :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string-list common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-connection-response-succeeded
                         :shape "NameStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type (common-lisp:or error-by-name common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-connection-response-errors
                         :shape "ErrorByName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-connection-response
                    'make-batch-delete-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'succeeded))
      (common-lisp:list
       (common-lisp:cons "Succeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-partition-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-partition-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-partition-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-partition-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partitions-to-delete :initarg :partitions-to-delete
                         :initform
                         (common-lisp:error
                          ":partitions-to-delete is required")
                         :type
                         (common-lisp:or batch-delete-partition-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-partition-request-partitions-to-delete
                         :shape "BatchDeletePartitionValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-partition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-partition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-partition-request
                    'make-batch-delete-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partitions-to-delete))
      (common-lisp:list
       (common-lisp:cons "PartitionsToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-partition-response common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or partition-errors common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-partition-response-errors
                         :shape "PartitionErrors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-partition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-partition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-partition-response
                    'make-batch-delete-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-partition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-delete-partition-value-list ()
   '(trivial-types:proper-list partition-value-list))
 (common-lisp:defun make-batch-delete-partition-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-value-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype batch-delete-table-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-batch-delete-table-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-delete-table-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-table-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-table-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tables-to-delete :initarg :tables-to-delete :initform
                         (common-lisp:error ":tables-to-delete is required")
                         :type
                         (common-lisp:or batch-delete-table-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-table-request-tables-to-delete
                         :shape "BatchDeleteTableNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (transaction-id :initarg :transaction-id :initform
                         common-lisp:nil :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-table-request-transaction-id
                         :shape "TransactionIdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-table-request
                    'make-batch-delete-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-to-delete))
      (common-lisp:list
       (common-lisp:cons "TablesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-table-response common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type (common-lisp:or table-errors common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-table-response-errors :shape
                         "TableErrors" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-delete-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-table-response
                    'make-batch-delete-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-delete-table-version-list ()
   '(trivial-types:proper-list version-string))
 (common-lisp:defun make-batch-delete-table-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list version-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-delete-table-version-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-table-version-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-table-version-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-table-version-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-ids :initarg :version-ids :initform
                         (common-lisp:error ":version-ids is required") :type
                         (common-lisp:or batch-delete-table-version-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-table-version-request-version-ids
                         :shape "BatchDeleteTableVersionList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-table-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-table-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-table-version-request
                    'make-batch-delete-table-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-ids))
      (common-lisp:list
       (common-lisp:cons "VersionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-table-version-response common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or table-version-errors common-lisp:null)
                         :accessor
                         struct-shape-batch-delete-table-version-response-errors
                         :shape "TableVersionErrors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-delete-table-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-table-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-delete-table-version-response
                    'make-batch-delete-table-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-blueprint-names ()
   '(trivial-types:proper-list orchestration-name-string))
 (common-lisp:defun make-batch-get-blueprint-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            orchestration-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-blueprints-request common-lisp:nil
                       ((names :initarg :names :initform
                         (common-lisp:error ":names is required") :type
                         (common-lisp:or batch-get-blueprint-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-blueprints-request-names :shape
                         "BatchGetBlueprintNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-blueprint :initarg :include-blueprint
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-batch-get-blueprints-request-include-blueprint
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-parameter-spec :initarg
                         :include-parameter-spec :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-batch-get-blueprints-request-include-parameter-spec
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-blueprints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-blueprints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-blueprints-request
                    'make-batch-get-blueprints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-blueprints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-blueprints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-blueprint))
      (common-lisp:list
       (common-lisp:cons "IncludeBlueprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-parameter-spec))
      (common-lisp:list
       (common-lisp:cons "IncludeParameterSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-blueprints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-blueprints-response common-lisp:nil
                       ((blueprints :initarg :blueprints :initform
                         common-lisp:nil :type
                         (common-lisp:or blueprints common-lisp:null) :accessor
                         struct-shape-batch-get-blueprints-response-blueprints
                         :shape "Blueprints" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (missing-blueprints :initarg :missing-blueprints
                         :initform common-lisp:nil :type
                         (common-lisp:or blueprint-names common-lisp:null)
                         :accessor
                         struct-shape-batch-get-blueprints-response-missing-blueprints
                         :shape "BlueprintNames" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-blueprints-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-blueprints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-blueprints-response
                    'make-batch-get-blueprints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-blueprints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-blueprints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprints))
      (common-lisp:list
       (common-lisp:cons "Blueprints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-blueprints))
      (common-lisp:list
       (common-lisp:cons "MissingBlueprints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-blueprints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-crawlers-request common-lisp:nil
                       ((crawler-names :initarg :crawler-names :initform
                         (common-lisp:error ":crawler-names is required") :type
                         (common-lisp:or crawler-name-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-crawlers-request-crawler-names
                         :shape "CrawlerNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-crawlers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-crawlers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-crawlers-request
                    'make-batch-get-crawlers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-crawlers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-crawlers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-names))
      (common-lisp:list
       (common-lisp:cons "CrawlerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-crawlers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-crawlers-response common-lisp:nil
                       ((crawlers :initarg :crawlers :initform common-lisp:nil
                         :type (common-lisp:or crawler-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-crawlers-response-crawlers
                         :shape "CrawlerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (crawlers-not-found :initarg :crawlers-not-found
                         :initform common-lisp:nil :type
                         (common-lisp:or crawler-name-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-crawlers-response-crawlers-not-found
                         :shape "CrawlerNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-crawlers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-crawlers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-crawlers-response
                    'make-batch-get-crawlers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-crawlers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-crawlers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawlers))
      (common-lisp:list
       (common-lisp:cons "Crawlers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawlers-not-found))
      (common-lisp:list
       (common-lisp:cons "CrawlersNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-crawlers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-custom-entity-types-request common-lisp:nil
                       ((names :initarg :names :initform
                         (common-lisp:error ":names is required") :type
                         (common-lisp:or custom-entity-type-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-custom-entity-types-request-names
                         :shape "CustomEntityTypeNames" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-custom-entity-types-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-custom-entity-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-custom-entity-types-request
                    'make-batch-get-custom-entity-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-entity-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-entity-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-entity-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-custom-entity-types-response common-lisp:nil
                       ((custom-entity-types :initarg :custom-entity-types
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-entity-types common-lisp:null)
                         :accessor
                         struct-shape-batch-get-custom-entity-types-response-custom-entity-types
                         :shape "CustomEntityTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-entity-types-not-found :initarg
                         :custom-entity-types-not-found :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-entity-type-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-custom-entity-types-response-custom-entity-types-not-found
                         :shape "CustomEntityTypeNames" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-custom-entity-types-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-custom-entity-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-custom-entity-types-response
                    'make-batch-get-custom-entity-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-entity-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-entity-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-entity-types))
      (common-lisp:list
       (common-lisp:cons "CustomEntityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-entity-types-not-found))
      (common-lisp:list
       (common-lisp:cons "CustomEntityTypesNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-custom-entity-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-data-quality-result-request common-lisp:nil
                       ((result-ids :initarg :result-ids :initform
                         (common-lisp:error ":result-ids is required") :type
                         (common-lisp:or data-quality-result-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-data-quality-result-request-result-ids
                         :shape "DataQualityResultIds" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-data-quality-result-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-data-quality-result-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-data-quality-result-request
                    'make-batch-get-data-quality-result-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-data-quality-result-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-data-quality-result-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-ids))
      (common-lisp:list
       (common-lisp:cons "ResultIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-data-quality-result-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-data-quality-result-response common-lisp:nil
                       ((results :initarg :results :initform
                         (common-lisp:error ":results is required") :type
                         (common-lisp:or data-quality-results-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-data-quality-result-response-results
                         :shape "DataQualityResultsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (results-not-found :initarg :results-not-found
                         :initform common-lisp:nil :type
                         (common-lisp:or data-quality-result-ids
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-data-quality-result-response-results-not-found
                         :shape "DataQualityResultIds" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-data-quality-result-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-data-quality-result-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-data-quality-result-response
                    'make-batch-get-data-quality-result-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-data-quality-result-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-data-quality-result-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-not-found))
      (common-lisp:list
       (common-lisp:cons "ResultsNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-data-quality-result-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-dev-endpoints-request common-lisp:nil
                       ((dev-endpoint-names :initarg :dev-endpoint-names
                         :initform
                         (common-lisp:error ":dev-endpoint-names is required")
                         :type
                         (common-lisp:or dev-endpoint-names common-lisp:null)
                         :accessor
                         struct-shape-batch-get-dev-endpoints-request-dev-endpoint-names
                         :shape "DevEndpointNames" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-dev-endpoints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-dev-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-dev-endpoints-request
                    'make-batch-get-dev-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-dev-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-dev-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-endpoint-names))
      (common-lisp:list
       (common-lisp:cons "DevEndpointNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-dev-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-dev-endpoints-response common-lisp:nil
                       ((dev-endpoints :initarg :dev-endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or dev-endpoint-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-dev-endpoints-response-dev-endpoints
                         :shape "DevEndpointList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dev-endpoints-not-found :initarg
                         :dev-endpoints-not-found :initform common-lisp:nil
                         :type
                         (common-lisp:or dev-endpoint-names common-lisp:null)
                         :accessor
                         struct-shape-batch-get-dev-endpoints-response-dev-endpoints-not-found
                         :shape "DevEndpointNames" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-dev-endpoints-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-dev-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-dev-endpoints-response
                    'make-batch-get-dev-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-dev-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-dev-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-endpoints))
      (common-lisp:list
       (common-lisp:cons "DevEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dev-endpoints-not-found))
      (common-lisp:list
       (common-lisp:cons "DevEndpointsNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-dev-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-jobs-request common-lisp:nil
                       ((job-names :initarg :job-names :initform
                         (common-lisp:error ":job-names is required") :type
                         (common-lisp:or job-name-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-jobs-request-job-names :shape
                         "JobNameList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-jobs-request 'make-batch-get-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-names))
      (common-lisp:list
       (common-lisp:cons "JobNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-jobs-response common-lisp:nil
                       ((jobs :initarg :jobs :initform common-lisp:nil :type
                         (common-lisp:or job-list common-lisp:null) :accessor
                         struct-shape-batch-get-jobs-response-jobs :shape
                         "JobList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (jobs-not-found :initarg :jobs-not-found :initform
                         common-lisp:nil :type
                         (common-lisp:or job-name-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-jobs-response-jobs-not-found
                         :shape "JobNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-jobs-response 'make-batch-get-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs-not-found))
      (common-lisp:list
       (common-lisp:cons "JobsNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-partition-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-batch-get-partition-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-batch-get-partition-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-batch-get-partition-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partitions-to-get :initarg :partitions-to-get
                         :initform
                         (common-lisp:error ":partitions-to-get is required")
                         :type
                         (common-lisp:or batch-get-partition-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-partition-request-partitions-to-get
                         :shape "BatchGetPartitionValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-partition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-partition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-partition-request
                    'make-batch-get-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partitions-to-get))
      (common-lisp:list
       (common-lisp:cons "PartitionsToGet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-partition-response common-lisp:nil
                       ((partitions :initarg :partitions :initform
                         common-lisp:nil :type
                         (common-lisp:or partition-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-partition-response-partitions
                         :shape "PartitionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unprocessed-keys :initarg :unprocessed-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-get-partition-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-partition-response-unprocessed-keys
                         :shape "BatchGetPartitionValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-partition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-partition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-partition-response
                    'make-batch-get-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-partition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partitions))
      (common-lisp:list
       (common-lisp:cons "Partitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unprocessed-keys))
      (common-lisp:list
       (common-lisp:cons "UnprocessedKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-partition-value-list ()
   '(trivial-types:proper-list partition-value-list))
 (common-lisp:defun make-batch-get-partition-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-value-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype batch-get-table-optimizer-entries ()
   '(trivial-types:proper-list batch-get-table-optimizer-entry))
 (common-lisp:defun make-batch-get-table-optimizer-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-table-optimizer-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-table-optimizer-entry common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-batch-get-table-optimizer-entry-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |databaseNameString| common-lisp:null)
                         :accessor
                         struct-shape-batch-get-table-optimizer-entry-database-name
                         :shape "databaseNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |tableNameString| common-lisp:null)
                         :accessor
                         struct-shape-batch-get-table-optimizer-entry-table-name
                         :shape "tableNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or table-optimizer-type common-lisp:null)
                         :accessor
                         struct-shape-batch-get-table-optimizer-entry-type
                         :shape "TableOptimizerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-table-optimizer-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-table-optimizer-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-table-optimizer-entry
                    'make-batch-get-table-optimizer-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-table-optimizer-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-table-optimizer-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "catalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-table-optimizer-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-table-optimizer-error common-lisp:nil
                       ((error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor
                         struct-shape-batch-get-table-optimizer-error-error
                         :shape "ErrorDetail" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-batch-get-table-optimizer-error-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |databaseNameString| common-lisp:null)
                         :accessor
                         struct-shape-batch-get-table-optimizer-error-database-name
                         :shape "databaseNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |tableNameString| common-lisp:null)
                         :accessor
                         struct-shape-batch-get-table-optimizer-error-table-name
                         :shape "tableNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or table-optimizer-type common-lisp:null)
                         :accessor
                         struct-shape-batch-get-table-optimizer-error-type
                         :shape "TableOptimizerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-table-optimizer-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-table-optimizer-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-table-optimizer-error
                    'make-batch-get-table-optimizer-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-table-optimizer-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-table-optimizer-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "catalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-table-optimizer-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-table-optimizer-errors ()
   '(trivial-types:proper-list batch-get-table-optimizer-error))
 (common-lisp:defun make-batch-get-table-optimizer-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-table-optimizer-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-table-optimizer-request common-lisp:nil
                       ((entries :initarg :entries :initform
                         (common-lisp:error ":entries is required") :type
                         (common-lisp:or batch-get-table-optimizer-entries
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-table-optimizer-request-entries
                         :shape "BatchGetTableOptimizerEntries" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-table-optimizer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-table-optimizer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-table-optimizer-request
                    'make-batch-get-table-optimizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-table-optimizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-table-optimizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-table-optimizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-table-optimizer-response common-lisp:nil
                       ((table-optimizers :initarg :table-optimizers :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-table-optimizers
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-table-optimizer-response-table-optimizers
                         :shape "BatchTableOptimizers" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (failures :initarg :failures :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-get-table-optimizer-errors
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-table-optimizer-response-failures
                         :shape "BatchGetTableOptimizerErrors" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-table-optimizer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-table-optimizer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-table-optimizer-response
                    'make-batch-get-table-optimizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-table-optimizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-table-optimizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-optimizers))
      (common-lisp:list
       (common-lisp:cons "TableOptimizers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "Failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-table-optimizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-triggers-request common-lisp:nil
                       ((trigger-names :initarg :trigger-names :initform
                         (common-lisp:error ":trigger-names is required") :type
                         (common-lisp:or trigger-name-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-triggers-request-trigger-names
                         :shape "TriggerNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-triggers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-triggers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-triggers-request
                    'make-batch-get-triggers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-triggers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-triggers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-names))
      (common-lisp:list
       (common-lisp:cons "TriggerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-triggers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-triggers-response common-lisp:nil
                       ((triggers :initarg :triggers :initform common-lisp:nil
                         :type (common-lisp:or trigger-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-triggers-response-triggers
                         :shape "TriggerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (triggers-not-found :initarg :triggers-not-found
                         :initform common-lisp:nil :type
                         (common-lisp:or trigger-name-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-triggers-response-triggers-not-found
                         :shape "TriggerNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-triggers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-triggers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-triggers-response
                    'make-batch-get-triggers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-triggers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-triggers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "Triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers-not-found))
      (common-lisp:list
       (common-lisp:cons "TriggersNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-triggers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-workflows-request common-lisp:nil
                       ((names :initarg :names :initform
                         (common-lisp:error ":names is required") :type
                         (common-lisp:or workflow-names common-lisp:null)
                         :accessor
                         struct-shape-batch-get-workflows-request-names :shape
                         "WorkflowNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-graph :initarg :include-graph :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-batch-get-workflows-request-include-graph
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-workflows-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-workflows-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-workflows-request
                    'make-batch-get-workflows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-workflows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-workflows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'names))
      (common-lisp:list
       (common-lisp:cons "Names"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-graph))
      (common-lisp:list
       (common-lisp:cons "IncludeGraph"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-workflows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-workflows-response common-lisp:nil
                       ((workflows :initarg :workflows :initform
                         common-lisp:nil :type
                         (common-lisp:or workflows common-lisp:null) :accessor
                         struct-shape-batch-get-workflows-response-workflows
                         :shape "Workflows" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (missing-workflows :initarg :missing-workflows
                         :initform common-lisp:nil :type
                         (common-lisp:or workflow-names common-lisp:null)
                         :accessor
                         struct-shape-batch-get-workflows-response-missing-workflows
                         :shape "WorkflowNames" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-workflows-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-get-workflows-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-workflows-response
                    'make-batch-get-workflows-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-workflows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-workflows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflows))
      (common-lisp:list
       (common-lisp:cons "Workflows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-workflows))
      (common-lisp:list
       (common-lisp:cons "MissingWorkflows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-workflows-response))
   common-lisp:nil))
(common-lisp:deftype batch-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass batch-stop-job-run-error common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-batch-stop-job-run-error-job-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-run-id :initarg :job-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-batch-stop-job-run-error-job-run-id
                         :shape "IdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-detail :initarg :error-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor
                         struct-shape-batch-stop-job-run-error-error-detail
                         :shape "ErrorDetail" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-stop-job-run-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-stop-job-run-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-stop-job-run-error 'make-batch-stop-job-run-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail))
      (common-lisp:list
       (common-lisp:cons "ErrorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-stop-job-run-error-list ()
   '(trivial-types:proper-list batch-stop-job-run-error))
 (common-lisp:defun make-batch-stop-job-run-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-stop-job-run-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype batch-stop-job-run-job-run-id-list ()
   '(trivial-types:proper-list id-string))
 (common-lisp:defun make-batch-stop-job-run-job-run-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list id-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-stop-job-run-request common-lisp:nil
                       ((job-name :initarg :job-name :initform
                         (common-lisp:error ":job-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-batch-stop-job-run-request-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-run-ids :initarg :job-run-ids :initform
                         (common-lisp:error ":job-run-ids is required") :type
                         (common-lisp:or batch-stop-job-run-job-run-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-stop-job-run-request-job-run-ids
                         :shape "BatchStopJobRunJobRunIdList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-stop-job-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-stop-job-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-stop-job-run-request
                    'make-batch-stop-job-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-ids))
      (common-lisp:list
       (common-lisp:cons "JobRunIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-stop-job-run-response common-lisp:nil
                       ((successful-submissions :initarg
                         :successful-submissions :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          batch-stop-job-run-successful-submission-list
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-stop-job-run-response-successful-submissions
                         :shape "BatchStopJobRunSuccessfulSubmissionList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-stop-job-run-error-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-stop-job-run-response-errors :shape
                         "BatchStopJobRunErrorList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-stop-job-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-stop-job-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-stop-job-run-response
                    'make-batch-stop-job-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'successful-submissions))
      (common-lisp:list
       (common-lisp:cons "SuccessfulSubmissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-stop-job-run-successful-submission common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-batch-stop-job-run-successful-submission-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-run-id :initarg :job-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-batch-stop-job-run-successful-submission-job-run-id
                         :shape "IdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-stop-job-run-successful-submission
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-stop-job-run-successful-submission
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-stop-job-run-successful-submission
                    'make-batch-stop-job-run-successful-submission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-successful-submission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-successful-submission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-job-run-successful-submission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-stop-job-run-successful-submission-list ()
   '(trivial-types:proper-list batch-stop-job-run-successful-submission))
 (common-lisp:defun make-batch-stop-job-run-successful-submission-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-stop-job-run-successful-submission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-table-optimizer common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-batch-table-optimizer-catalog-id :shape
                         "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |databaseNameString| common-lisp:null)
                         :accessor
                         struct-shape-batch-table-optimizer-database-name
                         :shape "databaseNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or |tableNameString| common-lisp:null)
                         :accessor
                         struct-shape-batch-table-optimizer-table-name :shape
                         "tableNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-optimizer :initarg :table-optimizer :initform
                         common-lisp:nil :type
                         (common-lisp:or table-optimizer common-lisp:null)
                         :accessor
                         struct-shape-batch-table-optimizer-table-optimizer
                         :shape "TableOptimizer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-table-optimizer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'batch-table-optimizer
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-table-optimizer 'make-batch-table-optimizer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-table-optimizer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-table-optimizer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "catalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "databaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-optimizer))
      (common-lisp:list
       (common-lisp:cons "tableOptimizer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-table-optimizer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-table-optimizers ()
   '(trivial-types:proper-list batch-table-optimizer))
 (common-lisp:defun make-batch-table-optimizers
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-table-optimizer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-update-partition-failure-entry common-lisp:nil
                       ((partition-value-list :initarg :partition-value-list
                         :initform common-lisp:nil :type
                         (common-lisp:or bounded-partition-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-partition-failure-entry-partition-value-list
                         :shape "BoundedPartitionValueList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-detail :initarg :error-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor
                         struct-shape-batch-update-partition-failure-entry-error-detail
                         :shape "ErrorDetail" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-update-partition-failure-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-partition-failure-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-update-partition-failure-entry
                    'make-batch-update-partition-failure-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-failure-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-failure-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-value-list))
      (common-lisp:list
       (common-lisp:cons "PartitionValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail))
      (common-lisp:list
       (common-lisp:cons "ErrorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-failure-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-update-partition-failure-list ()
   '(trivial-types:proper-list batch-update-partition-failure-entry))
 (common-lisp:defun make-batch-update-partition-failure-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-update-partition-failure-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-update-partition-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-batch-update-partition-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-batch-update-partition-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-batch-update-partition-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entries :initarg :entries :initform
                         (common-lisp:error ":entries is required") :type
                         (common-lisp:or
                          batch-update-partition-request-entry-list
                          common-lisp:null)
                         :accessor
                         struct-shape-batch-update-partition-request-entries
                         :shape "BatchUpdatePartitionRequestEntryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-update-partition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-partition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-update-partition-request
                    'make-batch-update-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "Entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-update-partition-request-entry common-lisp:nil
                       ((partition-value-list :initarg :partition-value-list
                         :initform
                         (common-lisp:error
                          ":partition-value-list is required")
                         :type
                         (common-lisp:or bounded-partition-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-partition-request-entry-partition-value-list
                         :shape "BoundedPartitionValueList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (partition-input :initarg :partition-input :initform
                         (common-lisp:error ":partition-input is required")
                         :type
                         (common-lisp:or partition-input common-lisp:null)
                         :accessor
                         struct-shape-batch-update-partition-request-entry-partition-input
                         :shape "PartitionInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-update-partition-request-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-partition-request-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-update-partition-request-entry
                    'make-batch-update-partition-request-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-request-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-request-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-value-list))
      (common-lisp:list
       (common-lisp:cons "PartitionValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-input))
      (common-lisp:list
       (common-lisp:cons "PartitionInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-request-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-update-partition-request-entry-list ()
   '(trivial-types:proper-list batch-update-partition-request-entry))
 (common-lisp:defun make-batch-update-partition-request-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-update-partition-request-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-update-partition-response common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or batch-update-partition-failure-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-update-partition-response-errors
                         :shape "BatchUpdatePartitionFailureList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-update-partition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-update-partition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-update-partition-response
                    'make-batch-update-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-partition-response))
   common-lisp:nil))
(common-lisp:deftype batch-window () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass binary-column-statistics-data common-lisp:nil
                       ((maximum-length :initarg :maximum-length :initform
                         (common-lisp:error ":maximum-length is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-binary-column-statistics-data-maximum-length
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (average-length :initarg :average-length :initform
                         (common-lisp:error ":average-length is required")
                         :type
                         (common-lisp:or non-negative-double common-lisp:null)
                         :accessor
                         struct-shape-binary-column-statistics-data-average-length
                         :shape "NonNegativeDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-nulls :initarg :number-of-nulls :initform
                         (common-lisp:error ":number-of-nulls is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-binary-column-statistics-data-number-of-nulls
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-binary-column-statistics-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'binary-column-statistics-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'binary-column-statistics-data
                    'make-binary-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          binary-column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          binary-column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-length))
      (common-lisp:list
       (common-lisp:cons "MaximumLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'average-length))
      (common-lisp:list
       (common-lisp:cons "AverageLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nulls))
      (common-lisp:list
       (common-lisp:cons "NumberOfNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          binary-column-statistics-data))
   common-lisp:nil))
(common-lisp:deftype blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass blueprint common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor struct-shape-blueprint-name :shape
                         "OrchestrationNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or generic512char-string
                                         common-lisp:null)
                         :accessor struct-shape-blueprint-description :shape
                         "Generic512CharString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-on :initarg :created-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-blueprint-created-on :shape
                         "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-on :initarg :last-modified-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-blueprint-last-modified-on
                         :shape "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-spec :initarg :parameter-spec :initform
                         common-lisp:nil :type
                         (common-lisp:or blueprint-parameter-spec
                                         common-lisp:null)
                         :accessor struct-shape-blueprint-parameter-spec :shape
                         "BlueprintParameterSpec" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (blueprint-location :initarg :blueprint-location
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-blueprint-blueprint-location
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (blueprint-service-location :initarg
                         :blueprint-service-location :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-blueprint-blueprint-service-location
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or blueprint-status common-lisp:null)
                         :accessor struct-shape-blueprint-status :shape
                         "BlueprintStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-string common-lisp:null)
                         :accessor struct-shape-blueprint-error-message :shape
                         "ErrorString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-active-definition :initarg
                         :last-active-definition :initform common-lisp:nil
                         :type
                         (common-lisp:or last-active-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-blueprint-last-active-definition :shape
                         "LastActiveDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-blueprint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'blueprint
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'blueprint 'make-blueprint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blueprint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blueprint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-spec))
      (common-lisp:list
       (common-lisp:cons "ParameterSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-location))
      (common-lisp:list
       (common-lisp:cons "BlueprintLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blueprint-service-location))
      (common-lisp:list
       (common-lisp:cons "BlueprintServiceLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-active-definition))
      (common-lisp:list
       (common-lisp:cons "LastActiveDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blueprint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass blueprint-details common-lisp:nil
                       ((blueprint-name :initarg :blueprint-name :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-blueprint-details-blueprint-name :shape
                         "OrchestrationNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or id-string common-lisp:null)
                         :accessor struct-shape-blueprint-details-run-id :shape
                         "IdString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-blueprint-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'blueprint-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'blueprint-details 'make-blueprint-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blueprint-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blueprint-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-name))
      (common-lisp:list
       (common-lisp:cons "BlueprintName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blueprint-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype blueprint-names ()
   '(trivial-types:proper-list orchestration-name-string))
 (common-lisp:defun make-blueprint-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            orchestration-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype blueprint-parameter-spec () 'common-lisp:string)
(common-lisp:deftype blueprint-parameters () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass blueprint-run common-lisp:nil
                       ((blueprint-name :initarg :blueprint-name :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor struct-shape-blueprint-run-blueprint-name
                         :shape "OrchestrationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or id-string common-lisp:null)
                         :accessor struct-shape-blueprint-run-run-id :shape
                         "IdString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workflow-name :initarg :workflow-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-blueprint-run-workflow-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or blueprint-run-state common-lisp:null)
                         :accessor struct-shape-blueprint-run-state :shape
                         "BlueprintRunState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-blueprint-run-started-on :shape
                         "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completed-on :initarg :completed-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-blueprint-run-completed-on
                         :shape "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or message-string common-lisp:null)
                         :accessor struct-shape-blueprint-run-error-message
                         :shape "MessageString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rollback-error-message :initarg
                         :rollback-error-message :initform common-lisp:nil
                         :type (common-lisp:or message-string common-lisp:null)
                         :accessor
                         struct-shape-blueprint-run-rollback-error-message
                         :shape "MessageString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or blueprint-parameters common-lisp:null)
                         :accessor struct-shape-blueprint-run-parameters :shape
                         "BlueprintParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or orchestration-iamrole-arn
                                         common-lisp:null)
                         :accessor struct-shape-blueprint-run-role-arn :shape
                         "OrchestrationIAMRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-blueprint-run
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'blueprint-run
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'blueprint-run 'make-blueprint-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blueprint-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blueprint-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-name))
      (common-lisp:list
       (common-lisp:cons "BlueprintName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "WorkflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollback-error-message))
      (common-lisp:list
       (common-lisp:cons "RollbackErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blueprint-run))
   common-lisp:nil))
(common-lisp:deftype blueprint-run-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype blueprint-runs ()
   '(trivial-types:proper-list blueprint-run))
 (common-lisp:defun make-blueprint-runs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list blueprint-run))
   aws-sdk/generator/shape::members))
(common-lisp:deftype blueprint-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype blueprints () '(trivial-types:proper-list blueprint))
 (common-lisp:defun make-blueprints
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list blueprint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass boolean-column-statistics-data common-lisp:nil
                       ((number-of-trues :initarg :number-of-trues :initform
                         (common-lisp:error ":number-of-trues is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-boolean-column-statistics-data-number-of-trues
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-falses :initarg :number-of-falses :initform
                         (common-lisp:error ":number-of-falses is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-boolean-column-statistics-data-number-of-falses
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-nulls :initarg :number-of-nulls :initform
                         (common-lisp:error ":number-of-nulls is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-boolean-column-statistics-data-number-of-nulls
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-boolean-column-statistics-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'boolean-column-statistics-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'boolean-column-statistics-data
                    'make-boolean-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          boolean-column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          boolean-column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-trues))
      (common-lisp:list
       (common-lisp:cons "NumberOfTrues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-falses))
      (common-lisp:list
       (common-lisp:cons "NumberOfFalses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nulls))
      (common-lisp:list
       (common-lisp:cons "NumberOfNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          boolean-column-statistics-data))
   common-lisp:nil))
(common-lisp:deftype boolean-nullable () 'common-lisp:boolean)
(common-lisp:deftype boolean-value () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype bounded-partition-value-list ()
   '(trivial-types:proper-list value-string))
 (common-lisp:defun make-bounded-partition-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boxed-boolean () 'common-lisp:boolean)
(common-lisp:deftype boxed-double-fraction () 'common-lisp:double-float)
(common-lisp:deftype boxed-long () 'common-lisp:integer)
(common-lisp:deftype boxed-non-negative-int () 'common-lisp:integer)
(common-lisp:deftype boxed-non-negative-long () 'common-lisp:integer)
(common-lisp:deftype boxed-positive-int () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass cancel-data-quality-rule-recommendation-run-request
                       common-lisp:nil
                       ((run-id :initarg :run-id :initform
                         (common-lisp:error ":run-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-cancel-data-quality-rule-recommendation-run-request-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-data-quality-rule-recommendation-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-data-quality-rule-recommendation-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-data-quality-rule-recommendation-run-request
                    'make-cancel-data-quality-rule-recommendation-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-rule-recommendation-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-rule-recommendation-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-rule-recommendation-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-data-quality-rule-recommendation-run-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-data-quality-rule-recommendation-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-data-quality-rule-recommendation-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-data-quality-rule-recommendation-run-response
                    'make-cancel-data-quality-rule-recommendation-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-rule-recommendation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-rule-recommendation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-rule-recommendation-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-data-quality-ruleset-evaluation-run-request
                       common-lisp:nil
                       ((run-id :initarg :run-id :initform
                         (common-lisp:error ":run-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-cancel-data-quality-ruleset-evaluation-run-request-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-data-quality-ruleset-evaluation-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-data-quality-ruleset-evaluation-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-data-quality-ruleset-evaluation-run-request
                    'make-cancel-data-quality-ruleset-evaluation-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-ruleset-evaluation-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-ruleset-evaluation-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-ruleset-evaluation-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-data-quality-ruleset-evaluation-run-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-data-quality-ruleset-evaluation-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-data-quality-ruleset-evaluation-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-data-quality-ruleset-evaluation-run-response
                    'make-cancel-data-quality-ruleset-evaluation-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-ruleset-evaluation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-ruleset-evaluation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-data-quality-ruleset-evaluation-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-mltask-run-request common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         (common-lisp:error ":transform-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-cancel-mltask-run-request-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-run-id :initarg :task-run-id :initform
                         (common-lisp:error ":task-run-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-cancel-mltask-run-request-task-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-mltask-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-mltask-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-mltask-run-request
                    'make-cancel-mltask-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mltask-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mltask-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mltask-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-mltask-run-response common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-cancel-mltask-run-response-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-run-id :initarg :task-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-cancel-mltask-run-response-task-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or task-status-type common-lisp:null)
                         :accessor
                         struct-shape-cancel-mltask-run-response-status :shape
                         "TaskStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-mltask-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-mltask-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-mltask-run-response
                    'make-cancel-mltask-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mltask-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mltask-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-mltask-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-statement-request common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-cancel-statement-request-session-id
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor struct-shape-cancel-statement-request-id
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-origin :initarg :request-origin :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-cancel-statement-request-request-origin
                         :shape "OrchestrationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-statement-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-statement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-statement-request 'make-cancel-statement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-statement-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-statement-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-statement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-statement-response
                    'make-cancel-statement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-statement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass catalog-delta-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-catalog-delta-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-catalog-delta-source-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-catalog-delta-source-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-delta-options :initarg
                         :additional-delta-options :initform common-lisp:nil
                         :type
                         (common-lisp:or additional-options common-lisp:null)
                         :accessor
                         struct-shape-catalog-delta-source-additional-delta-options
                         :shape "AdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor
                         struct-shape-catalog-delta-source-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-catalog-delta-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'catalog-delta-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'catalog-delta-source 'make-catalog-delta-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-delta-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-delta-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-delta-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalDeltaOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-delta-source))
   common-lisp:nil))
(common-lisp:deftype catalog-encryption-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype catalog-entries ()
   '(trivial-types:proper-list catalog-entry))
 (common-lisp:defun make-catalog-entries
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list catalog-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass catalog-entry common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-catalog-entry-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-catalog-entry-table-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-catalog-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'catalog-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'catalog-entry 'make-catalog-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-entry))
   common-lisp:nil))
(common-lisp:deftype catalog-getter-page-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass catalog-hudi-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-catalog-hudi-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-catalog-hudi-source-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-catalog-hudi-source-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-hudi-options :initarg
                         :additional-hudi-options :initform common-lisp:nil
                         :type
                         (common-lisp:or additional-options common-lisp:null)
                         :accessor
                         struct-shape-catalog-hudi-source-additional-hudi-options
                         :shape "AdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor
                         struct-shape-catalog-hudi-source-output-schemas :shape
                         "GlueSchemas" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-catalog-hudi-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'catalog-hudi-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'catalog-hudi-source 'make-catalog-hudi-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-hudi-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-hudi-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-hudi-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalHudiOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-hudi-source))
   common-lisp:nil))
(common-lisp:deftype catalog-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass catalog-import-status common-lisp:nil
                       ((import-completed :initarg :import-completed :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-catalog-import-status-import-completed
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (import-time :initarg :import-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-catalog-import-status-import-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (imported-by :initarg :imported-by :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-catalog-import-status-imported-by :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-catalog-import-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'catalog-import-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'catalog-import-status 'make-catalog-import-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          catalog-import-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          catalog-import-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-completed))
      (common-lisp:list
       (common-lisp:cons "ImportCompleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-time))
      (common-lisp:list
       (common-lisp:cons "ImportTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imported-by))
      (common-lisp:list
       (common-lisp:cons "ImportedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          catalog-import-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass catalog-kafka-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-catalog-kafka-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (window-size :initarg :window-size :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-positive-int common-lisp:null)
                         :accessor
                         struct-shape-catalog-kafka-source-window-size :shape
                         "BoxedPositiveInt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (detect-schema :initarg :detect-schema :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-catalog-kafka-source-detect-schema :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-catalog-kafka-source-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-catalog-kafka-source-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (streaming-options :initarg :streaming-options
                         :initform common-lisp:nil :type
                         (common-lisp:or kafka-streaming-source-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-catalog-kafka-source-streaming-options
                         :shape "KafkaStreamingSourceOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-preview-options :initarg :data-preview-options
                         :initform common-lisp:nil :type
                         (common-lisp:or streaming-data-preview-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-catalog-kafka-source-data-preview-options
                         :shape "StreamingDataPreviewOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-catalog-kafka-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'catalog-kafka-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'catalog-kafka-source 'make-catalog-kafka-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-kafka-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-kafka-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-size))
      (common-lisp:list
       (common-lisp:cons "WindowSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detect-schema))
      (common-lisp:list
       (common-lisp:cons "DetectSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-options))
      (common-lisp:list
       (common-lisp:cons "StreamingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-preview-options))
      (common-lisp:list
       (common-lisp:cons "DataPreviewOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-kafka-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass catalog-kinesis-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-catalog-kinesis-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (window-size :initarg :window-size :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-positive-int common-lisp:null)
                         :accessor
                         struct-shape-catalog-kinesis-source-window-size :shape
                         "BoxedPositiveInt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (detect-schema :initarg :detect-schema :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-catalog-kinesis-source-detect-schema
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-catalog-kinesis-source-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-catalog-kinesis-source-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (streaming-options :initarg :streaming-options
                         :initform common-lisp:nil :type
                         (common-lisp:or kinesis-streaming-source-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-catalog-kinesis-source-streaming-options
                         :shape "KinesisStreamingSourceOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-preview-options :initarg :data-preview-options
                         :initform common-lisp:nil :type
                         (common-lisp:or streaming-data-preview-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-catalog-kinesis-source-data-preview-options
                         :shape "StreamingDataPreviewOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-catalog-kinesis-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'catalog-kinesis-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'catalog-kinesis-source 'make-catalog-kinesis-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          catalog-kinesis-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          catalog-kinesis-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-size))
      (common-lisp:list
       (common-lisp:cons "WindowSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detect-schema))
      (common-lisp:list
       (common-lisp:cons "DetectSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-options))
      (common-lisp:list
       (common-lisp:cons "StreamingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-preview-options))
      (common-lisp:list
       (common-lisp:cons "DataPreviewOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          catalog-kinesis-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass catalog-schema-change-policy common-lisp:nil
                       ((enable-update-catalog :initarg :enable-update-catalog
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-catalog-schema-change-policy-enable-update-catalog
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-behavior :initarg :update-behavior :initform
                         common-lisp:nil :type
                         (common-lisp:or update-catalog-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-catalog-schema-change-policy-update-behavior
                         :shape "UpdateCatalogBehavior" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-catalog-schema-change-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'catalog-schema-change-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'catalog-schema-change-policy
                    'make-catalog-schema-change-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          catalog-schema-change-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          catalog-schema-change-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-update-catalog))
      (common-lisp:list
       (common-lisp:cons "EnableUpdateCatalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-behavior))
      (common-lisp:list
       (common-lisp:cons "UpdateBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          catalog-schema-change-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass catalog-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-catalog-source-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-catalog-source-database :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-catalog-source-table :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-catalog-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'catalog-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'catalog-source 'make-catalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype catalog-tables-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-catalog-tables-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass catalog-target common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-catalog-target-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tables :initarg :tables :initform
                         (common-lisp:error ":tables is required") :type
                         (common-lisp:or catalog-tables-list common-lisp:null)
                         :accessor struct-shape-catalog-target-tables :shape
                         "CatalogTablesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor struct-shape-catalog-target-connection-name
                         :shape "ConnectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-queue-arn :initarg :event-queue-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or event-queue-arn common-lisp:null)
                         :accessor struct-shape-catalog-target-event-queue-arn
                         :shape "EventQueueArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dlq-event-queue-arn :initarg :dlq-event-queue-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or event-queue-arn common-lisp:null)
                         :accessor
                         struct-shape-catalog-target-dlq-event-queue-arn :shape
                         "EventQueueArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-catalog-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'catalog-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'catalog-target 'make-catalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input catalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input catalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables))
      (common-lisp:list
       (common-lisp:cons "Tables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-queue-arn))
      (common-lisp:list
       (common-lisp:cons "EventQueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dlq-event-queue-arn))
      (common-lisp:list
       (common-lisp:cons "DlqEventQueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input catalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype catalog-target-list ()
   '(trivial-types:proper-list catalog-target))
 (common-lisp:defun make-catalog-target-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list catalog-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass check-schema-version-validity-input common-lisp:nil
                       ((data-format :initarg :data-format :initform
                         (common-lisp:error ":data-format is required") :type
                         (common-lisp:or data-format common-lisp:null)
                         :accessor
                         struct-shape-check-schema-version-validity-input-data-format
                         :shape "DataFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-definition :initarg :schema-definition
                         :initform
                         (common-lisp:error ":schema-definition is required")
                         :type
                         (common-lisp:or schema-definition-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-check-schema-version-validity-input-schema-definition
                         :shape "SchemaDefinitionString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-check-schema-version-validity-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'check-schema-version-validity-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'check-schema-version-validity-input
                    'make-check-schema-version-validity-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-schema-version-validity-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-schema-version-validity-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "DataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "SchemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-schema-version-validity-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass check-schema-version-validity-response common-lisp:nil
                       ((valid :initarg :valid :initform common-lisp:nil :type
                         (common-lisp:or is-version-valid common-lisp:null)
                         :accessor
                         struct-shape-check-schema-version-validity-response-valid
                         :shape "IsVersionValid" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or schema-validation-error
                                         common-lisp:null)
                         :accessor
                         struct-shape-check-schema-version-validity-response-error
                         :shape "SchemaValidationError" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-check-schema-version-validity-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'check-schema-version-validity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'check-schema-version-validity-response
                    'make-check-schema-version-validity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-schema-version-validity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-schema-version-validity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid))
      (common-lisp:list
       (common-lisp:cons "Valid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-schema-version-validity-response))
   common-lisp:nil))
(common-lisp:deftype classification () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass classifier common-lisp:nil
                       ((grok-classifier :initarg :grok-classifier :initform
                         common-lisp:nil :type
                         (common-lisp:or grok-classifier common-lisp:null)
                         :accessor struct-shape-classifier-grok-classifier
                         :shape "GrokClassifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (xmlclassifier :initarg :xmlclassifier :initform
                         common-lisp:nil :type
                         (common-lisp:or xmlclassifier common-lisp:null)
                         :accessor struct-shape-classifier-xmlclassifier :shape
                         "XMLClassifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (json-classifier :initarg :json-classifier :initform
                         common-lisp:nil :type
                         (common-lisp:or json-classifier common-lisp:null)
                         :accessor struct-shape-classifier-json-classifier
                         :shape "JsonClassifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (csv-classifier :initarg :csv-classifier :initform
                         common-lisp:nil :type
                         (common-lisp:or csv-classifier common-lisp:null)
                         :accessor struct-shape-classifier-csv-classifier
                         :shape "CsvClassifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-classifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'classifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'classifier 'make-classifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input classifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input classifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grok-classifier))
      (common-lisp:list
       (common-lisp:cons "GrokClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xmlclassifier))
      (common-lisp:list
       (common-lisp:cons "XMLClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-classifier))
      (common-lisp:list
       (common-lisp:cons "JsonClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-classifier))
      (common-lisp:list
       (common-lisp:cons "CsvClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input classifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype classifier-list ()
   '(trivial-types:proper-list classifier))
 (common-lisp:defun make-classifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list classifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype classifier-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-classifier-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cloud-watch-encryption common-lisp:nil
                       ((cloud-watch-encryption-mode :initarg
                         :cloud-watch-encryption-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or cloud-watch-encryption-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-encryption-cloud-watch-encryption-mode
                         :shape "CloudWatchEncryptionMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-cloud-watch-encryption-kms-key-arn :shape
                         "KmsKeyArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-watch-encryption
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-watch-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-encryption 'make-cloud-watch-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "CloudWatchEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-encryption))
   common-lisp:nil))
(common-lisp:deftype cloud-watch-encryption-mode () 'common-lisp:string)
(common-lisp:deftype code-gen-arg-name () 'common-lisp:string)
(common-lisp:deftype code-gen-arg-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass code-gen-configuration-node common-lisp:nil
                       ((athena-connector-source :initarg
                         :athena-connector-source :initform common-lisp:nil
                         :type
                         (common-lisp:or athena-connector-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-athena-connector-source
                         :shape "AthenaConnectorSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (jdbcconnector-source :initarg :jdbcconnector-source
                         :initform common-lisp:nil :type
                         (common-lisp:or jdbcconnector-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-jdbcconnector-source
                         :shape "JDBCConnectorSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spark-connector-source :initarg
                         :spark-connector-source :initform common-lisp:nil
                         :type
                         (common-lisp:or spark-connector-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-spark-connector-source
                         :shape "SparkConnectorSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (catalog-source :initarg :catalog-source :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-catalog-source
                         :shape "CatalogSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redshift-source :initarg :redshift-source :initform
                         common-lisp:nil :type
                         (common-lisp:or redshift-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-redshift-source
                         :shape "RedshiftSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3catalog-source :initarg :s3catalog-source :initform
                         common-lisp:nil :type
                         (common-lisp:or s3catalog-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3catalog-source
                         :shape "S3CatalogSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3csv-source :initarg :s3csv-source :initform
                         common-lisp:nil :type
                         (common-lisp:or s3csv-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3csv-source
                         :shape "S3CsvSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3json-source :initarg :s3json-source :initform
                         common-lisp:nil :type
                         (common-lisp:or s3json-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3json-source
                         :shape "S3JsonSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3parquet-source :initarg :s3parquet-source :initform
                         common-lisp:nil :type
                         (common-lisp:or s3parquet-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3parquet-source
                         :shape "S3ParquetSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relational-catalog-source :initarg
                         :relational-catalog-source :initform common-lisp:nil
                         :type
                         (common-lisp:or relational-catalog-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-relational-catalog-source
                         :shape "RelationalCatalogSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dynamo-dbcatalog-source :initarg
                         :dynamo-dbcatalog-source :initform common-lisp:nil
                         :type
                         (common-lisp:or dynamo-dbcatalog-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-dynamo-dbcatalog-source
                         :shape "DynamoDBCatalogSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (jdbcconnector-target :initarg :jdbcconnector-target
                         :initform common-lisp:nil :type
                         (common-lisp:or jdbcconnector-target common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-jdbcconnector-target
                         :shape "JDBCConnectorTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spark-connector-target :initarg
                         :spark-connector-target :initform common-lisp:nil
                         :type
                         (common-lisp:or spark-connector-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-spark-connector-target
                         :shape "SparkConnectorTarget" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (catalog-target :initarg :catalog-target :initform
                         common-lisp:nil :type
                         (common-lisp:or basic-catalog-target common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-catalog-target
                         :shape "BasicCatalogTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redshift-target :initarg :redshift-target :initform
                         common-lisp:nil :type
                         (common-lisp:or redshift-target common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-redshift-target
                         :shape "RedshiftTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3catalog-target :initarg :s3catalog-target :initform
                         common-lisp:nil :type
                         (common-lisp:or s3catalog-target common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3catalog-target
                         :shape "S3CatalogTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3glue-parquet-target :initarg :s3glue-parquet-target
                         :initform common-lisp:nil :type
                         (common-lisp:or s3glue-parquet-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3glue-parquet-target
                         :shape "S3GlueParquetTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3direct-target :initarg :s3direct-target :initform
                         common-lisp:nil :type
                         (common-lisp:or s3direct-target common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3direct-target
                         :shape "S3DirectTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (apply-mapping :initarg :apply-mapping :initform
                         common-lisp:nil :type
                         (common-lisp:or apply-mapping common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-apply-mapping
                         :shape "ApplyMapping" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (select-fields :initarg :select-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or select-fields common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-select-fields
                         :shape "SelectFields" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (drop-fields :initarg :drop-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or drop-fields common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-drop-fields
                         :shape "DropFields" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rename-field :initarg :rename-field :initform
                         common-lisp:nil :type
                         (common-lisp:or rename-field common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-rename-field
                         :shape "RenameField" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spigot :initarg :spigot :initform common-lisp:nil
                         :type (common-lisp:or spigot common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-spigot :shape
                         "Spigot" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (join :initarg :join :initform common-lisp:nil :type
                         (common-lisp:or join common-lisp:null) :accessor
                         struct-shape-code-gen-configuration-node-join :shape
                         "Join" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (split-fields :initarg :split-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or split-fields common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-split-fields
                         :shape "SplitFields" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (select-from-collection :initarg
                         :select-from-collection :initform common-lisp:nil
                         :type
                         (common-lisp:or select-from-collection
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-select-from-collection
                         :shape "SelectFromCollection" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (fill-missing-values :initarg :fill-missing-values
                         :initform common-lisp:nil :type
                         (common-lisp:or fill-missing-values common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-fill-missing-values
                         :shape "FillMissingValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or filter common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-filter :shape
                         "Filter" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-code :initarg :custom-code :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-code common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-custom-code
                         :shape "CustomCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (spark-sql :initarg :spark-sql :initform
                         common-lisp:nil :type
                         (common-lisp:or spark-sql common-lisp:null) :accessor
                         struct-shape-code-gen-configuration-node-spark-sql
                         :shape "SparkSQL" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (direct-kinesis-source :initarg :direct-kinesis-source
                         :initform common-lisp:nil :type
                         (common-lisp:or direct-kinesis-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-direct-kinesis-source
                         :shape "DirectKinesisSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (direct-kafka-source :initarg :direct-kafka-source
                         :initform common-lisp:nil :type
                         (common-lisp:or direct-kafka-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-direct-kafka-source
                         :shape "DirectKafkaSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-kinesis-source :initarg
                         :catalog-kinesis-source :initform common-lisp:nil
                         :type
                         (common-lisp:or catalog-kinesis-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-catalog-kinesis-source
                         :shape "CatalogKinesisSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (catalog-kafka-source :initarg :catalog-kafka-source
                         :initform common-lisp:nil :type
                         (common-lisp:or catalog-kafka-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-catalog-kafka-source
                         :shape "CatalogKafkaSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (drop-null-fields :initarg :drop-null-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or drop-null-fields common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-drop-null-fields
                         :shape "DropNullFields" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (merge :initarg :merge :initform common-lisp:nil :type
                         (common-lisp:or merge common-lisp:null) :accessor
                         struct-shape-code-gen-configuration-node-merge :shape
                         "Merge" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (union :initarg :union :initform common-lisp:nil :type
                         (common-lisp:or union common-lisp:null) :accessor
                         struct-shape-code-gen-configuration-node-union :shape
                         "Union" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (piidetection :initarg :piidetection :initform
                         common-lisp:nil :type
                         (common-lisp:or piidetection common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-piidetection
                         :shape "PIIDetection" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aggregate :initarg :aggregate :initform
                         common-lisp:nil :type
                         (common-lisp:or aggregate common-lisp:null) :accessor
                         struct-shape-code-gen-configuration-node-aggregate
                         :shape "Aggregate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (drop-duplicates :initarg :drop-duplicates :initform
                         common-lisp:nil :type
                         (common-lisp:or drop-duplicates common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-drop-duplicates
                         :shape "DropDuplicates" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (governed-catalog-target :initarg
                         :governed-catalog-target :initform common-lisp:nil
                         :type
                         (common-lisp:or governed-catalog-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-governed-catalog-target
                         :shape "GovernedCatalogTarget" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (governed-catalog-source :initarg
                         :governed-catalog-source :initform common-lisp:nil
                         :type
                         (common-lisp:or governed-catalog-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-governed-catalog-source
                         :shape "GovernedCatalogSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (microsoft-sqlserver-catalog-source :initarg
                         :microsoft-sqlserver-catalog-source :initform
                         common-lisp:nil :type
                         (common-lisp:or microsoft-sqlserver-catalog-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-microsoft-sqlserver-catalog-source
                         :shape "MicrosoftSQLServerCatalogSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (my-sqlcatalog-source :initarg :my-sqlcatalog-source
                         :initform common-lisp:nil :type
                         (common-lisp:or my-sqlcatalog-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-my-sqlcatalog-source
                         :shape "MySQLCatalogSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (oracle-sqlcatalog-source :initarg
                         :oracle-sqlcatalog-source :initform common-lisp:nil
                         :type
                         (common-lisp:or oracle-sqlcatalog-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-oracle-sqlcatalog-source
                         :shape "OracleSQLCatalogSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (postgre-sqlcatalog-source :initarg
                         :postgre-sqlcatalog-source :initform common-lisp:nil
                         :type
                         (common-lisp:or postgre-sqlcatalog-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-postgre-sqlcatalog-source
                         :shape "PostgreSQLCatalogSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (microsoft-sqlserver-catalog-target :initarg
                         :microsoft-sqlserver-catalog-target :initform
                         common-lisp:nil :type
                         (common-lisp:or microsoft-sqlserver-catalog-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-microsoft-sqlserver-catalog-target
                         :shape "MicrosoftSQLServerCatalogTarget" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (my-sqlcatalog-target :initarg :my-sqlcatalog-target
                         :initform common-lisp:nil :type
                         (common-lisp:or my-sqlcatalog-target common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-my-sqlcatalog-target
                         :shape "MySQLCatalogTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (oracle-sqlcatalog-target :initarg
                         :oracle-sqlcatalog-target :initform common-lisp:nil
                         :type
                         (common-lisp:or oracle-sqlcatalog-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-oracle-sqlcatalog-target
                         :shape "OracleSQLCatalogTarget" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (postgre-sqlcatalog-target :initarg
                         :postgre-sqlcatalog-target :initform common-lisp:nil
                         :type
                         (common-lisp:or postgre-sqlcatalog-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-postgre-sqlcatalog-target
                         :shape "PostgreSQLCatalogTarget" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dynamic-transform :initarg :dynamic-transform
                         :initform common-lisp:nil :type
                         (common-lisp:or dynamic-transform common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-dynamic-transform
                         :shape "DynamicTransform" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluate-data-quality :initarg :evaluate-data-quality
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluate-data-quality
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-evaluate-data-quality
                         :shape "EvaluateDataQuality" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3catalog-hudi-source :initarg :s3catalog-hudi-source
                         :initform common-lisp:nil :type
                         (common-lisp:or s3catalog-hudi-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3catalog-hudi-source
                         :shape "S3CatalogHudiSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-hudi-source :initarg :catalog-hudi-source
                         :initform common-lisp:nil :type
                         (common-lisp:or catalog-hudi-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-catalog-hudi-source
                         :shape "CatalogHudiSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3hudi-source :initarg :s3hudi-source :initform
                         common-lisp:nil :type
                         (common-lisp:or s3hudi-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3hudi-source
                         :shape "S3HudiSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3hudi-catalog-target :initarg :s3hudi-catalog-target
                         :initform common-lisp:nil :type
                         (common-lisp:or s3hudi-catalog-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3hudi-catalog-target
                         :shape "S3HudiCatalogTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3hudi-direct-target :initarg :s3hudi-direct-target
                         :initform common-lisp:nil :type
                         (common-lisp:or s3hudi-direct-target common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3hudi-direct-target
                         :shape "S3HudiDirectTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (direct-jdbcsource :initarg :direct-jdbcsource
                         :initform common-lisp:nil :type
                         (common-lisp:or direct-jdbcsource common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-direct-jdbcsource
                         :shape "DirectJDBCSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3catalog-delta-source :initarg
                         :s3catalog-delta-source :initform common-lisp:nil
                         :type
                         (common-lisp:or s3catalog-delta-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3catalog-delta-source
                         :shape "S3CatalogDeltaSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (catalog-delta-source :initarg :catalog-delta-source
                         :initform common-lisp:nil :type
                         (common-lisp:or catalog-delta-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-catalog-delta-source
                         :shape "CatalogDeltaSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3delta-source :initarg :s3delta-source :initform
                         common-lisp:nil :type
                         (common-lisp:or s3delta-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3delta-source
                         :shape "S3DeltaSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3delta-catalog-target :initarg
                         :s3delta-catalog-target :initform common-lisp:nil
                         :type
                         (common-lisp:or s3delta-catalog-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3delta-catalog-target
                         :shape "S3DeltaCatalogTarget" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3delta-direct-target :initarg :s3delta-direct-target
                         :initform common-lisp:nil :type
                         (common-lisp:or s3delta-direct-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-s3delta-direct-target
                         :shape "S3DeltaDirectTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (amazon-redshift-source :initarg
                         :amazon-redshift-source :initform common-lisp:nil
                         :type
                         (common-lisp:or amazon-redshift-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-amazon-redshift-source
                         :shape "AmazonRedshiftSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (amazon-redshift-target :initarg
                         :amazon-redshift-target :initform common-lisp:nil
                         :type
                         (common-lisp:or amazon-redshift-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-amazon-redshift-target
                         :shape "AmazonRedshiftTarget" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (evaluate-data-quality-multi-frame :initarg
                         :evaluate-data-quality-multi-frame :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluate-data-quality-multi-frame
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-evaluate-data-quality-multi-frame
                         :shape "EvaluateDataQualityMultiFrame" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recipe :initarg :recipe :initform common-lisp:nil
                         :type (common-lisp:or recipe common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-recipe :shape
                         "Recipe" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (snowflake-source :initarg :snowflake-source :initform
                         common-lisp:nil :type
                         (common-lisp:or snowflake-source common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-snowflake-source
                         :shape "SnowflakeSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snowflake-target :initarg :snowflake-target :initform
                         common-lisp:nil :type
                         (common-lisp:or snowflake-target common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-snowflake-target
                         :shape "SnowflakeTarget" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connector-data-source :initarg :connector-data-source
                         :initform common-lisp:nil :type
                         (common-lisp:or connector-data-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-connector-data-source
                         :shape "ConnectorDataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connector-data-target :initarg :connector-data-target
                         :initform common-lisp:nil :type
                         (common-lisp:or connector-data-target
                                         common-lisp:null)
                         :accessor
                         struct-shape-code-gen-configuration-node-connector-data-target
                         :shape "ConnectorDataTarget" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-gen-configuration-node
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-gen-configuration-node
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'code-gen-configuration-node
                    'make-code-gen-configuration-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-gen-configuration-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-gen-configuration-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'athena-connector-source))
      (common-lisp:list
       (common-lisp:cons "AthenaConnectorSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'jdbcconnector-source))
      (common-lisp:list
       (common-lisp:cons "JDBCConnectorSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spark-connector-source))
      (common-lisp:list
       (common-lisp:cons "SparkConnectorSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-source))
      (common-lisp:list
       (common-lisp:cons "CatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-source))
      (common-lisp:list
       (common-lisp:cons "RedshiftSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3catalog-source))
      (common-lisp:list
       (common-lisp:cons "S3CatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3csv-source))
      (common-lisp:list
       (common-lisp:cons "S3CsvSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3json-source))
      (common-lisp:list
       (common-lisp:cons "S3JsonSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3parquet-source))
      (common-lisp:list
       (common-lisp:cons "S3ParquetSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-catalog-source))
      (common-lisp:list
       (common-lisp:cons "RelationalCatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamo-dbcatalog-source))
      (common-lisp:list
       (common-lisp:cons "DynamoDBCatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'jdbcconnector-target))
      (common-lisp:list
       (common-lisp:cons "JDBCConnectorTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'spark-connector-target))
      (common-lisp:list
       (common-lisp:cons "SparkConnectorTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-target))
      (common-lisp:list
       (common-lisp:cons "CatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-target))
      (common-lisp:list
       (common-lisp:cons "RedshiftTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3catalog-target))
      (common-lisp:list
       (common-lisp:cons "S3CatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3glue-parquet-target))
      (common-lisp:list
       (common-lisp:cons "S3GlueParquetTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3direct-target))
      (common-lisp:list
       (common-lisp:cons "S3DirectTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-mapping))
      (common-lisp:list
       (common-lisp:cons "ApplyMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-fields))
      (common-lisp:list
       (common-lisp:cons "SelectFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drop-fields))
      (common-lisp:list
       (common-lisp:cons "DropFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rename-field))
      (common-lisp:list
       (common-lisp:cons "RenameField"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spigot))
      (common-lisp:list
       (common-lisp:cons "Spigot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join))
      (common-lisp:list
       (common-lisp:cons "Join"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'split-fields))
      (common-lisp:list
       (common-lisp:cons "SplitFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'select-from-collection))
      (common-lisp:list
       (common-lisp:cons "SelectFromCollection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fill-missing-values))
      (common-lisp:list
       (common-lisp:cons "FillMissingValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-code))
      (common-lisp:list
       (common-lisp:cons "CustomCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spark-sql))
      (common-lisp:list
       (common-lisp:cons "SparkSQL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-kinesis-source))
      (common-lisp:list
       (common-lisp:cons "DirectKinesisSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direct-kafka-source))
      (common-lisp:list
       (common-lisp:cons "DirectKafkaSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'catalog-kinesis-source))
      (common-lisp:list
       (common-lisp:cons "CatalogKinesisSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'catalog-kafka-source))
      (common-lisp:list
       (common-lisp:cons "CatalogKafkaSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drop-null-fields))
      (common-lisp:list
       (common-lisp:cons "DropNullFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge))
      (common-lisp:list
       (common-lisp:cons "Merge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'union))
      (common-lisp:list
       (common-lisp:cons "Union"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'piidetection))
      (common-lisp:list
       (common-lisp:cons "PIIDetection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregate))
      (common-lisp:list
       (common-lisp:cons "Aggregate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drop-duplicates))
      (common-lisp:list
       (common-lisp:cons "DropDuplicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'governed-catalog-target))
      (common-lisp:list
       (common-lisp:cons "GovernedCatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'governed-catalog-source))
      (common-lisp:list
       (common-lisp:cons "GovernedCatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'microsoft-sqlserver-catalog-source))
      (common-lisp:list
       (common-lisp:cons "MicrosoftSQLServerCatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'my-sqlcatalog-source))
      (common-lisp:list
       (common-lisp:cons "MySQLCatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'oracle-sqlcatalog-source))
      (common-lisp:list
       (common-lisp:cons "OracleSQLCatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'postgre-sqlcatalog-source))
      (common-lisp:list
       (common-lisp:cons "PostgreSQLCatalogSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'microsoft-sqlserver-catalog-target))
      (common-lisp:list
       (common-lisp:cons "MicrosoftSQLServerCatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'my-sqlcatalog-target))
      (common-lisp:list
       (common-lisp:cons "MySQLCatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'oracle-sqlcatalog-target))
      (common-lisp:list
       (common-lisp:cons "OracleSQLCatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'postgre-sqlcatalog-target))
      (common-lisp:list
       (common-lisp:cons "PostgreSQLCatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-transform))
      (common-lisp:list
       (common-lisp:cons "DynamicTransform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluate-data-quality))
      (common-lisp:list
       (common-lisp:cons "EvaluateDataQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3catalog-hudi-source))
      (common-lisp:list
       (common-lisp:cons "S3CatalogHudiSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-hudi-source))
      (common-lisp:list
       (common-lisp:cons "CatalogHudiSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3hudi-source))
      (common-lisp:list
       (common-lisp:cons "S3HudiSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3hudi-catalog-target))
      (common-lisp:list
       (common-lisp:cons "S3HudiCatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3hudi-direct-target))
      (common-lisp:list
       (common-lisp:cons "S3HudiDirectTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direct-jdbcsource))
      (common-lisp:list
       (common-lisp:cons "DirectJDBCSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3catalog-delta-source))
      (common-lisp:list
       (common-lisp:cons "S3CatalogDeltaSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'catalog-delta-source))
      (common-lisp:list
       (common-lisp:cons "CatalogDeltaSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3delta-source))
      (common-lisp:list
       (common-lisp:cons "S3DeltaSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3delta-catalog-target))
      (common-lisp:list
       (common-lisp:cons "S3DeltaCatalogTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3delta-direct-target))
      (common-lisp:list
       (common-lisp:cons "S3DeltaDirectTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-redshift-source))
      (common-lisp:list
       (common-lisp:cons "AmazonRedshiftSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-redshift-target))
      (common-lisp:list
       (common-lisp:cons "AmazonRedshiftTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluate-data-quality-multi-frame))
      (common-lisp:list
       (common-lisp:cons "EvaluateDataQualityMultiFrame"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipe))
      (common-lisp:list
       (common-lisp:cons "Recipe"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowflake-source))
      (common-lisp:list
       (common-lisp:cons "SnowflakeSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snowflake-target))
      (common-lisp:list
       (common-lisp:cons "SnowflakeTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-data-source))
      (common-lisp:list
       (common-lisp:cons "ConnectorDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connector-data-target))
      (common-lisp:list
       (common-lisp:cons "ConnectorDataTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-gen-configuration-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype code-gen-configuration-nodes () 'common-lisp:hash-table)
 (common-lisp:defun make-code-gen-configuration-nodes
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass code-gen-edge common-lisp:nil
                       ((source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or code-gen-identifier common-lisp:null)
                         :accessor struct-shape-code-gen-edge-source :shape
                         "CodeGenIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or code-gen-identifier common-lisp:null)
                         :accessor struct-shape-code-gen-edge-target :shape
                         "CodeGenIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-parameter :initarg :target-parameter :initform
                         common-lisp:nil :type
                         (common-lisp:or code-gen-arg-name common-lisp:null)
                         :accessor struct-shape-code-gen-edge-target-parameter
                         :shape "CodeGenArgName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-gen-edge
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-gen-edge
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'code-gen-edge 'make-code-gen-edge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-gen-edge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-gen-edge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-parameter))
      (common-lisp:list
       (common-lisp:cons "TargetParameter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-gen-edge))
   common-lisp:nil))
(common-lisp:deftype code-gen-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass code-gen-node common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or code-gen-identifier common-lisp:null)
                         :accessor struct-shape-code-gen-node-id :shape
                         "CodeGenIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-type :initarg :node-type :initform
                         (common-lisp:error ":node-type is required") :type
                         (common-lisp:or code-gen-node-type common-lisp:null)
                         :accessor struct-shape-code-gen-node-node-type :shape
                         "CodeGenNodeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (args :initarg :args :initform
                         (common-lisp:error ":args is required") :type
                         (common-lisp:or code-gen-node-args common-lisp:null)
                         :accessor struct-shape-code-gen-node-args :shape
                         "CodeGenNodeArgs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (line-number :initarg :line-number :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-code-gen-node-line-number :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-gen-node
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-gen-node
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'code-gen-node 'make-code-gen-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-gen-node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-gen-node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-type))
      (common-lisp:list
       (common-lisp:cons "NodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'args))
      (common-lisp:list
       (common-lisp:cons "Args"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-number))
      (common-lisp:list
       (common-lisp:cons "LineNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-gen-node))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass code-gen-node-arg common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or code-gen-arg-name common-lisp:null)
                         :accessor struct-shape-code-gen-node-arg-name :shape
                         "CodeGenArgName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or code-gen-arg-value common-lisp:null)
                         :accessor struct-shape-code-gen-node-arg-value :shape
                         "CodeGenArgValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (param :initarg :param :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-code-gen-node-arg-param :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-gen-node-arg
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-gen-node-arg
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'code-gen-node-arg 'make-code-gen-node-arg))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-gen-node-arg))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-gen-node-arg))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'param))
      (common-lisp:list
       (common-lisp:cons "Param"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-gen-node-arg))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype code-gen-node-args ()
   '(trivial-types:proper-list code-gen-node-arg))
 (common-lisp:defun make-code-gen-node-args
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-gen-node-arg))
   aws-sdk/generator/shape::members))
(common-lisp:deftype code-gen-node-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass column common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-column-name :shape "NameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or column-type-string common-lisp:null)
                         :accessor struct-shape-column-type :shape
                         "ColumnTypeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (comment :initarg :comment :initform common-lisp:nil
                         :type (common-lisp:or comment-string common-lisp:null)
                         :accessor struct-shape-column-comment :shape
                         "CommentString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor struct-shape-column-parameters :shape
                         "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'column 'make-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "Comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass column-error common-lisp:nil
                       ((column-name :initarg :column-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-column-error-column-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor struct-shape-column-error-error :shape
                         "ErrorDetail" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'column-error 'make-column-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-errors ()
   '(trivial-types:proper-list column-error))
 (common-lisp:defun make-column-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass column-importance common-lisp:nil
                       ((column-name :initarg :column-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-column-importance-column-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (importance :initarg :importance :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-bounded-double
                                         common-lisp:null)
                         :accessor struct-shape-column-importance-importance
                         :shape "GenericBoundedDouble" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column-importance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column-importance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'column-importance 'make-column-importance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-importance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-importance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'importance))
      (common-lisp:list
       (common-lisp:cons "Importance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-importance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-importance-list ()
   '(trivial-types:proper-list column-importance))
 (common-lisp:defun make-column-importance-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-importance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype column-list () '(trivial-types:proper-list column))
 (common-lisp:defun make-column-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype column-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-column-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass column-row-filter common-lisp:nil
                       ((column-name :initarg :column-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-column-row-filter-column-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (row-filter-expression :initarg :row-filter-expression
                         :initform common-lisp:nil :type
                         (common-lisp:or predicate-string common-lisp:null)
                         :accessor
                         struct-shape-column-row-filter-row-filter-expression
                         :shape "PredicateString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column-row-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column-row-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'column-row-filter 'make-column-row-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-row-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-row-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'row-filter-expression))
      (common-lisp:list
       (common-lisp:cons "RowFilterExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-row-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-row-filter-list ()
   '(trivial-types:proper-list column-row-filter))
 (common-lisp:defun make-column-row-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-row-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass column-statistics common-lisp:nil
                       ((column-name :initarg :column-name :initform
                         (common-lisp:error ":column-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-column-statistics-column-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (column-type :initarg :column-type :initform
                         (common-lisp:error ":column-type is required") :type
                         (common-lisp:or type-string common-lisp:null)
                         :accessor struct-shape-column-statistics-column-type
                         :shape "TypeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analyzed-time :initarg :analyzed-time :initform
                         (common-lisp:error ":analyzed-time is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-column-statistics-analyzed-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (statistics-data :initarg :statistics-data :initform
                         (common-lisp:error ":statistics-data is required")
                         :type
                         (common-lisp:or column-statistics-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-statistics-data :shape
                         "ColumnStatisticsData" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'column-statistics 'make-column-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-type))
      (common-lisp:list
       (common-lisp:cons "ColumnType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-time))
      (common-lisp:list
       (common-lisp:cons "AnalyzedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics-data))
      (common-lisp:list
       (common-lisp:cons "StatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass column-statistics-data common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or column-statistics-type
                                         common-lisp:null)
                         :accessor struct-shape-column-statistics-data-type
                         :shape "ColumnStatisticsType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (boolean-column-statistics-data :initarg
                         :boolean-column-statistics-data :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-column-statistics-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-data-boolean-column-statistics-data
                         :shape "BooleanColumnStatisticsData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (date-column-statistics-data :initarg
                         :date-column-statistics-data :initform common-lisp:nil
                         :type
                         (common-lisp:or date-column-statistics-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-data-date-column-statistics-data
                         :shape "DateColumnStatisticsData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (decimal-column-statistics-data :initarg
                         :decimal-column-statistics-data :initform
                         common-lisp:nil :type
                         (common-lisp:or decimal-column-statistics-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-data-decimal-column-statistics-data
                         :shape "DecimalColumnStatisticsData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (double-column-statistics-data :initarg
                         :double-column-statistics-data :initform
                         common-lisp:nil :type
                         (common-lisp:or double-column-statistics-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-data-double-column-statistics-data
                         :shape "DoubleColumnStatisticsData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (long-column-statistics-data :initarg
                         :long-column-statistics-data :initform common-lisp:nil
                         :type
                         (common-lisp:or long-column-statistics-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-data-long-column-statistics-data
                         :shape "LongColumnStatisticsData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (string-column-statistics-data :initarg
                         :string-column-statistics-data :initform
                         common-lisp:nil :type
                         (common-lisp:or string-column-statistics-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-data-string-column-statistics-data
                         :shape "StringColumnStatisticsData" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (binary-column-statistics-data :initarg
                         :binary-column-statistics-data :initform
                         common-lisp:nil :type
                         (common-lisp:or binary-column-statistics-data
                                         common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-data-binary-column-statistics-data
                         :shape "BinaryColumnStatisticsData" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column-statistics-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column-statistics-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'column-statistics-data 'make-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'boolean-column-statistics-data))
      (common-lisp:list
       (common-lisp:cons "BooleanColumnStatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'date-column-statistics-data))
      (common-lisp:list
       (common-lisp:cons "DateColumnStatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimal-column-statistics-data))
      (common-lisp:list
       (common-lisp:cons "DecimalColumnStatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'double-column-statistics-data))
      (common-lisp:list
       (common-lisp:cons "DoubleColumnStatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'long-column-statistics-data))
      (common-lisp:list
       (common-lisp:cons "LongColumnStatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'string-column-statistics-data))
      (common-lisp:list
       (common-lisp:cons "StringColumnStatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'binary-column-statistics-data))
      (common-lisp:list
       (common-lisp:cons "BinaryColumnStatisticsData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass column-statistics-error common-lisp:nil
                       ((column-statistics :initarg :column-statistics
                         :initform common-lisp:nil :type
                         (common-lisp:or column-statistics common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-error-column-statistics
                         :shape "ColumnStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor struct-shape-column-statistics-error-error
                         :shape "ErrorDetail" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column-statistics-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column-statistics-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'column-statistics-error 'make-column-statistics-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-statistics))
      (common-lisp:list
       (common-lisp:cons "ColumnStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-statistics-errors ()
   '(trivial-types:proper-list column-statistics-error))
 (common-lisp:defun make-column-statistics-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-statistics-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype column-statistics-list ()
   '(trivial-types:proper-list column-statistics))
 (common-lisp:defun make-column-statistics-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-statistics-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition column-statistics-task-not-running-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       column-statistics-task-not-running-exception-message)))
 (common-lisp:export
  (common-lisp:list 'column-statistics-task-not-running-exception
                    'column-statistics-task-not-running-exception-message)))
(common-lisp:progn
 (common-lisp:defclass column-statistics-task-run common-lisp:nil
                       ((customer-id :initarg :customer-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-column-statistics-task-run-customer-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (column-statistics-task-run-id :initarg
                         :column-statistics-task-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-task-run-column-statistics-task-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-task-run-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         struct-shape-column-statistics-task-run-table-name
                         :shape "TableName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (column-name-list :initarg :column-name-list :initform
                         common-lisp:nil :type
                         (common-lisp:or column-name-list common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-task-run-column-name-list
                         :shape "ColumnNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-task-run-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-column-statistics-task-run-role :shape
                         "Role" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sample-size :initarg :sample-size :initform
                         common-lisp:nil :type
                         (common-lisp:or sample-size-percentage
                                         common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-task-run-sample-size
                         :shape "SampleSizePercentage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or crawler-security-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-task-run-security-configuration
                         :shape "CrawlerSecurityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-task-run-number-of-workers
                         :shape "PositiveInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-task-run-worker-type
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or column-statistics-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-task-run-status :shape
                         "ColumnStatisticsState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-column-statistics-task-run-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-column-statistics-task-run-last-updated
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-column-statistics-task-run-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-task-run-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-task-run-error-message
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dpuseconds :initarg :dpuseconds :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-double common-lisp:null)
                         :accessor
                         struct-shape-column-statistics-task-run-dpuseconds
                         :shape "NonNegativeDouble" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column-statistics-task-run
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column-statistics-task-run
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'column-statistics-task-run
                    'make-column-statistics-task-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-task-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-task-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'customer-id))
      (common-lisp:list
       (common-lisp:cons "CustomerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-statistics-task-run-id))
      (common-lisp:list
       (common-lisp:cons "ColumnStatisticsTaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name-list))
      (common-lisp:list
       (common-lisp:cons "ColumnNameList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-size))
      (common-lisp:list
       (common-lisp:cons "SampleSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dpuseconds))
      (common-lisp:list
       (common-lisp:cons "DPUSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          column-statistics-task-run))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype column-statistics-task-run-id-list ()
   '(trivial-types:proper-list hash-string))
 (common-lisp:defun make-column-statistics-task-run-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hash-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition column-statistics-task-running-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       column-statistics-task-running-exception-message)))
 (common-lisp:export
  (common-lisp:list 'column-statistics-task-running-exception
                    'column-statistics-task-running-exception-message)))
(common-lisp:progn
 (common-lisp:deftype column-statistics-task-runs-list ()
   '(trivial-types:proper-list column-statistics-task-run))
 (common-lisp:defun make-column-statistics-task-runs-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            column-statistics-task-run))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition column-statistics-task-stopping-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       column-statistics-task-stopping-exception-message)))
 (common-lisp:export
  (common-lisp:list 'column-statistics-task-stopping-exception
                    'column-statistics-task-stopping-exception-message)))
(common-lisp:deftype column-statistics-type () 'common-lisp:string)
(common-lisp:deftype column-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype column-value-string-list ()
   '(trivial-types:proper-list column-values-string))
 (common-lisp:defun make-column-value-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-values-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-values-string () 'common-lisp:string)
(common-lisp:deftype comment-string () 'common-lisp:string)
(common-lisp:deftype commit-id-string () 'common-lisp:string)
(common-lisp:deftype comparator () 'common-lisp:string)
(common-lisp:deftype compatibility () 'common-lisp:string)
(common-lisp:deftype compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition concurrent-runs-exceeded-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-runs-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-runs-exceeded-exception
                    'concurrent-runs-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass condition common-lisp:nil
                       ((logical-operator :initarg :logical-operator :initform
                         common-lisp:nil :type
                         (common-lisp:or logical-operator common-lisp:null)
                         :accessor struct-shape-condition-logical-operator
                         :shape "LogicalOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-condition-job-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or job-run-state common-lisp:null)
                         :accessor struct-shape-condition-state :shape
                         "JobRunState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (crawler-name :initarg :crawler-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-condition-crawler-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (crawl-state :initarg :crawl-state :initform
                         common-lisp:nil :type
                         (common-lisp:or crawl-state common-lisp:null)
                         :accessor struct-shape-condition-crawl-state :shape
                         "CrawlState" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-operator))
      (common-lisp:list
       (common-lisp:cons "LogicalOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name))
      (common-lisp:list
       (common-lisp:cons "CrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-state))
      (common-lisp:list
       (common-lisp:cons "CrawlState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition condition-check-failure-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       condition-check-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'condition-check-failure-exception
                    'condition-check-failure-exception-message)))
(common-lisp:progn
 (common-lisp:deftype condition-list () '(trivial-types:proper-list condition))
 (common-lisp:defun make-condition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass confusion-matrix common-lisp:nil
                       ((num-true-positives :initarg :num-true-positives
                         :initform common-lisp:nil :type
                         (common-lisp:or records-count common-lisp:null)
                         :accessor
                         struct-shape-confusion-matrix-num-true-positives
                         :shape "RecordsCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-false-positives :initarg :num-false-positives
                         :initform common-lisp:nil :type
                         (common-lisp:or records-count common-lisp:null)
                         :accessor
                         struct-shape-confusion-matrix-num-false-positives
                         :shape "RecordsCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-true-negatives :initarg :num-true-negatives
                         :initform common-lisp:nil :type
                         (common-lisp:or records-count common-lisp:null)
                         :accessor
                         struct-shape-confusion-matrix-num-true-negatives
                         :shape "RecordsCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-false-negatives :initarg :num-false-negatives
                         :initform common-lisp:nil :type
                         (common-lisp:or records-count common-lisp:null)
                         :accessor
                         struct-shape-confusion-matrix-num-false-negatives
                         :shape "RecordsCount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-confusion-matrix
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'confusion-matrix
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'confusion-matrix 'make-confusion-matrix))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input confusion-matrix))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input confusion-matrix))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-true-positives))
      (common-lisp:list
       (common-lisp:cons "NumTruePositives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-false-positives))
      (common-lisp:list
       (common-lisp:cons "NumFalsePositives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-true-negatives))
      (common-lisp:list
       (common-lisp:cons "NumTrueNegatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-false-negatives))
      (common-lisp:list
       (common-lisp:cons "NumFalseNegatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input confusion-matrix))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connection common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-connection-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-connection-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-type :initarg :connection-type :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-type common-lisp:null)
                         :accessor struct-shape-connection-connection-type
                         :shape "ConnectionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (match-criteria :initarg :match-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or match-criteria common-lisp:null)
                         :accessor struct-shape-connection-match-criteria
                         :shape "MatchCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-properties :initarg :connection-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or connection-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-connection-connection-properties :shape
                         "ConnectionProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (physical-connection-requirements :initarg
                         :physical-connection-requirements :initform
                         common-lisp:nil :type
                         (common-lisp:or physical-connection-requirements
                                         common-lisp:null)
                         :accessor
                         struct-shape-connection-physical-connection-requirements
                         :shape "PhysicalConnectionRequirements" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-connection-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-connection-last-updated-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-by :initarg :last-updated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-connection-last-updated-by
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connection
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'connection 'make-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-criteria))
      (common-lisp:list
       (common-lisp:cons "MatchCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-properties))
      (common-lisp:list
       (common-lisp:cons "ConnectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-connection-requirements))
      (common-lisp:list
       (common-lisp:cons "PhysicalConnectionRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-by))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connection-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-connection-input-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-connection-input-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-type :initarg :connection-type :initform
                         (common-lisp:error ":connection-type is required")
                         :type
                         (common-lisp:or connection-type common-lisp:null)
                         :accessor
                         struct-shape-connection-input-connection-type :shape
                         "ConnectionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (match-criteria :initarg :match-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or match-criteria common-lisp:null)
                         :accessor struct-shape-connection-input-match-criteria
                         :shape "MatchCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-properties :initarg :connection-properties
                         :initform
                         (common-lisp:error
                          ":connection-properties is required")
                         :type
                         (common-lisp:or connection-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-connection-input-connection-properties
                         :shape "ConnectionProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (physical-connection-requirements :initarg
                         :physical-connection-requirements :initform
                         common-lisp:nil :type
                         (common-lisp:or physical-connection-requirements
                                         common-lisp:null)
                         :accessor
                         struct-shape-connection-input-physical-connection-requirements
                         :shape "PhysicalConnectionRequirements" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connection-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connection-input 'make-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-criteria))
      (common-lisp:list
       (common-lisp:cons "MatchCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-properties))
      (common-lisp:list
       (common-lisp:cons "ConnectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-connection-requirements))
      (common-lisp:list
       (common-lisp:cons "PhysicalConnectionRequirements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connection-list ()
   '(trivial-types:proper-list connection))
 (common-lisp:defun make-connection-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connection-password-encryption common-lisp:nil
                       ((return-connection-password-encrypted :initarg
                         :return-connection-password-encrypted :initform
                         (common-lisp:error
                          ":return-connection-password-encrypted is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-connection-password-encryption-return-connection-password-encrypted
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-kms-key-id :initarg :aws-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-connection-password-encryption-aws-kms-key-id
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connection-password-encryption
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'connection-password-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connection-password-encryption
                    'make-connection-password-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-password-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-password-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'return-connection-password-encrypted))
      (common-lisp:list
       (common-lisp:cons "ReturnConnectionPasswordEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "AwsKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-password-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connection-properties () 'common-lisp:hash-table)
 (common-lisp:defun make-connection-properties
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype connection-property-key () 'common-lisp:string)
(common-lisp:deftype connection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connections-list common-lisp:nil
                       ((connections :initarg :connections :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-string-list
                                         common-lisp:null)
                         :accessor struct-shape-connections-list-connections
                         :shape "OrchestrationStringList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connections-list
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connections-list
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connections-list 'make-connections-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connections-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connections-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connections-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connector-data-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-connector-data-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-type :initarg :connection-type :initform
                         (common-lisp:error ":connection-type is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-connector-data-source-connection-type
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or connector-options common-lisp:null)
                         :accessor struct-shape-connector-data-source-data
                         :shape "ConnectorOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor
                         struct-shape-connector-data-source-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connector-data-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connector-data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connector-data-source 'make-connector-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connector-data-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-connector-data-target-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-type :initarg :connection-type :initform
                         (common-lisp:error ":connection-type is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-connector-data-target-connection-type
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or connector-options common-lisp:null)
                         :accessor struct-shape-connector-data-target-data
                         :shape "ConnectorOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inputs :initarg :inputs :initform common-lisp:nil
                         :type (common-lisp:or one-input common-lisp:null)
                         :accessor struct-shape-connector-data-target-inputs
                         :shape "OneInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connector-data-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connector-data-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connector-data-target 'make-connector-data-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connector-data-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connector-data-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connector-data-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connector-options () 'common-lisp:hash-table)
 (common-lisp:defun make-connector-options
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype context-key () 'common-lisp:string)
(common-lisp:deftype context-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype context-words ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-context-words
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass crawl common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or crawl-state common-lisp:null)
                         :accessor struct-shape-crawl-state :shape "CrawlState"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-crawl-started-on :shape
                         "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completed-on :initarg :completed-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-crawl-completed-on :shape
                         "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-crawl-error-message :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group :initarg :log-group :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group common-lisp:null) :accessor
                         struct-shape-crawl-log-group :shape "LogGroup"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-stream :initarg :log-stream :initform
                         common-lisp:nil :type
                         (common-lisp:or log-stream common-lisp:null) :accessor
                         struct-shape-crawl-log-stream :shape "LogStream"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-crawl
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'crawl
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'crawl 'make-crawl))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crawl))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crawl))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "LogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream))
      (common-lisp:list
       (common-lisp:cons "LogStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crawl))
   common-lisp:nil))
(common-lisp:deftype crawl-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype crawl-list () '(trivial-types:proper-list crawl))
 (common-lisp:defun make-crawl-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list crawl))
   aws-sdk/generator/shape::members))
(common-lisp:deftype crawl-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass crawler common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-crawler-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-crawler-role :shape "Role" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (targets :initarg :targets :initform common-lisp:nil
                         :type
                         (common-lisp:or crawler-targets common-lisp:null)
                         :accessor struct-shape-crawler-targets :shape
                         "CrawlerTargets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor struct-shape-crawler-database-name :shape
                         "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-crawler-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (classifiers :initarg :classifiers :initform
                         common-lisp:nil :type
                         (common-lisp:or classifier-name-list common-lisp:null)
                         :accessor struct-shape-crawler-classifiers :shape
                         "ClassifierNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recrawl-policy :initarg :recrawl-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or recrawl-policy common-lisp:null)
                         :accessor struct-shape-crawler-recrawl-policy :shape
                         "RecrawlPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-change-policy :initarg :schema-change-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-change-policy common-lisp:null)
                         :accessor struct-shape-crawler-schema-change-policy
                         :shape "SchemaChangePolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lineage-configuration :initarg :lineage-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or lineage-configuration
                                         common-lisp:null)
                         :accessor struct-shape-crawler-lineage-configuration
                         :shape "LineageConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or crawler-state common-lisp:null)
                         :accessor struct-shape-crawler-state :shape
                         "CrawlerState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-prefix :initarg :table-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or table-prefix common-lisp:null)
                         :accessor struct-shape-crawler-table-prefix :shape
                         "TablePrefix" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type (common-lisp:or schedule common-lisp:null)
                         :accessor struct-shape-crawler-schedule :shape
                         "Schedule" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (crawl-elapsed-time :initarg :crawl-elapsed-time
                         :initform common-lisp:nil :type
                         (common-lisp:or milliseconds-count common-lisp:null)
                         :accessor struct-shape-crawler-crawl-elapsed-time
                         :shape "MillisecondsCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-crawler-creation-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-crawler-last-updated :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-crawl :initarg :last-crawl :initform
                         common-lisp:nil :type
                         (common-lisp:or last-crawl-info common-lisp:null)
                         :accessor struct-shape-crawler-last-crawl :shape
                         "LastCrawlInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version-id common-lisp:null)
                         :accessor struct-shape-crawler-version :shape
                         "VersionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or crawler-configuration
                                         common-lisp:null)
                         :accessor struct-shape-crawler-configuration :shape
                         "CrawlerConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (crawler-security-configuration :initarg
                         :crawler-security-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or crawler-security-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-crawler-crawler-security-configuration
                         :shape "CrawlerSecurityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lake-formation-configuration :initarg
                         :lake-formation-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or lake-formation-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-crawler-lake-formation-configuration
                         :shape "LakeFormationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-crawler
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'crawler
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'crawler 'make-crawler))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crawler))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crawler))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classifiers))
      (common-lisp:list
       (common-lisp:cons "Classifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recrawl-policy))
      (common-lisp:list
       (common-lisp:cons "RecrawlPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lineage-configuration))
      (common-lisp:list
       (common-lisp:cons "LineageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-prefix))
      (common-lisp:list
       (common-lisp:cons "TablePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-elapsed-time))
      (common-lisp:list
       (common-lisp:cons "CrawlElapsedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-crawl))
      (common-lisp:list
       (common-lisp:cons "LastCrawl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawler-security-configuration))
      (common-lisp:list
       (common-lisp:cons "CrawlerSecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lake-formation-configuration))
      (common-lisp:list
       (common-lisp:cons "LakeFormationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crawler))
   common-lisp:nil))
(common-lisp:deftype crawler-configuration () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass crawler-history common-lisp:nil
                       ((crawl-id :initarg :crawl-id :initform common-lisp:nil
                         :type (common-lisp:or crawl-id common-lisp:null)
                         :accessor struct-shape-crawler-history-crawl-id :shape
                         "CrawlId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or crawler-history-state
                                         common-lisp:null)
                         :accessor struct-shape-crawler-history-state :shape
                         "CrawlerHistoryState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-crawler-history-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-crawler-history-end-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (summary :initarg :summary :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-crawler-history-summary :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-crawler-history-error-message
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group :initarg :log-group :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group common-lisp:null) :accessor
                         struct-shape-crawler-history-log-group :shape
                         "LogGroup" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-stream :initarg :log-stream :initform
                         common-lisp:nil :type
                         (common-lisp:or log-stream common-lisp:null) :accessor
                         struct-shape-crawler-history-log-stream :shape
                         "LogStream" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message-prefix :initarg :message-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or message-prefix common-lisp:null)
                         :accessor struct-shape-crawler-history-message-prefix
                         :shape "MessagePrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dpuhour :initarg :dpuhour :initform common-lisp:nil
                         :type
                         (common-lisp:or non-negative-double common-lisp:null)
                         :accessor struct-shape-crawler-history-dpuhour :shape
                         "NonNegativeDouble" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-crawler-history
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'crawler-history
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'crawler-history 'make-crawler-history))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crawler-history))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crawler-history))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawl-id))
      (common-lisp:list
       (common-lisp:cons "CrawlId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "Summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "LogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream))
      (common-lisp:list
       (common-lisp:cons "LogStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-prefix))
      (common-lisp:list
       (common-lisp:cons "MessagePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dpuhour))
      (common-lisp:list
       (common-lisp:cons "DPUHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crawler-history))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype crawler-history-list ()
   '(trivial-types:proper-list crawler-history))
 (common-lisp:defun make-crawler-history-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list crawler-history))
   aws-sdk/generator/shape::members))
(common-lisp:deftype crawler-history-state () 'common-lisp:string)
(common-lisp:deftype crawler-lineage-settings () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype crawler-list () '(trivial-types:proper-list crawler))
 (common-lisp:defun make-crawler-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list crawler))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass crawler-metrics common-lisp:nil
                       ((crawler-name :initarg :crawler-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-crawler-metrics-crawler-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-left-seconds :initarg :time-left-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or non-negative-double common-lisp:null)
                         :accessor
                         struct-shape-crawler-metrics-time-left-seconds :shape
                         "NonNegativeDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (still-estimating :initarg :still-estimating :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-crawler-metrics-still-estimating :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-runtime-seconds :initarg :last-runtime-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or non-negative-double common-lisp:null)
                         :accessor
                         struct-shape-crawler-metrics-last-runtime-seconds
                         :shape "NonNegativeDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (median-runtime-seconds :initarg
                         :median-runtime-seconds :initform common-lisp:nil
                         :type
                         (common-lisp:or non-negative-double common-lisp:null)
                         :accessor
                         struct-shape-crawler-metrics-median-runtime-seconds
                         :shape "NonNegativeDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tables-created :initarg :tables-created :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor struct-shape-crawler-metrics-tables-created
                         :shape "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tables-updated :initarg :tables-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor struct-shape-crawler-metrics-tables-updated
                         :shape "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tables-deleted :initarg :tables-deleted :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor struct-shape-crawler-metrics-tables-deleted
                         :shape "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-crawler-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'crawler-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'crawler-metrics 'make-crawler-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crawler-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crawler-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name))
      (common-lisp:list
       (common-lisp:cons "CrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-left-seconds))
      (common-lisp:list
       (common-lisp:cons "TimeLeftSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'still-estimating))
      (common-lisp:list
       (common-lisp:cons "StillEstimating"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-runtime-seconds))
      (common-lisp:list
       (common-lisp:cons "LastRuntimeSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'median-runtime-seconds))
      (common-lisp:list
       (common-lisp:cons "MedianRuntimeSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-created))
      (common-lisp:list
       (common-lisp:cons "TablesCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-updated))
      (common-lisp:list
       (common-lisp:cons "TablesUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables-deleted))
      (common-lisp:list
       (common-lisp:cons "TablesDeleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crawler-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype crawler-metrics-list ()
   '(trivial-types:proper-list crawler-metrics))
 (common-lisp:defun make-crawler-metrics-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list crawler-metrics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype crawler-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-crawler-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass crawler-node-details common-lisp:nil
                       ((crawls :initarg :crawls :initform common-lisp:nil
                         :type (common-lisp:or crawl-list common-lisp:null)
                         :accessor struct-shape-crawler-node-details-crawls
                         :shape "CrawlList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-crawler-node-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'crawler-node-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'crawler-node-details 'make-crawler-node-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crawler-node-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crawler-node-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawls))
      (common-lisp:list
       (common-lisp:cons "Crawls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crawler-node-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition crawler-not-running-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       crawler-not-running-exception-message)))
 (common-lisp:export
  (common-lisp:list 'crawler-not-running-exception
                    'crawler-not-running-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition crawler-running-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       crawler-running-exception-message)))
 (common-lisp:export
  (common-lisp:list 'crawler-running-exception
                    'crawler-running-exception-message)))
(common-lisp:deftype crawler-security-configuration () 'common-lisp:string)
(common-lisp:deftype crawler-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition crawler-stopping-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       crawler-stopping-exception-message)))
 (common-lisp:export
  (common-lisp:list 'crawler-stopping-exception
                    'crawler-stopping-exception-message)))
(common-lisp:progn
 (common-lisp:defclass crawler-targets common-lisp:nil
                       ((s3targets :initarg :s3targets :initform
                         common-lisp:nil :type
                         (common-lisp:or s3target-list common-lisp:null)
                         :accessor struct-shape-crawler-targets-s3targets
                         :shape "S3TargetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (jdbc-targets :initarg :jdbc-targets :initform
                         common-lisp:nil :type
                         (common-lisp:or jdbc-target-list common-lisp:null)
                         :accessor struct-shape-crawler-targets-jdbc-targets
                         :shape "JdbcTargetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mongo-dbtargets :initarg :mongo-dbtargets :initform
                         common-lisp:nil :type
                         (common-lisp:or mongo-dbtarget-list common-lisp:null)
                         :accessor struct-shape-crawler-targets-mongo-dbtargets
                         :shape "MongoDBTargetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dynamo-dbtargets :initarg :dynamo-dbtargets :initform
                         common-lisp:nil :type
                         (common-lisp:or dynamo-dbtarget-list common-lisp:null)
                         :accessor
                         struct-shape-crawler-targets-dynamo-dbtargets :shape
                         "DynamoDBTargetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-targets :initarg :catalog-targets :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-target-list common-lisp:null)
                         :accessor struct-shape-crawler-targets-catalog-targets
                         :shape "CatalogTargetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delta-targets :initarg :delta-targets :initform
                         common-lisp:nil :type
                         (common-lisp:or delta-target-list common-lisp:null)
                         :accessor struct-shape-crawler-targets-delta-targets
                         :shape "DeltaTargetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iceberg-targets :initarg :iceberg-targets :initform
                         common-lisp:nil :type
                         (common-lisp:or iceberg-target-list common-lisp:null)
                         :accessor struct-shape-crawler-targets-iceberg-targets
                         :shape "IcebergTargetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hudi-targets :initarg :hudi-targets :initform
                         common-lisp:nil :type
                         (common-lisp:or hudi-target-list common-lisp:null)
                         :accessor struct-shape-crawler-targets-hudi-targets
                         :shape "HudiTargetList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-crawler-targets
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'crawler-targets
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'crawler-targets 'make-crawler-targets))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crawler-targets))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crawler-targets))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3targets))
      (common-lisp:list
       (common-lisp:cons "S3Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jdbc-targets))
      (common-lisp:list
       (common-lisp:cons "JdbcTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mongo-dbtargets))
      (common-lisp:list
       (common-lisp:cons "MongoDBTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamo-dbtargets))
      (common-lisp:list
       (common-lisp:cons "DynamoDBTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-targets))
      (common-lisp:list
       (common-lisp:cons "CatalogTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delta-targets))
      (common-lisp:list
       (common-lisp:cons "DeltaTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iceberg-targets))
      (common-lisp:list
       (common-lisp:cons "IcebergTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hudi-targets))
      (common-lisp:list
       (common-lisp:cons "HudiTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crawler-targets))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass crawls-filter common-lisp:nil
                       ((field-name :initarg :field-name :initform
                         common-lisp:nil :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-crawls-filter-field-name :shape
                         "FieldName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter-operator :initarg :filter-operator :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-operator common-lisp:null)
                         :accessor struct-shape-crawls-filter-filter-operator
                         :shape "FilterOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (field-value :initarg :field-value :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-crawls-filter-field-value
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-crawls-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'crawls-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'crawls-filter 'make-crawls-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crawls-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crawls-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "FieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-operator))
      (common-lisp:list
       (common-lisp:cons "FilterOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-value))
      (common-lisp:list
       (common-lisp:cons "FieldValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crawls-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype crawls-filter-list ()
   '(trivial-types:proper-list crawls-filter))
 (common-lisp:defun make-crawls-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list crawls-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-blueprint-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor struct-shape-create-blueprint-request-name
                         :shape "OrchestrationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or generic512char-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-blueprint-request-description
                         :shape "Generic512CharString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (blueprint-location :initarg :blueprint-location
                         :initform
                         (common-lisp:error ":blueprint-location is required")
                         :type
                         (common-lisp:or orchestration-s3location
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-blueprint-request-blueprint-location
                         :shape "OrchestrationS3Location" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-blueprint-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-blueprint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-blueprint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-blueprint-request 'make-create-blueprint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-blueprint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-blueprint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-location))
      (common-lisp:list
       (common-lisp:cons "BlueprintLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-blueprint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-blueprint-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-create-blueprint-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-blueprint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-blueprint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-blueprint-response
                    'make-create-blueprint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-blueprint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-blueprint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-blueprint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-classifier-request common-lisp:nil
                       ((grok-classifier :initarg :grok-classifier :initform
                         common-lisp:nil :type
                         (common-lisp:or create-grok-classifier-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-classifier-request-grok-classifier
                         :shape "CreateGrokClassifierRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (xmlclassifier :initarg :xmlclassifier :initform
                         common-lisp:nil :type
                         (common-lisp:or create-xmlclassifier-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-classifier-request-xmlclassifier
                         :shape "CreateXMLClassifierRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (json-classifier :initarg :json-classifier :initform
                         common-lisp:nil :type
                         (common-lisp:or create-json-classifier-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-classifier-request-json-classifier
                         :shape "CreateJsonClassifierRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (csv-classifier :initarg :csv-classifier :initform
                         common-lisp:nil :type
                         (common-lisp:or create-csv-classifier-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-classifier-request-csv-classifier
                         :shape "CreateCsvClassifierRequest" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-classifier-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-classifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-classifier-request
                    'make-create-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grok-classifier))
      (common-lisp:list
       (common-lisp:cons "GrokClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xmlclassifier))
      (common-lisp:list
       (common-lisp:cons "XMLClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-classifier))
      (common-lisp:list
       (common-lisp:cons "JsonClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-classifier))
      (common-lisp:list
       (common-lisp:cons "CsvClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-classifier-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-classifier-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-classifier-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-classifier-response
                    'make-create-classifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-classifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-classifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-classifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-create-connection-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-input :initarg :connection-input :initform
                         (common-lisp:error ":connection-input is required")
                         :type
                         (common-lisp:or connection-input common-lisp:null)
                         :accessor
                         struct-shape-create-connection-request-connection-input
                         :shape "ConnectionInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-connection-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-connection-request
                    'make-create-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-input))
      (common-lisp:list
       (common-lisp:cons "ConnectionInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-connection-response
                    'make-create-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-crawler-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-create-crawler-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform
                         (common-lisp:error ":role is required") :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-create-crawler-request-role :shape "Role"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-create-crawler-request-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-create-crawler-request-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (targets :initarg :targets :initform
                         (common-lisp:error ":targets is required") :type
                         (common-lisp:or crawler-targets common-lisp:null)
                         :accessor struct-shape-create-crawler-request-targets
                         :shape "CrawlerTargets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type
                         (common-lisp:or cron-expression common-lisp:null)
                         :accessor struct-shape-create-crawler-request-schedule
                         :shape "CronExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (classifiers :initarg :classifiers :initform
                         common-lisp:nil :type
                         (common-lisp:or classifier-name-list common-lisp:null)
                         :accessor
                         struct-shape-create-crawler-request-classifiers :shape
                         "ClassifierNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-prefix :initarg :table-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or table-prefix common-lisp:null)
                         :accessor
                         struct-shape-create-crawler-request-table-prefix
                         :shape "TablePrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-change-policy :initarg :schema-change-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-change-policy common-lisp:null)
                         :accessor
                         struct-shape-create-crawler-request-schema-change-policy
                         :shape "SchemaChangePolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recrawl-policy :initarg :recrawl-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or recrawl-policy common-lisp:null)
                         :accessor
                         struct-shape-create-crawler-request-recrawl-policy
                         :shape "RecrawlPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lineage-configuration :initarg :lineage-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or lineage-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-crawler-request-lineage-configuration
                         :shape "LineageConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lake-formation-configuration :initarg
                         :lake-formation-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or lake-formation-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-crawler-request-lake-formation-configuration
                         :shape "LakeFormationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or crawler-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-crawler-request-configuration
                         :shape "CrawlerConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (crawler-security-configuration :initarg
                         :crawler-security-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or crawler-security-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-crawler-request-crawler-security-configuration
                         :shape "CrawlerSecurityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-crawler-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-crawler-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-crawler-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-crawler-request 'make-create-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-crawler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-crawler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classifiers))
      (common-lisp:list
       (common-lisp:cons "Classifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-prefix))
      (common-lisp:list
       (common-lisp:cons "TablePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recrawl-policy))
      (common-lisp:list
       (common-lisp:cons "RecrawlPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lineage-configuration))
      (common-lisp:list
       (common-lisp:cons "LineageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lake-formation-configuration))
      (common-lisp:list
       (common-lisp:cons "LakeFormationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawler-security-configuration))
      (common-lisp:list
       (common-lisp:cons "CrawlerSecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-crawler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-crawler-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-crawler-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-crawler-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-crawler-response 'make-create-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-crawler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-csv-classifier-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-csv-classifier-request-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delimiter :initarg :delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or csv-column-delimiter common-lisp:null)
                         :accessor
                         struct-shape-create-csv-classifier-request-delimiter
                         :shape "CsvColumnDelimiter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quote-symbol :initarg :quote-symbol :initform
                         common-lisp:nil :type
                         (common-lisp:or csv-quote-symbol common-lisp:null)
                         :accessor
                         struct-shape-create-csv-classifier-request-quote-symbol
                         :shape "CsvQuoteSymbol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contains-header :initarg :contains-header :initform
                         common-lisp:nil :type
                         (common-lisp:or csv-header-option common-lisp:null)
                         :accessor
                         struct-shape-create-csv-classifier-request-contains-header
                         :shape "CsvHeaderOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (header :initarg :header :initform common-lisp:nil
                         :type (common-lisp:or csv-header common-lisp:null)
                         :accessor
                         struct-shape-create-csv-classifier-request-header
                         :shape "CsvHeader" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disable-value-trimming :initarg
                         :disable-value-trimming :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-create-csv-classifier-request-disable-value-trimming
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-single-column :initarg :allow-single-column
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-create-csv-classifier-request-allow-single-column
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-datatype-configured :initarg
                         :custom-datatype-configured :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-create-csv-classifier-request-custom-datatype-configured
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-datatypes :initarg :custom-datatypes :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-datatypes common-lisp:null)
                         :accessor
                         struct-shape-create-csv-classifier-request-custom-datatypes
                         :shape "CustomDatatypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serde :initarg :serde :initform common-lisp:nil :type
                         (common-lisp:or csv-serde-option common-lisp:null)
                         :accessor
                         struct-shape-create-csv-classifier-request-serde
                         :shape "CsvSerdeOption" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-csv-classifier-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-csv-classifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-csv-classifier-request
                    'make-create-csv-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-csv-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-csv-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-symbol))
      (common-lisp:list
       (common-lisp:cons "QuoteSymbol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-header))
      (common-lisp:list
       (common-lisp:cons "ContainsHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-value-trimming))
      (common-lisp:list
       (common-lisp:cons "DisableValueTrimming"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-single-column))
      (common-lisp:list
       (common-lisp:cons "AllowSingleColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-datatype-configured))
      (common-lisp:list
       (common-lisp:cons "CustomDatatypeConfigured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-datatypes))
      (common-lisp:list
       (common-lisp:cons "CustomDatatypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serde))
      (common-lisp:list
       (common-lisp:cons "Serde"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-csv-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-entity-type-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-custom-entity-type-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regex-string :initarg :regex-string :initform
                         (common-lisp:error ":regex-string is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-custom-entity-type-request-regex-string
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (context-words :initarg :context-words :initform
                         common-lisp:nil :type
                         (common-lisp:or context-words common-lisp:null)
                         :accessor
                         struct-shape-create-custom-entity-type-request-context-words
                         :shape "ContextWords" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-custom-entity-type-request-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-entity-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-entity-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-entity-type-request
                    'make-create-custom-entity-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-entity-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-entity-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-string))
      (common-lisp:list
       (common-lisp:cons "RegexString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-words))
      (common-lisp:list
       (common-lisp:cons "ContextWords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-entity-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-custom-entity-type-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-custom-entity-type-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-custom-entity-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-custom-entity-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-custom-entity-type-response
                    'make-create-custom-entity-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-entity-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-entity-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-custom-entity-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-quality-ruleset-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-data-quality-ruleset-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-create-data-quality-ruleset-request-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ruleset :initarg :ruleset :initform
                         (common-lisp:error ":ruleset is required") :type
                         (common-lisp:or data-quality-ruleset-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-quality-ruleset-request-ruleset
                         :shape "DataQualityRulesetString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-data-quality-ruleset-request-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-table :initarg :target-table :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-target-table
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-quality-ruleset-request-target-table
                         :shape "DataQualityTargetTable" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-create-data-quality-ruleset-request-client-token
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-quality-ruleset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-quality-ruleset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-quality-ruleset-request
                    'make-create-data-quality-ruleset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-ruleset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-ruleset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset))
      (common-lisp:list
       (common-lisp:cons "Ruleset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table))
      (common-lisp:list
       (common-lisp:cons "TargetTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-ruleset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-quality-ruleset-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-data-quality-ruleset-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-quality-ruleset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-data-quality-ruleset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-quality-ruleset-response
                    'make-create-data-quality-ruleset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-ruleset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-ruleset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-ruleset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-database-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-create-database-request-catalog-id :shape
                         "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-input :initarg :database-input :initform
                         (common-lisp:error ":database-input is required")
                         :type (common-lisp:or database-input common-lisp:null)
                         :accessor
                         struct-shape-create-database-request-database-input
                         :shape "DatabaseInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-database-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-database-request 'make-create-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-input))
      (common-lisp:list
       (common-lisp:cons "DatabaseInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-database-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-database-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-database-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-database-response 'make-create-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dev-endpoint-request common-lisp:nil
                       ((endpoint-name :initarg :endpoint-name :initform
                         (common-lisp:error ":endpoint-name is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-request-endpoint-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-create-dev-endpoint-request-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-request-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-id :initarg :subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-request-subnet-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-key :initarg :public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-request-public-key
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-keys :initarg :public-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or public-keys-list common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-request-public-keys
                         :shape "PublicKeysList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-nodes :initarg :number-of-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-request-number-of-nodes
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-type common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-request-worker-type
                         :shape "WorkerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glue-version :initarg :glue-version :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-version-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-request-glue-version
                         :shape "GlueVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-request-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extra-python-libs-s3path :initarg
                         :extra-python-libs-s3path :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-request-extra-python-libs-s3path
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extra-jars-s3path :initarg :extra-jars-s3path
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-request-extra-jars-s3path
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-request-security-configuration
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-dev-endpoint-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arguments :initarg :arguments :initform
                         common-lisp:nil :type
                         (common-lisp:or map-value common-lisp:null) :accessor
                         struct-shape-create-dev-endpoint-request-arguments
                         :shape "MapValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dev-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dev-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dev-endpoint-request
                    'make-create-dev-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-keys))
      (common-lisp:list
       (common-lisp:cons "PublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extra-python-libs-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraPythonLibsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extra-jars-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraJarsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arguments))
      (common-lisp:list
       (common-lisp:cons "Arguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dev-endpoint-response common-lisp:nil
                       ((endpoint-name :initarg :endpoint-name :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-endpoint-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-status
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-id :initarg :subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-subnet-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-role-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (yarn-endpoint-address :initarg :yarn-endpoint-address
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-yarn-endpoint-address
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (zeppelin-remote-spark-interpreter-port :initarg
                         :zeppelin-remote-spark-interpreter-port :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-zeppelin-remote-spark-interpreter-port
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-nodes :initarg :number-of-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-number-of-nodes
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-type common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-worker-type
                         :shape "WorkerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glue-version :initarg :glue-version :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-version-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-glue-version
                         :shape "GlueVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-availability-zone
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-vpc-id
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extra-python-libs-s3path :initarg
                         :extra-python-libs-s3path :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-extra-python-libs-s3path
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extra-jars-s3path :initarg :extra-jars-s3path
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-extra-jars-s3path
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-failure-reason
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-security-configuration
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor
                         struct-shape-create-dev-endpoint-response-created-timestamp
                         :shape "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arguments :initarg :arguments :initform
                         common-lisp:nil :type
                         (common-lisp:or map-value common-lisp:null) :accessor
                         struct-shape-create-dev-endpoint-response-arguments
                         :shape "MapValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dev-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dev-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dev-endpoint-response
                    'make-create-dev-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'yarn-endpoint-address))
      (common-lisp:list
       (common-lisp:cons "YarnEndpointAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zeppelin-remote-spark-interpreter-port))
      (common-lisp:list
       (common-lisp:cons "ZeppelinRemoteSparkInterpreterPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extra-python-libs-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraPythonLibsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extra-jars-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraJarsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arguments))
      (common-lisp:list
       (common-lisp:cons "Arguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dev-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-grok-classifier-request common-lisp:nil
                       ((classification :initarg :classification :initform
                         (common-lisp:error ":classification is required")
                         :type (common-lisp:or classification common-lisp:null)
                         :accessor
                         struct-shape-create-grok-classifier-request-classification
                         :shape "Classification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-grok-classifier-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grok-pattern :initarg :grok-pattern :initform
                         (common-lisp:error ":grok-pattern is required") :type
                         (common-lisp:or grok-pattern common-lisp:null)
                         :accessor
                         struct-shape-create-grok-classifier-request-grok-pattern
                         :shape "GrokPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-patterns :initarg :custom-patterns :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-patterns common-lisp:null)
                         :accessor
                         struct-shape-create-grok-classifier-request-custom-patterns
                         :shape "CustomPatterns" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-grok-classifier-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-grok-classifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-grok-classifier-request
                    'make-create-grok-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-grok-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-grok-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grok-pattern))
      (common-lisp:list
       (common-lisp:cons "GrokPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-patterns))
      (common-lisp:list
       (common-lisp:cons "CustomPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-grok-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-create-job-request-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-create-job-request-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-uri :initarg :log-uri :initform common-lisp:nil
                         :type (common-lisp:or uri-string common-lisp:null)
                         :accessor struct-shape-create-job-request-log-uri
                         :shape "UriString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform
                         (common-lisp:error ":role is required") :type
                         (common-lisp:or role-string common-lisp:null)
                         :accessor struct-shape-create-job-request-role :shape
                         "RoleString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (execution-property :initarg :execution-property
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-property common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-execution-property
                         :shape "ExecutionProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (command :initarg :command :initform
                         (common-lisp:error ":command is required") :type
                         (common-lisp:or job-command common-lisp:null)
                         :accessor struct-shape-create-job-request-command
                         :shape "JobCommand" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-arguments :initarg :default-arguments
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-map common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-default-arguments
                         :shape "GenericMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (non-overridable-arguments :initarg
                         :non-overridable-arguments :initform common-lisp:nil
                         :type (common-lisp:or generic-map common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-non-overridable-arguments
                         :shape "GenericMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connections :initarg :connections :initform
                         common-lisp:nil :type
                         (common-lisp:or connections-list common-lisp:null)
                         :accessor struct-shape-create-job-request-connections
                         :shape "ConnectionsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-retries :initarg :max-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or max-retries common-lisp:null)
                         :accessor struct-shape-create-job-request-max-retries
                         :shape "MaxRetries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-capacity :initarg :allocated-capacity
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-allocated-capacity
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor struct-shape-create-job-request-timeout
                         :shape "Timeout" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-create-job-request-max-capacity
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-security-configuration
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-job-request-tags :shape "TagsMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (notification-property :initarg :notification-property
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-notification-property
                         :shape "NotificationProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (glue-version :initarg :glue-version :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-version-string common-lisp:null)
                         :accessor struct-shape-create-job-request-glue-version
                         :shape "GlueVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-type common-lisp:null)
                         :accessor struct-shape-create-job-request-worker-type
                         :shape "WorkerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-gen-configuration-nodes :initarg
                         :code-gen-configuration-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or code-gen-configuration-nodes
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-code-gen-configuration-nodes
                         :shape "CodeGenConfigurationNodes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-class :initarg :execution-class :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-class common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-execution-class :shape
                         "ExecutionClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-control-details :initarg
                         :source-control-details :initform common-lisp:nil
                         :type
                         (common-lisp:or source-control-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-job-request-source-control-details
                         :shape "SourceControlDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-property))
      (common-lisp:list
       (common-lisp:cons "ExecutionProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-arguments))
      (common-lisp:list
       (common-lisp:cons "DefaultArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-overridable-arguments))
      (common-lisp:list
       (common-lisp:cons "NonOverridableArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "MaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-capacity))
      (common-lisp:list
       (common-lisp:cons "AllocatedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-property))
      (common-lisp:list
       (common-lisp:cons "NotificationProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-gen-configuration-nodes))
      (common-lisp:list
       (common-lisp:cons "CodeGenConfigurationNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-class))
      (common-lisp:list
       (common-lisp:cons "ExecutionClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-control-details))
      (common-lisp:list
       (common-lisp:cons "SourceControlDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-job-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-create-job-response-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-job-response 'make-create-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-json-classifier-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-json-classifier-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (json-path :initarg :json-path :initform
                         (common-lisp:error ":json-path is required") :type
                         (common-lisp:or json-path common-lisp:null) :accessor
                         struct-shape-create-json-classifier-request-json-path
                         :shape "JsonPath" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-json-classifier-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-json-classifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-json-classifier-request
                    'make-create-json-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-json-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-json-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-path))
      (common-lisp:list
       (common-lisp:cons "JsonPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-json-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-mltransform-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-create-mltransform-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-create-mltransform-request-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-record-tables :initarg :input-record-tables
                         :initform
                         (common-lisp:error ":input-record-tables is required")
                         :type (common-lisp:or glue-tables common-lisp:null)
                         :accessor
                         struct-shape-create-mltransform-request-input-record-tables
                         :shape "GlueTables" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         (common-lisp:error ":parameters is required") :type
                         (common-lisp:or transform-parameters common-lisp:null)
                         :accessor
                         struct-shape-create-mltransform-request-parameters
                         :shape "TransformParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform
                         (common-lisp:error ":role is required") :type
                         (common-lisp:or role-string common-lisp:null)
                         :accessor struct-shape-create-mltransform-request-role
                         :shape "RoleString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glue-version :initarg :glue-version :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-version-string common-lisp:null)
                         :accessor
                         struct-shape-create-mltransform-request-glue-version
                         :shape "GlueVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor
                         struct-shape-create-mltransform-request-max-capacity
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-type common-lisp:null)
                         :accessor
                         struct-shape-create-mltransform-request-worker-type
                         :shape "WorkerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-create-mltransform-request-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor
                         struct-shape-create-mltransform-request-timeout :shape
                         "Timeout" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-retries :initarg :max-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-create-mltransform-request-max-retries
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-mltransform-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (transform-encryption :initarg :transform-encryption
                         :initform common-lisp:nil :type
                         (common-lisp:or transform-encryption common-lisp:null)
                         :accessor
                         struct-shape-create-mltransform-request-transform-encryption
                         :shape "TransformEncryption" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-mltransform-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-mltransform-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-mltransform-request
                    'make-create-mltransform-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mltransform-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mltransform-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-record-tables))
      (common-lisp:list
       (common-lisp:cons "InputRecordTables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "MaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-encryption))
      (common-lisp:list
       (common-lisp:cons "TransformEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mltransform-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-mltransform-response common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-create-mltransform-response-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-mltransform-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-mltransform-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-mltransform-response
                    'make-create-mltransform-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-mltransform-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-mltransform-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-mltransform-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-partition-index-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-create-partition-index-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-partition-index-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-partition-index-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-index :initarg :partition-index :initform
                         (common-lisp:error ":partition-index is required")
                         :type
                         (common-lisp:or partition-index common-lisp:null)
                         :accessor
                         struct-shape-create-partition-index-request-partition-index
                         :shape "PartitionIndex" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-partition-index-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-partition-index-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-partition-index-request
                    'make-create-partition-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-index))
      (common-lisp:list
       (common-lisp:cons "PartitionIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-partition-index-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-partition-index-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-partition-index-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-partition-index-response
                    'make-create-partition-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-partition-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-create-partition-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-partition-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-partition-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-input :initarg :partition-input :initform
                         (common-lisp:error ":partition-input is required")
                         :type
                         (common-lisp:or partition-input common-lisp:null)
                         :accessor
                         struct-shape-create-partition-request-partition-input
                         :shape "PartitionInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-partition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-partition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-partition-request 'make-create-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-input))
      (common-lisp:list
       (common-lisp:cons "PartitionInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-partition-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-partition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-partition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-partition-response
                    'make-create-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-registry-input common-lisp:nil
                       ((registry-name :initarg :registry-name :initform
                         (common-lisp:error ":registry-name is required") :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-registry-input-registry-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-create-registry-input-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-registry-input-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-registry-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-registry-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-registry-input 'make-create-registry-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-registry-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-registry-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-registry-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-registry-response common-lisp:nil
                       ((registry-arn :initarg :registry-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-create-registry-response-registry-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registry-name :initarg :registry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-registry-response-registry-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-create-registry-response-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-registry-response-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-registry-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-registry-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-registry-response 'make-create-registry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-registry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-registry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-registry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-schema-input common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor struct-shape-create-schema-input-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         (common-lisp:error ":schema-name is required") :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor struct-shape-create-schema-input-schema-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-format :initarg :data-format :initform
                         (common-lisp:error ":data-format is required") :type
                         (common-lisp:or data-format common-lisp:null)
                         :accessor struct-shape-create-schema-input-data-format
                         :shape "DataFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compatibility :initarg :compatibility :initform
                         common-lisp:nil :type
                         (common-lisp:or compatibility common-lisp:null)
                         :accessor
                         struct-shape-create-schema-input-compatibility :shape
                         "Compatibility" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-create-schema-input-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-schema-input-tags :shape "TagsMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema-definition :initarg :schema-definition
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-definition-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-schema-input-schema-definition
                         :shape "SchemaDefinitionString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-schema-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-schema-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-schema-input 'make-create-schema-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-schema-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "RegistryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "DataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatibility))
      (common-lisp:list
       (common-lisp:cons "Compatibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "SchemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-schema-response common-lisp:nil
                       ((registry-name :initarg :registry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-schema-response-registry-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (registry-arn :initarg :registry-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-create-schema-response-registry-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-schema-response-schema-name :shape
                         "SchemaRegistryNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-arn :initarg :schema-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-create-schema-response-schema-arn :shape
                         "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-create-schema-response-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-format :initarg :data-format :initform
                         common-lisp:nil :type
                         (common-lisp:or data-format common-lisp:null)
                         :accessor
                         struct-shape-create-schema-response-data-format :shape
                         "DataFormat" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (compatibility :initarg :compatibility :initform
                         common-lisp:nil :type
                         (common-lisp:or compatibility common-lisp:null)
                         :accessor
                         struct-shape-create-schema-response-compatibility
                         :shape "Compatibility" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-checkpoint :initarg :schema-checkpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-checkpoint-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-schema-response-schema-checkpoint
                         :shape "SchemaCheckpointNumber" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (latest-schema-version :initarg :latest-schema-version
                         :initform common-lisp:nil :type
                         (common-lisp:or version-long-number common-lisp:null)
                         :accessor
                         struct-shape-create-schema-response-latest-schema-version
                         :shape "VersionLongNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-schema-version :initarg :next-schema-version
                         :initform common-lisp:nil :type
                         (common-lisp:or version-long-number common-lisp:null)
                         :accessor
                         struct-shape-create-schema-response-next-schema-version
                         :shape "VersionLongNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-status :initarg :schema-status :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-status common-lisp:null)
                         :accessor
                         struct-shape-create-schema-response-schema-status
                         :shape "SchemaStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-schema-response-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema-version-id :initarg :schema-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-schema-response-schema-version-id
                         :shape "SchemaVersionIdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schema-version-status :initarg :schema-version-status
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-schema-response-schema-version-status
                         :shape "SchemaVersionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-schema-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-schema-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-schema-response 'make-create-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "DataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatibility))
      (common-lisp:list
       (common-lisp:cons "Compatibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-checkpoint))
      (common-lisp:list
       (common-lisp:cons "SchemaCheckpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-schema-version))
      (common-lisp:list
       (common-lisp:cons "LatestSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-schema-version))
      (common-lisp:list
       (common-lisp:cons "NextSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-status))
      (common-lisp:list
       (common-lisp:cons "SchemaStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-status))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-script-request common-lisp:nil
                       ((dag-nodes :initarg :dag-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or dag-nodes common-lisp:null) :accessor
                         struct-shape-create-script-request-dag-nodes :shape
                         "DagNodes" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dag-edges :initarg :dag-edges :initform
                         common-lisp:nil :type
                         (common-lisp:or dag-edges common-lisp:null) :accessor
                         struct-shape-create-script-request-dag-edges :shape
                         "DagEdges" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (language :initarg :language :initform common-lisp:nil
                         :type (common-lisp:or language common-lisp:null)
                         :accessor struct-shape-create-script-request-language
                         :shape "Language" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-script-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-script-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-script-request 'make-create-script-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-script-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-script-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dag-nodes))
      (common-lisp:list
       (common-lisp:cons "DagNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dag-edges))
      (common-lisp:list
       (common-lisp:cons "DagEdges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-script-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-script-response common-lisp:nil
                       ((python-script :initarg :python-script :initform
                         common-lisp:nil :type
                         (common-lisp:or python-script common-lisp:null)
                         :accessor
                         struct-shape-create-script-response-python-script
                         :shape "PythonScript" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scala-code :initarg :scala-code :initform
                         common-lisp:nil :type
                         (common-lisp:or scala-code common-lisp:null) :accessor
                         struct-shape-create-script-response-scala-code :shape
                         "ScalaCode" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-script-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-script-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-script-response 'make-create-script-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-script-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-script-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'python-script))
      (common-lisp:list
       (common-lisp:cons "PythonScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scala-code))
      (common-lisp:list
       (common-lisp:cons "ScalaCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-script-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-security-configuration-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-security-configuration-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :initform
                         (common-lisp:error
                          ":encryption-configuration is required")
                         :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-security-configuration-request-encryption-configuration
                         :shape "EncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-security-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-security-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-security-configuration-request
                    'make-create-security-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-security-configuration-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-security-configuration-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor
                         struct-shape-create-security-configuration-response-created-timestamp
                         :shape "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-security-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-security-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-security-configuration-response
                    'make-create-security-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-security-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-session-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-create-session-request-id
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-create-session-request-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform
                         (common-lisp:error ":role is required") :type
                         (common-lisp:or orchestration-role-arn
                                         common-lisp:null)
                         :accessor struct-shape-create-session-request-role
                         :shape "OrchestrationRoleArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (command :initarg :command :initform
                         (common-lisp:error ":command is required") :type
                         (common-lisp:or session-command common-lisp:null)
                         :accessor struct-shape-create-session-request-command
                         :shape "SessionCommand" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor struct-shape-create-session-request-timeout
                         :shape "Timeout" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idle-timeout :initarg :idle-timeout :initform
                         common-lisp:nil :type
                         (common-lisp:or timeout common-lisp:null) :accessor
                         struct-shape-create-session-request-idle-timeout
                         :shape "Timeout" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-arguments :initarg :default-arguments
                         :initform common-lisp:nil :type
                         (common-lisp:or orchestration-arguments-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-session-request-default-arguments
                         :shape "OrchestrationArgumentsMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connections :initarg :connections :initform
                         common-lisp:nil :type
                         (common-lisp:or connections-list common-lisp:null)
                         :accessor
                         struct-shape-create-session-request-connections :shape
                         "ConnectionsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor
                         struct-shape-create-session-request-max-capacity
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-create-session-request-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-type common-lisp:null)
                         :accessor
                         struct-shape-create-session-request-worker-type :shape
                         "WorkerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-session-request-security-configuration
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glue-version :initarg :glue-version :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-version-string common-lisp:null)
                         :accessor
                         struct-shape-create-session-request-glue-version
                         :shape "GlueVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-session-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (request-origin :initarg :request-origin :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-session-request-request-origin
                         :shape "OrchestrationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-session-request 'make-create-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-timeout))
      (common-lisp:list
       (common-lisp:cons "IdleTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-arguments))
      (common-lisp:list
       (common-lisp:cons "DefaultArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-session-response common-lisp:nil
                       ((session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session common-lisp:null)
                         :accessor struct-shape-create-session-response-session
                         :shape "Session" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-session-response 'make-create-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-table-optimizer-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         (common-lisp:error ":catalog-id is required") :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-create-table-optimizer-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-table-optimizer-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-table-optimizer-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or table-optimizer-type common-lisp:null)
                         :accessor
                         struct-shape-create-table-optimizer-request-type
                         :shape "TableOptimizerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-optimizer-configuration :initarg
                         :table-optimizer-configuration :initform
                         (common-lisp:error
                          ":table-optimizer-configuration is required")
                         :type
                         (common-lisp:or table-optimizer-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-table-optimizer-request-table-optimizer-configuration
                         :shape "TableOptimizerConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-table-optimizer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-table-optimizer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-table-optimizer-request
                    'make-create-table-optimizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-table-optimizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-table-optimizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-optimizer-configuration))
      (common-lisp:list
       (common-lisp:cons "TableOptimizerConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-table-optimizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-table-optimizer-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-table-optimizer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-table-optimizer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-table-optimizer-response
                    'make-create-table-optimizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-table-optimizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-table-optimizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-table-optimizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-table-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor struct-shape-create-table-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-database-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (table-input :initarg :table-input :initform
                         (common-lisp:error ":table-input is required") :type
                         (common-lisp:or table-input common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-table-input :shape
                         "TableInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (partition-indexes :initarg :partition-indexes
                         :initform common-lisp:nil :type
                         (common-lisp:or partition-index-list common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-partition-indexes
                         :shape "PartitionIndexList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transaction-id :initarg :transaction-id :initform
                         common-lisp:nil :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-transaction-id
                         :shape "TransactionIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (open-table-format-input :initarg
                         :open-table-format-input :initform common-lisp:nil
                         :type
                         (common-lisp:or open-table-format-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-table-request-open-table-format-input
                         :shape "OpenTableFormatInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-table-request 'make-create-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-input))
      (common-lisp:list
       (common-lisp:cons "TableInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-indexes))
      (common-lisp:list
       (common-lisp:cons "PartitionIndexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-table-format-input))
      (common-lisp:list
       (common-lisp:cons "OpenTableFormatInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-table-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-table-response 'make-create-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-trigger-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-create-trigger-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (workflow-name :initarg :workflow-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-trigger-request-workflow-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or trigger-type common-lisp:null)
                         :accessor struct-shape-create-trigger-request-type
                         :shape "TriggerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-create-trigger-request-schedule
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (predicate :initarg :predicate :initform
                         common-lisp:nil :type
                         (common-lisp:or predicate common-lisp:null) :accessor
                         struct-shape-create-trigger-request-predicate :shape
                         "Predicate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or action-list common-lisp:null)
                         :accessor struct-shape-create-trigger-request-actions
                         :shape "ActionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-create-trigger-request-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-on-creation :initarg :start-on-creation
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-value common-lisp:null)
                         :accessor
                         struct-shape-create-trigger-request-start-on-creation
                         :shape "BooleanValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-trigger-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-batching-condition :initarg
                         :event-batching-condition :initform common-lisp:nil
                         :type
                         (common-lisp:or event-batching-condition
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-trigger-request-event-batching-condition
                         :shape "EventBatchingCondition" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-trigger-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-trigger-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-trigger-request 'make-create-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-trigger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-trigger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "WorkflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate))
      (common-lisp:list
       (common-lisp:cons "Predicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-on-creation))
      (common-lisp:list
       (common-lisp:cons "StartOnCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-batching-condition))
      (common-lisp:list
       (common-lisp:cons "EventBatchingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-trigger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-trigger-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-create-trigger-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-trigger-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-trigger-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-trigger-response 'make-create-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-trigger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-trigger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-trigger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-defined-function-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-create-user-defined-function-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-user-defined-function-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-input :initarg :function-input :initform
                         (common-lisp:error ":function-input is required")
                         :type
                         (common-lisp:or user-defined-function-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-user-defined-function-request-function-input
                         :shape "UserDefinedFunctionInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-defined-function-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-user-defined-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-defined-function-request
                    'make-create-user-defined-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-defined-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-defined-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-input))
      (common-lisp:list
       (common-lisp:cons "FunctionInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-defined-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-defined-function-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-defined-function-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-user-defined-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-defined-function-response
                    'make-create-user-defined-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-defined-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-defined-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-defined-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workflow-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-create-workflow-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-create-workflow-request-description
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-run-properties :initarg
                         :default-run-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or workflow-run-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-workflow-request-default-run-properties
                         :shape "WorkflowRunProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-workflow-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-concurrent-runs :initarg :max-concurrent-runs
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-create-workflow-request-max-concurrent-runs
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-workflow-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-workflow-request 'make-create-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-run-properties))
      (common-lisp:list
       (common-lisp:cons "DefaultRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrent-runs))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workflow-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-create-workflow-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-workflow-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-workflow-response 'make-create-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-xmlclassifier-request common-lisp:nil
                       ((classification :initarg :classification :initform
                         (common-lisp:error ":classification is required")
                         :type (common-lisp:or classification common-lisp:null)
                         :accessor
                         struct-shape-create-xmlclassifier-request-classification
                         :shape "Classification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-create-xmlclassifier-request-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (row-tag :initarg :row-tag :initform common-lisp:nil
                         :type (common-lisp:or row-tag common-lisp:null)
                         :accessor
                         struct-shape-create-xmlclassifier-request-row-tag
                         :shape "RowTag" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-xmlclassifier-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-xmlclassifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-xmlclassifier-request
                    'make-create-xmlclassifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-xmlclassifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-xmlclassifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-tag))
      (common-lisp:list
       (common-lisp:cons "RowTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-xmlclassifier-request))
   common-lisp:nil))
(common-lisp:deftype created-timestamp () 'common-lisp:string)
(common-lisp:deftype cron-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass csv-classifier common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-csv-classifier-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-csv-classifier-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-csv-classifier-last-updated :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version-id common-lisp:null)
                         :accessor struct-shape-csv-classifier-version :shape
                         "VersionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delimiter :initarg :delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or csv-column-delimiter common-lisp:null)
                         :accessor struct-shape-csv-classifier-delimiter :shape
                         "CsvColumnDelimiter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quote-symbol :initarg :quote-symbol :initform
                         common-lisp:nil :type
                         (common-lisp:or csv-quote-symbol common-lisp:null)
                         :accessor struct-shape-csv-classifier-quote-symbol
                         :shape "CsvQuoteSymbol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contains-header :initarg :contains-header :initform
                         common-lisp:nil :type
                         (common-lisp:or csv-header-option common-lisp:null)
                         :accessor struct-shape-csv-classifier-contains-header
                         :shape "CsvHeaderOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (header :initarg :header :initform common-lisp:nil
                         :type (common-lisp:or csv-header common-lisp:null)
                         :accessor struct-shape-csv-classifier-header :shape
                         "CsvHeader" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (disable-value-trimming :initarg
                         :disable-value-trimming :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-csv-classifier-disable-value-trimming
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-single-column :initarg :allow-single-column
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-csv-classifier-allow-single-column :shape
                         "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-datatype-configured :initarg
                         :custom-datatype-configured :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-csv-classifier-custom-datatype-configured
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-datatypes :initarg :custom-datatypes :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-datatypes common-lisp:null)
                         :accessor struct-shape-csv-classifier-custom-datatypes
                         :shape "CustomDatatypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serde :initarg :serde :initform common-lisp:nil :type
                         (common-lisp:or csv-serde-option common-lisp:null)
                         :accessor struct-shape-csv-classifier-serde :shape
                         "CsvSerdeOption" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-csv-classifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'csv-classifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'csv-classifier 'make-csv-classifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input csv-classifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input csv-classifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-symbol))
      (common-lisp:list
       (common-lisp:cons "QuoteSymbol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-header))
      (common-lisp:list
       (common-lisp:cons "ContainsHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-value-trimming))
      (common-lisp:list
       (common-lisp:cons "DisableValueTrimming"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-single-column))
      (common-lisp:list
       (common-lisp:cons "AllowSingleColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-datatype-configured))
      (common-lisp:list
       (common-lisp:cons "CustomDatatypeConfigured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-datatypes))
      (common-lisp:list
       (common-lisp:cons "CustomDatatypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serde))
      (common-lisp:list
       (common-lisp:cons "Serde"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input csv-classifier))
   common-lisp:nil))
(common-lisp:deftype csv-column-delimiter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype csv-header () '(trivial-types:proper-list name-string))
 (common-lisp:defun make-csv-header
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype csv-header-option () 'common-lisp:string)
(common-lisp:deftype csv-quote-symbol () 'common-lisp:string)
(common-lisp:deftype csv-serde-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass custom-code common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-custom-code-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or many-inputs common-lisp:null)
                         :accessor struct-shape-custom-code-inputs :shape
                         "ManyInputs" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or extended-string common-lisp:null)
                         :accessor struct-shape-custom-code-code :shape
                         "ExtendedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (class-name :initarg :class-name :initform
                         (common-lisp:error ":class-name is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-custom-code-class-name :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor struct-shape-custom-code-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-code
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-code
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'custom-code 'make-custom-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'class-name))
      (common-lisp:list
       (common-lisp:cons "ClassName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-datatypes ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-custom-datatypes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass custom-entity-type common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-custom-entity-type-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (regex-string :initarg :regex-string :initform
                         (common-lisp:error ":regex-string is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-custom-entity-type-regex-string
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (context-words :initarg :context-words :initform
                         common-lisp:nil :type
                         (common-lisp:or context-words common-lisp:null)
                         :accessor
                         struct-shape-custom-entity-type-context-words :shape
                         "ContextWords" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-entity-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-entity-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-entity-type 'make-custom-entity-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-entity-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-entity-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-string))
      (common-lisp:list
       (common-lisp:cons "RegexString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-words))
      (common-lisp:list
       (common-lisp:cons "ContextWords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-entity-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-entity-type-names ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-custom-entity-type-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype custom-entity-types ()
   '(trivial-types:proper-list custom-entity-type))
 (common-lisp:defun make-custom-entity-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-entity-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype custom-patterns () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dqadditional-options () 'common-lisp:hash-table)
 (common-lisp:defun make-dqadditional-options
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype dqdlaliases () 'common-lisp:hash-table)
 (common-lisp:defun make-dqdlaliases (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype dqdlstring () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dqresults-publishing-options common-lisp:nil
                       ((evaluation-context :initarg :evaluation-context
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-limited-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-dqresults-publishing-options-evaluation-context
                         :shape "GenericLimitedString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (results-s3prefix :initarg :results-s3prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-dqresults-publishing-options-results-s3prefix
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cloud-watch-metrics-enabled :initarg
                         :cloud-watch-metrics-enabled :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-dqresults-publishing-options-cloud-watch-metrics-enabled
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (results-publishing-enabled :initarg
                         :results-publishing-enabled :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-dqresults-publishing-options-results-publishing-enabled
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dqresults-publishing-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dqresults-publishing-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dqresults-publishing-options
                    'make-dqresults-publishing-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dqresults-publishing-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dqresults-publishing-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-context))
      (common-lisp:list
       (common-lisp:cons "EvaluationContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-s3prefix))
      (common-lisp:list
       (common-lisp:cons "ResultsS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "CloudWatchMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'results-publishing-enabled))
      (common-lisp:list
       (common-lisp:cons "ResultsPublishingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dqresults-publishing-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dqstop-job-on-failure-options common-lisp:nil
                       ((stop-job-on-failure-timing :initarg
                         :stop-job-on-failure-timing :initform common-lisp:nil
                         :type
                         (common-lisp:or dqstop-job-on-failure-timing
                                         common-lisp:null)
                         :accessor
                         struct-shape-dqstop-job-on-failure-options-stop-job-on-failure-timing
                         :shape "DQStopJobOnFailureTiming" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dqstop-job-on-failure-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dqstop-job-on-failure-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dqstop-job-on-failure-options
                    'make-dqstop-job-on-failure-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dqstop-job-on-failure-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dqstop-job-on-failure-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stop-job-on-failure-timing))
      (common-lisp:list
       (common-lisp:cons "StopJobOnFailureTiming"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dqstop-job-on-failure-options))
   common-lisp:nil))
(common-lisp:deftype dqstop-job-on-failure-timing () 'common-lisp:string)
(common-lisp:deftype dqtransform-output () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dag-edges () '(trivial-types:proper-list code-gen-edge))
 (common-lisp:defun make-dag-edges
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-gen-edge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dag-nodes () '(trivial-types:proper-list code-gen-node))
 (common-lisp:defun make-dag-nodes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-gen-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-catalog-encryption-settings common-lisp:nil
                       ((encryption-at-rest :initarg :encryption-at-rest
                         :initform common-lisp:nil :type
                         (common-lisp:or encryption-at-rest common-lisp:null)
                         :accessor
                         struct-shape-data-catalog-encryption-settings-encryption-at-rest
                         :shape "EncryptionAtRest" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-password-encryption :initarg
                         :connection-password-encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-password-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-catalog-encryption-settings-connection-password-encryption
                         :shape "ConnectionPasswordEncryption" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-catalog-encryption-settings
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-catalog-encryption-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-catalog-encryption-settings
                    'make-data-catalog-encryption-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-catalog-encryption-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-catalog-encryption-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-at-rest))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-password-encryption))
      (common-lisp:list
       (common-lisp:cons "ConnectionPasswordEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-catalog-encryption-settings))
   common-lisp:nil))
(common-lisp:deftype data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-lake-principal common-lisp:nil
                       ((data-lake-principal-identifier :initarg
                         :data-lake-principal-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or data-lake-principal-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-lake-principal-data-lake-principal-identifier
                         :shape "DataLakePrincipalString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-lake-principal
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-lake-principal
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-lake-principal 'make-data-lake-principal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-lake-principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-lake-principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-lake-principal-identifier))
      (common-lisp:list
       (common-lisp:cons "DataLakePrincipalIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-lake-principal))
   common-lisp:nil))
(common-lisp:deftype data-lake-principal-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-quality-analyzer-result common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-analyzer-result-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-rule-result-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-quality-analyzer-result-description
                         :shape "DataQualityRuleResultDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (evaluation-message :initarg :evaluation-message
                         :initform common-lisp:nil :type
                         (common-lisp:or data-quality-rule-result-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-quality-analyzer-result-evaluation-message
                         :shape "DataQualityRuleResultDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (evaluated-metrics :initarg :evaluated-metrics
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluated-metrics-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-quality-analyzer-result-evaluated-metrics
                         :shape "EvaluatedMetricsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-analyzer-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-quality-analyzer-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-analyzer-result
                    'make-data-quality-analyzer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-analyzer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-analyzer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-message))
      (common-lisp:list
       (common-lisp:cons "EvaluationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluated-metrics))
      (common-lisp:list
       (common-lisp:cons "EvaluatedMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-analyzer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-quality-analyzer-results ()
   '(trivial-types:proper-list data-quality-analyzer-result))
 (common-lisp:defun make-data-quality-analyzer-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-quality-analyzer-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-quality-evaluation-run-additional-run-options
                       common-lisp:nil
                       ((cloud-watch-metrics-enabled :initarg
                         :cloud-watch-metrics-enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-data-quality-evaluation-run-additional-run-options-cloud-watch-metrics-enabled
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (results-s3prefix :initarg :results-s3prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or uri-string common-lisp:null) :accessor
                         struct-shape-data-quality-evaluation-run-additional-run-options-results-s3prefix
                         :shape "UriString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-evaluation-run-additional-run-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-quality-evaluation-run-additional-run-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-evaluation-run-additional-run-options
                    'make-data-quality-evaluation-run-additional-run-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-evaluation-run-additional-run-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-evaluation-run-additional-run-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-metrics-enabled))
      (common-lisp:list
       (common-lisp:cons "CloudWatchMetricsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-s3prefix))
      (common-lisp:list
       (common-lisp:cons "ResultsS3Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-evaluation-run-additional-run-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-quality-metric-values common-lisp:nil
                       ((actual-value :initarg :actual-value :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor
                         struct-shape-data-quality-metric-values-actual-value
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expected-value :initarg :expected-value :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor
                         struct-shape-data-quality-metric-values-expected-value
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lower-limit :initarg :lower-limit :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor
                         struct-shape-data-quality-metric-values-lower-limit
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upper-limit :initarg :upper-limit :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor
                         struct-shape-data-quality-metric-values-upper-limit
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-metric-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-quality-metric-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-metric-values
                    'make-data-quality-metric-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-metric-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-metric-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-value))
      (common-lisp:list
       (common-lisp:cons "ActualValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-value))
      (common-lisp:list
       (common-lisp:cons "ExpectedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-limit))
      (common-lisp:list
       (common-lisp:cons "LowerLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-limit))
      (common-lisp:list
       (common-lisp:cons "UpperLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-metric-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-quality-observation common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-observation-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-quality-observation-description
                         :shape "DataQualityObservationDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metric-based-observation :initarg
                         :metric-based-observation :initform common-lisp:nil
                         :type
                         (common-lisp:or metric-based-observation
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-quality-observation-metric-based-observation
                         :shape "MetricBasedObservation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-observation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-quality-observation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-observation 'make-data-quality-observation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-observation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-observation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-based-observation))
      (common-lisp:list
       (common-lisp:cons "MetricBasedObservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-observation))
   common-lisp:nil))
(common-lisp:deftype data-quality-observation-description ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-quality-observations ()
   '(trivial-types:proper-list data-quality-observation))
 (common-lisp:defun make-data-quality-observations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-quality-observation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-quality-result common-lisp:nil
                       ((result-id :initarg :result-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor struct-shape-data-quality-result-result-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or generic-bounded-double
                                         common-lisp:null)
                         :accessor struct-shape-data-quality-result-score
                         :shape "GenericBoundedDouble" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor struct-shape-data-quality-result-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ruleset-name :initarg :ruleset-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-result-ruleset-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (evaluation-context :initarg :evaluation-context
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-result-evaluation-context
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-result-started-on :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completed-on :initarg :completed-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-result-completed-on :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-data-quality-result-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-run-id :initarg :job-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor struct-shape-data-quality-result-job-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ruleset-evaluation-run-id :initarg
                         :ruleset-evaluation-run-id :initform common-lisp:nil
                         :type (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-result-ruleset-evaluation-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-results :initarg :rule-results :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-rule-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-quality-result-rule-results :shape
                         "DataQualityRuleResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analyzer-results :initarg :analyzer-results :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-analyzer-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-quality-result-analyzer-results
                         :shape "DataQualityAnalyzerResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (observations :initarg :observations :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-observations
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-quality-result-observations :shape
                         "DataQualityObservations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-quality-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-result 'make-data-quality-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-quality-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-quality-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "ResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset-name))
      (common-lisp:list
       (common-lisp:cons "RulesetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-context))
      (common-lisp:list
       (common-lisp:cons "EvaluationContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ruleset-evaluation-run-id))
      (common-lisp:list
       (common-lisp:cons "RulesetEvaluationRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-results))
      (common-lisp:list
       (common-lisp:cons "RuleResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-results))
      (common-lisp:list
       (common-lisp:cons "AnalyzerResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'observations))
      (common-lisp:list
       (common-lisp:cons "Observations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-quality-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-quality-result-description common-lisp:nil
                       ((result-id :initarg :result-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-result-description-result-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-data-quality-result-description-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-result-description-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-run-id :initarg :job-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-result-description-job-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-result-description-started-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-result-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-quality-result-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-result-description
                    'make-data-quality-result-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-result-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-result-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "ResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-result-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-quality-result-description-list ()
   '(trivial-types:proper-list data-quality-result-description))
 (common-lisp:defun make-data-quality-result-description-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-quality-result-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-quality-result-filter-criteria common-lisp:nil
                       ((data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-data-quality-result-filter-criteria-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-result-filter-criteria-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-run-id :initarg :job-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-result-filter-criteria-job-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-after :initarg :started-after :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-result-filter-criteria-started-after
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-before :initarg :started-before :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-result-filter-criteria-started-before
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-result-filter-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-quality-result-filter-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-result-filter-criteria
                    'make-data-quality-result-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-result-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-result-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-after))
      (common-lisp:list
       (common-lisp:cons "StartedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-before))
      (common-lisp:list
       (common-lisp:cons "StartedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-result-filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-quality-result-id-list ()
   '(trivial-types:proper-list hash-string))
 (common-lisp:defun make-data-quality-result-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hash-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-quality-result-ids ()
   '(trivial-types:proper-list hash-string))
 (common-lisp:defun make-data-quality-result-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hash-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-quality-results-list ()
   '(trivial-types:proper-list data-quality-result))
 (common-lisp:defun make-data-quality-results-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-quality-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-quality-rule-recommendation-run-description
                       common-lisp:nil
                       ((run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-rule-recommendation-run-description-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or task-status-type common-lisp:null)
                         :accessor
                         struct-shape-data-quality-rule-recommendation-run-description-status
                         :shape "TaskStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-rule-recommendation-run-description-started-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-data-quality-rule-recommendation-run-description-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-rule-recommendation-run-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-quality-rule-recommendation-run-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-rule-recommendation-run-description
                    'make-data-quality-rule-recommendation-run-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-recommendation-run-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-recommendation-run-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-recommendation-run-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-quality-rule-recommendation-run-filter
                       common-lisp:nil
                       ((data-source :initarg :data-source :initform
                         (common-lisp:error ":data-source is required") :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-data-quality-rule-recommendation-run-filter-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-before :initarg :started-before :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-rule-recommendation-run-filter-started-before
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-after :initarg :started-after :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-rule-recommendation-run-filter-started-after
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-rule-recommendation-run-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-quality-rule-recommendation-run-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-rule-recommendation-run-filter
                    'make-data-quality-rule-recommendation-run-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-recommendation-run-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-recommendation-run-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-before))
      (common-lisp:list
       (common-lisp:cons "StartedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-after))
      (common-lisp:list
       (common-lisp:cons "StartedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-recommendation-run-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-quality-rule-recommendation-run-list ()
   '(trivial-types:proper-list
     data-quality-rule-recommendation-run-description))
 (common-lisp:defun make-data-quality-rule-recommendation-run-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-quality-rule-recommendation-run-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-quality-rule-result common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-data-quality-rule-result-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-rule-result-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-quality-rule-result-description
                         :shape "DataQualityRuleResultDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (evaluation-message :initarg :evaluation-message
                         :initform common-lisp:nil :type
                         (common-lisp:or data-quality-rule-result-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-quality-rule-result-evaluation-message
                         :shape "DataQualityRuleResultDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (result :initarg :result :initform common-lisp:nil
                         :type
                         (common-lisp:or data-quality-rule-result-status
                                         common-lisp:null)
                         :accessor struct-shape-data-quality-rule-result-result
                         :shape "DataQualityRuleResultStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (evaluated-metrics :initarg :evaluated-metrics
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluated-metrics-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-quality-rule-result-evaluated-metrics
                         :shape "EvaluatedMetricsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-rule-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-quality-rule-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-rule-result 'make-data-quality-rule-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-message))
      (common-lisp:list
       (common-lisp:cons "EvaluationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluated-metrics))
      (common-lisp:list
       (common-lisp:cons "EvaluatedMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-rule-result))
   common-lisp:nil))
(common-lisp:deftype data-quality-rule-result-description ()
  'common-lisp:string)
(common-lisp:deftype data-quality-rule-result-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-quality-rule-results ()
   '(trivial-types:proper-list data-quality-rule-result))
 (common-lisp:defun make-data-quality-rule-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-quality-rule-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-quality-ruleset-evaluation-run-description
                       common-lisp:nil
                       ((run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-ruleset-evaluation-run-description-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or task-status-type common-lisp:null)
                         :accessor
                         struct-shape-data-quality-ruleset-evaluation-run-description-status
                         :shape "TaskStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-ruleset-evaluation-run-description-started-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-data-quality-ruleset-evaluation-run-description-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-ruleset-evaluation-run-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-quality-ruleset-evaluation-run-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-ruleset-evaluation-run-description
                    'make-data-quality-ruleset-evaluation-run-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-evaluation-run-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-evaluation-run-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-evaluation-run-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-quality-ruleset-evaluation-run-filter
                       common-lisp:nil
                       ((data-source :initarg :data-source :initform
                         (common-lisp:error ":data-source is required") :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-data-quality-ruleset-evaluation-run-filter-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-before :initarg :started-before :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-ruleset-evaluation-run-filter-started-before
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-after :initarg :started-after :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-ruleset-evaluation-run-filter-started-after
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-ruleset-evaluation-run-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-quality-ruleset-evaluation-run-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-ruleset-evaluation-run-filter
                    'make-data-quality-ruleset-evaluation-run-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-evaluation-run-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-evaluation-run-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-before))
      (common-lisp:list
       (common-lisp:cons "StartedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-after))
      (common-lisp:list
       (common-lisp:cons "StartedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-evaluation-run-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-quality-ruleset-evaluation-run-list ()
   '(trivial-types:proper-list
     data-quality-ruleset-evaluation-run-description))
 (common-lisp:defun make-data-quality-ruleset-evaluation-run-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-quality-ruleset-evaluation-run-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-quality-ruleset-filter-criteria common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-ruleset-filter-criteria-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-ruleset-filter-criteria-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-before :initarg :created-before :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-ruleset-filter-criteria-created-before
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-after :initarg :created-after :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-ruleset-filter-criteria-created-after
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-before :initarg :last-modified-before
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-ruleset-filter-criteria-last-modified-before
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-after :initarg :last-modified-after
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-ruleset-filter-criteria-last-modified-after
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-table :initarg :target-table :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-target-table
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-quality-ruleset-filter-criteria-target-table
                         :shape "DataQualityTargetTable" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-ruleset-filter-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-quality-ruleset-filter-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-ruleset-filter-criteria
                    'make-data-quality-ruleset-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table))
      (common-lisp:list
       (common-lisp:cons "TargetTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-quality-ruleset-list ()
   '(trivial-types:proper-list data-quality-ruleset-list-details))
 (common-lisp:defun make-data-quality-ruleset-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-quality-ruleset-list-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass data-quality-ruleset-list-details common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-ruleset-list-details-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-ruleset-list-details-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-on :initarg :created-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-ruleset-list-details-created-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-on :initarg :last-modified-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-data-quality-ruleset-list-details-last-modified-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-table :initarg :target-table :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-target-table
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-quality-ruleset-list-details-target-table
                         :shape "DataQualityTargetTable" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recommendation-run-id :initarg :recommendation-run-id
                         :initform common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-ruleset-list-details-recommendation-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-count :initarg :rule-count :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-data-quality-ruleset-list-details-rule-count
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-ruleset-list-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-quality-ruleset-list-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-ruleset-list-details
                    'make-data-quality-ruleset-list-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-list-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-list-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table))
      (common-lisp:list
       (common-lisp:cons "TargetTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-run-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-count))
      (common-lisp:list
       (common-lisp:cons "RuleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-ruleset-list-details))
   common-lisp:nil))
(common-lisp:deftype data-quality-ruleset-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-quality-target-table common-lisp:nil
                       ((table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-target-table-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-target-table-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-data-quality-target-table-catalog-id
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-quality-target-table
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-quality-target-table
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-quality-target-table
                    'make-data-quality-target-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-target-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-target-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-target-table))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-source common-lisp:nil
                       ((glue-table :initarg :glue-table :initform
                         (common-lisp:error ":glue-table is required") :type
                         (common-lisp:or glue-table common-lisp:null) :accessor
                         struct-shape-data-source-glue-table :shape "GlueTable"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-table))
      (common-lisp:list
       (common-lisp:cons "GlueTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-source-map () 'common-lisp:hash-table)
 (common-lisp:defun make-data-source-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass database common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-database-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-database-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location-uri :initarg :location-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-database-location-uri :shape "URI"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor struct-shape-database-parameters :shape
                         "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-database-create-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-table-default-permissions :initarg
                         :create-table-default-permissions :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-permissions-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-database-create-table-default-permissions
                         :shape "PrincipalPermissionsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-database :initarg :target-database :initform
                         common-lisp:nil :type
                         (common-lisp:or database-identifier common-lisp:null)
                         :accessor struct-shape-database-target-database :shape
                         "DatabaseIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor struct-shape-database-catalog-id :shape
                         "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (federated-database :initarg :federated-database
                         :initform common-lisp:nil :type
                         (common-lisp:or federated-database common-lisp:null)
                         :accessor struct-shape-database-federated-database
                         :shape "FederatedDatabase" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-database
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'database
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'database 'make-database))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-uri))
      (common-lisp:list
       (common-lisp:cons "LocationUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-table-default-permissions))
      (common-lisp:list
       (common-lisp:cons "CreateTableDefaultPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-database))
      (common-lisp:list
       (common-lisp:cons "TargetDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federated-database))
      (common-lisp:list
       (common-lisp:cons "FederatedDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input database))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass database-identifier common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor struct-shape-database-identifier-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-database-identifier-database-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-database-identifier-region
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-database-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'database-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'database-identifier 'make-database-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input database-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input database-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input database-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass database-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-database-input-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-database-input-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location-uri :initarg :location-uri :initform
                         common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-database-input-location-uri :shape "URI"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor struct-shape-database-input-parameters
                         :shape "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-table-default-permissions :initarg
                         :create-table-default-permissions :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-permissions-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-database-input-create-table-default-permissions
                         :shape "PrincipalPermissionsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-database :initarg :target-database :initform
                         common-lisp:nil :type
                         (common-lisp:or database-identifier common-lisp:null)
                         :accessor struct-shape-database-input-target-database
                         :shape "DatabaseIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (federated-database :initarg :federated-database
                         :initform common-lisp:nil :type
                         (common-lisp:or federated-database common-lisp:null)
                         :accessor
                         struct-shape-database-input-federated-database :shape
                         "FederatedDatabase" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-database-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'database-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'database-input 'make-database-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input database-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input database-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-uri))
      (common-lisp:list
       (common-lisp:cons "LocationUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-table-default-permissions))
      (common-lisp:list
       (common-lisp:cons "CreateTableDefaultPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-database))
      (common-lisp:list
       (common-lisp:cons "TargetDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federated-database))
      (common-lisp:list
       (common-lisp:cons "FederatedDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input database-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype database-list () '(trivial-types:proper-list database))
 (common-lisp:defun make-database-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list database))
   aws-sdk/generator/shape::members))
(common-lisp:deftype database-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass datatype common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or generic-limited-string
                                         common-lisp:null)
                         :accessor struct-shape-datatype-id :shape
                         "GenericLimitedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (label :initarg :label :initform
                         (common-lisp:error ":label is required") :type
                         (common-lisp:or generic-limited-string
                                         common-lisp:null)
                         :accessor struct-shape-datatype-label :shape
                         "GenericLimitedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-datatype
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'datatype
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'datatype 'make-datatype))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datatype))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datatype))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datatype))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass date-column-statistics-data common-lisp:nil
                       ((minimum-value :initarg :minimum-value :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-date-column-statistics-data-minimum-value
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-value :initarg :maximum-value :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-date-column-statistics-data-maximum-value
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-nulls :initarg :number-of-nulls :initform
                         (common-lisp:error ":number-of-nulls is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-date-column-statistics-data-number-of-nulls
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-distinct-values :initarg
                         :number-of-distinct-values :initform
                         (common-lisp:error
                          ":number-of-distinct-values is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-date-column-statistics-data-number-of-distinct-values
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-date-column-statistics-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'date-column-statistics-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'date-column-statistics-data
                    'make-date-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          date-column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          date-column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-value))
      (common-lisp:list
       (common-lisp:cons "MinimumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-value))
      (common-lisp:list
       (common-lisp:cons "MaximumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nulls))
      (common-lisp:list
       (common-lisp:cons "NumberOfNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-distinct-values))
      (common-lisp:list
       (common-lisp:cons "NumberOfDistinctValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          date-column-statistics-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decimal-column-statistics-data common-lisp:nil
                       ((minimum-value :initarg :minimum-value :initform
                         common-lisp:nil :type
                         (common-lisp:or decimal-number common-lisp:null)
                         :accessor
                         struct-shape-decimal-column-statistics-data-minimum-value
                         :shape "DecimalNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-value :initarg :maximum-value :initform
                         common-lisp:nil :type
                         (common-lisp:or decimal-number common-lisp:null)
                         :accessor
                         struct-shape-decimal-column-statistics-data-maximum-value
                         :shape "DecimalNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-nulls :initarg :number-of-nulls :initform
                         (common-lisp:error ":number-of-nulls is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-decimal-column-statistics-data-number-of-nulls
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-distinct-values :initarg
                         :number-of-distinct-values :initform
                         (common-lisp:error
                          ":number-of-distinct-values is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-decimal-column-statistics-data-number-of-distinct-values
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-decimal-column-statistics-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'decimal-column-statistics-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'decimal-column-statistics-data
                    'make-decimal-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          decimal-column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          decimal-column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-value))
      (common-lisp:list
       (common-lisp:cons "MinimumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-value))
      (common-lisp:list
       (common-lisp:cons "MaximumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nulls))
      (common-lisp:list
       (common-lisp:cons "NumberOfNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-distinct-values))
      (common-lisp:list
       (common-lisp:cons "NumberOfDistinctValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          decimal-column-statistics-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass decimal-number common-lisp:nil
                       ((unscaled-value :initarg :unscaled-value :initform
                         (common-lisp:error ":unscaled-value is required")
                         :type (common-lisp:or blob common-lisp:null) :accessor
                         struct-shape-decimal-number-unscaled-value :shape
                         "Blob" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scale :initarg :scale :initform
                         (common-lisp:error ":scale is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-decimal-number-scale :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-decimal-number
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'decimal-number
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'decimal-number 'make-decimal-number))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decimal-number))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decimal-number))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unscaled-value))
      (common-lisp:list
       (common-lisp:cons "UnscaledValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "Scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decimal-number))
   common-lisp:nil))
(common-lisp:deftype delete-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-blueprint-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-delete-blueprint-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-blueprint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-blueprint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-blueprint-request 'make-delete-blueprint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-blueprint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-blueprint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-blueprint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-blueprint-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-delete-blueprint-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-blueprint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-blueprint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-blueprint-response
                    'make-delete-blueprint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-blueprint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-blueprint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-blueprint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-classifier-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-delete-classifier-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-classifier-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-classifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-classifier-request
                    'make-delete-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-classifier-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-classifier-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-classifier-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-classifier-response
                    'make-delete-classifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-classifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-classifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-classifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-column-statistics-for-partition-request
                       common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-delete-column-statistics-for-partition-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-column-statistics-for-partition-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-column-statistics-for-partition-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-values :initarg :partition-values :initform
                         (common-lisp:error ":partition-values is required")
                         :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor
                         struct-shape-delete-column-statistics-for-partition-request-partition-values
                         :shape "ValueStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (column-name :initarg :column-name :initform
                         (common-lisp:error ":column-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-column-statistics-for-partition-request-column-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-column-statistics-for-partition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-column-statistics-for-partition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-column-statistics-for-partition-request
                    'make-delete-column-statistics-for-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-column-statistics-for-partition-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-column-statistics-for-partition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-column-statistics-for-partition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-column-statistics-for-partition-response
                    'make-delete-column-statistics-for-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-column-statistics-for-table-request
                       common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-delete-column-statistics-for-table-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-column-statistics-for-table-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-column-statistics-for-table-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (column-name :initarg :column-name :initform
                         (common-lisp:error ":column-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-column-statistics-for-table-request-column-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-column-statistics-for-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-column-statistics-for-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-column-statistics-for-table-request
                    'make-delete-column-statistics-for-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "ColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-column-statistics-for-table-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-column-statistics-for-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-column-statistics-for-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-column-statistics-for-table-response
                    'make-delete-column-statistics-for-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-column-statistics-for-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype delete-connection-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-delete-connection-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-connection-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-delete-connection-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         (common-lisp:error ":connection-name is required")
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-connection-request-connection-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-connection-request
                    'make-delete-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-connection-response
                    'make-delete-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-crawler-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-delete-crawler-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-crawler-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-crawler-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-crawler-request 'make-delete-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-crawler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-crawler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-crawler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-crawler-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-crawler-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-crawler-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-crawler-response 'make-delete-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-crawler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-entity-type-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-entity-type-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-entity-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-entity-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-entity-type-request
                    'make-delete-custom-entity-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-entity-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-entity-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-entity-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-custom-entity-type-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-custom-entity-type-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-custom-entity-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-custom-entity-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-custom-entity-type-response
                    'make-delete-custom-entity-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-entity-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-entity-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-custom-entity-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-quality-ruleset-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-data-quality-ruleset-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-quality-ruleset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-data-quality-ruleset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-quality-ruleset-request
                    'make-delete-data-quality-ruleset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-ruleset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-ruleset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-ruleset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-data-quality-ruleset-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-data-quality-ruleset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-data-quality-ruleset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-data-quality-ruleset-response
                    'make-delete-data-quality-ruleset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-ruleset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-ruleset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-ruleset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-database-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-delete-database-request-catalog-id :shape
                         "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-delete-database-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-database-request 'make-delete-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-database-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-database-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-database-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-database-response 'make-delete-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dev-endpoint-request common-lisp:nil
                       ((endpoint-name :initarg :endpoint-name :initform
                         (common-lisp:error ":endpoint-name is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-delete-dev-endpoint-request-endpoint-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dev-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dev-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dev-endpoint-request
                    'make-delete-dev-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dev-endpoint-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dev-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dev-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dev-endpoint-response
                    'make-delete-dev-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dev-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-job-request common-lisp:nil
                       ((job-name :initarg :job-name :initform
                         (common-lisp:error ":job-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-delete-job-request-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-job-request 'make-delete-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-job-response common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-delete-job-response-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-job-response 'make-delete-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mltransform-request common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         (common-lisp:error ":transform-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-delete-mltransform-request-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-mltransform-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-mltransform-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-mltransform-request
                    'make-delete-mltransform-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mltransform-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mltransform-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mltransform-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-mltransform-response common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-delete-mltransform-response-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-mltransform-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-mltransform-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-mltransform-response
                    'make-delete-mltransform-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-mltransform-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-mltransform-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-mltransform-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-partition-index-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-delete-partition-index-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-partition-index-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-partition-index-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (index-name :initarg :index-name :initform
                         (common-lisp:error ":index-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-partition-index-request-index-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-partition-index-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-partition-index-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-partition-index-request
                    'make-delete-partition-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-index-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-partition-index-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-partition-index-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-partition-index-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-partition-index-response
                    'make-delete-partition-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-partition-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-delete-partition-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-partition-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-partition-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-values :initarg :partition-values :initform
                         (common-lisp:error ":partition-values is required")
                         :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor
                         struct-shape-delete-partition-request-partition-values
                         :shape "ValueStringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-partition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-partition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-partition-request 'make-delete-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-partition-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-partition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-partition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-partition-response
                    'make-delete-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-registry-input common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         (common-lisp:error ":registry-id is required") :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-delete-registry-input-registry-id :shape
                         "RegistryId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-registry-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-registry-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-registry-input 'make-delete-registry-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "RegistryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-registry-response common-lisp:nil
                       ((registry-name :initarg :registry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-registry-response-registry-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (registry-arn :initarg :registry-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-registry-response-registry-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or registry-status common-lisp:null)
                         :accessor struct-shape-delete-registry-response-status
                         :shape "RegistryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-registry-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-registry-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-registry-response 'make-delete-registry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-registry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-request common-lisp:nil
                       ((policy-hash-condition :initarg :policy-hash-condition
                         :initform common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-request-policy-hash-condition
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-request-resource-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-request
                    'make-delete-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-hash-condition))
      (common-lisp:list
       (common-lisp:cons "PolicyHashCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-response
                    'make-delete-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-schema-input common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         (common-lisp:error ":schema-id is required") :type
                         (common-lisp:or schema-id common-lisp:null) :accessor
                         struct-shape-delete-schema-input-schema-id :shape
                         "SchemaId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-schema-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-schema-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-schema-input 'make-delete-schema-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-schema-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-schema-response common-lisp:nil
                       ((schema-arn :initarg :schema-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-schema-response-schema-arn :shape
                         "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-schema-response-schema-name :shape
                         "SchemaRegistryNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or schema-status common-lisp:null)
                         :accessor struct-shape-delete-schema-response-status
                         :shape "SchemaStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-schema-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-schema-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-schema-response 'make-delete-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-schema-versions-input common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         (common-lisp:error ":schema-id is required") :type
                         (common-lisp:or schema-id common-lisp:null) :accessor
                         struct-shape-delete-schema-versions-input-schema-id
                         :shape "SchemaId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (versions :initarg :versions :initform
                         (common-lisp:error ":versions is required") :type
                         (common-lisp:or versions-string common-lisp:null)
                         :accessor
                         struct-shape-delete-schema-versions-input-versions
                         :shape "VersionsString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-schema-versions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-schema-versions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-schema-versions-input
                    'make-delete-schema-versions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-versions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-versions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-versions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-schema-versions-response common-lisp:nil
                       ((schema-version-errors :initarg :schema-version-errors
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-error-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-schema-versions-response-schema-version-errors
                         :shape "SchemaVersionErrorList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-schema-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-schema-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-schema-versions-response
                    'make-delete-schema-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-errors))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-security-configuration-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-security-configuration-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-security-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-security-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-security-configuration-request
                    'make-delete-security-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-security-configuration-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-security-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-security-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-security-configuration-response
                    'make-delete-security-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-security-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-session-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-delete-session-request-id
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-origin :initarg :request-origin :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-session-request-request-origin
                         :shape "OrchestrationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-session-request 'make-delete-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-session-response common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-delete-session-response-id
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-session-response 'make-delete-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-table-optimizer-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         (common-lisp:error ":catalog-id is required") :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-delete-table-optimizer-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-table-optimizer-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-table-optimizer-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or table-optimizer-type common-lisp:null)
                         :accessor
                         struct-shape-delete-table-optimizer-request-type
                         :shape "TableOptimizerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-table-optimizer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-table-optimizer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-table-optimizer-request
                    'make-delete-table-optimizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-optimizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-optimizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-optimizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-table-optimizer-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-table-optimizer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-table-optimizer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-table-optimizer-response
                    'make-delete-table-optimizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-optimizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-optimizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-optimizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-table-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor struct-shape-delete-table-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-table-request-database-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-delete-table-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transaction-id :initarg :transaction-id :initform
                         common-lisp:nil :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-table-request-transaction-id
                         :shape "TransactionIdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-table-request 'make-delete-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-table-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-table-response 'make-delete-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-table-version-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-delete-table-version-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-table-version-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-table-version-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         (common-lisp:error ":version-id is required") :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor
                         struct-shape-delete-table-version-request-version-id
                         :shape "VersionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-table-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-table-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-table-version-request
                    'make-delete-table-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-table-version-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-table-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-table-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-table-version-response
                    'make-delete-table-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-table-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-trigger-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-delete-trigger-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-trigger-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-trigger-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-trigger-request 'make-delete-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-trigger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-trigger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-trigger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-trigger-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-delete-trigger-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-trigger-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-trigger-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-trigger-response 'make-delete-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-trigger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-trigger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-trigger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-defined-function-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-delete-user-defined-function-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-user-defined-function-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-delete-user-defined-function-request-function-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-defined-function-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-defined-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-defined-function-request
                    'make-delete-user-defined-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-defined-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-defined-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-defined-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-defined-function-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-user-defined-function-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-user-defined-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-user-defined-function-response
                    'make-delete-user-defined-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-defined-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-defined-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-defined-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workflow-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-delete-workflow-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-workflow-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-workflow-request 'make-delete-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workflow-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-delete-workflow-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-workflow-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-workflow-response 'make-delete-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delta-target common-lisp:nil
                       ((delta-tables :initarg :delta-tables :initform
                         common-lisp:nil :type
                         (common-lisp:or path-list common-lisp:null) :accessor
                         struct-shape-delta-target-delta-tables :shape
                         "PathList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor struct-shape-delta-target-connection-name
                         :shape "ConnectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (write-manifest :initarg :write-manifest :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor struct-shape-delta-target-write-manifest
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-native-delta-table :initarg
                         :create-native-delta-table :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-delta-target-create-native-delta-table
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delta-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delta-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'delta-target 'make-delta-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delta-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delta-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delta-tables))
      (common-lisp:list
       (common-lisp:cons "DeltaTables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-manifest))
      (common-lisp:list
       (common-lisp:cons "WriteManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'create-native-delta-table))
      (common-lisp:list
       (common-lisp:cons "CreateNativeDeltaTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delta-target))
   common-lisp:nil))
(common-lisp:deftype delta-target-compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype delta-target-list ()
   '(trivial-types:proper-list delta-target))
 (common-lisp:defun make-delta-target-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delta-target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype description-string () 'common-lisp:string)
(common-lisp:deftype description-string-removable () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dev-endpoint common-lisp:nil
                       ((endpoint-name :initarg :endpoint-name :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-dev-endpoint-endpoint-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-dev-endpoint-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-dev-endpoint-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-id :initarg :subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-dev-endpoint-subnet-id :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (yarn-endpoint-address :initarg :yarn-endpoint-address
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-dev-endpoint-yarn-endpoint-address :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (private-address :initarg :private-address :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-dev-endpoint-private-address
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (zeppelin-remote-spark-interpreter-port :initarg
                         :zeppelin-remote-spark-interpreter-port :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-dev-endpoint-zeppelin-remote-spark-interpreter-port
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-address :initarg :public-address :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-dev-endpoint-public-address
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-dev-endpoint-status :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-type common-lisp:null)
                         :accessor struct-shape-dev-endpoint-worker-type :shape
                         "WorkerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (glue-version :initarg :glue-version :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-version-string common-lisp:null)
                         :accessor struct-shape-dev-endpoint-glue-version
                         :shape "GlueVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor struct-shape-dev-endpoint-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-nodes :initarg :number-of-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor struct-shape-dev-endpoint-number-of-nodes
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-dev-endpoint-availability-zone
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-id :initarg :vpc-id :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-dev-endpoint-vpc-id :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extra-python-libs-s3path :initarg
                         :extra-python-libs-s3path :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-dev-endpoint-extra-python-libs-s3path
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extra-jars-s3path :initarg :extra-jars-s3path
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-dev-endpoint-extra-jars-s3path
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-dev-endpoint-failure-reason
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-status :initarg :last-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-dev-endpoint-last-update-status
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-dev-endpoint-created-timestamp
                         :shape "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-timestamp :initarg
                         :last-modified-timestamp :initform common-lisp:nil
                         :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor
                         struct-shape-dev-endpoint-last-modified-timestamp
                         :shape "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-key :initarg :public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-dev-endpoint-public-key :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-keys :initarg :public-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or public-keys-list common-lisp:null)
                         :accessor struct-shape-dev-endpoint-public-keys :shape
                         "PublicKeysList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-dev-endpoint-security-configuration
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arguments :initarg :arguments :initform
                         common-lisp:nil :type
                         (common-lisp:or map-value common-lisp:null) :accessor
                         struct-shape-dev-endpoint-arguments :shape "MapValue"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dev-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dev-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dev-endpoint 'make-dev-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dev-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dev-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'yarn-endpoint-address))
      (common-lisp:list
       (common-lisp:cons "YarnEndpointAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-address))
      (common-lisp:list
       (common-lisp:cons "PrivateAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zeppelin-remote-spark-interpreter-port))
      (common-lisp:list
       (common-lisp:cons "ZeppelinRemoteSparkInterpreterPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-address))
      (common-lisp:list
       (common-lisp:cons "PublicAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nodes))
      (common-lisp:list
       (common-lisp:cons "NumberOfNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extra-python-libs-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraPythonLibsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extra-jars-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraJarsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-status))
      (common-lisp:list
       (common-lisp:cons "LastUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-keys))
      (common-lisp:list
       (common-lisp:cons "PublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arguments))
      (common-lisp:list
       (common-lisp:cons "Arguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dev-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dev-endpoint-custom-libraries common-lisp:nil
                       ((extra-python-libs-s3path :initarg
                         :extra-python-libs-s3path :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-dev-endpoint-custom-libraries-extra-python-libs-s3path
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extra-jars-s3path :initarg :extra-jars-s3path
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-dev-endpoint-custom-libraries-extra-jars-s3path
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dev-endpoint-custom-libraries
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'dev-endpoint-custom-libraries
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dev-endpoint-custom-libraries
                    'make-dev-endpoint-custom-libraries))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dev-endpoint-custom-libraries))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dev-endpoint-custom-libraries))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extra-python-libs-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraPythonLibsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extra-jars-s3path))
      (common-lisp:list
       (common-lisp:cons "ExtraJarsS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dev-endpoint-custom-libraries))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dev-endpoint-list ()
   '(trivial-types:proper-list dev-endpoint))
 (common-lisp:defun make-dev-endpoint-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dev-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dev-endpoint-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-dev-endpoint-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dev-endpoint-names ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun make-dev-endpoint-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass direct-jdbcsource common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-direct-jdbcsource-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-direct-jdbcsource-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-direct-jdbcsource-table :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         (common-lisp:error ":connection-name is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-jdbcsource-connection-name :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-type :initarg :connection-type :initform
                         (common-lisp:error ":connection-type is required")
                         :type
                         (common-lisp:or jdbcconnection-type common-lisp:null)
                         :accessor
                         struct-shape-direct-jdbcsource-connection-type :shape
                         "JDBCConnectionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redshift-tmp-dir :initarg :redshift-tmp-dir :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-jdbcsource-redshift-tmp-dir :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-direct-jdbcsource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'direct-jdbcsource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'direct-jdbcsource 'make-direct-jdbcsource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input direct-jdbcsource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input direct-jdbcsource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-tmp-dir))
      (common-lisp:list
       (common-lisp:cons "RedshiftTmpDir"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input direct-jdbcsource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass direct-kafka-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-direct-kafka-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (streaming-options :initarg :streaming-options
                         :initform common-lisp:nil :type
                         (common-lisp:or kafka-streaming-source-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-kafka-source-streaming-options
                         :shape "KafkaStreamingSourceOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (window-size :initarg :window-size :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-positive-int common-lisp:null)
                         :accessor struct-shape-direct-kafka-source-window-size
                         :shape "BoxedPositiveInt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (detect-schema :initarg :detect-schema :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-direct-kafka-source-detect-schema :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-preview-options :initarg :data-preview-options
                         :initform common-lisp:nil :type
                         (common-lisp:or streaming-data-preview-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-kafka-source-data-preview-options
                         :shape "StreamingDataPreviewOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-direct-kafka-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'direct-kafka-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'direct-kafka-source 'make-direct-kafka-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input direct-kafka-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input direct-kafka-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-options))
      (common-lisp:list
       (common-lisp:cons "StreamingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-size))
      (common-lisp:list
       (common-lisp:cons "WindowSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detect-schema))
      (common-lisp:list
       (common-lisp:cons "DetectSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-preview-options))
      (common-lisp:list
       (common-lisp:cons "DataPreviewOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input direct-kafka-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass direct-kinesis-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-direct-kinesis-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (window-size :initarg :window-size :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-positive-int common-lisp:null)
                         :accessor
                         struct-shape-direct-kinesis-source-window-size :shape
                         "BoxedPositiveInt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (detect-schema :initarg :detect-schema :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-direct-kinesis-source-detect-schema
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (streaming-options :initarg :streaming-options
                         :initform common-lisp:nil :type
                         (common-lisp:or kinesis-streaming-source-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-kinesis-source-streaming-options
                         :shape "KinesisStreamingSourceOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-preview-options :initarg :data-preview-options
                         :initform common-lisp:nil :type
                         (common-lisp:or streaming-data-preview-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-kinesis-source-data-preview-options
                         :shape "StreamingDataPreviewOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-direct-kinesis-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'direct-kinesis-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'direct-kinesis-source 'make-direct-kinesis-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          direct-kinesis-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          direct-kinesis-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-size))
      (common-lisp:list
       (common-lisp:cons "WindowSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detect-schema))
      (common-lisp:list
       (common-lisp:cons "DetectSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-options))
      (common-lisp:list
       (common-lisp:cons "StreamingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-preview-options))
      (common-lisp:list
       (common-lisp:cons "DataPreviewOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          direct-kinesis-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass direct-schema-change-policy common-lisp:nil
                       ((enable-update-catalog :initarg :enable-update-catalog
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-direct-schema-change-policy-enable-update-catalog
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-behavior :initarg :update-behavior :initform
                         common-lisp:nil :type
                         (common-lisp:or update-catalog-behavior
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-schema-change-policy-update-behavior
                         :shape "UpdateCatalogBehavior" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table :initarg :table :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-schema-change-policy-table :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database :initarg :database :initform common-lisp:nil
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-direct-schema-change-policy-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-direct-schema-change-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'direct-schema-change-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'direct-schema-change-policy
                    'make-direct-schema-change-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          direct-schema-change-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          direct-schema-change-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-update-catalog))
      (common-lisp:list
       (common-lisp:cons "EnableUpdateCatalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-behavior))
      (common-lisp:list
       (common-lisp:cons "UpdateBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          direct-schema-change-policy))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass double-column-statistics-data common-lisp:nil
                       ((minimum-value :initarg :minimum-value :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-double-column-statistics-data-minimum-value
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-value :initarg :maximum-value :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-double-column-statistics-data-maximum-value
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-nulls :initarg :number-of-nulls :initform
                         (common-lisp:error ":number-of-nulls is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-double-column-statistics-data-number-of-nulls
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-distinct-values :initarg
                         :number-of-distinct-values :initform
                         (common-lisp:error
                          ":number-of-distinct-values is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-double-column-statistics-data-number-of-distinct-values
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-double-column-statistics-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'double-column-statistics-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'double-column-statistics-data
                    'make-double-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          double-column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          double-column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-value))
      (common-lisp:list
       (common-lisp:cons "MinimumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-value))
      (common-lisp:list
       (common-lisp:cons "MaximumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nulls))
      (common-lisp:list
       (common-lisp:cons "NumberOfNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-distinct-values))
      (common-lisp:list
       (common-lisp:cons "NumberOfDistinctValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          double-column-statistics-data))
   common-lisp:nil))
(common-lisp:deftype double-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass drop-duplicates common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-drop-duplicates-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-drop-duplicates-inputs :shape "OneInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (columns :initarg :columns :initform common-lisp:nil
                         :type
                         (common-lisp:or limited-path-list common-lisp:null)
                         :accessor struct-shape-drop-duplicates-columns :shape
                         "LimitedPathList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-drop-duplicates
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'drop-duplicates
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'drop-duplicates 'make-drop-duplicates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input drop-duplicates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input drop-duplicates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input drop-duplicates))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass drop-fields common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-drop-fields-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-drop-fields-inputs :shape "OneInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (paths :initarg :paths :initform
                         (common-lisp:error ":paths is required") :type
                         (common-lisp:or glue-studio-path-list
                                         common-lisp:null)
                         :accessor struct-shape-drop-fields-paths :shape
                         "GlueStudioPathList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-drop-fields
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'drop-fields
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'drop-fields 'make-drop-fields))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input drop-fields))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input drop-fields))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input drop-fields))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass drop-null-fields common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-drop-null-fields-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-drop-null-fields-inputs :shape "OneInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (null-check-box-list :initarg :null-check-box-list
                         :initform common-lisp:nil :type
                         (common-lisp:or null-check-box-list common-lisp:null)
                         :accessor
                         struct-shape-drop-null-fields-null-check-box-list
                         :shape "NullCheckBoxList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (null-text-list :initarg :null-text-list :initform
                         common-lisp:nil :type
                         (common-lisp:or null-value-fields common-lisp:null)
                         :accessor struct-shape-drop-null-fields-null-text-list
                         :shape "NullValueFields" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-drop-null-fields
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'drop-null-fields
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'drop-null-fields 'make-drop-null-fields))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input drop-null-fields))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input drop-null-fields))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-check-box-list))
      (common-lisp:list
       (common-lisp:cons "NullCheckBoxList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-text-list))
      (common-lisp:list
       (common-lisp:cons "NullTextList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input drop-null-fields))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dynamic-transform common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-dynamic-transform-name :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transform-name :initarg :transform-name :initform
                         (common-lisp:error ":transform-name is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-dynamic-transform-transform-name :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-dynamic-transform-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or transform-config-parameter-list
                                         common-lisp:null)
                         :accessor struct-shape-dynamic-transform-parameters
                         :shape "TransformConfigParameterList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-dynamic-transform-function-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-dynamic-transform-path :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-dynamic-transform-version
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor
                         struct-shape-dynamic-transform-output-schemas :shape
                         "GlueSchemas" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dynamic-transform
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dynamic-transform
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dynamic-transform 'make-dynamic-transform))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dynamic-transform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dynamic-transform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-name))
      (common-lisp:list
       (common-lisp:cons "TransformName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dynamic-transform))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dynamo-dbcatalog-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-dynamo-dbcatalog-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-dynamo-dbcatalog-source-database :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-dynamo-dbcatalog-source-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dynamo-dbcatalog-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dynamo-dbcatalog-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dynamo-dbcatalog-source 'make-dynamo-dbcatalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dynamo-dbcatalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dynamo-dbcatalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dynamo-dbcatalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dynamo-dbtarget common-lisp:nil
                       ((path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or path common-lisp:null) :accessor
                         struct-shape-dynamo-dbtarget-path :shape "Path"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scan-all :initarg :scan-all :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor struct-shape-dynamo-dbtarget-scan-all :shape
                         "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scan-rate :initarg :scan-rate :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-dynamo-dbtarget-scan-rate
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dynamo-dbtarget
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dynamo-dbtarget
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dynamo-dbtarget 'make-dynamo-dbtarget))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dynamo-dbtarget))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dynamo-dbtarget))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-all))
      (common-lisp:list
       (common-lisp:cons "scanAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-rate))
      (common-lisp:list
       (common-lisp:cons "scanRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dynamo-dbtarget))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dynamo-dbtarget-list ()
   '(trivial-types:proper-list dynamo-dbtarget))
 (common-lisp:defun make-dynamo-dbtarget-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dynamo-dbtarget))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass edge common-lisp:nil
                       ((source-id :initarg :source-id :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-edge-source-id :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination-id :initarg :destination-id :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-edge-destination-id :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-edge (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'edge
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'edge 'make-edge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input edge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input edge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-id))
      (common-lisp:list
       (common-lisp:cons "DestinationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input edge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype edge-list () '(trivial-types:proper-list edge))
 (common-lisp:defun make-edge-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list edge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype enable-additional-metadata ()
   '(trivial-types:proper-list jdbc-metadata-entry))
 (common-lisp:defun make-enable-additional-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list jdbc-metadata-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype enable-hybrid-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype enclosed-in-string-properties ()
   '(trivial-types:proper-list enclosed-in-string-property))
 (common-lisp:defun make-enclosed-in-string-properties
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            enclosed-in-string-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype enclosed-in-string-properties-min-one ()
   '(trivial-types:proper-list enclosed-in-string-property))
 (common-lisp:defun make-enclosed-in-string-properties-min-one
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            enclosed-in-string-property))
   aws-sdk/generator/shape::members))
(common-lisp:deftype enclosed-in-string-property () 'common-lisp:string)
(common-lisp:deftype enclosed-in-string-property-with-quote ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass encryption-at-rest common-lisp:nil
                       ((catalog-encryption-mode :initarg
                         :catalog-encryption-mode :initform
                         (common-lisp:error
                          ":catalog-encryption-mode is required")
                         :type
                         (common-lisp:or catalog-encryption-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-encryption-at-rest-catalog-encryption-mode
                         :shape "CatalogEncryptionMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sse-aws-kms-key-id :initarg :sse-aws-kms-key-id
                         :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-encryption-at-rest-sse-aws-kms-key-id
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-encryption-service-role :initarg
                         :catalog-encryption-service-role :initform
                         common-lisp:nil :type
                         (common-lisp:or iamrole-arn common-lisp:null)
                         :accessor
                         struct-shape-encryption-at-rest-catalog-encryption-service-role
                         :shape "IAMRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-at-rest
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-at-rest
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-at-rest 'make-encryption-at-rest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encryption-at-rest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encryption-at-rest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'catalog-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "CatalogEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-aws-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "SseAwsKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'catalog-encryption-service-role))
      (common-lisp:list
       (common-lisp:cons "CatalogEncryptionServiceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encryption-at-rest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-configuration common-lisp:nil
                       ((s3encryption :initarg :s3encryption :initform
                         common-lisp:nil :type
                         (common-lisp:or s3encryption-list common-lisp:null)
                         :accessor
                         struct-shape-encryption-configuration-s3encryption
                         :shape "S3EncryptionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloud-watch-encryption :initarg
                         :cloud-watch-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or cloud-watch-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-encryption-configuration-cloud-watch-encryption
                         :shape "CloudWatchEncryption" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-bookmarks-encryption :initarg
                         :job-bookmarks-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or job-bookmarks-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-encryption-configuration-job-bookmarks-encryption
                         :shape "JobBookmarksEncryption" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3encryption))
      (common-lisp:list
       (common-lisp:cons "S3Encryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-encryption))
      (common-lisp:list
       (common-lisp:cons "CloudWatchEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-bookmarks-encryption))
      (common-lisp:list
       (common-lisp:cons "JobBookmarksEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition entity-not-found-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-not-found-exception-message)
      (from-federation-source :initarg :from-federation-source :initform
       common-lisp:nil :reader
       entity-not-found-exception-from-federation-source)))
 (common-lisp:export
  (common-lisp:list 'entity-not-found-exception
                    'entity-not-found-exception-message
                    'entity-not-found-exception-from-federation-source)))
(common-lisp:progn
 (common-lisp:deftype error-by-name () 'common-lisp:hash-table)
 (common-lisp:defun make-error-by-name (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype error-code-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-detail common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-error-detail-error-code :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-error-detail-error-message
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass error-details common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or error-code-string common-lisp:null)
                         :accessor struct-shape-error-details-error-code :shape
                         "ErrorCodeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message-string common-lisp:null)
                         :accessor struct-shape-error-details-error-message
                         :shape "ErrorMessageString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:deftype error-message-string () 'common-lisp:string)
(common-lisp:deftype error-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass evaluate-data-quality common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-evaluate-data-quality-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-evaluate-data-quality-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ruleset :initarg :ruleset :initform
                         (common-lisp:error ":ruleset is required") :type
                         (common-lisp:or dqdlstring common-lisp:null) :accessor
                         struct-shape-evaluate-data-quality-ruleset :shape
                         "DQDLString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output :initarg :output :initform common-lisp:nil
                         :type
                         (common-lisp:or dqtransform-output common-lisp:null)
                         :accessor struct-shape-evaluate-data-quality-output
                         :shape "DQTransformOutput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publishing-options :initarg :publishing-options
                         :initform common-lisp:nil :type
                         (common-lisp:or dqresults-publishing-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluate-data-quality-publishing-options
                         :shape "DQResultsPublishingOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stop-job-on-failure-options :initarg
                         :stop-job-on-failure-options :initform common-lisp:nil
                         :type
                         (common-lisp:or dqstop-job-on-failure-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluate-data-quality-stop-job-on-failure-options
                         :shape "DQStopJobOnFailureOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluate-data-quality
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluate-data-quality
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluate-data-quality 'make-evaluate-data-quality))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-data-quality))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-data-quality))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset))
      (common-lisp:list
       (common-lisp:cons "Ruleset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publishing-options))
      (common-lisp:list
       (common-lisp:cons "PublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stop-job-on-failure-options))
      (common-lisp:list
       (common-lisp:cons "StopJobOnFailureOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-data-quality))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluate-data-quality-multi-frame common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-evaluate-data-quality-multi-frame-name
                         :shape "NodeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or many-inputs common-lisp:null)
                         :accessor
                         struct-shape-evaluate-data-quality-multi-frame-inputs
                         :shape "ManyInputs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-data-sources :initarg
                         :additional-data-sources :initform common-lisp:nil
                         :type (common-lisp:or dqdlaliases common-lisp:null)
                         :accessor
                         struct-shape-evaluate-data-quality-multi-frame-additional-data-sources
                         :shape "DQDLAliases" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ruleset :initarg :ruleset :initform
                         (common-lisp:error ":ruleset is required") :type
                         (common-lisp:or dqdlstring common-lisp:null) :accessor
                         struct-shape-evaluate-data-quality-multi-frame-ruleset
                         :shape "DQDLString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (publishing-options :initarg :publishing-options
                         :initform common-lisp:nil :type
                         (common-lisp:or dqresults-publishing-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluate-data-quality-multi-frame-publishing-options
                         :shape "DQResultsPublishingOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or dqadditional-options common-lisp:null)
                         :accessor
                         struct-shape-evaluate-data-quality-multi-frame-additional-options
                         :shape "DQAdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stop-job-on-failure-options :initarg
                         :stop-job-on-failure-options :initform common-lisp:nil
                         :type
                         (common-lisp:or dqstop-job-on-failure-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluate-data-quality-multi-frame-stop-job-on-failure-options
                         :shape "DQStopJobOnFailureOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluate-data-quality-multi-frame
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'evaluate-data-quality-multi-frame
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluate-data-quality-multi-frame
                    'make-evaluate-data-quality-multi-frame))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-data-quality-multi-frame))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-data-quality-multi-frame))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-data-sources))
      (common-lisp:list
       (common-lisp:cons "AdditionalDataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset))
      (common-lisp:list
       (common-lisp:cons "Ruleset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publishing-options))
      (common-lisp:list
       (common-lisp:cons "PublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stop-job-on-failure-options))
      (common-lisp:list
       (common-lisp:cons "StopJobOnFailureOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluate-data-quality-multi-frame))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluated-metrics-map () 'common-lisp:hash-table)
 (common-lisp:defun make-evaluated-metrics-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass evaluation-metrics common-lisp:nil
                       ((transform-type :initarg :transform-type :initform
                         (common-lisp:error ":transform-type is required")
                         :type (common-lisp:or transform-type common-lisp:null)
                         :accessor
                         struct-shape-evaluation-metrics-transform-type :shape
                         "TransformType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (find-matches-metrics :initarg :find-matches-metrics
                         :initform common-lisp:nil :type
                         (common-lisp:or find-matches-metrics common-lisp:null)
                         :accessor
                         struct-shape-evaluation-metrics-find-matches-metrics
                         :shape "FindMatchesMetrics" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluation-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluation-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluation-metrics 'make-evaluation-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-type))
      (common-lisp:list
       (common-lisp:cons "TransformType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'find-matches-metrics))
      (common-lisp:list
       (common-lisp:cons "FindMatchesMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass event-batching-condition common-lisp:nil
                       ((batch-size :initarg :batch-size :initform
                         (common-lisp:error ":batch-size is required") :type
                         (common-lisp:or batch-size common-lisp:null) :accessor
                         struct-shape-event-batching-condition-batch-size
                         :shape "BatchSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (batch-window :initarg :batch-window :initform
                         common-lisp:nil :type
                         (common-lisp:or batch-window common-lisp:null)
                         :accessor
                         struct-shape-event-batching-condition-batch-window
                         :shape "BatchWindow" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-batching-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-batching-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-batching-condition 'make-event-batching-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-batching-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-batching-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-window))
      (common-lisp:list
       (common-lisp:cons "BatchWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-batching-condition))
   common-lisp:nil))
(common-lisp:deftype event-queue-arn () 'common-lisp:string)
(common-lisp:deftype execution-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execution-property common-lisp:nil
                       ((max-concurrent-runs :initarg :max-concurrent-runs
                         :initform common-lisp:nil :type
                         (common-lisp:or max-concurrent-runs common-lisp:null)
                         :accessor
                         struct-shape-execution-property-max-concurrent-runs
                         :shape "MaxConcurrentRuns" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execution-property
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execution-property
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execution-property 'make-execution-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrent-runs))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-property))
   common-lisp:nil))
(common-lisp:deftype execution-time () 'common-lisp:integer)
(common-lisp:deftype exist-condition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-labels-task-run-properties common-lisp:nil
                       ((output-s3path :initarg :output-s3path :initform
                         common-lisp:nil :type
                         (common-lisp:or uri-string common-lisp:null) :accessor
                         struct-shape-export-labels-task-run-properties-output-s3path
                         :shape "UriString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-labels-task-run-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'export-labels-task-run-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-labels-task-run-properties
                    'make-export-labels-task-run-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-labels-task-run-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-labels-task-run-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3path))
      (common-lisp:list
       (common-lisp:cons "OutputS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-labels-task-run-properties))
   common-lisp:nil))
(common-lisp:deftype extended-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass federated-database common-lisp:nil
                       ((identifier :initarg :identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or federation-identifier
                                         common-lisp:null)
                         :accessor struct-shape-federated-database-identifier
                         :shape "FederationIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-federated-database-connection-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-federated-database
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'federated-database
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'federated-database 'make-federated-database))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input federated-database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input federated-database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input federated-database))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition federated-resource-already-exists-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       federated-resource-already-exists-exception-message)
      (associated-glue-resource :initarg :associated-glue-resource :initform
       common-lisp:nil :reader
       federated-resource-already-exists-exception-associated-glue-resource)))
 (common-lisp:export
  (common-lisp:list 'federated-resource-already-exists-exception
                    'federated-resource-already-exists-exception-message
                    'federated-resource-already-exists-exception-associated-glue-resource)))
(common-lisp:progn
 (common-lisp:defclass federated-table common-lisp:nil
                       ((identifier :initarg :identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or federation-identifier
                                         common-lisp:null)
                         :accessor struct-shape-federated-table-identifier
                         :shape "FederationIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (database-identifier :initarg :database-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or federation-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-federated-table-database-identifier
                         :shape "FederationIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-federated-table-connection-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-federated-table
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'federated-table
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'federated-table 'make-federated-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input federated-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input federated-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-identifier))
      (common-lisp:list
       (common-lisp:cons "DatabaseIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input federated-table))
   common-lisp:nil))
(common-lisp:deftype federation-identifier () 'common-lisp:string)
(common-lisp:deftype federation-source-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition federation-source-exception
     (glue-error)
     ((federation-source-error-code :initarg :federation-source-error-code
       :initform common-lisp:nil :reader
       federation-source-exception-federation-source-error-code)
      (message :initarg :message :initform common-lisp:nil :reader
       federation-source-exception-message)))
 (common-lisp:export
  (common-lisp:list 'federation-source-exception
                    'federation-source-exception-federation-source-error-code
                    'federation-source-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition federation-source-retryable-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       federation-source-retryable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'federation-source-retryable-exception
                    'federation-source-retryable-exception-message)))
(common-lisp:deftype field-name () 'common-lisp:string)
(common-lisp:deftype field-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fill-missing-values common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-fill-missing-values-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-fill-missing-values-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (imputed-path :initarg :imputed-path :initform
                         (common-lisp:error ":imputed-path is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-fill-missing-values-imputed-path :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filled-path :initarg :filled-path :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-fill-missing-values-filled-path
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fill-missing-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fill-missing-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fill-missing-values 'make-fill-missing-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fill-missing-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fill-missing-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imputed-path))
      (common-lisp:list
       (common-lisp:cons "ImputedPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filled-path))
      (common-lisp:list
       (common-lisp:cons "FilledPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fill-missing-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-filter-name :shape "NodeName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-filter-inputs :shape "OneInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (logical-operator :initarg :logical-operator :initform
                         (common-lisp:error ":logical-operator is required")
                         :type
                         (common-lisp:or filter-logical-operator
                                         common-lisp:null)
                         :accessor struct-shape-filter-logical-operator :shape
                         "FilterLogicalOperator" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform
                         (common-lisp:error ":filters is required") :type
                         (common-lisp:or filter-expressions common-lisp:null)
                         :accessor struct-shape-filter-filters :shape
                         "FilterExpressions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-operator))
      (common-lisp:list
       (common-lisp:cons "LogicalOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter-expression common-lisp:nil
                       ((operation :initarg :operation :initform
                         (common-lisp:error ":operation is required") :type
                         (common-lisp:or filter-operation common-lisp:null)
                         :accessor struct-shape-filter-expression-operation
                         :shape "FilterOperation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (negated :initarg :negated :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-filter-expression-negated
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or filter-values common-lisp:null)
                         :accessor struct-shape-filter-expression-values :shape
                         "FilterValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-expression
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-expression
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'filter-expression 'make-filter-expression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negated))
      (common-lisp:list
       (common-lisp:cons "Negated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-expression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-expressions ()
   '(trivial-types:proper-list filter-expression))
 (common-lisp:defun make-filter-expressions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-expression))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-logical-operator () 'common-lisp:string)
(common-lisp:deftype filter-operation () 'common-lisp:string)
(common-lisp:deftype filter-operator () 'common-lisp:string)
(common-lisp:deftype filter-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter-value common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or filter-value-type common-lisp:null)
                         :accessor struct-shape-filter-value-type :shape
                         "FilterValueType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor struct-shape-filter-value-value :shape
                         "EnclosedInStringProperties" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter-value 'make-filter-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter-value))
   common-lisp:nil))
(common-lisp:deftype filter-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun make-filter-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass find-matches-metrics common-lisp:nil
                       ((area-under-prcurve :initarg :area-under-prcurve
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-bounded-double
                                         common-lisp:null)
                         :accessor
                         struct-shape-find-matches-metrics-area-under-prcurve
                         :shape "GenericBoundedDouble" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (precision :initarg :precision :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-bounded-double
                                         common-lisp:null)
                         :accessor struct-shape-find-matches-metrics-precision
                         :shape "GenericBoundedDouble" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recall :initarg :recall :initform common-lisp:nil
                         :type
                         (common-lisp:or generic-bounded-double
                                         common-lisp:null)
                         :accessor struct-shape-find-matches-metrics-recall
                         :shape "GenericBoundedDouble" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (f1 :initarg :f1 :initform common-lisp:nil :type
                         (common-lisp:or generic-bounded-double
                                         common-lisp:null)
                         :accessor struct-shape-find-matches-metrics-f1 :shape
                         "GenericBoundedDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (confusion-matrix :initarg :confusion-matrix :initform
                         common-lisp:nil :type
                         (common-lisp:or confusion-matrix common-lisp:null)
                         :accessor
                         struct-shape-find-matches-metrics-confusion-matrix
                         :shape "ConfusionMatrix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (column-importances :initarg :column-importances
                         :initform common-lisp:nil :type
                         (common-lisp:or column-importance-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-find-matches-metrics-column-importances
                         :shape "ColumnImportanceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-find-matches-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'find-matches-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'find-matches-metrics 'make-find-matches-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input find-matches-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input find-matches-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'area-under-prcurve))
      (common-lisp:list
       (common-lisp:cons "AreaUnderPRCurve"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'precision))
      (common-lisp:list
       (common-lisp:cons "Precision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recall))
      (common-lisp:list
       (common-lisp:cons "Recall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'f1))
      (common-lisp:list
       (common-lisp:cons "F1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confusion-matrix))
      (common-lisp:list
       (common-lisp:cons "ConfusionMatrix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-importances))
      (common-lisp:list
       (common-lisp:cons "ColumnImportances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input find-matches-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass find-matches-parameters common-lisp:nil
                       ((primary-key-column-name :initarg
                         :primary-key-column-name :initform common-lisp:nil
                         :type
                         (common-lisp:or column-name-string common-lisp:null)
                         :accessor
                         struct-shape-find-matches-parameters-primary-key-column-name
                         :shape "ColumnNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (precision-recall-tradeoff :initarg
                         :precision-recall-tradeoff :initform common-lisp:nil
                         :type
                         (common-lisp:or generic-bounded-double
                                         common-lisp:null)
                         :accessor
                         struct-shape-find-matches-parameters-precision-recall-tradeoff
                         :shape "GenericBoundedDouble" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (accuracy-cost-tradeoff :initarg
                         :accuracy-cost-tradeoff :initform common-lisp:nil
                         :type
                         (common-lisp:or generic-bounded-double
                                         common-lisp:null)
                         :accessor
                         struct-shape-find-matches-parameters-accuracy-cost-tradeoff
                         :shape "GenericBoundedDouble" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enforce-provided-labels :initarg
                         :enforce-provided-labels :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-find-matches-parameters-enforce-provided-labels
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-find-matches-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'find-matches-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'find-matches-parameters 'make-find-matches-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          find-matches-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          find-matches-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-key-column-name))
      (common-lisp:list
       (common-lisp:cons "PrimaryKeyColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'precision-recall-tradeoff))
      (common-lisp:list
       (common-lisp:cons "PrecisionRecallTradeoff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accuracy-cost-tradeoff))
      (common-lisp:list
       (common-lisp:cons "AccuracyCostTradeoff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enforce-provided-labels))
      (common-lisp:list
       (common-lisp:cons "EnforceProvidedLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          find-matches-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass find-matches-task-run-properties common-lisp:nil
                       ((job-id :initarg :job-id :initform common-lisp:nil
                         :type (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-find-matches-task-run-properties-job-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-find-matches-task-run-properties-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-run-id :initarg :job-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-find-matches-task-run-properties-job-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-find-matches-task-run-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'find-matches-task-run-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'find-matches-task-run-properties
                    'make-find-matches-task-run-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          find-matches-task-run-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          find-matches-task-run-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          find-matches-task-run-properties))
   common-lisp:nil))
(common-lisp:deftype format-string () 'common-lisp:string)
(common-lisp:deftype generic512char-string () 'common-lisp:string)
(common-lisp:deftype generic-bounded-double () 'common-lisp:double-float)
(common-lisp:deftype generic-limited-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype generic-map () 'common-lisp:hash-table)
 (common-lisp:defun make-generic-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype generic-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-blueprint-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-blueprint-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-blueprint :initarg :include-blueprint
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-get-blueprint-request-include-blueprint
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-parameter-spec :initarg
                         :include-parameter-spec :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-get-blueprint-request-include-parameter-spec
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-blueprint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-blueprint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-blueprint-request 'make-get-blueprint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-blueprint))
      (common-lisp:list
       (common-lisp:cons "IncludeBlueprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-parameter-spec))
      (common-lisp:list
       (common-lisp:cons "IncludeParameterSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-blueprint-response common-lisp:nil
                       ((blueprint :initarg :blueprint :initform
                         common-lisp:nil :type
                         (common-lisp:or blueprint common-lisp:null) :accessor
                         struct-shape-get-blueprint-response-blueprint :shape
                         "Blueprint" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-blueprint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-blueprint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-blueprint-response 'make-get-blueprint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint))
      (common-lisp:list
       (common-lisp:cons "Blueprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-blueprint-run-request common-lisp:nil
                       ((blueprint-name :initarg :blueprint-name :initform
                         (common-lisp:error ":blueprint-name is required")
                         :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-blueprint-run-request-blueprint-name
                         :shape "OrchestrationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (run-id :initarg :run-id :initform
                         (common-lisp:error ":run-id is required") :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-get-blueprint-run-request-run-id :shape
                         "IdString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-blueprint-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-blueprint-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-blueprint-run-request
                    'make-get-blueprint-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-name))
      (common-lisp:list
       (common-lisp:cons "BlueprintName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-blueprint-run-response common-lisp:nil
                       ((blueprint-run :initarg :blueprint-run :initform
                         common-lisp:nil :type
                         (common-lisp:or blueprint-run common-lisp:null)
                         :accessor
                         struct-shape-get-blueprint-run-response-blueprint-run
                         :shape "BlueprintRun" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-blueprint-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-blueprint-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-blueprint-run-response
                    'make-get-blueprint-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-run))
      (common-lisp:list
       (common-lisp:cons "BlueprintRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-blueprint-runs-request common-lisp:nil
                       ((blueprint-name :initarg :blueprint-name :initform
                         (common-lisp:error ":blueprint-name is required")
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-blueprint-runs-request-blueprint-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-blueprint-runs-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-blueprint-runs-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-blueprint-runs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-blueprint-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-blueprint-runs-request
                    'make-get-blueprint-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-name))
      (common-lisp:list
       (common-lisp:cons "BlueprintName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-blueprint-runs-response common-lisp:nil
                       ((blueprint-runs :initarg :blueprint-runs :initform
                         common-lisp:nil :type
                         (common-lisp:or blueprint-runs common-lisp:null)
                         :accessor
                         struct-shape-get-blueprint-runs-response-blueprint-runs
                         :shape "BlueprintRuns" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-blueprint-runs-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-blueprint-runs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-blueprint-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-blueprint-runs-response
                    'make-get-blueprint-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-runs))
      (common-lisp:list
       (common-lisp:cons "BlueprintRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprint-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-catalog-import-status-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-catalog-import-status-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-catalog-import-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-catalog-import-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-catalog-import-status-request
                    'make-get-catalog-import-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-import-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-import-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-import-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-catalog-import-status-response common-lisp:nil
                       ((import-status :initarg :import-status :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-import-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-catalog-import-status-response-import-status
                         :shape "CatalogImportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-catalog-import-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-catalog-import-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-catalog-import-status-response
                    'make-get-catalog-import-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-import-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-import-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "ImportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-catalog-import-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-classifier-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-classifier-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-classifier-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-classifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-classifier-request 'make-get-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-classifier-response common-lisp:nil
                       ((classifier :initarg :classifier :initform
                         common-lisp:nil :type
                         (common-lisp:or classifier common-lisp:null) :accessor
                         struct-shape-get-classifier-response-classifier :shape
                         "Classifier" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-classifier-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-classifier-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-classifier-response 'make-get-classifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classifier-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classifier))
      (common-lisp:list
       (common-lisp:cons "Classifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-classifiers-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-classifiers-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-classifiers-request-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-classifiers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-classifiers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-classifiers-request 'make-get-classifiers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classifiers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classifiers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classifiers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-classifiers-response common-lisp:nil
                       ((classifiers :initarg :classifiers :initform
                         common-lisp:nil :type
                         (common-lisp:or classifier-list common-lisp:null)
                         :accessor
                         struct-shape-get-classifiers-response-classifiers
                         :shape "ClassifierList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-classifiers-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-classifiers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-classifiers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-classifiers-response 'make-get-classifiers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-classifiers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-classifiers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classifiers))
      (common-lisp:list
       (common-lisp:cons "Classifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-classifiers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-column-names-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-get-column-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-column-statistics-for-partition-request
                       common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-for-partition-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-for-partition-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-for-partition-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-values :initarg :partition-values :initform
                         (common-lisp:error ":partition-values is required")
                         :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-for-partition-request-partition-values
                         :shape "ValueStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (column-names :initarg :column-names :initform
                         (common-lisp:error ":column-names is required") :type
                         (common-lisp:or get-column-names-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-for-partition-request-column-names
                         :shape "GetColumnNamesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-column-statistics-for-partition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-column-statistics-for-partition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-column-statistics-for-partition-request
                    'make-get-column-statistics-for-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "ColumnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-column-statistics-for-partition-response
                       common-lisp:nil
                       ((column-statistics-list :initarg
                         :column-statistics-list :initform common-lisp:nil
                         :type
                         (common-lisp:or column-statistics-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-for-partition-response-column-statistics-list
                         :shape "ColumnStatisticsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type (common-lisp:or column-errors common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-for-partition-response-errors
                         :shape "ColumnErrors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-column-statistics-for-partition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-column-statistics-for-partition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-column-statistics-for-partition-response
                    'make-get-column-statistics-for-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-partition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-statistics-list))
      (common-lisp:list
       (common-lisp:cons "ColumnStatisticsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-column-statistics-for-table-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-for-table-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-for-table-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-for-table-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (column-names :initarg :column-names :initform
                         (common-lisp:error ":column-names is required") :type
                         (common-lisp:or get-column-names-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-for-table-request-column-names
                         :shape "GetColumnNamesList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-column-statistics-for-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-column-statistics-for-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-column-statistics-for-table-request
                    'make-get-column-statistics-for-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "ColumnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-column-statistics-for-table-response common-lisp:nil
                       ((column-statistics-list :initarg
                         :column-statistics-list :initform common-lisp:nil
                         :type
                         (common-lisp:or column-statistics-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-for-table-response-column-statistics-list
                         :shape "ColumnStatisticsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (errors :initarg :errors :initform common-lisp:nil
                         :type (common-lisp:or column-errors common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-for-table-response-errors
                         :shape "ColumnErrors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-column-statistics-for-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-column-statistics-for-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-column-statistics-for-table-response
                    'make-get-column-statistics-for-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-statistics-list))
      (common-lisp:list
       (common-lisp:cons "ColumnStatisticsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-for-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-column-statistics-task-run-request common-lisp:nil
                       ((column-statistics-task-run-id :initarg
                         :column-statistics-task-run-id :initform
                         (common-lisp:error
                          ":column-statistics-task-run-id is required")
                         :type (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-task-run-request-column-statistics-task-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-column-statistics-task-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-column-statistics-task-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-column-statistics-task-run-request
                    'make-get-column-statistics-task-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-task-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-task-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-statistics-task-run-id))
      (common-lisp:list
       (common-lisp:cons "ColumnStatisticsTaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-task-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-column-statistics-task-run-response common-lisp:nil
                       ((column-statistics-task-run :initarg
                         :column-statistics-task-run :initform common-lisp:nil
                         :type
                         (common-lisp:or column-statistics-task-run
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-task-run-response-column-statistics-task-run
                         :shape "ColumnStatisticsTaskRun" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-column-statistics-task-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-column-statistics-task-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-column-statistics-task-run-response
                    'make-get-column-statistics-task-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-task-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-task-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-statistics-task-run))
      (common-lisp:list
       (common-lisp:cons "ColumnStatisticsTaskRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-task-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-column-statistics-task-runs-request common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-task-runs-request-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-task-runs-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-column-statistics-task-runs-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-column-statistics-task-runs-request-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-column-statistics-task-runs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-column-statistics-task-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-column-statistics-task-runs-request
                    'make-get-column-statistics-task-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-task-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-task-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-task-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-column-statistics-task-runs-response common-lisp:nil
                       ((column-statistics-task-runs :initarg
                         :column-statistics-task-runs :initform common-lisp:nil
                         :type
                         (common-lisp:or column-statistics-task-runs-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-column-statistics-task-runs-response-column-statistics-task-runs
                         :shape "ColumnStatisticsTaskRunsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-column-statistics-task-runs-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-column-statistics-task-runs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-column-statistics-task-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-column-statistics-task-runs-response
                    'make-get-column-statistics-task-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-task-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-task-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-statistics-task-runs))
      (common-lisp:list
       (common-lisp:cons "ColumnStatisticsTaskRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-column-statistics-task-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connection-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-connection-request-catalog-id :shape
                         "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-connection-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hide-password :initarg :hide-password :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-connection-request-hide-password
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connection-request 'make-get-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hide-password))
      (common-lisp:list
       (common-lisp:cons "HidePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connection-response common-lisp:nil
                       ((connection :initarg :connection :initform
                         common-lisp:nil :type
                         (common-lisp:or connection common-lisp:null) :accessor
                         struct-shape-get-connection-response-connection :shape
                         "Connection" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connection-response 'make-get-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connections-filter common-lisp:nil
                       ((match-criteria :initarg :match-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or match-criteria common-lisp:null)
                         :accessor
                         struct-shape-get-connections-filter-match-criteria
                         :shape "MatchCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-type :initarg :connection-type :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-type common-lisp:null)
                         :accessor
                         struct-shape-get-connections-filter-connection-type
                         :shape "ConnectionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connections-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connections-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connections-filter 'make-get-connections-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-criteria))
      (common-lisp:list
       (common-lisp:cons "MatchCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connections-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-connections-request-catalog-id :shape
                         "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or get-connections-filter
                                         common-lisp:null)
                         :accessor struct-shape-get-connections-request-filter
                         :shape "GetConnectionsFilter" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (hide-password :initarg :hide-password :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-connections-request-hide-password
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-connections-request-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-connections-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connections-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connections-request 'make-get-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hide-password))
      (common-lisp:list
       (common-lisp:cons "HidePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connections-response common-lisp:nil
                       ((connection-list :initarg :connection-list :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-list common-lisp:null)
                         :accessor
                         struct-shape-get-connections-response-connection-list
                         :shape "ConnectionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-connections-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connections-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connections-response 'make-get-connections-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-list))
      (common-lisp:list
       (common-lisp:cons "ConnectionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-crawler-metrics-request common-lisp:nil
                       ((crawler-name-list :initarg :crawler-name-list
                         :initform common-lisp:nil :type
                         (common-lisp:or crawler-name-list common-lisp:null)
                         :accessor
                         struct-shape-get-crawler-metrics-request-crawler-name-list
                         :shape "CrawlerNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-crawler-metrics-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-crawler-metrics-request-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-crawler-metrics-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-crawler-metrics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-crawler-metrics-request
                    'make-get-crawler-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-crawler-metrics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-crawler-metrics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name-list))
      (common-lisp:list
       (common-lisp:cons "CrawlerNameList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-crawler-metrics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-crawler-metrics-response common-lisp:nil
                       ((crawler-metrics-list :initarg :crawler-metrics-list
                         :initform common-lisp:nil :type
                         (common-lisp:or crawler-metrics-list common-lisp:null)
                         :accessor
                         struct-shape-get-crawler-metrics-response-crawler-metrics-list
                         :shape "CrawlerMetricsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-crawler-metrics-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-crawler-metrics-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-crawler-metrics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-crawler-metrics-response
                    'make-get-crawler-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-crawler-metrics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-crawler-metrics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawler-metrics-list))
      (common-lisp:list
       (common-lisp:cons "CrawlerMetricsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-crawler-metrics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-crawler-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-crawler-request-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-crawler-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-crawler-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-crawler-request 'make-get-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-crawler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-crawler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-crawler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-crawler-response common-lisp:nil
                       ((crawler :initarg :crawler :initform common-lisp:nil
                         :type (common-lisp:or crawler common-lisp:null)
                         :accessor struct-shape-get-crawler-response-crawler
                         :shape "Crawler" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-crawler-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-crawler-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-crawler-response 'make-get-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-crawler-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler))
      (common-lisp:list
       (common-lisp:cons "Crawler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-crawler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-crawlers-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-crawlers-request-max-results :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-crawlers-request-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-crawlers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-crawlers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-crawlers-request 'make-get-crawlers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-crawlers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-crawlers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-crawlers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-crawlers-response common-lisp:nil
                       ((crawlers :initarg :crawlers :initform common-lisp:nil
                         :type (common-lisp:or crawler-list common-lisp:null)
                         :accessor struct-shape-get-crawlers-response-crawlers
                         :shape "CrawlerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-crawlers-response-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-crawlers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-crawlers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-crawlers-response 'make-get-crawlers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-crawlers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-crawlers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawlers))
      (common-lisp:list
       (common-lisp:cons "Crawlers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-crawlers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-custom-entity-type-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-custom-entity-type-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-custom-entity-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-custom-entity-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-custom-entity-type-request
                    'make-get-custom-entity-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-entity-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-entity-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-entity-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-custom-entity-type-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-custom-entity-type-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regex-string :initarg :regex-string :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-custom-entity-type-response-regex-string
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (context-words :initarg :context-words :initform
                         common-lisp:nil :type
                         (common-lisp:or context-words common-lisp:null)
                         :accessor
                         struct-shape-get-custom-entity-type-response-context-words
                         :shape "ContextWords" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-custom-entity-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-custom-entity-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-custom-entity-type-response
                    'make-get-custom-entity-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-entity-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-entity-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-string))
      (common-lisp:list
       (common-lisp:cons "RegexString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-words))
      (common-lisp:list
       (common-lisp:cons "ContextWords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-entity-type-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-catalog-encryption-settings-request
                       common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-catalog-encryption-settings-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-catalog-encryption-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-catalog-encryption-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-catalog-encryption-settings-request
                    'make-get-data-catalog-encryption-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-encryption-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-encryption-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-encryption-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-catalog-encryption-settings-response
                       common-lisp:nil
                       ((data-catalog-encryption-settings :initarg
                         :data-catalog-encryption-settings :initform
                         common-lisp:nil :type
                         (common-lisp:or data-catalog-encryption-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-catalog-encryption-settings-response-data-catalog-encryption-settings
                         :shape "DataCatalogEncryptionSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-catalog-encryption-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-catalog-encryption-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-catalog-encryption-settings-response
                    'make-get-data-catalog-encryption-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-encryption-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-encryption-settings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-catalog-encryption-settings))
      (common-lisp:list
       (common-lisp:cons "DataCatalogEncryptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-catalog-encryption-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-quality-result-request common-lisp:nil
                       ((result-id :initarg :result-id :initform
                         (common-lisp:error ":result-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-result-request-result-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-quality-result-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-quality-result-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-result-request
                    'make-get-data-quality-result-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-result-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-result-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "ResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-result-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-quality-result-response common-lisp:nil
                       ((result-id :initarg :result-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-result-response-result-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or generic-bounded-double
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-result-response-score
                         :shape "GenericBoundedDouble" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-result-response-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ruleset-name :initarg :ruleset-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-result-response-ruleset-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-context :initarg :evaluation-context
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-result-response-evaluation-context
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-data-quality-result-response-started-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completed-on :initarg :completed-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-data-quality-result-response-completed-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-result-response-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-run-id :initarg :job-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-result-response-job-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ruleset-evaluation-run-id :initarg
                         :ruleset-evaluation-run-id :initform common-lisp:nil
                         :type (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-result-response-ruleset-evaluation-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-results :initarg :rule-results :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-rule-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-result-response-rule-results
                         :shape "DataQualityRuleResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (analyzer-results :initarg :analyzer-results :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-analyzer-results
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-result-response-analyzer-results
                         :shape "DataQualityAnalyzerResults" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (observations :initarg :observations :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-observations
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-result-response-observations
                         :shape "DataQualityObservations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-quality-result-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-quality-result-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-result-response
                    'make-get-data-quality-result-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-result-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-result-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-id))
      (common-lisp:list
       (common-lisp:cons "ResultId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset-name))
      (common-lisp:list
       (common-lisp:cons "RulesetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-context))
      (common-lisp:list
       (common-lisp:cons "EvaluationContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ruleset-evaluation-run-id))
      (common-lisp:list
       (common-lisp:cons "RulesetEvaluationRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-results))
      (common-lisp:list
       (common-lisp:cons "RuleResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-results))
      (common-lisp:list
       (common-lisp:cons "AnalyzerResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'observations))
      (common-lisp:list
       (common-lisp:cons "Observations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-result-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-quality-rule-recommendation-run-request
                       common-lisp:nil
                       ((run-id :initarg :run-id :initform
                         (common-lisp:error ":run-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-rule-recommendation-run-request-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-quality-rule-recommendation-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-quality-rule-recommendation-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-rule-recommendation-run-request
                    'make-get-data-quality-rule-recommendation-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-rule-recommendation-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-rule-recommendation-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-rule-recommendation-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-quality-rule-recommendation-run-response
                       common-lisp:nil
                       ((run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-rule-recommendation-run-response-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-rule-recommendation-run-response-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-rule-recommendation-run-response-role
                         :shape "RoleString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-rule-recommendation-run-response-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-rule-recommendation-run-response-timeout
                         :shape "Timeout" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or task-status-type common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-rule-recommendation-run-response-status
                         :shape "TaskStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-string :initarg :error-string :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-rule-recommendation-run-response-error-string
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-data-quality-rule-recommendation-run-response-started-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-on :initarg :last-modified-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-data-quality-rule-recommendation-run-response-last-modified-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completed-on :initarg :completed-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-data-quality-rule-recommendation-run-response-completed-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-time :initarg :execution-time :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-time common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-rule-recommendation-run-response-execution-time
                         :shape "ExecutionTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-ruleset :initarg :recommended-ruleset
                         :initform common-lisp:nil :type
                         (common-lisp:or data-quality-ruleset-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-rule-recommendation-run-response-recommended-ruleset
                         :shape "DataQualityRulesetString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-ruleset-name :initarg :created-ruleset-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-rule-recommendation-run-response-created-ruleset-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-quality-rule-recommendation-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-quality-rule-recommendation-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-rule-recommendation-run-response
                    'make-get-data-quality-rule-recommendation-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-rule-recommendation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-rule-recommendation-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-string))
      (common-lisp:list
       (common-lisp:cons "ErrorString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommended-ruleset))
      (common-lisp:list
       (common-lisp:cons "RecommendedRuleset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'created-ruleset-name))
      (common-lisp:list
       (common-lisp:cons "CreatedRulesetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-rule-recommendation-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-quality-ruleset-evaluation-run-request
                       common-lisp:nil
                       ((run-id :initarg :run-id :initform
                         (common-lisp:error ":run-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-request-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-quality-ruleset-evaluation-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-quality-ruleset-evaluation-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-ruleset-evaluation-run-request
                    'make-get-data-quality-ruleset-evaluation-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-evaluation-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-evaluation-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-evaluation-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-quality-ruleset-evaluation-run-response
                       common-lisp:nil
                       ((run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-source :initarg :data-source :initform
                         common-lisp:nil :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-role
                         :shape "RoleString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-timeout
                         :shape "Timeout" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-run-options :initarg
                         :additional-run-options :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          data-quality-evaluation-run-additional-run-options
                          common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-additional-run-options
                         :shape "DataQualityEvaluationRunAdditionalRunOptions"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or task-status-type common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-status
                         :shape "TaskStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-string :initarg :error-string :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-error-string
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-started-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-on :initarg :last-modified-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-last-modified-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completed-on :initarg :completed-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-completed-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-time :initarg :execution-time :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-time common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-execution-time
                         :shape "ExecutionTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ruleset-names :initarg :ruleset-names :initform
                         common-lisp:nil :type
                         (common-lisp:or ruleset-names common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-ruleset-names
                         :shape "RulesetNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-ids :initarg :result-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-result-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-result-ids
                         :shape "DataQualityResultIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-data-sources :initarg
                         :additional-data-sources :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-map common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-evaluation-run-response-additional-data-sources
                         :shape "DataSourceMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-quality-ruleset-evaluation-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-quality-ruleset-evaluation-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-ruleset-evaluation-run-response
                    'make-get-data-quality-ruleset-evaluation-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-evaluation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-evaluation-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-run-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalRunOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-string))
      (common-lisp:list
       (common-lisp:cons "ErrorString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset-names))
      (common-lisp:list
       (common-lisp:cons "RulesetNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-ids))
      (common-lisp:list
       (common-lisp:cons "ResultIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-data-sources))
      (common-lisp:list
       (common-lisp:cons "AdditionalDataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-evaluation-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-quality-ruleset-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-quality-ruleset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-quality-ruleset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-ruleset-request
                    'make-get-data-quality-ruleset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-quality-ruleset-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-response-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ruleset :initarg :ruleset :initform common-lisp:nil
                         :type
                         (common-lisp:or data-quality-ruleset-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-response-ruleset
                         :shape "DataQualityRulesetString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-table :initarg :target-table :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-target-table
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-response-target-table
                         :shape "DataQualityTargetTable" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-on :initarg :created-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-data-quality-ruleset-response-created-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-on :initarg :last-modified-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-data-quality-ruleset-response-last-modified-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommendation-run-id :initarg :recommendation-run-id
                         :initform common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-data-quality-ruleset-response-recommendation-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-quality-ruleset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-data-quality-ruleset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-quality-ruleset-response
                    'make-get-data-quality-ruleset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset))
      (common-lisp:list
       (common-lisp:cons "Ruleset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table))
      (common-lisp:list
       (common-lisp:cons "TargetTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-run-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-quality-ruleset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-database-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor struct-shape-get-database-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-database-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-database-request 'make-get-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-database-response common-lisp:nil
                       ((database :initarg :database :initform common-lisp:nil
                         :type (common-lisp:or database common-lisp:null)
                         :accessor struct-shape-get-database-response-database
                         :shape "Database" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-database-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-database-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-database-response 'make-get-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-database-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-databases-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-databases-request-catalog-id :shape
                         "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-databases-request-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-getter-page-size
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-databases-request-max-results :shape
                         "CatalogGetterPageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-share-type :initarg :resource-share-type
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-share-type common-lisp:null)
                         :accessor
                         struct-shape-get-databases-request-resource-share-type
                         :shape "ResourceShareType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-databases-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-databases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-databases-request 'make-get-databases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-databases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-databases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-share-type))
      (common-lisp:list
       (common-lisp:cons "ResourceShareType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-databases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-databases-response common-lisp:nil
                       ((database-list :initarg :database-list :initform
                         (common-lisp:error ":database-list is required") :type
                         (common-lisp:or database-list common-lisp:null)
                         :accessor
                         struct-shape-get-databases-response-database-list
                         :shape "DatabaseList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-databases-response-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-databases-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-databases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-databases-response 'make-get-databases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-databases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-databases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-list))
      (common-lisp:list
       (common-lisp:cons "DatabaseList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-databases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dataflow-graph-request common-lisp:nil
                       ((python-script :initarg :python-script :initform
                         common-lisp:nil :type
                         (common-lisp:or python-script common-lisp:null)
                         :accessor
                         struct-shape-get-dataflow-graph-request-python-script
                         :shape "PythonScript" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-dataflow-graph-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-dataflow-graph-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-dataflow-graph-request
                    'make-get-dataflow-graph-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-graph-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-graph-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'python-script))
      (common-lisp:list
       (common-lisp:cons "PythonScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-graph-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dataflow-graph-response common-lisp:nil
                       ((dag-nodes :initarg :dag-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or dag-nodes common-lisp:null) :accessor
                         struct-shape-get-dataflow-graph-response-dag-nodes
                         :shape "DagNodes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dag-edges :initarg :dag-edges :initform
                         common-lisp:nil :type
                         (common-lisp:or dag-edges common-lisp:null) :accessor
                         struct-shape-get-dataflow-graph-response-dag-edges
                         :shape "DagEdges" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-dataflow-graph-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-dataflow-graph-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-dataflow-graph-response
                    'make-get-dataflow-graph-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-graph-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-graph-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dag-nodes))
      (common-lisp:list
       (common-lisp:cons "DagNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dag-edges))
      (common-lisp:list
       (common-lisp:cons "DagEdges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dataflow-graph-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dev-endpoint-request common-lisp:nil
                       ((endpoint-name :initarg :endpoint-name :initform
                         (common-lisp:error ":endpoint-name is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-dev-endpoint-request-endpoint-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-dev-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-dev-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-dev-endpoint-request 'make-get-dev-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dev-endpoint-response common-lisp:nil
                       ((dev-endpoint :initarg :dev-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or dev-endpoint common-lisp:null)
                         :accessor
                         struct-shape-get-dev-endpoint-response-dev-endpoint
                         :shape "DevEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-dev-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-dev-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-dev-endpoint-response
                    'make-get-dev-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-endpoint))
      (common-lisp:list
       (common-lisp:cons "DevEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dev-endpoints-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-dev-endpoints-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-dev-endpoints-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-dev-endpoints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-dev-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-dev-endpoints-request
                    'make-get-dev-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dev-endpoints-response common-lisp:nil
                       ((dev-endpoints :initarg :dev-endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or dev-endpoint-list common-lisp:null)
                         :accessor
                         struct-shape-get-dev-endpoints-response-dev-endpoints
                         :shape "DevEndpointList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-dev-endpoints-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-dev-endpoints-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-dev-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-dev-endpoints-response
                    'make-get-dev-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-endpoints))
      (common-lisp:list
       (common-lisp:cons "DevEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-dev-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-bookmark-request common-lisp:nil
                       ((job-name :initarg :job-name :initform
                         (common-lisp:error ":job-name is required") :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         struct-shape-get-job-bookmark-request-job-name :shape
                         "JobName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or run-id common-lisp:null)
                         :accessor struct-shape-get-job-bookmark-request-run-id
                         :shape "RunId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-bookmark-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-bookmark-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-bookmark-request 'make-get-job-bookmark-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-bookmark-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-bookmark-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-bookmark-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-bookmark-response common-lisp:nil
                       ((job-bookmark-entry :initarg :job-bookmark-entry
                         :initform common-lisp:nil :type
                         (common-lisp:or job-bookmark-entry common-lisp:null)
                         :accessor
                         struct-shape-get-job-bookmark-response-job-bookmark-entry
                         :shape "JobBookmarkEntry" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-bookmark-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-bookmark-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-bookmark-response
                    'make-get-job-bookmark-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-bookmark-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-bookmark-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-bookmark-entry))
      (common-lisp:list
       (common-lisp:cons "JobBookmarkEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-bookmark-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-request common-lisp:nil
                       ((job-name :initarg :job-name :initform
                         (common-lisp:error ":job-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-job-request-job-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'get-job-request 'make-get-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-response common-lisp:nil
                       ((job :initarg :job :initform common-lisp:nil :type
                         (common-lisp:or job common-lisp:null) :accessor
                         struct-shape-get-job-response-job :shape "Job"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-response 'make-get-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job))
      (common-lisp:list
       (common-lisp:cons "Job"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-run-request common-lisp:nil
                       ((job-name :initarg :job-name :initform
                         (common-lisp:error ":job-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-job-run-request-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (run-id :initarg :run-id :initform
                         (common-lisp:error ":run-id is required") :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-get-job-run-request-run-id :shape
                         "IdString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predecessors-included :initarg :predecessors-included
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-value common-lisp:null)
                         :accessor
                         struct-shape-get-job-run-request-predecessors-included
                         :shape "BooleanValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-run-request 'make-get-job-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predecessors-included))
      (common-lisp:list
       (common-lisp:cons "PredecessorsIncluded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-run-response common-lisp:nil
                       ((job-run :initarg :job-run :initform common-lisp:nil
                         :type (common-lisp:or job-run common-lisp:null)
                         :accessor struct-shape-get-job-run-response-job-run
                         :shape "JobRun" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-run-response 'make-get-job-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run))
      (common-lisp:list
       (common-lisp:cons "JobRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-runs-request common-lisp:nil
                       ((job-name :initarg :job-name :initform
                         (common-lisp:error ":job-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-job-runs-request-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-get-job-runs-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-page-size200
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-job-runs-request-max-results :shape
                         "OrchestrationPageSize200" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-runs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-runs-request 'make-get-job-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-job-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-job-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-job-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-job-runs-response common-lisp:nil
                       ((job-runs :initarg :job-runs :initform common-lisp:nil
                         :type (common-lisp:or job-run-list common-lisp:null)
                         :accessor struct-shape-get-job-runs-response-job-runs
                         :shape "JobRunList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-job-runs-response-next-token :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-job-runs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-job-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-job-runs-response 'make-get-job-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-job-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-job-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-runs))
      (common-lisp:list
       (common-lisp:cons "JobRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-job-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-jobs-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-get-jobs-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-jobs-request-max-results :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-jobs-request 'make-get-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-jobs-response common-lisp:nil
                       ((jobs :initarg :jobs :initform common-lisp:nil :type
                         (common-lisp:or job-list common-lisp:null) :accessor
                         struct-shape-get-jobs-response-jobs :shape "JobList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-get-jobs-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-jobs-response 'make-get-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mltask-run-request common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         (common-lisp:error ":transform-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-mltask-run-request-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-run-id :initarg :task-run-id :initform
                         (common-lisp:error ":task-run-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-mltask-run-request-task-run-id :shape
                         "HashString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mltask-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mltask-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mltask-run-request 'make-get-mltask-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mltask-run-response common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-mltask-run-response-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (task-run-id :initarg :task-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-mltask-run-response-task-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or task-status-type common-lisp:null)
                         :accessor struct-shape-get-mltask-run-response-status
                         :shape "TaskStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-mltask-run-response-log-group-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (properties :initarg :properties :initform
                         common-lisp:nil :type
                         (common-lisp:or task-run-properties common-lisp:null)
                         :accessor
                         struct-shape-get-mltask-run-response-properties :shape
                         "TaskRunProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-string :initarg :error-string :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-mltask-run-response-error-string
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-mltask-run-response-started-on :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-on :initarg :last-modified-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-mltask-run-response-last-modified-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completed-on :initarg :completed-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-mltask-run-response-completed-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-time :initarg :execution-time :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-time common-lisp:null)
                         :accessor
                         struct-shape-get-mltask-run-response-execution-time
                         :shape "ExecutionTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mltask-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mltask-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mltask-run-response 'make-get-mltask-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-string))
      (common-lisp:list
       (common-lisp:cons "ErrorString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mltask-runs-request common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         (common-lisp:error ":transform-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-mltask-runs-request-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-mltask-runs-request-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-mltask-runs-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or task-run-filter-criteria
                                         common-lisp:null)
                         :accessor struct-shape-get-mltask-runs-request-filter
                         :shape "TaskRunFilterCriteria" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sort :initarg :sort :initform common-lisp:nil :type
                         (common-lisp:or task-run-sort-criteria
                                         common-lisp:null)
                         :accessor struct-shape-get-mltask-runs-request-sort
                         :shape "TaskRunSortCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mltask-runs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mltask-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mltask-runs-request 'make-get-mltask-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "Sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mltask-runs-response common-lisp:nil
                       ((task-runs :initarg :task-runs :initform
                         common-lisp:nil :type
                         (common-lisp:or task-run-list common-lisp:null)
                         :accessor
                         struct-shape-get-mltask-runs-response-task-runs :shape
                         "TaskRunList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-mltask-runs-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mltask-runs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mltask-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mltask-runs-response 'make-get-mltask-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-runs))
      (common-lisp:list
       (common-lisp:cons "TaskRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltask-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mltransform-request common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         (common-lisp:error ":transform-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-mltransform-request-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mltransform-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mltransform-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mltransform-request 'make-get-mltransform-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransform-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransform-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransform-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mltransform-response common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-mltransform-response-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-mltransform-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-get-mltransform-response-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or transform-status-type
                                         common-lisp:null)
                         :accessor struct-shape-get-mltransform-response-status
                         :shape "TransformStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-on :initarg :created-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-mltransform-response-created-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-on :initarg :last-modified-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-mltransform-response-last-modified-on
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-record-tables :initarg :input-record-tables
                         :initform common-lisp:nil :type
                         (common-lisp:or glue-tables common-lisp:null)
                         :accessor
                         struct-shape-get-mltransform-response-input-record-tables
                         :shape "GlueTables" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or transform-parameters common-lisp:null)
                         :accessor
                         struct-shape-get-mltransform-response-parameters
                         :shape "TransformParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-metrics :initarg :evaluation-metrics
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-metrics common-lisp:null)
                         :accessor
                         struct-shape-get-mltransform-response-evaluation-metrics
                         :shape "EvaluationMetrics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (label-count :initarg :label-count :initform
                         common-lisp:nil :type
                         (common-lisp:or label-count common-lisp:null)
                         :accessor
                         struct-shape-get-mltransform-response-label-count
                         :shape "LabelCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type
                         (common-lisp:or transform-schema common-lisp:null)
                         :accessor struct-shape-get-mltransform-response-schema
                         :shape "TransformSchema" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role-string common-lisp:null)
                         :accessor struct-shape-get-mltransform-response-role
                         :shape "RoleString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glue-version :initarg :glue-version :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-version-string common-lisp:null)
                         :accessor
                         struct-shape-get-mltransform-response-glue-version
                         :shape "GlueVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor
                         struct-shape-get-mltransform-response-max-capacity
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-type common-lisp:null)
                         :accessor
                         struct-shape-get-mltransform-response-worker-type
                         :shape "WorkerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-get-mltransform-response-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor
                         struct-shape-get-mltransform-response-timeout :shape
                         "Timeout" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-retries :initarg :max-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-get-mltransform-response-max-retries
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transform-encryption :initarg :transform-encryption
                         :initform common-lisp:nil :type
                         (common-lisp:or transform-encryption common-lisp:null)
                         :accessor
                         struct-shape-get-mltransform-response-transform-encryption
                         :shape "TransformEncryption" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mltransform-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mltransform-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mltransform-response 'make-get-mltransform-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransform-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransform-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-record-tables))
      (common-lisp:list
       (common-lisp:cons "InputRecordTables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-metrics))
      (common-lisp:list
       (common-lisp:cons "EvaluationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-count))
      (common-lisp:list
       (common-lisp:cons "LabelCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "MaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-encryption))
      (common-lisp:list
       (common-lisp:cons "TransformEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransform-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mltransforms-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-mltransforms-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-mltransforms-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or transform-filter-criteria
                                         common-lisp:null)
                         :accessor struct-shape-get-mltransforms-request-filter
                         :shape "TransformFilterCriteria" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sort :initarg :sort :initform common-lisp:nil :type
                         (common-lisp:or transform-sort-criteria
                                         common-lisp:null)
                         :accessor struct-shape-get-mltransforms-request-sort
                         :shape "TransformSortCriteria" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mltransforms-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mltransforms-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mltransforms-request 'make-get-mltransforms-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransforms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransforms-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "Sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransforms-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mltransforms-response common-lisp:nil
                       ((transforms :initarg :transforms :initform
                         (common-lisp:error ":transforms is required") :type
                         (common-lisp:or transform-list common-lisp:null)
                         :accessor
                         struct-shape-get-mltransforms-response-transforms
                         :shape "TransformList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-get-mltransforms-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mltransforms-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mltransforms-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mltransforms-response
                    'make-get-mltransforms-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransforms-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransforms-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transforms))
      (common-lisp:list
       (common-lisp:cons "Transforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-mltransforms-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mapping-request common-lisp:nil
                       ((source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or catalog-entry common-lisp:null)
                         :accessor struct-shape-get-mapping-request-source
                         :shape "CatalogEntry" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sinks :initarg :sinks :initform common-lisp:nil :type
                         (common-lisp:or catalog-entries common-lisp:null)
                         :accessor struct-shape-get-mapping-request-sinks
                         :shape "CatalogEntries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor struct-shape-get-mapping-request-location
                         :shape "Location" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mapping-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mapping-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mapping-request 'make-get-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-mapping-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-mapping-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sinks))
      (common-lisp:list
       (common-lisp:cons "Sinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-mapping-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-mapping-response common-lisp:nil
                       ((mapping :initarg :mapping :initform
                         (common-lisp:error ":mapping is required") :type
                         (common-lisp:or mapping-list common-lisp:null)
                         :accessor struct-shape-get-mapping-response-mapping
                         :shape "MappingList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-mapping-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-mapping-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-mapping-response 'make-get-mapping-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-mapping-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-mapping-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping))
      (common-lisp:list
       (common-lisp:cons "Mapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-mapping-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-partition-indexes-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-partition-indexes-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-partition-indexes-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-partition-indexes-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-partition-indexes-request-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-partition-indexes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-partition-indexes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-partition-indexes-request
                    'make-get-partition-indexes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-indexes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-indexes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-indexes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-partition-indexes-response common-lisp:nil
                       ((partition-index-descriptor-list :initarg
                         :partition-index-descriptor-list :initform
                         common-lisp:nil :type
                         (common-lisp:or partition-index-descriptor-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-partition-indexes-response-partition-index-descriptor-list
                         :shape "PartitionIndexDescriptorList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-partition-indexes-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-partition-indexes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-partition-indexes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-partition-indexes-response
                    'make-get-partition-indexes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-indexes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-indexes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-index-descriptor-list))
      (common-lisp:list
       (common-lisp:cons "PartitionIndexDescriptorList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-indexes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-partition-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-partition-request-catalog-id :shape
                         "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-partition-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-partition-request-table-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (partition-values :initarg :partition-values :initform
                         (common-lisp:error ":partition-values is required")
                         :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor
                         struct-shape-get-partition-request-partition-values
                         :shape "ValueStringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-partition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-partition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-partition-request 'make-get-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-partition-response common-lisp:nil
                       ((partition :initarg :partition :initform
                         common-lisp:nil :type
                         (common-lisp:or partition common-lisp:null) :accessor
                         struct-shape-get-partition-response-partition :shape
                         "Partition" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-partition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-partition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-partition-response 'make-get-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "Partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-partitions-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-partitions-request-catalog-id :shape
                         "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-partitions-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-partitions-request-table-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expression :initarg :expression :initform
                         common-lisp:nil :type
                         (common-lisp:or predicate-string common-lisp:null)
                         :accessor
                         struct-shape-get-partitions-request-expression :shape
                         "PredicateString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-partitions-request-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (segment :initarg :segment :initform common-lisp:nil
                         :type (common-lisp:or segment common-lisp:null)
                         :accessor struct-shape-get-partitions-request-segment
                         :shape "Segment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-partitions-request-max-results :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (exclude-column-schema :initarg :exclude-column-schema
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-nullable common-lisp:null)
                         :accessor
                         struct-shape-get-partitions-request-exclude-column-schema
                         :shape "BooleanNullable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transaction-id :initarg :transaction-id :initform
                         common-lisp:nil :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-partitions-request-transaction-id
                         :shape "TransactionIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-as-of-time :initarg :query-as-of-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-partitions-request-query-as-of-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-partitions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-partitions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-partitions-request 'make-get-partitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment))
      (common-lisp:list
       (common-lisp:cons "Segment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-column-schema))
      (common-lisp:list
       (common-lisp:cons "ExcludeColumnSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-as-of-time))
      (common-lisp:list
       (common-lisp:cons "QueryAsOfTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-partitions-response common-lisp:nil
                       ((partitions :initarg :partitions :initform
                         common-lisp:nil :type
                         (common-lisp:or partition-list common-lisp:null)
                         :accessor
                         struct-shape-get-partitions-response-partitions :shape
                         "PartitionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-partitions-response-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-partitions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-partitions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-partitions-response 'make-get-partitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partitions))
      (common-lisp:list
       (common-lisp:cons "Partitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-plan-request common-lisp:nil
                       ((mapping :initarg :mapping :initform
                         (common-lisp:error ":mapping is required") :type
                         (common-lisp:or mapping-list common-lisp:null)
                         :accessor struct-shape-get-plan-request-mapping :shape
                         "MappingList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or catalog-entry common-lisp:null)
                         :accessor struct-shape-get-plan-request-source :shape
                         "CatalogEntry" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sinks :initarg :sinks :initform common-lisp:nil :type
                         (common-lisp:or catalog-entries common-lisp:null)
                         :accessor struct-shape-get-plan-request-sinks :shape
                         "CatalogEntries" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor struct-shape-get-plan-request-location
                         :shape "Location" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (language :initarg :language :initform common-lisp:nil
                         :type (common-lisp:or language common-lisp:null)
                         :accessor struct-shape-get-plan-request-language
                         :shape "Language" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-plan-options-map :initarg
                         :additional-plan-options-map :initform common-lisp:nil
                         :type
                         (common-lisp:or additional-plan-options-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-plan-request-additional-plan-options-map
                         :shape "AdditionalPlanOptionsMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-plan-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-plan-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-plan-request 'make-get-plan-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-plan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mapping))
      (common-lisp:list
       (common-lisp:cons "Mapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sinks))
      (common-lisp:list
       (common-lisp:cons "Sinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-plan-options-map))
      (common-lisp:list
       (common-lisp:cons "AdditionalPlanOptionsMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-plan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-plan-response common-lisp:nil
                       ((python-script :initarg :python-script :initform
                         common-lisp:nil :type
                         (common-lisp:or python-script common-lisp:null)
                         :accessor struct-shape-get-plan-response-python-script
                         :shape "PythonScript" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scala-code :initarg :scala-code :initform
                         common-lisp:nil :type
                         (common-lisp:or scala-code common-lisp:null) :accessor
                         struct-shape-get-plan-response-scala-code :shape
                         "ScalaCode" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-plan-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-plan-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-plan-response 'make-get-plan-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-plan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-plan-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'python-script))
      (common-lisp:list
       (common-lisp:cons "PythonScript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scala-code))
      (common-lisp:list
       (common-lisp:cons "ScalaCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-plan-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-registry-input common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         (common-lisp:error ":registry-id is required") :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor struct-shape-get-registry-input-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-registry-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-registry-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-registry-input 'make-get-registry-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-registry-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-registry-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "RegistryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-registry-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-registry-response common-lisp:nil
                       ((registry-name :initarg :registry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-registry-response-registry-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (registry-arn :initarg :registry-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-registry-response-registry-arn :shape
                         "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-get-registry-response-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or registry-status common-lisp:null)
                         :accessor struct-shape-get-registry-response-status
                         :shape "RegistryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or created-timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-registry-response-created-time :shape
                         "CreatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-time :initarg :updated-time :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-registry-response-updated-time :shape
                         "UpdatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-registry-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-registry-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-registry-response 'make-get-registry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "UpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-registry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policies-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-resource-policies-request-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-resource-policies-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-policies-request
                    'make-get-resource-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policies-response common-lisp:nil
                       ((get-resource-policies-response-list :initarg
                         :get-resource-policies-response-list :initform
                         common-lisp:nil :type
                         (common-lisp:or get-resource-policies-response-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-resource-policies-response-get-resource-policies-response-list
                         :shape "GetResourcePoliciesResponseList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-resource-policies-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-policies-response
                    'make-get-resource-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'get-resource-policies-response-list))
      (common-lisp:list
       (common-lisp:cons "GetResourcePoliciesResponseList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-resource-policies-response-list ()
   '(trivial-types:proper-list glue-policy))
 (common-lisp:defun make-get-resource-policies-response-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list glue-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-resource-policy-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-resource-policy-request-resource-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-request
                    'make-get-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policy-response common-lisp:nil
                       ((policy-in-json :initarg :policy-in-json :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-json-string common-lisp:null)
                         :accessor
                         struct-shape-get-resource-policy-response-policy-in-json
                         :shape "PolicyJsonString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-hash :initarg :policy-hash :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-resource-policy-response-policy-hash
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-resource-policy-response-create-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-resource-policy-response-update-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-response
                    'make-get-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-in-json))
      (common-lisp:list
       (common-lisp:cons "PolicyInJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-hash))
      (common-lisp:list
       (common-lisp:cons "PolicyHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-by-definition-input common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         (common-lisp:error ":schema-id is required") :type
                         (common-lisp:or schema-id common-lisp:null) :accessor
                         struct-shape-get-schema-by-definition-input-schema-id
                         :shape "SchemaId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-definition :initarg :schema-definition
                         :initform
                         (common-lisp:error ":schema-definition is required")
                         :type
                         (common-lisp:or schema-definition-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-by-definition-input-schema-definition
                         :shape "SchemaDefinitionString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schema-by-definition-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-schema-by-definition-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schema-by-definition-input
                    'make-get-schema-by-definition-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-by-definition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-by-definition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "SchemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-by-definition-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-by-definition-response common-lisp:nil
                       ((schema-version-id :initarg :schema-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-by-definition-response-schema-version-id
                         :shape "SchemaVersionIdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schema-arn :initarg :schema-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-schema-by-definition-response-schema-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-format :initarg :data-format :initform
                         common-lisp:nil :type
                         (common-lisp:or data-format common-lisp:null)
                         :accessor
                         struct-shape-get-schema-by-definition-response-data-format
                         :shape "DataFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or schema-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-by-definition-response-status
                         :shape "SchemaVersionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or created-timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-schema-by-definition-response-created-time
                         :shape "CreatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schema-by-definition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-schema-by-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schema-by-definition-response
                    'make-get-schema-by-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-by-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-by-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "DataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-by-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-input common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         (common-lisp:error ":schema-id is required") :type
                         (common-lisp:or schema-id common-lisp:null) :accessor
                         struct-shape-get-schema-input-schema-id :shape
                         "SchemaId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schema-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-schema-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schema-input 'make-get-schema-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-schema-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-response common-lisp:nil
                       ((registry-name :initarg :registry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-response-registry-name :shape
                         "SchemaRegistryNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registry-arn :initarg :registry-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-schema-response-registry-arn :shape
                         "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor struct-shape-get-schema-response-schema-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schema-arn :initarg :schema-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor struct-shape-get-schema-response-schema-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-get-schema-response-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-format :initarg :data-format :initform
                         common-lisp:nil :type
                         (common-lisp:or data-format common-lisp:null)
                         :accessor struct-shape-get-schema-response-data-format
                         :shape "DataFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compatibility :initarg :compatibility :initform
                         common-lisp:nil :type
                         (common-lisp:or compatibility common-lisp:null)
                         :accessor
                         struct-shape-get-schema-response-compatibility :shape
                         "Compatibility" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-checkpoint :initarg :schema-checkpoint
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-checkpoint-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-response-schema-checkpoint
                         :shape "SchemaCheckpointNumber" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (latest-schema-version :initarg :latest-schema-version
                         :initform common-lisp:nil :type
                         (common-lisp:or version-long-number common-lisp:null)
                         :accessor
                         struct-shape-get-schema-response-latest-schema-version
                         :shape "VersionLongNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-schema-version :initarg :next-schema-version
                         :initform common-lisp:nil :type
                         (common-lisp:or version-long-number common-lisp:null)
                         :accessor
                         struct-shape-get-schema-response-next-schema-version
                         :shape "VersionLongNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-status :initarg :schema-status :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-status common-lisp:null)
                         :accessor
                         struct-shape-get-schema-response-schema-status :shape
                         "SchemaStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or created-timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-schema-response-created-time :shape
                         "CreatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-time :initarg :updated-time :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-schema-response-updated-time :shape
                         "UpdatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schema-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-schema-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schema-response 'make-get-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "DataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatibility))
      (common-lisp:list
       (common-lisp:cons "Compatibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-checkpoint))
      (common-lisp:list
       (common-lisp:cons "SchemaCheckpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-schema-version))
      (common-lisp:list
       (common-lisp:cons "LatestSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-schema-version))
      (common-lisp:list
       (common-lisp:cons "NextSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-status))
      (common-lisp:list
       (common-lisp:cons "SchemaStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "UpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-version-input common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-id common-lisp:null) :accessor
                         struct-shape-get-schema-version-input-schema-id :shape
                         "SchemaId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema-version-id :initarg :schema-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-version-input-schema-version-id
                         :shape "SchemaVersionIdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schema-version-number :initarg :schema-version-number
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-version-input-schema-version-number
                         :shape "SchemaVersionNumber" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schema-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-schema-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schema-version-input 'make-get-schema-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-number))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-version-response common-lisp:nil
                       ((schema-version-id :initarg :schema-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-version-response-schema-version-id
                         :shape "SchemaVersionIdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schema-definition :initarg :schema-definition
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-definition-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-version-response-schema-definition
                         :shape "SchemaDefinitionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-format :initarg :data-format :initform
                         common-lisp:nil :type
                         (common-lisp:or data-format common-lisp:null)
                         :accessor
                         struct-shape-get-schema-version-response-data-format
                         :shape "DataFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-arn :initarg :schema-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-schema-version-response-schema-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or version-long-number common-lisp:null)
                         :accessor
                         struct-shape-get-schema-version-response-version-number
                         :shape "VersionLongNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or schema-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-version-response-status :shape
                         "SchemaVersionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or created-timestamp common-lisp:null)
                         :accessor
                         struct-shape-get-schema-version-response-created-time
                         :shape "CreatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schema-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-schema-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schema-version-response
                    'make-get-schema-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "SchemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "DataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-versions-diff-input common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         (common-lisp:error ":schema-id is required") :type
                         (common-lisp:or schema-id common-lisp:null) :accessor
                         struct-shape-get-schema-versions-diff-input-schema-id
                         :shape "SchemaId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-schema-version-number :initarg
                         :first-schema-version-number :initform
                         (common-lisp:error
                          ":first-schema-version-number is required")
                         :type
                         (common-lisp:or schema-version-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-versions-diff-input-first-schema-version-number
                         :shape "SchemaVersionNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (second-schema-version-number :initarg
                         :second-schema-version-number :initform
                         (common-lisp:error
                          ":second-schema-version-number is required")
                         :type
                         (common-lisp:or schema-version-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-versions-diff-input-second-schema-version-number
                         :shape "SchemaVersionNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-diff-type :initarg :schema-diff-type :initform
                         (common-lisp:error ":schema-diff-type is required")
                         :type
                         (common-lisp:or schema-diff-type common-lisp:null)
                         :accessor
                         struct-shape-get-schema-versions-diff-input-schema-diff-type
                         :shape "SchemaDiffType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schema-versions-diff-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-schema-versions-diff-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schema-versions-diff-input
                    'make-get-schema-versions-diff-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-versions-diff-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-versions-diff-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-schema-version-number))
      (common-lisp:list
       (common-lisp:cons "FirstSchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'second-schema-version-number))
      (common-lisp:list
       (common-lisp:cons "SecondSchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-diff-type))
      (common-lisp:list
       (common-lisp:cons "SchemaDiffType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-versions-diff-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-schema-versions-diff-response common-lisp:nil
                       ((diff :initarg :diff :initform common-lisp:nil :type
                         (common-lisp:or schema-definition-diff
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-schema-versions-diff-response-diff
                         :shape "SchemaDefinitionDiff" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-schema-versions-diff-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-schema-versions-diff-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-schema-versions-diff-response
                    'make-get-schema-versions-diff-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-versions-diff-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-versions-diff-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'diff))
      (common-lisp:list
       (common-lisp:cons "Diff"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-versions-diff-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-security-configuration-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-security-configuration-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-security-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-security-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-security-configuration-request
                    'make-get-security-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-security-configuration-response common-lisp:nil
                       ((security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or security-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-security-configuration-response-security-configuration
                         :shape "SecurityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-security-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-security-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-security-configuration-response
                    'make-get-security-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-security-configurations-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-security-configurations-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-security-configurations-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-security-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-security-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-security-configurations-request
                    'make-get-security-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-security-configurations-response common-lisp:nil
                       ((security-configurations :initarg
                         :security-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or security-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-security-configurations-response-security-configurations
                         :shape "SecurityConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-security-configurations-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-security-configurations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-security-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-security-configurations-response
                    'make-get-security-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configurations))
      (common-lisp:list
       (common-lisp:cons "SecurityConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-security-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-session-request-id :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (request-origin :initarg :request-origin :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-session-request-request-origin :shape
                         "OrchestrationNameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-session-request 'make-get-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-session-response common-lisp:nil
                       ((session :initarg :session :initform common-lisp:nil
                         :type (common-lisp:or session common-lisp:null)
                         :accessor struct-shape-get-session-response-session
                         :shape "Session" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-session-response 'make-get-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session))
      (common-lisp:list
       (common-lisp:cons "Session"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-statement-request common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-statement-request-session-id :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor struct-shape-get-statement-request-id :shape
                         "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (request-origin :initarg :request-origin :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-statement-request-request-origin
                         :shape "OrchestrationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-statement-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-statement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-statement-request 'make-get-statement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-statement-response common-lisp:nil
                       ((statement :initarg :statement :initform
                         common-lisp:nil :type
                         (common-lisp:or statement common-lisp:null) :accessor
                         struct-shape-get-statement-response-statement :shape
                         "Statement" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-statement-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-statement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-statement-response 'make-get-statement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement))
      (common-lisp:list
       (common-lisp:cons "Statement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-statement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-optimizer-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         (common-lisp:error ":catalog-id is required") :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-optimizer-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-optimizer-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-optimizer-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or table-optimizer-type common-lisp:null)
                         :accessor
                         struct-shape-get-table-optimizer-request-type :shape
                         "TableOptimizerType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-table-optimizer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-optimizer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-table-optimizer-request
                    'make-get-table-optimizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-optimizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-optimizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-optimizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-optimizer-response common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-optimizer-response-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-optimizer-response-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-optimizer-response-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-optimizer :initarg :table-optimizer :initform
                         common-lisp:nil :type
                         (common-lisp:or table-optimizer common-lisp:null)
                         :accessor
                         struct-shape-get-table-optimizer-response-table-optimizer
                         :shape "TableOptimizer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-table-optimizer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-optimizer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-table-optimizer-response
                    'make-get-table-optimizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-optimizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-optimizer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-optimizer))
      (common-lisp:list
       (common-lisp:cons "TableOptimizer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-optimizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor struct-shape-get-table-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-table-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-table-request-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (transaction-id :initarg :transaction-id :initform
                         common-lisp:nil :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-table-request-transaction-id :shape
                         "TransactionIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-as-of-time :initarg :query-as-of-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-table-request-query-as-of-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-table-request 'make-get-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-as-of-time))
      (common-lisp:list
       (common-lisp:cons "QueryAsOfTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-response common-lisp:nil
                       ((table :initarg :table :initform common-lisp:nil :type
                         (common-lisp:or table common-lisp:null) :accessor
                         struct-shape-get-table-response-table :shape "Table"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-table-response 'make-get-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-version-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-version-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-version-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-version-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-version-request-version-id
                         :shape "VersionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-table-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-table-version-request
                    'make-get-table-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-version-response common-lisp:nil
                       ((table-version :initarg :table-version :initform
                         common-lisp:nil :type
                         (common-lisp:or table-version common-lisp:null)
                         :accessor
                         struct-shape-get-table-version-response-table-version
                         :shape "TableVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-table-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-table-version-response
                    'make-get-table-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-version))
      (common-lisp:list
       (common-lisp:cons "TableVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype get-table-versions-list ()
   '(trivial-types:proper-list table-version))
 (common-lisp:defun make-get-table-versions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-table-versions-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-versions-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-versions-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-table-versions-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-table-versions-request-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-getter-page-size
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-table-versions-request-max-results
                         :shape "CatalogGetterPageSize" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-table-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-table-versions-request
                    'make-get-table-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-table-versions-response common-lisp:nil
                       ((table-versions :initarg :table-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or get-table-versions-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-table-versions-response-table-versions
                         :shape "GetTableVersionsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-table-versions-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-table-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-table-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-table-versions-response
                    'make-get-table-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-table-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-table-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-versions))
      (common-lisp:list
       (common-lisp:cons "TableVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-table-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-tables-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor struct-shape-get-tables-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-tables-request-database-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expression :initarg :expression :initform
                         common-lisp:nil :type
                         (common-lisp:or filter-string common-lisp:null)
                         :accessor struct-shape-get-tables-request-expression
                         :shape "FilterString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-tables-request-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-getter-page-size
                                         common-lisp:null)
                         :accessor struct-shape-get-tables-request-max-results
                         :shape "CatalogGetterPageSize" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (transaction-id :initarg :transaction-id :initform
                         common-lisp:nil :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-tables-request-transaction-id :shape
                         "TransactionIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-as-of-time :initarg :query-as-of-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-tables-request-query-as-of-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-tables-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-tables-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-tables-request 'make-get-tables-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tables-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-as-of-time))
      (common-lisp:list
       (common-lisp:cons "QueryAsOfTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tables-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-tables-response common-lisp:nil
                       ((table-list :initarg :table-list :initform
                         common-lisp:nil :type
                         (common-lisp:or table-list common-lisp:null) :accessor
                         struct-shape-get-tables-response-table-list :shape
                         "TableList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-tables-response-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-tables-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-tables-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-tables-response 'make-get-tables-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tables-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tables-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-list))
      (common-lisp:list
       (common-lisp:cons "TableList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tables-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-tags-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor struct-shape-get-tags-request-resource-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-tags-request 'make-get-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-tags-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-get-tags-response-tags :shape "TagsMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-tags-response 'make-get-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trigger-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-trigger-request-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-trigger-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-trigger-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-trigger-request 'make-get-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-trigger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-trigger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-trigger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-trigger-response common-lisp:nil
                       ((trigger :initarg :trigger :initform common-lisp:nil
                         :type (common-lisp:or trigger common-lisp:null)
                         :accessor struct-shape-get-trigger-response-trigger
                         :shape "Trigger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-trigger-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-trigger-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-trigger-response 'make-get-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-trigger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-trigger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger))
      (common-lisp:list
       (common-lisp:cons "Trigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-trigger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-triggers-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-get-triggers-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dependent-job-name :initarg :dependent-job-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-triggers-request-dependent-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-page-size200
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-triggers-request-max-results :shape
                         "OrchestrationPageSize200" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-triggers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-triggers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-triggers-request 'make-get-triggers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-triggers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-triggers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependent-job-name))
      (common-lisp:list
       (common-lisp:cons "DependentJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-triggers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-triggers-response common-lisp:nil
                       ((triggers :initarg :triggers :initform common-lisp:nil
                         :type (common-lisp:or trigger-list common-lisp:null)
                         :accessor struct-shape-get-triggers-response-triggers
                         :shape "TriggerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-triggers-response-next-token :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-triggers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-triggers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-triggers-response 'make-get-triggers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-triggers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-triggers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'triggers))
      (common-lisp:list
       (common-lisp:cons "Triggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-triggers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-unfiltered-partition-metadata-request
                       common-lisp:nil
                       ((region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or value-string common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partition-metadata-request-region
                         :shape "ValueString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-id :initarg :catalog-id :initform
                         (common-lisp:error ":catalog-id is required") :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partition-metadata-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partition-metadata-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partition-metadata-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-values :initarg :partition-values :initform
                         (common-lisp:error ":partition-values is required")
                         :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partition-metadata-request-partition-values
                         :shape "ValueStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audit-context :initarg :audit-context :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-context common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partition-metadata-request-audit-context
                         :shape "AuditContext" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-permission-types :initarg
                         :supported-permission-types :initform
                         (common-lisp:error
                          ":supported-permission-types is required")
                         :type
                         (common-lisp:or permission-type-list common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partition-metadata-request-supported-permission-types
                         :shape "PermissionTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-session-context :initarg :query-session-context
                         :initform common-lisp:nil :type
                         (common-lisp:or query-session-context
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partition-metadata-request-query-session-context
                         :shape "QuerySessionContext" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-unfiltered-partition-metadata-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-unfiltered-partition-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-unfiltered-partition-metadata-request
                    'make-get-unfiltered-partition-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partition-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partition-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-context))
      (common-lisp:list
       (common-lisp:cons "AuditContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-permission-types))
      (common-lisp:list
       (common-lisp:cons "SupportedPermissionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-session-context))
      (common-lisp:list
       (common-lisp:cons "QuerySessionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partition-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-unfiltered-partition-metadata-response
                       common-lisp:nil
                       ((partition :initarg :partition :initform
                         common-lisp:nil :type
                         (common-lisp:or partition common-lisp:null) :accessor
                         struct-shape-get-unfiltered-partition-metadata-response-partition
                         :shape "Partition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorized-columns :initarg :authorized-columns
                         :initform common-lisp:nil :type
                         (common-lisp:or name-string-list common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partition-metadata-response-authorized-columns
                         :shape "NameStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-registered-with-lake-formation :initarg
                         :is-registered-with-lake-formation :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-unfiltered-partition-metadata-response-is-registered-with-lake-formation
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-unfiltered-partition-metadata-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-unfiltered-partition-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-unfiltered-partition-metadata-response
                    'make-get-unfiltered-partition-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partition-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partition-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "Partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorized-columns))
      (common-lisp:list
       (common-lisp:cons "AuthorizedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-registered-with-lake-formation))
      (common-lisp:list
       (common-lisp:cons "IsRegisteredWithLakeFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partition-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-unfiltered-partitions-metadata-request
                       common-lisp:nil
                       ((region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or value-string common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partitions-metadata-request-region
                         :shape "ValueString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-id :initarg :catalog-id :initform
                         (common-lisp:error ":catalog-id is required") :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partitions-metadata-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partitions-metadata-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partitions-metadata-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expression :initarg :expression :initform
                         common-lisp:nil :type
                         (common-lisp:or predicate-string common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partitions-metadata-request-expression
                         :shape "PredicateString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audit-context :initarg :audit-context :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-context common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partitions-metadata-request-audit-context
                         :shape "AuditContext" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-permission-types :initarg
                         :supported-permission-types :initform
                         (common-lisp:error
                          ":supported-permission-types is required")
                         :type
                         (common-lisp:or permission-type-list common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partitions-metadata-request-supported-permission-types
                         :shape "PermissionTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-unfiltered-partitions-metadata-request-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segment :initarg :segment :initform common-lisp:nil
                         :type (common-lisp:or segment common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partitions-metadata-request-segment
                         :shape "Segment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-unfiltered-partitions-metadata-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-session-context :initarg :query-session-context
                         :initform common-lisp:nil :type
                         (common-lisp:or query-session-context
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partitions-metadata-request-query-session-context
                         :shape "QuerySessionContext" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-unfiltered-partitions-metadata-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-unfiltered-partitions-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-unfiltered-partitions-metadata-request
                    'make-get-unfiltered-partitions-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partitions-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partitions-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-context))
      (common-lisp:list
       (common-lisp:cons "AuditContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-permission-types))
      (common-lisp:list
       (common-lisp:cons "SupportedPermissionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment))
      (common-lisp:list
       (common-lisp:cons "Segment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-session-context))
      (common-lisp:list
       (common-lisp:cons "QuerySessionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partitions-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-unfiltered-partitions-metadata-response
                       common-lisp:nil
                       ((unfiltered-partitions :initarg :unfiltered-partitions
                         :initform common-lisp:nil :type
                         (common-lisp:or unfiltered-partition-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-partitions-metadata-response-unfiltered-partitions
                         :shape "UnfilteredPartitionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-unfiltered-partitions-metadata-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-unfiltered-partitions-metadata-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-unfiltered-partitions-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-unfiltered-partitions-metadata-response
                    'make-get-unfiltered-partitions-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partitions-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partitions-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unfiltered-partitions))
      (common-lisp:list
       (common-lisp:cons "UnfilteredPartitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-partitions-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-unfiltered-table-metadata-request common-lisp:nil
                       ((region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or value-string common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-table-metadata-request-region
                         :shape "ValueString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-id :initarg :catalog-id :initform
                         (common-lisp:error ":catalog-id is required") :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-table-metadata-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-table-metadata-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-table-metadata-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audit-context :initarg :audit-context :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-context common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-table-metadata-request-audit-context
                         :shape "AuditContext" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-permission-types :initarg
                         :supported-permission-types :initform
                         (common-lisp:error
                          ":supported-permission-types is required")
                         :type
                         (common-lisp:or permission-type-list common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-table-metadata-request-supported-permission-types
                         :shape "PermissionTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supported-dialect :initarg :supported-dialect
                         :initform common-lisp:nil :type
                         (common-lisp:or supported-dialect common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-table-metadata-request-supported-dialect
                         :shape "SupportedDialect" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permissions :initarg :permissions :initform
                         common-lisp:nil :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-table-metadata-request-permissions
                         :shape "PermissionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-session-context :initarg :query-session-context
                         :initform common-lisp:nil :type
                         (common-lisp:or query-session-context
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-table-metadata-request-query-session-context
                         :shape "QuerySessionContext" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-unfiltered-table-metadata-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-unfiltered-table-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-unfiltered-table-metadata-request
                    'make-get-unfiltered-table-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-table-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-table-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-context))
      (common-lisp:list
       (common-lisp:cons "AuditContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-permission-types))
      (common-lisp:list
       (common-lisp:cons "SupportedPermissionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-dialect))
      (common-lisp:list
       (common-lisp:cons "SupportedDialect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-session-context))
      (common-lisp:list
       (common-lisp:cons "QuerySessionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-table-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-unfiltered-table-metadata-response common-lisp:nil
                       ((table :initarg :table :initform common-lisp:nil :type
                         (common-lisp:or table common-lisp:null) :accessor
                         struct-shape-get-unfiltered-table-metadata-response-table
                         :shape "Table" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorized-columns :initarg :authorized-columns
                         :initform common-lisp:nil :type
                         (common-lisp:or name-string-list common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-table-metadata-response-authorized-columns
                         :shape "NameStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-registered-with-lake-formation :initarg
                         :is-registered-with-lake-formation :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-unfiltered-table-metadata-response-is-registered-with-lake-formation
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cell-filters :initarg :cell-filters :initform
                         common-lisp:nil :type
                         (common-lisp:or column-row-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-table-metadata-response-cell-filters
                         :shape "ColumnRowFilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-authorization-id :initarg
                         :query-authorization-id :initform common-lisp:nil
                         :type (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-table-metadata-response-query-authorization-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn-string common-lisp:null) :accessor
                         struct-shape-get-unfiltered-table-metadata-response-resource-arn
                         :shape "ArnString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permissions :initarg :permissions :initform
                         common-lisp:nil :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor
                         struct-shape-get-unfiltered-table-metadata-response-permissions
                         :shape "PermissionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-unfiltered-table-metadata-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-unfiltered-table-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-unfiltered-table-metadata-response
                    'make-get-unfiltered-table-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-table-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-table-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorized-columns))
      (common-lisp:list
       (common-lisp:cons "AuthorizedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-registered-with-lake-formation))
      (common-lisp:list
       (common-lisp:cons "IsRegisteredWithLakeFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell-filters))
      (common-lisp:list
       (common-lisp:cons "CellFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-authorization-id))
      (common-lisp:list
       (common-lisp:cons "QueryAuthorizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-unfiltered-table-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-defined-function-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-user-defined-function-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-user-defined-function-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-user-defined-function-request-function-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-defined-function-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-user-defined-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-defined-function-request
                    'make-get-user-defined-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-defined-function-response common-lisp:nil
                       ((user-defined-function :initarg :user-defined-function
                         :initform common-lisp:nil :type
                         (common-lisp:or user-defined-function
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-user-defined-function-response-user-defined-function
                         :shape "UserDefinedFunction" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-defined-function-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-user-defined-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-defined-function-response
                    'make-get-user-defined-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-function-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-defined-function))
      (common-lisp:list
       (common-lisp:cons "UserDefinedFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-defined-functions-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-get-user-defined-functions-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-user-defined-functions-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pattern :initarg :pattern :initform
                         (common-lisp:error ":pattern is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-user-defined-functions-request-pattern
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-user-defined-functions-request-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-getter-page-size
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-user-defined-functions-request-max-results
                         :shape "CatalogGetterPageSize" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-defined-functions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-user-defined-functions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-defined-functions-request
                    'make-get-user-defined-functions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-functions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-functions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-functions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-defined-functions-response common-lisp:nil
                       ((user-defined-functions :initarg
                         :user-defined-functions :initform common-lisp:nil
                         :type
                         (common-lisp:or user-defined-function-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-user-defined-functions-response-user-defined-functions
                         :shape "UserDefinedFunctionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-user-defined-functions-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-defined-functions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-user-defined-functions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-defined-functions-response
                    'make-get-user-defined-functions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-functions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-functions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-defined-functions))
      (common-lisp:list
       (common-lisp:cons "UserDefinedFunctions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-defined-functions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-workflow-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-graph :initarg :include-graph :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-request-include-graph :shape
                         "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workflow-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workflow-request 'make-get-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-graph))
      (common-lisp:list
       (common-lisp:cons "IncludeGraph"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-response common-lisp:nil
                       ((workflow :initarg :workflow :initform common-lisp:nil
                         :type (common-lisp:or workflow common-lisp:null)
                         :accessor struct-shape-get-workflow-response-workflow
                         :shape "Workflow" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workflow-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workflow-response 'make-get-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow))
      (common-lisp:list
       (common-lisp:cons "Workflow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-run-properties-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-run-properties-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (run-id :initarg :run-id :initform
                         (common-lisp:error ":run-id is required") :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-get-workflow-run-properties-request-run-id
                         :shape "IdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workflow-run-properties-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-workflow-run-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workflow-run-properties-request
                    'make-get-workflow-run-properties-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-run-properties-response common-lisp:nil
                       ((run-properties :initarg :run-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or workflow-run-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-run-properties-response-run-properties
                         :shape "WorkflowRunProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workflow-run-properties-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-workflow-run-properties-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workflow-run-properties-response
                    'make-get-workflow-run-properties-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-properties-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-properties-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-properties))
      (common-lisp:list
       (common-lisp:cons "RunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-properties-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-run-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-workflow-run-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (run-id :initarg :run-id :initform
                         (common-lisp:error ":run-id is required") :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-get-workflow-run-request-run-id :shape
                         "IdString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (include-graph :initarg :include-graph :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-run-request-include-graph
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workflow-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workflow-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workflow-run-request 'make-get-workflow-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-graph))
      (common-lisp:list
       (common-lisp:cons "IncludeGraph"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-run-response common-lisp:nil
                       ((run :initarg :run :initform common-lisp:nil :type
                         (common-lisp:or workflow-run common-lisp:null)
                         :accessor struct-shape-get-workflow-run-response-run
                         :shape "WorkflowRun" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workflow-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workflow-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workflow-run-response
                    'make-get-workflow-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run))
      (common-lisp:list
       (common-lisp:cons "Run"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-runs-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-get-workflow-runs-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-graph :initarg :include-graph :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-runs-request-include-graph
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-runs-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-get-workflow-runs-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workflow-runs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workflow-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workflow-runs-request
                    'make-get-workflow-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-graph))
      (common-lisp:list
       (common-lisp:cons "IncludeGraph"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-workflow-runs-response common-lisp:nil
                       ((runs :initarg :runs :initform common-lisp:nil :type
                         (common-lisp:or workflow-runs common-lisp:null)
                         :accessor struct-shape-get-workflow-runs-response-runs
                         :shape "WorkflowRuns" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-get-workflow-runs-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-workflow-runs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-workflow-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-workflow-runs-response
                    'make-get-workflow-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runs))
      (common-lisp:list
       (common-lisp:cons "Runs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-workflow-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition glue-encryption-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       glue-encryption-exception-message)))
 (common-lisp:export
  (common-lisp:list 'glue-encryption-exception
                    'glue-encryption-exception-message)))
(common-lisp:progn
 (common-lisp:defclass glue-policy common-lisp:nil
                       ((policy-in-json :initarg :policy-in-json :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-json-string common-lisp:null)
                         :accessor struct-shape-glue-policy-policy-in-json
                         :shape "PolicyJsonString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-hash :initarg :policy-hash :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor struct-shape-glue-policy-policy-hash :shape
                         "HashString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-glue-policy-create-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-glue-policy-update-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-glue-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'glue-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'glue-policy 'make-glue-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input glue-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input glue-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-in-json))
      (common-lisp:list
       (common-lisp:cons "PolicyInJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-hash))
      (common-lisp:list
       (common-lisp:cons "PolicyHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input glue-policy))
   common-lisp:nil))
(common-lisp:deftype glue-record-type () 'common-lisp:string)
(common-lisp:deftype glue-resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass glue-schema common-lisp:nil
                       ((columns :initarg :columns :initform common-lisp:nil
                         :type
                         (common-lisp:or glue-studio-schema-column-list
                                         common-lisp:null)
                         :accessor struct-shape-glue-schema-columns :shape
                         "GlueStudioSchemaColumnList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-glue-schema
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'glue-schema
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'glue-schema 'make-glue-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input glue-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input glue-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input glue-schema))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype glue-schemas () '(trivial-types:proper-list glue-schema))
 (common-lisp:defun make-glue-schemas
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list glue-schema))
   aws-sdk/generator/shape::members))
(common-lisp:deftype glue-studio-column-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype glue-studio-path-list ()
   '(trivial-types:proper-list enclosed-in-string-properties))
 (common-lisp:defun make-glue-studio-path-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            enclosed-in-string-properties))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass glue-studio-schema-column common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or glue-studio-column-name-string
                                         common-lisp:null)
                         :accessor struct-shape-glue-studio-schema-column-name
                         :shape "GlueStudioColumnNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or column-type-string common-lisp:null)
                         :accessor struct-shape-glue-studio-schema-column-type
                         :shape "ColumnTypeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-glue-studio-schema-column
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'glue-studio-schema-column
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'glue-studio-schema-column
                    'make-glue-studio-schema-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          glue-studio-schema-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          glue-studio-schema-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          glue-studio-schema-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype glue-studio-schema-column-list ()
   '(trivial-types:proper-list glue-studio-schema-column))
 (common-lisp:defun make-glue-studio-schema-column-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            glue-studio-schema-column))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass glue-table common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-glue-table-database-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-glue-table-table-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-glue-table-catalog-id :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-glue-table-connection-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or glue-table-additional-options
                                         common-lisp:null)
                         :accessor struct-shape-glue-table-additional-options
                         :shape "GlueTableAdditionalOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-glue-table
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'glue-table
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'glue-table 'make-glue-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input glue-table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input glue-table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input glue-table))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype glue-table-additional-options () 'common-lisp:hash-table)
 (common-lisp:defun make-glue-table-additional-options
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype glue-tables () '(trivial-types:proper-list glue-table))
 (common-lisp:defun make-glue-tables
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list glue-table))
   aws-sdk/generator/shape::members))
(common-lisp:deftype glue-version-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass governed-catalog-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-governed-catalog-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-governed-catalog-source-database :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-governed-catalog-source-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (partition-predicate :initarg :partition-predicate
                         :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-governed-catalog-source-partition-predicate
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or s3source-additional-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-governed-catalog-source-additional-options
                         :shape "S3SourceAdditionalOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-governed-catalog-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'governed-catalog-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'governed-catalog-source 'make-governed-catalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          governed-catalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          governed-catalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-predicate))
      (common-lisp:list
       (common-lisp:cons "PartitionPredicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          governed-catalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass governed-catalog-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-governed-catalog-target-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-governed-catalog-target-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (partition-keys :initarg :partition-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-studio-path-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-governed-catalog-target-partition-keys
                         :shape "GlueStudioPathList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-governed-catalog-target-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-governed-catalog-target-database :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-change-policy :initarg :schema-change-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or catalog-schema-change-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-governed-catalog-target-schema-change-policy
                         :shape "CatalogSchemaChangePolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-governed-catalog-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'governed-catalog-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'governed-catalog-target 'make-governed-catalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          governed-catalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          governed-catalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          governed-catalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass grok-classifier common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-grok-classifier-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (classification :initarg :classification :initform
                         (common-lisp:error ":classification is required")
                         :type (common-lisp:or classification common-lisp:null)
                         :accessor struct-shape-grok-classifier-classification
                         :shape "Classification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-grok-classifier-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-grok-classifier-last-updated :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version-id common-lisp:null)
                         :accessor struct-shape-grok-classifier-version :shape
                         "VersionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (grok-pattern :initarg :grok-pattern :initform
                         (common-lisp:error ":grok-pattern is required") :type
                         (common-lisp:or grok-pattern common-lisp:null)
                         :accessor struct-shape-grok-classifier-grok-pattern
                         :shape "GrokPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-patterns :initarg :custom-patterns :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-patterns common-lisp:null)
                         :accessor struct-shape-grok-classifier-custom-patterns
                         :shape "CustomPatterns" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grok-classifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grok-classifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'grok-classifier 'make-grok-classifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input grok-classifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input grok-classifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grok-pattern))
      (common-lisp:list
       (common-lisp:cons "GrokPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-patterns))
      (common-lisp:list
       (common-lisp:cons "CustomPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input grok-classifier))
   common-lisp:nil))
(common-lisp:deftype grok-pattern () 'common-lisp:string)
(common-lisp:deftype hash-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass hudi-target common-lisp:nil
                       ((paths :initarg :paths :initform common-lisp:nil :type
                         (common-lisp:or path-list common-lisp:null) :accessor
                         struct-shape-hudi-target-paths :shape "PathList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor struct-shape-hudi-target-connection-name
                         :shape "ConnectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclusions :initarg :exclusions :initform
                         common-lisp:nil :type
                         (common-lisp:or path-list common-lisp:null) :accessor
                         struct-shape-hudi-target-exclusions :shape "PathList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (maximum-traversal-depth :initarg
                         :maximum-traversal-depth :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-hudi-target-maximum-traversal-depth
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-hudi-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'hudi-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'hudi-target 'make-hudi-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hudi-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hudi-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-traversal-depth))
      (common-lisp:list
       (common-lisp:cons "MaximumTraversalDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hudi-target))
   common-lisp:nil))
(common-lisp:deftype hudi-target-compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype hudi-target-list ()
   '(trivial-types:proper-list hudi-target))
 (common-lisp:defun make-hudi-target-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hudi-target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype iamrole-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass iceberg-input common-lisp:nil
                       ((metadata-operation :initarg :metadata-operation
                         :initform
                         (common-lisp:error ":metadata-operation is required")
                         :type
                         (common-lisp:or metadata-operation common-lisp:null)
                         :accessor
                         struct-shape-iceberg-input-metadata-operation :shape
                         "MetadataOperation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version-string common-lisp:null)
                         :accessor struct-shape-iceberg-input-version :shape
                         "VersionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iceberg-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iceberg-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'iceberg-input 'make-iceberg-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iceberg-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iceberg-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-operation))
      (common-lisp:list
       (common-lisp:cons "MetadataOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iceberg-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass iceberg-target common-lisp:nil
                       ((paths :initarg :paths :initform common-lisp:nil :type
                         (common-lisp:or path-list common-lisp:null) :accessor
                         struct-shape-iceberg-target-paths :shape "PathList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor struct-shape-iceberg-target-connection-name
                         :shape "ConnectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclusions :initarg :exclusions :initform
                         common-lisp:nil :type
                         (common-lisp:or path-list common-lisp:null) :accessor
                         struct-shape-iceberg-target-exclusions :shape
                         "PathList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (maximum-traversal-depth :initarg
                         :maximum-traversal-depth :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-iceberg-target-maximum-traversal-depth
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iceberg-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iceberg-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'iceberg-target 'make-iceberg-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iceberg-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iceberg-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-traversal-depth))
      (common-lisp:list
       (common-lisp:cons "MaximumTraversalDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iceberg-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype iceberg-target-list ()
   '(trivial-types:proper-list iceberg-target))
 (common-lisp:defun make-iceberg-target-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list iceberg-target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition idempotent-parameter-mismatch-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       idempotent-parameter-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'idempotent-parameter-mismatch-exception
                    'idempotent-parameter-mismatch-exception-message)))
(common-lisp:deftype idle-timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition illegal-blueprint-state-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       illegal-blueprint-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'illegal-blueprint-state-exception
                    'illegal-blueprint-state-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition illegal-session-state-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       illegal-session-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'illegal-session-state-exception
                    'illegal-session-state-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition illegal-workflow-state-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       illegal-workflow-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'illegal-workflow-state-exception
                    'illegal-workflow-state-exception-message)))
(common-lisp:progn
 (common-lisp:defclass import-catalog-to-glue-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-import-catalog-to-glue-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-catalog-to-glue-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-catalog-to-glue-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-catalog-to-glue-request
                    'make-import-catalog-to-glue-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-catalog-to-glue-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-catalog-to-glue-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-catalog-to-glue-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-catalog-to-glue-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-catalog-to-glue-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-catalog-to-glue-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-catalog-to-glue-response
                    'make-import-catalog-to-glue-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-catalog-to-glue-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-catalog-to-glue-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-catalog-to-glue-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-labels-task-run-properties common-lisp:nil
                       ((input-s3path :initarg :input-s3path :initform
                         common-lisp:nil :type
                         (common-lisp:or uri-string common-lisp:null) :accessor
                         struct-shape-import-labels-task-run-properties-input-s3path
                         :shape "UriString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replace :initarg :replace :initform common-lisp:nil
                         :type
                         (common-lisp:or replace-boolean common-lisp:null)
                         :accessor
                         struct-shape-import-labels-task-run-properties-replace
                         :shape "ReplaceBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-labels-task-run-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-labels-task-run-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-labels-task-run-properties
                    'make-import-labels-task-run-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-labels-task-run-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-labels-task-run-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3path))
      (common-lisp:list
       (common-lisp:cons "InputS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace))
      (common-lisp:list
       (common-lisp:cons "Replace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-labels-task-run-properties))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-flag () 'common-lisp:integer)
(common-lisp:deftype integer-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)
      (from-federation-source :initarg :from-federation-source :initform
       common-lisp:nil :reader
       invalid-input-exception-from-federation-source)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message
                    'invalid-input-exception-from-federation-source)))
(common-lisp:progn
 (common-lisp:define-condition invalid-state-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-state-exception 'invalid-state-exception-message)))
(common-lisp:deftype is-version-valid () 'common-lisp:boolean)
(common-lisp:deftype iso8601date-time () 'common-lisp:string)
(common-lisp:deftype jdbcconnection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass jdbcconnector-options common-lisp:nil
                       ((filter-predicate :initarg :filter-predicate :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-options-filter-predicate
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (partition-column :initarg :partition-column :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-options-partition-column
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lower-bound :initarg :lower-bound :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-long
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-options-lower-bound :shape
                         "BoxedNonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upper-bound :initarg :upper-bound :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-long
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-options-upper-bound :shape
                         "BoxedNonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (num-partitions :initarg :num-partitions :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-long
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-options-num-partitions
                         :shape "BoxedNonNegativeLong" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-bookmark-keys :initarg :job-bookmark-keys
                         :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-options-job-bookmark-keys
                         :shape "EnclosedInStringProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (job-bookmark-keys-sort-order :initarg
                         :job-bookmark-keys-sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-options-job-bookmark-keys-sort-order
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (data-type-mapping :initarg :data-type-mapping
                         :initform common-lisp:nil :type
                         (common-lisp:or jdbcdata-type-mapping
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-options-data-type-mapping
                         :shape "JDBCDataTypeMapping" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-jdbcconnector-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'jdbcconnector-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'jdbcconnector-options 'make-jdbcconnector-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          jdbcconnector-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          jdbcconnector-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-predicate))
      (common-lisp:list
       (common-lisp:cons "FilterPredicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-column))
      (common-lisp:list
       (common-lisp:cons "PartitionColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lower-bound))
      (common-lisp:list
       (common-lisp:cons "LowerBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upper-bound))
      (common-lisp:list
       (common-lisp:cons "UpperBound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-partitions))
      (common-lisp:list
       (common-lisp:cons "NumPartitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-bookmark-keys))
      (common-lisp:list
       (common-lisp:cons "JobBookmarkKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-bookmark-keys-sort-order))
      (common-lisp:list
       (common-lisp:cons "JobBookmarkKeysSortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-mapping))
      (common-lisp:list
       (common-lisp:cons "DataTypeMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          jdbcconnector-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass jdbcconnector-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-jdbcconnector-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         (common-lisp:error ":connection-name is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-source-connection-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connector-name :initarg :connector-name :initform
                         (common-lisp:error ":connector-name is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-source-connector-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-type :initarg :connection-type :initform
                         (common-lisp:error ":connection-type is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-source-connection-type
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or jdbcconnector-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-source-additional-options
                         :shape "JDBCConnectorOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-table :initarg :connection-table :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property-with-quote
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-source-connection-table
                         :shape "EnclosedInStringPropertyWithQuote" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (query :initarg :query :initform common-lisp:nil :type
                         (common-lisp:or sql-query common-lisp:null) :accessor
                         struct-shape-jdbcconnector-source-query :shape
                         "SqlQuery" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-source-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-jdbcconnector-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'jdbcconnector-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'jdbcconnector-source 'make-jdbcconnector-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jdbcconnector-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jdbcconnector-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "ConnectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-table))
      (common-lisp:list
       (common-lisp:cons "ConnectionTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query))
      (common-lisp:list
       (common-lisp:cons "Query"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jdbcconnector-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass jdbcconnector-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-jdbcconnector-target-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-jdbcconnector-target-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         (common-lisp:error ":connection-name is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-target-connection-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-table :initarg :connection-table :initform
                         (common-lisp:error ":connection-table is required")
                         :type
                         (common-lisp:or enclosed-in-string-property-with-quote
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-target-connection-table
                         :shape "EnclosedInStringPropertyWithQuote" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connector-name :initarg :connector-name :initform
                         (common-lisp:error ":connector-name is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-target-connector-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-type :initarg :connection-type :initform
                         (common-lisp:error ":connection-type is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-target-connection-type
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or additional-options common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-target-additional-options
                         :shape "AdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor
                         struct-shape-jdbcconnector-target-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-jdbcconnector-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'jdbcconnector-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'jdbcconnector-target 'make-jdbcconnector-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jdbcconnector-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jdbcconnector-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-table))
      (common-lisp:list
       (common-lisp:cons "ConnectionTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "ConnectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jdbcconnector-target))
   common-lisp:nil))
(common-lisp:deftype jdbcdata-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype jdbcdata-type-mapping () 'common-lisp:hash-table)
 (common-lisp:defun make-jdbcdata-type-mapping
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype jdbc-metadata-entry () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass jdbc-target common-lisp:nil
                       ((connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor struct-shape-jdbc-target-connection-name
                         :shape "ConnectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or path common-lisp:null) :accessor
                         struct-shape-jdbc-target-path :shape "Path" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (exclusions :initarg :exclusions :initform
                         common-lisp:nil :type
                         (common-lisp:or path-list common-lisp:null) :accessor
                         struct-shape-jdbc-target-exclusions :shape "PathList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-additional-metadata :initarg
                         :enable-additional-metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or enable-additional-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-jdbc-target-enable-additional-metadata
                         :shape "EnableAdditionalMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-jdbc-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'jdbc-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'jdbc-target 'make-jdbc-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input jdbc-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input jdbc-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-additional-metadata))
      (common-lisp:list
       (common-lisp:cons "EnableAdditionalMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input jdbc-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype jdbc-target-list ()
   '(trivial-types:proper-list jdbc-target))
 (common-lisp:defun make-jdbc-target-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list jdbc-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-job-name :shape "NameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-job-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-uri :initarg :log-uri :initform common-lisp:nil
                         :type (common-lisp:or uri-string common-lisp:null)
                         :accessor struct-shape-job-log-uri :shape "UriString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role-string common-lisp:null)
                         :accessor struct-shape-job-role :shape "RoleString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-on :initarg :created-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-job-created-on :shape
                         "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-on :initarg :last-modified-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-job-last-modified-on :shape
                         "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-property :initarg :execution-property
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-property common-lisp:null)
                         :accessor struct-shape-job-execution-property :shape
                         "ExecutionProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (command :initarg :command :initform common-lisp:nil
                         :type (common-lisp:or job-command common-lisp:null)
                         :accessor struct-shape-job-command :shape "JobCommand"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-arguments :initarg :default-arguments
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-map common-lisp:null)
                         :accessor struct-shape-job-default-arguments :shape
                         "GenericMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (non-overridable-arguments :initarg
                         :non-overridable-arguments :initform common-lisp:nil
                         :type (common-lisp:or generic-map common-lisp:null)
                         :accessor struct-shape-job-non-overridable-arguments
                         :shape "GenericMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connections :initarg :connections :initform
                         common-lisp:nil :type
                         (common-lisp:or connections-list common-lisp:null)
                         :accessor struct-shape-job-connections :shape
                         "ConnectionsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-retries :initarg :max-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or max-retries common-lisp:null)
                         :accessor struct-shape-job-max-retries :shape
                         "MaxRetries" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allocated-capacity :initarg :allocated-capacity
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor struct-shape-job-allocated-capacity :shape
                         "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor struct-shape-job-timeout :shape "Timeout"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-job-max-capacity :shape
                         "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-type common-lisp:null)
                         :accessor struct-shape-job-worker-type :shape
                         "WorkerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor struct-shape-job-number-of-workers :shape
                         "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-job-security-configuration
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-property :initarg :notification-property
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-property
                                         common-lisp:null)
                         :accessor struct-shape-job-notification-property
                         :shape "NotificationProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (glue-version :initarg :glue-version :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-version-string common-lisp:null)
                         :accessor struct-shape-job-glue-version :shape
                         "GlueVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-gen-configuration-nodes :initarg
                         :code-gen-configuration-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or code-gen-configuration-nodes
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-code-gen-configuration-nodes :shape
                         "CodeGenConfigurationNodes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-class :initarg :execution-class :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-class common-lisp:null)
                         :accessor struct-shape-job-execution-class :shape
                         "ExecutionClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-control-details :initarg
                         :source-control-details :initform common-lisp:nil
                         :type
                         (common-lisp:or source-control-details
                                         common-lisp:null)
                         :accessor struct-shape-job-source-control-details
                         :shape "SourceControlDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-property))
      (common-lisp:list
       (common-lisp:cons "ExecutionProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-arguments))
      (common-lisp:list
       (common-lisp:cons "DefaultArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-overridable-arguments))
      (common-lisp:list
       (common-lisp:cons "NonOverridableArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "MaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-capacity))
      (common-lisp:list
       (common-lisp:cons "AllocatedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-property))
      (common-lisp:list
       (common-lisp:cons "NotificationProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-gen-configuration-nodes))
      (common-lisp:list
       (common-lisp:cons "CodeGenConfigurationNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-class))
      (common-lisp:list
       (common-lisp:cons "ExecutionClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-control-details))
      (common-lisp:list
       (common-lisp:cons "SourceControlDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-bookmark-entry common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or job-name common-lisp:null)
                         :accessor struct-shape-job-bookmark-entry-job-name
                         :shape "JobName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or integer-value common-lisp:null)
                         :accessor struct-shape-job-bookmark-entry-version
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (run :initarg :run :initform common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor struct-shape-job-bookmark-entry-run :shape
                         "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attempt :initarg :attempt :initform common-lisp:nil
                         :type (common-lisp:or integer-value common-lisp:null)
                         :accessor struct-shape-job-bookmark-entry-attempt
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (previous-run-id :initarg :previous-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or run-id common-lisp:null) :accessor
                         struct-shape-job-bookmark-entry-previous-run-id :shape
                         "RunId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or run-id common-lisp:null)
                         :accessor struct-shape-job-bookmark-entry-run-id
                         :shape "RunId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-bookmark :initarg :job-bookmark :initform
                         common-lisp:nil :type
                         (common-lisp:or json-value common-lisp:null) :accessor
                         struct-shape-job-bookmark-entry-job-bookmark :shape
                         "JsonValue" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-bookmark-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-bookmark-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-bookmark-entry 'make-job-bookmark-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-bookmark-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-bookmark-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run))
      (common-lisp:list
       (common-lisp:cons "Run"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attempt))
      (common-lisp:list
       (common-lisp:cons "Attempt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-run-id))
      (common-lisp:list
       (common-lisp:cons "PreviousRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-bookmark))
      (common-lisp:list
       (common-lisp:cons "JobBookmark"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-bookmark-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-bookmarks-encryption common-lisp:nil
                       ((job-bookmarks-encryption-mode :initarg
                         :job-bookmarks-encryption-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or job-bookmarks-encryption-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-bookmarks-encryption-job-bookmarks-encryption-mode
                         :shape "JobBookmarksEncryptionMode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor
                         struct-shape-job-bookmarks-encryption-kms-key-arn
                         :shape "KmsKeyArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-bookmarks-encryption
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-bookmarks-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-bookmarks-encryption 'make-job-bookmarks-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-bookmarks-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-bookmarks-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-bookmarks-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "JobBookmarksEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-bookmarks-encryption))
   common-lisp:nil))
(common-lisp:deftype job-bookmarks-encryption-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-command common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-job-command-name :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (script-location :initarg :script-location :initform
                         common-lisp:nil :type
                         (common-lisp:or script-location-string
                                         common-lisp:null)
                         :accessor struct-shape-job-command-script-location
                         :shape "ScriptLocationString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (python-version :initarg :python-version :initform
                         common-lisp:nil :type
                         (common-lisp:or python-version-string
                                         common-lisp:null)
                         :accessor struct-shape-job-command-python-version
                         :shape "PythonVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (runtime :initarg :runtime :initform common-lisp:nil
                         :type
                         (common-lisp:or runtime-name-string common-lisp:null)
                         :accessor struct-shape-job-command-runtime :shape
                         "RuntimeNameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-command
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-command
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-command 'make-job-command))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-command))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-command))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'script-location))
      (common-lisp:list
       (common-lisp:cons "ScriptLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'python-version))
      (common-lisp:list
       (common-lisp:cons "PythonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "Runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-command))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-list () '(trivial-types:proper-list job))
 (common-lisp:defun make-job-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-job-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass job-node-details common-lisp:nil
                       ((job-runs :initarg :job-runs :initform common-lisp:nil
                         :type (common-lisp:or job-run-list common-lisp:null)
                         :accessor struct-shape-job-node-details-job-runs
                         :shape "JobRunList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-node-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-node-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'job-node-details 'make-job-node-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-node-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-node-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-runs))
      (common-lisp:list
       (common-lisp:cons "JobRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-node-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-run common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-job-run-id :shape "IdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (attempt :initarg :attempt :initform common-lisp:nil
                         :type (common-lisp:or attempt-count common-lisp:null)
                         :accessor struct-shape-job-run-attempt :shape
                         "AttemptCount" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (previous-run-id :initarg :previous-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-job-run-previous-run-id :shape "IdString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trigger-name :initarg :trigger-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-job-run-trigger-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-job-run-job-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-job-run-started-on :shape
                         "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-on :initarg :last-modified-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-job-run-last-modified-on :shape
                         "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completed-on :initarg :completed-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-job-run-completed-on :shape
                         "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-run-state :initarg :job-run-state :initform
                         common-lisp:nil :type
                         (common-lisp:or job-run-state common-lisp:null)
                         :accessor struct-shape-job-run-job-run-state :shape
                         "JobRunState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arguments :initarg :arguments :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-map common-lisp:null)
                         :accessor struct-shape-job-run-arguments :shape
                         "GenericMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-string common-lisp:null)
                         :accessor struct-shape-job-run-error-message :shape
                         "ErrorString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predecessor-runs :initarg :predecessor-runs :initform
                         common-lisp:nil :type
                         (common-lisp:or predecessor-list common-lisp:null)
                         :accessor struct-shape-job-run-predecessor-runs :shape
                         "PredecessorList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-capacity :initarg :allocated-capacity
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor struct-shape-job-run-allocated-capacity
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-time :initarg :execution-time :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-time common-lisp:null)
                         :accessor struct-shape-job-run-execution-time :shape
                         "ExecutionTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor struct-shape-job-run-timeout :shape
                         "Timeout" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-job-run-max-capacity :shape
                         "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-type common-lisp:null)
                         :accessor struct-shape-job-run-worker-type :shape
                         "WorkerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor struct-shape-job-run-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-job-run-security-configuration
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-job-run-log-group-name :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-property :initarg :notification-property
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-property
                                         common-lisp:null)
                         :accessor struct-shape-job-run-notification-property
                         :shape "NotificationProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (glue-version :initarg :glue-version :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-version-string common-lisp:null)
                         :accessor struct-shape-job-run-glue-version :shape
                         "GlueVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dpuseconds :initarg :dpuseconds :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-job-run-dpuseconds :shape
                         "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-class :initarg :execution-class :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-class common-lisp:null)
                         :accessor struct-shape-job-run-execution-class :shape
                         "ExecutionClass" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-run
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-run
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-run 'make-job-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attempt))
      (common-lisp:list
       (common-lisp:cons "Attempt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-run-id))
      (common-lisp:list
       (common-lisp:cons "PreviousRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-name))
      (common-lisp:list
       (common-lisp:cons "TriggerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-state))
      (common-lisp:list
       (common-lisp:cons "JobRunState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arguments))
      (common-lisp:list
       (common-lisp:cons "Arguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predecessor-runs))
      (common-lisp:list
       (common-lisp:cons "PredecessorRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-capacity))
      (common-lisp:list
       (common-lisp:cons "AllocatedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-property))
      (common-lisp:list
       (common-lisp:cons "NotificationProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dpuseconds))
      (common-lisp:list
       (common-lisp:cons "DPUSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-class))
      (common-lisp:list
       (common-lisp:cons "ExecutionClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-run))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype job-run-list () '(trivial-types:proper-list job-run))
 (common-lisp:defun make-job-run-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-run))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-run-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-update common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-job-update-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-uri :initarg :log-uri :initform common-lisp:nil
                         :type (common-lisp:or uri-string common-lisp:null)
                         :accessor struct-shape-job-update-log-uri :shape
                         "UriString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role-string common-lisp:null)
                         :accessor struct-shape-job-update-role :shape
                         "RoleString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (execution-property :initarg :execution-property
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-property common-lisp:null)
                         :accessor struct-shape-job-update-execution-property
                         :shape "ExecutionProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (command :initarg :command :initform common-lisp:nil
                         :type (common-lisp:or job-command common-lisp:null)
                         :accessor struct-shape-job-update-command :shape
                         "JobCommand" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-arguments :initarg :default-arguments
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-map common-lisp:null)
                         :accessor struct-shape-job-update-default-arguments
                         :shape "GenericMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (non-overridable-arguments :initarg
                         :non-overridable-arguments :initform common-lisp:nil
                         :type (common-lisp:or generic-map common-lisp:null)
                         :accessor
                         struct-shape-job-update-non-overridable-arguments
                         :shape "GenericMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connections :initarg :connections :initform
                         common-lisp:nil :type
                         (common-lisp:or connections-list common-lisp:null)
                         :accessor struct-shape-job-update-connections :shape
                         "ConnectionsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-retries :initarg :max-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or max-retries common-lisp:null)
                         :accessor struct-shape-job-update-max-retries :shape
                         "MaxRetries" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (allocated-capacity :initarg :allocated-capacity
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor struct-shape-job-update-allocated-capacity
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor struct-shape-job-update-timeout :shape
                         "Timeout" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-job-update-max-capacity :shape
                         "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-type common-lisp:null)
                         :accessor struct-shape-job-update-worker-type :shape
                         "WorkerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor struct-shape-job-update-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-job-update-security-configuration :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (notification-property :initarg :notification-property
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-update-notification-property :shape
                         "NotificationProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glue-version :initarg :glue-version :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-version-string common-lisp:null)
                         :accessor struct-shape-job-update-glue-version :shape
                         "GlueVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code-gen-configuration-nodes :initarg
                         :code-gen-configuration-nodes :initform
                         common-lisp:nil :type
                         (common-lisp:or code-gen-configuration-nodes
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-update-code-gen-configuration-nodes
                         :shape "CodeGenConfigurationNodes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-class :initarg :execution-class :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-class common-lisp:null)
                         :accessor struct-shape-job-update-execution-class
                         :shape "ExecutionClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-control-details :initarg
                         :source-control-details :initform common-lisp:nil
                         :type
                         (common-lisp:or source-control-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-job-update-source-control-details :shape
                         "SourceControlDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-update 'make-job-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-uri))
      (common-lisp:list
       (common-lisp:cons "LogUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-property))
      (common-lisp:list
       (common-lisp:cons "ExecutionProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-arguments))
      (common-lisp:list
       (common-lisp:cons "DefaultArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-overridable-arguments))
      (common-lisp:list
       (common-lisp:cons "NonOverridableArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "MaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-capacity))
      (common-lisp:list
       (common-lisp:cons "AllocatedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-property))
      (common-lisp:list
       (common-lisp:cons "NotificationProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-gen-configuration-nodes))
      (common-lisp:list
       (common-lisp:cons "CodeGenConfigurationNodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-class))
      (common-lisp:list
       (common-lisp:cons "ExecutionClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-control-details))
      (common-lisp:list
       (common-lisp:cons "SourceControlDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass join common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-join-name :shape "NodeName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or two-inputs common-lisp:null) :accessor
                         struct-shape-join-inputs :shape "TwoInputs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (join-type :initarg :join-type :initform
                         (common-lisp:error ":join-type is required") :type
                         (common-lisp:or join-type common-lisp:null) :accessor
                         struct-shape-join-join-type :shape "JoinType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (columns :initarg :columns :initform
                         (common-lisp:error ":columns is required") :type
                         (common-lisp:or join-columns common-lisp:null)
                         :accessor struct-shape-join-columns :shape
                         "JoinColumns" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-join (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'join
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'join 'make-join))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input join))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input join))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-type))
      (common-lisp:list
       (common-lisp:cons "JoinType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input join))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass join-column common-lisp:nil
                       ((from :initarg :from :initform
                         (common-lisp:error ":from is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-join-column-from :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (keys :initarg :keys :initform
                         (common-lisp:error ":keys is required") :type
                         (common-lisp:or glue-studio-path-list
                                         common-lisp:null)
                         :accessor struct-shape-join-column-keys :shape
                         "GlueStudioPathList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-join-column
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'join-column
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'join-column 'make-join-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input join-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input join-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input join-column))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype join-columns () '(trivial-types:proper-list join-column))
 (common-lisp:defun make-join-columns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list join-column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype join-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass json-classifier common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-json-classifier-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-json-classifier-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-json-classifier-last-updated :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version-id common-lisp:null)
                         :accessor struct-shape-json-classifier-version :shape
                         "VersionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (json-path :initarg :json-path :initform
                         (common-lisp:error ":json-path is required") :type
                         (common-lisp:or json-path common-lisp:null) :accessor
                         struct-shape-json-classifier-json-path :shape
                         "JsonPath" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-json-classifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'json-classifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'json-classifier 'make-json-classifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input json-classifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input json-classifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-path))
      (common-lisp:list
       (common-lisp:cons "JsonPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input json-classifier))
   common-lisp:nil))
(common-lisp:deftype json-path () 'common-lisp:string)
(common-lisp:deftype json-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kafka-streaming-source-options common-lisp:nil
                       ((bootstrap-servers :initarg :bootstrap-servers
                         :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-bootstrap-servers
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (security-protocol :initarg :security-protocol
                         :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-security-protocol
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-connection-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (topic-name :initarg :topic-name :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-topic-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (assign :initarg :assign :initform common-lisp:nil
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-assign
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subscribe-pattern :initarg :subscribe-pattern
                         :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-subscribe-pattern
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (classification :initarg :classification :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-classification
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (delimiter :initarg :delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-delimiter
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (starting-offsets :initarg :starting-offsets :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-starting-offsets
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ending-offsets :initarg :ending-offsets :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-ending-offsets
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (poll-timeout-ms :initarg :poll-timeout-ms :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-long
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-poll-timeout-ms
                         :shape "BoxedNonNegativeLong" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (num-retries :initarg :num-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-int
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-num-retries
                         :shape "BoxedNonNegativeInt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retry-interval-ms :initarg :retry-interval-ms
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-long
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-retry-interval-ms
                         :shape "BoxedNonNegativeLong" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-offsets-per-trigger :initarg
                         :max-offsets-per-trigger :initform common-lisp:nil
                         :type
                         (common-lisp:or boxed-non-negative-long
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-max-offsets-per-trigger
                         :shape "BoxedNonNegativeLong" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (min-partitions :initarg :min-partitions :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-int
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-min-partitions
                         :shape "BoxedNonNegativeInt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-headers :initarg :include-headers :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-include-headers
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (add-record-timestamp :initarg :add-record-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-add-record-timestamp
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (emit-consumer-lag-metrics :initarg
                         :emit-consumer-lag-metrics :initform common-lisp:nil
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-emit-consumer-lag-metrics
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (starting-timestamp :initarg :starting-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor
                         struct-shape-kafka-streaming-source-options-starting-timestamp
                         :shape "Iso8601DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kafka-streaming-source-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kafka-streaming-source-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kafka-streaming-source-options
                    'make-kafka-streaming-source-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kafka-streaming-source-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kafka-streaming-source-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bootstrap-servers))
      (common-lisp:list
       (common-lisp:cons "BootstrapServers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-protocol))
      (common-lisp:list
       (common-lisp:cons "SecurityProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-name))
      (common-lisp:list
       (common-lisp:cons "TopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assign))
      (common-lisp:list
       (common-lisp:cons "Assign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribe-pattern))
      (common-lisp:list
       (common-lisp:cons "SubscribePattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-offsets))
      (common-lisp:list
       (common-lisp:cons "StartingOffsets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ending-offsets))
      (common-lisp:list
       (common-lisp:cons "EndingOffsets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'poll-timeout-ms))
      (common-lisp:list
       (common-lisp:cons "PollTimeoutMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-interval-ms))
      (common-lisp:list
       (common-lisp:cons "RetryIntervalMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-offsets-per-trigger))
      (common-lisp:list
       (common-lisp:cons "MaxOffsetsPerTrigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-partitions))
      (common-lisp:list
       (common-lisp:cons "MinPartitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-headers))
      (common-lisp:list
       (common-lisp:cons "IncludeHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-record-timestamp))
      (common-lisp:list
       (common-lisp:cons "AddRecordTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'emit-consumer-lag-metrics))
      (common-lisp:list
       (common-lisp:cons "EmitConsumerLagMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartingTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kafka-streaming-source-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype key-list () '(trivial-types:proper-list name-string))
 (common-lisp:defun make-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass key-schema-element common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-key-schema-element-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or column-type-string common-lisp:null)
                         :accessor struct-shape-key-schema-element-type :shape
                         "ColumnTypeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-key-schema-element
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'key-schema-element
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'key-schema-element 'make-key-schema-element))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-schema-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-schema-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-schema-element))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype key-schema-element-list ()
   '(trivial-types:proper-list key-schema-element))
 (common-lisp:defun make-key-schema-element-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-schema-element))
   aws-sdk/generator/shape::members))
(common-lisp:deftype key-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kinesis-streaming-source-options common-lisp:nil
                       ((endpoint-url :initarg :endpoint-url :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-endpoint-url
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stream-name :initarg :stream-name :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-stream-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (classification :initarg :classification :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-classification
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (delimiter :initarg :delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-delimiter
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (starting-position :initarg :starting-position
                         :initform common-lisp:nil :type
                         (common-lisp:or starting-position common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-starting-position
                         :shape "StartingPosition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-fetch-time-in-ms :initarg :max-fetch-time-in-ms
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-long
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-max-fetch-time-in-ms
                         :shape "BoxedNonNegativeLong" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-fetch-records-per-shard :initarg
                         :max-fetch-records-per-shard :initform common-lisp:nil
                         :type
                         (common-lisp:or boxed-non-negative-long
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-max-fetch-records-per-shard
                         :shape "BoxedNonNegativeLong" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-record-per-read :initarg :max-record-per-read
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-long
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-max-record-per-read
                         :shape "BoxedNonNegativeLong" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (add-idle-time-between-reads :initarg
                         :add-idle-time-between-reads :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-add-idle-time-between-reads
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idle-time-between-reads-in-ms :initarg
                         :idle-time-between-reads-in-ms :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-long
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-idle-time-between-reads-in-ms
                         :shape "BoxedNonNegativeLong" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (describe-shard-interval :initarg
                         :describe-shard-interval :initform common-lisp:nil
                         :type
                         (common-lisp:or boxed-non-negative-long
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-describe-shard-interval
                         :shape "BoxedNonNegativeLong" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (num-retries :initarg :num-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-int
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-num-retries
                         :shape "BoxedNonNegativeInt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retry-interval-ms :initarg :retry-interval-ms
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-long
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-retry-interval-ms
                         :shape "BoxedNonNegativeLong" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-retry-interval-ms :initarg :max-retry-interval-ms
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-long
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-max-retry-interval-ms
                         :shape "BoxedNonNegativeLong" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (avoid-empty-batches :initarg :avoid-empty-batches
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-avoid-empty-batches
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-arn :initarg :stream-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-stream-arn
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-role-arn
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-session-name :initarg :role-session-name
                         :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-role-session-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (add-record-timestamp :initarg :add-record-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-add-record-timestamp
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (emit-consumer-lag-metrics :initarg
                         :emit-consumer-lag-metrics :initform common-lisp:nil
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-emit-consumer-lag-metrics
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (starting-timestamp :initarg :starting-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or iso8601date-time common-lisp:null)
                         :accessor
                         struct-shape-kinesis-streaming-source-options-starting-timestamp
                         :shape "Iso8601DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kinesis-streaming-source-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'kinesis-streaming-source-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kinesis-streaming-source-options
                    'make-kinesis-streaming-source-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streaming-source-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streaming-source-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-url))
      (common-lisp:list
       (common-lisp:cons "EndpointUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-position))
      (common-lisp:list
       (common-lisp:cons "StartingPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-fetch-time-in-ms))
      (common-lisp:list
       (common-lisp:cons "MaxFetchTimeInMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-fetch-records-per-shard))
      (common-lisp:list
       (common-lisp:cons "MaxFetchRecordsPerShard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-record-per-read))
      (common-lisp:list
       (common-lisp:cons "MaxRecordPerRead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-idle-time-between-reads))
      (common-lisp:list
       (common-lisp:cons "AddIdleTimeBetweenReads"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'idle-time-between-reads-in-ms))
      (common-lisp:list
       (common-lisp:cons "IdleTimeBetweenReadsInMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'describe-shard-interval))
      (common-lisp:list
       (common-lisp:cons "DescribeShardInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-interval-ms))
      (common-lisp:list
       (common-lisp:cons "RetryIntervalMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-retry-interval-ms))
      (common-lisp:list
       (common-lisp:cons "MaxRetryIntervalMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avoid-empty-batches))
      (common-lisp:list
       (common-lisp:cons "AvoidEmptyBatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-session-name))
      (common-lisp:list
       (common-lisp:cons "RoleSessionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'add-record-timestamp))
      (common-lisp:list
       (common-lisp:cons "AddRecordTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'emit-consumer-lag-metrics))
      (common-lisp:list
       (common-lisp:cons "EmitConsumerLagMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starting-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartingTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-streaming-source-options))
   common-lisp:nil))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:deftype label-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass labeling-set-generation-task-run-properties
                       common-lisp:nil
                       ((output-s3path :initarg :output-s3path :initform
                         common-lisp:nil :type
                         (common-lisp:or uri-string common-lisp:null) :accessor
                         struct-shape-labeling-set-generation-task-run-properties-output-s3path
                         :shape "UriString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-labeling-set-generation-task-run-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'labeling-set-generation-task-run-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'labeling-set-generation-task-run-properties
                    'make-labeling-set-generation-task-run-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          labeling-set-generation-task-run-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          labeling-set-generation-task-run-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3path))
      (common-lisp:list
       (common-lisp:cons "OutputS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          labeling-set-generation-task-run-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lake-formation-configuration common-lisp:nil
                       ((use-lake-formation-credentials :initarg
                         :use-lake-formation-credentials :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-lake-formation-configuration-use-lake-formation-credentials
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-lake-formation-configuration-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lake-formation-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lake-formation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lake-formation-configuration
                    'make-lake-formation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-lake-formation-credentials))
      (common-lisp:list
       (common-lisp:cons "UseLakeFormationCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lake-formation-configuration))
   common-lisp:nil))
(common-lisp:deftype language () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass last-active-definition common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or generic512char-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-last-active-definition-description :shape
                         "Generic512CharString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-on :initarg :last-modified-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor
                         struct-shape-last-active-definition-last-modified-on
                         :shape "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-spec :initarg :parameter-spec :initform
                         common-lisp:nil :type
                         (common-lisp:or blueprint-parameter-spec
                                         common-lisp:null)
                         :accessor
                         struct-shape-last-active-definition-parameter-spec
                         :shape "BlueprintParameterSpec" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (blueprint-location :initarg :blueprint-location
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-last-active-definition-blueprint-location
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (blueprint-service-location :initarg
                         :blueprint-service-location :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-last-active-definition-blueprint-service-location
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-last-active-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'last-active-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'last-active-definition 'make-last-active-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          last-active-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          last-active-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-spec))
      (common-lisp:list
       (common-lisp:cons "ParameterSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-location))
      (common-lisp:list
       (common-lisp:cons "BlueprintLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blueprint-service-location))
      (common-lisp:list
       (common-lisp:cons "BlueprintServiceLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          last-active-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass last-crawl-info common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or last-crawl-status common-lisp:null)
                         :accessor struct-shape-last-crawl-info-status :shape
                         "LastCrawlStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-last-crawl-info-error-message
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group :initarg :log-group :initform
                         common-lisp:nil :type
                         (common-lisp:or log-group common-lisp:null) :accessor
                         struct-shape-last-crawl-info-log-group :shape
                         "LogGroup" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (log-stream :initarg :log-stream :initform
                         common-lisp:nil :type
                         (common-lisp:or log-stream common-lisp:null) :accessor
                         struct-shape-last-crawl-info-log-stream :shape
                         "LogStream" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message-prefix :initarg :message-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or message-prefix common-lisp:null)
                         :accessor struct-shape-last-crawl-info-message-prefix
                         :shape "MessagePrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-last-crawl-info-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-last-crawl-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'last-crawl-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'last-crawl-info 'make-last-crawl-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input last-crawl-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input last-crawl-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "LogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream))
      (common-lisp:list
       (common-lisp:cons "LogStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-prefix))
      (common-lisp:list
       (common-lisp:cons "MessagePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input last-crawl-info))
   common-lisp:nil))
(common-lisp:deftype last-crawl-status () 'common-lisp:string)
(common-lisp:deftype latest-schema-version-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype limited-path-list ()
   '(trivial-types:proper-list limited-string-list))
 (common-lisp:defun make-limited-path-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list limited-string-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype limited-string-list ()
   '(trivial-types:proper-list generic-limited-string))
 (common-lisp:defun make-limited-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-limited-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lineage-configuration common-lisp:nil
                       ((crawler-lineage-settings :initarg
                         :crawler-lineage-settings :initform common-lisp:nil
                         :type
                         (common-lisp:or crawler-lineage-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-lineage-configuration-crawler-lineage-settings
                         :shape "CrawlerLineageSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lineage-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lineage-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lineage-configuration 'make-lineage-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lineage-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lineage-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawler-lineage-settings))
      (common-lisp:list
       (common-lisp:cons "CrawlerLineageSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lineage-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-blueprints-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-blueprints-request-next-token :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-page-size25
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-blueprints-request-max-results
                         :shape "OrchestrationPageSize25" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-list-blueprints-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-blueprints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-blueprints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-blueprints-request 'make-list-blueprints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-blueprints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-blueprints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-blueprints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-blueprints-response common-lisp:nil
                       ((blueprints :initarg :blueprints :initform
                         common-lisp:nil :type
                         (common-lisp:or blueprint-names common-lisp:null)
                         :accessor
                         struct-shape-list-blueprints-response-blueprints
                         :shape "BlueprintNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-blueprints-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-blueprints-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-blueprints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-blueprints-response 'make-list-blueprints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-blueprints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-blueprints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprints))
      (common-lisp:list
       (common-lisp:cons "Blueprints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-blueprints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-column-statistics-task-runs-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-column-statistics-task-runs-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-column-statistics-task-runs-request-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-column-statistics-task-runs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-column-statistics-task-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-column-statistics-task-runs-request
                    'make-list-column-statistics-task-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-column-statistics-task-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-column-statistics-task-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-column-statistics-task-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-column-statistics-task-runs-response
                       common-lisp:nil
                       ((column-statistics-task-run-ids :initarg
                         :column-statistics-task-run-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or column-statistics-task-run-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-column-statistics-task-runs-response-column-statistics-task-run-ids
                         :shape "ColumnStatisticsTaskRunIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-column-statistics-task-runs-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-column-statistics-task-runs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-column-statistics-task-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-column-statistics-task-runs-response
                    'make-list-column-statistics-task-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-column-statistics-task-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-column-statistics-task-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-statistics-task-run-ids))
      (common-lisp:list
       (common-lisp:cons "ColumnStatisticsTaskRunIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-column-statistics-task-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-crawlers-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-crawlers-request-max-results :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-crawlers-request-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-list-crawlers-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-crawlers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-crawlers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-crawlers-request 'make-list-crawlers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-crawlers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-crawlers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-crawlers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-crawlers-response common-lisp:nil
                       ((crawler-names :initarg :crawler-names :initform
                         common-lisp:nil :type
                         (common-lisp:or crawler-name-list common-lisp:null)
                         :accessor
                         struct-shape-list-crawlers-response-crawler-names
                         :shape "CrawlerNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-crawlers-response-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-crawlers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-crawlers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-crawlers-response 'make-list-crawlers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-crawlers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-crawlers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-names))
      (common-lisp:list
       (common-lisp:cons "CrawlerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-crawlers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-crawls-request common-lisp:nil
                       ((crawler-name :initarg :crawler-name :initform
                         (common-lisp:error ":crawler-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-list-crawls-request-crawler-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-crawls-request-max-results :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or crawls-filter-list common-lisp:null)
                         :accessor struct-shape-list-crawls-request-filters
                         :shape "CrawlsFilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-crawls-request-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-crawls-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-crawls-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-crawls-request 'make-list-crawls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-crawls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-crawls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name))
      (common-lisp:list
       (common-lisp:cons "CrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-crawls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-crawls-response common-lisp:nil
                       ((crawls :initarg :crawls :initform common-lisp:nil
                         :type
                         (common-lisp:or crawler-history-list common-lisp:null)
                         :accessor struct-shape-list-crawls-response-crawls
                         :shape "CrawlerHistoryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-crawls-response-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-crawls-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-crawls-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-crawls-response 'make-list-crawls-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-crawls-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-crawls-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawls))
      (common-lisp:list
       (common-lisp:cons "Crawls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-crawls-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-entity-types-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-custom-entity-types-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-custom-entity-types-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-list-custom-entity-types-request-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-entity-types-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-entity-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-entity-types-request
                    'make-list-custom-entity-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-entity-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-entity-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-entity-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-custom-entity-types-response common-lisp:nil
                       ((custom-entity-types :initarg :custom-entity-types
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-entity-types common-lisp:null)
                         :accessor
                         struct-shape-list-custom-entity-types-response-custom-entity-types
                         :shape "CustomEntityTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-custom-entity-types-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-custom-entity-types-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-custom-entity-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-custom-entity-types-response
                    'make-list-custom-entity-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-entity-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-entity-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-entity-types))
      (common-lisp:list
       (common-lisp:cons "CustomEntityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-custom-entity-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-quality-results-request common-lisp:nil
                       ((filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or data-quality-result-filter-criteria
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-results-request-filter
                         :shape "DataQualityResultFilterCriteria" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-results-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-data-quality-results-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-quality-results-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-quality-results-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-results-request
                    'make-list-data-quality-results-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-results-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-results-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-results-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-quality-results-response common-lisp:nil
                       ((results :initarg :results :initform
                         (common-lisp:error ":results is required") :type
                         (common-lisp:or data-quality-result-description-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-results-response-results
                         :shape "DataQualityResultDescriptionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-results-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-quality-results-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-quality-results-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-results-response
                    'make-list-data-quality-results-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-results-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-results-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-results-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-quality-rule-recommendation-runs-request
                       common-lisp:nil
                       ((filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          data-quality-rule-recommendation-run-filter
                          common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-rule-recommendation-runs-request-filter
                         :shape "DataQualityRuleRecommendationRunFilter"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-rule-recommendation-runs-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-data-quality-rule-recommendation-runs-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-quality-rule-recommendation-runs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-quality-rule-recommendation-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-rule-recommendation-runs-request
                    'make-list-data-quality-rule-recommendation-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rule-recommendation-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rule-recommendation-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rule-recommendation-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-quality-rule-recommendation-runs-response
                       common-lisp:nil
                       ((runs :initarg :runs :initform common-lisp:nil :type
                         (common-lisp:or
                          data-quality-rule-recommendation-run-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-rule-recommendation-runs-response-runs
                         :shape "DataQualityRuleRecommendationRunList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-rule-recommendation-runs-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-quality-rule-recommendation-runs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-quality-rule-recommendation-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-rule-recommendation-runs-response
                    'make-list-data-quality-rule-recommendation-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rule-recommendation-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rule-recommendation-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runs))
      (common-lisp:list
       (common-lisp:cons "Runs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rule-recommendation-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-quality-ruleset-evaluation-runs-request
                       common-lisp:nil
                       ((filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          data-quality-ruleset-evaluation-run-filter
                          common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-ruleset-evaluation-runs-request-filter
                         :shape "DataQualityRulesetEvaluationRunFilter"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-ruleset-evaluation-runs-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-data-quality-ruleset-evaluation-runs-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-quality-ruleset-evaluation-runs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-quality-ruleset-evaluation-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-ruleset-evaluation-runs-request
                    'make-list-data-quality-ruleset-evaluation-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-ruleset-evaluation-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-ruleset-evaluation-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-ruleset-evaluation-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-quality-ruleset-evaluation-runs-response
                       common-lisp:nil
                       ((runs :initarg :runs :initform common-lisp:nil :type
                         (common-lisp:or
                          data-quality-ruleset-evaluation-run-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-ruleset-evaluation-runs-response-runs
                         :shape "DataQualityRulesetEvaluationRunList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-ruleset-evaluation-runs-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-quality-ruleset-evaluation-runs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-quality-ruleset-evaluation-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-ruleset-evaluation-runs-response
                    'make-list-data-quality-ruleset-evaluation-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-ruleset-evaluation-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-ruleset-evaluation-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runs))
      (common-lisp:list
       (common-lisp:cons "Runs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-ruleset-evaluation-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-quality-rulesets-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-rulesets-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-data-quality-rulesets-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or data-quality-ruleset-filter-criteria
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-rulesets-request-filter
                         :shape "DataQualityRulesetFilterCriteria" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-list-data-quality-rulesets-request-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-quality-rulesets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-quality-rulesets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-rulesets-request
                    'make-list-data-quality-rulesets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rulesets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rulesets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rulesets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-quality-rulesets-response common-lisp:nil
                       ((rulesets :initarg :rulesets :initform common-lisp:nil
                         :type
                         (common-lisp:or data-quality-ruleset-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-rulesets-response-rulesets
                         :shape "DataQualityRulesetList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-quality-rulesets-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-quality-rulesets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-data-quality-rulesets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-rulesets-response
                    'make-list-data-quality-rulesets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rulesets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rulesets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rulesets))
      (common-lisp:list
       (common-lisp:cons "Rulesets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-rulesets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dev-endpoints-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-dev-endpoints-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-dev-endpoints-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-list-dev-endpoints-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dev-endpoints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-dev-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dev-endpoints-request
                    'make-list-dev-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-dev-endpoints-response common-lisp:nil
                       ((dev-endpoint-names :initarg :dev-endpoint-names
                         :initform common-lisp:nil :type
                         (common-lisp:or dev-endpoint-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-dev-endpoints-response-dev-endpoint-names
                         :shape "DevEndpointNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-dev-endpoints-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-dev-endpoints-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-dev-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-dev-endpoints-response
                    'make-list-dev-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-endpoint-names))
      (common-lisp:list
       (common-lisp:cons "DevEndpointNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dev-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-list-jobs-request-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-jobs-request-max-results :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-list-jobs-request-tags :shape "TagsMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-jobs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-jobs-request 'make-list-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-jobs-response common-lisp:nil
                       ((job-names :initarg :job-names :initform
                         common-lisp:nil :type
                         (common-lisp:or job-name-list common-lisp:null)
                         :accessor struct-shape-list-jobs-response-job-names
                         :shape "JobNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-list-jobs-response-next-token
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-jobs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-jobs-response 'make-list-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-names))
      (common-lisp:list
       (common-lisp:cons "JobNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mltransforms-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-mltransforms-request-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-mltransforms-request-max-results
                         :shape "PageSize" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or transform-filter-criteria
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-mltransforms-request-filter :shape
                         "TransformFilterCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort :initarg :sort :initform common-lisp:nil :type
                         (common-lisp:or transform-sort-criteria
                                         common-lisp:null)
                         :accessor struct-shape-list-mltransforms-request-sort
                         :shape "TransformSortCriteria" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-list-mltransforms-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mltransforms-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-mltransforms-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mltransforms-request
                    'make-list-mltransforms-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mltransforms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mltransforms-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "Sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mltransforms-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-mltransforms-response common-lisp:nil
                       ((transform-ids :initarg :transform-ids :initform
                         (common-lisp:error ":transform-ids is required") :type
                         (common-lisp:or transform-id-list common-lisp:null)
                         :accessor
                         struct-shape-list-mltransforms-response-transform-ids
                         :shape "TransformIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-mltransforms-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-mltransforms-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-mltransforms-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-mltransforms-response
                    'make-list-mltransforms-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mltransforms-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mltransforms-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-ids))
      (common-lisp:list
       (common-lisp:cons "TransformIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mltransforms-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-registries-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-number common-lisp:null)
                         :accessor
                         struct-shape-list-registries-input-max-results :shape
                         "MaxResultsNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-registries-input-next-token :shape
                         "SchemaRegistryTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-registries-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-registries-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-registries-input 'make-list-registries-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-registries-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-registries-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-registries-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-registries-response common-lisp:nil
                       ((registries :initarg :registries :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-list-definition
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-registries-response-registries
                         :shape "RegistryListDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-registries-response-next-token
                         :shape "SchemaRegistryTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-registries-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-registries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-registries-response 'make-list-registries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-registries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-registries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registries))
      (common-lisp:list
       (common-lisp:cons "Registries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-registries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-schema-versions-input common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         (common-lisp:error ":schema-id is required") :type
                         (common-lisp:or schema-id common-lisp:null) :accessor
                         struct-shape-list-schema-versions-input-schema-id
                         :shape "SchemaId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-number common-lisp:null)
                         :accessor
                         struct-shape-list-schema-versions-input-max-results
                         :shape "MaxResultsNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-schema-versions-input-next-token
                         :shape "SchemaRegistryTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-schema-versions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-schema-versions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-schema-versions-input
                    'make-list-schema-versions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-versions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-versions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-versions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-schema-versions-response common-lisp:nil
                       ((schemas :initarg :schemas :initform common-lisp:nil
                         :type
                         (common-lisp:or schema-version-list common-lisp:null)
                         :accessor
                         struct-shape-list-schema-versions-response-schemas
                         :shape "SchemaVersionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-schema-versions-response-next-token
                         :shape "SchemaRegistryTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-schema-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-schema-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-schema-versions-response
                    'make-list-schema-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schemas))
      (common-lisp:list
       (common-lisp:cons "Schemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schema-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-schemas-input common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         common-lisp:nil :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor struct-shape-list-schemas-input-registry-id
                         :shape "RegistryId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results-number common-lisp:null)
                         :accessor struct-shape-list-schemas-input-max-results
                         :shape "MaxResultsNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-token-string
                                         common-lisp:null)
                         :accessor struct-shape-list-schemas-input-next-token
                         :shape "SchemaRegistryTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-schemas-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-schemas-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-schemas-input 'make-list-schemas-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-schemas-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-schemas-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "RegistryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-schemas-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-schemas-response common-lisp:nil
                       ((schemas :initarg :schemas :initform common-lisp:nil
                         :type
                         (common-lisp:or schema-list-definition
                                         common-lisp:null)
                         :accessor struct-shape-list-schemas-response-schemas
                         :shape "SchemaListDefinition" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-schemas-response-next-token :shape
                         "SchemaRegistryTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-schemas-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-schemas-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-schemas-response 'make-list-schemas-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-schemas-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-schemas-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schemas))
      (common-lisp:list
       (common-lisp:cons "Schemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-schemas-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sessions-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-token common-lisp:null)
                         :accessor
                         struct-shape-list-sessions-request-next-token :shape
                         "OrchestrationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-list-sessions-request-max-results :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-list-sessions-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (request-origin :initarg :request-origin :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-sessions-request-request-origin
                         :shape "OrchestrationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sessions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-sessions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sessions-request 'make-list-sessions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-sessions-response common-lisp:nil
                       ((ids :initarg :ids :initform common-lisp:nil :type
                         (common-lisp:or session-id-list common-lisp:null)
                         :accessor struct-shape-list-sessions-response-ids
                         :shape "SessionIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sessions :initarg :sessions :initform common-lisp:nil
                         :type (common-lisp:or session-list common-lisp:null)
                         :accessor struct-shape-list-sessions-response-sessions
                         :shape "SessionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-token common-lisp:null)
                         :accessor
                         struct-shape-list-sessions-response-next-token :shape
                         "OrchestrationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-sessions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-sessions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-sessions-response 'make-list-sessions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "Ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sessions))
      (common-lisp:list
       (common-lisp:cons "Sessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sessions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-statements-request common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-list-statements-request-session-id :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (request-origin :initarg :request-origin :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-statements-request-request-origin
                         :shape "OrchestrationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-token common-lisp:null)
                         :accessor
                         struct-shape-list-statements-request-next-token :shape
                         "OrchestrationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-statements-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-statements-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-statements-request 'make-list-statements-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-statements-response common-lisp:nil
                       ((statements :initarg :statements :initform
                         common-lisp:nil :type
                         (common-lisp:or statement-list common-lisp:null)
                         :accessor
                         struct-shape-list-statements-response-statements
                         :shape "StatementList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-token common-lisp:null)
                         :accessor
                         struct-shape-list-statements-response-next-token
                         :shape "OrchestrationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-statements-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-statements-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-statements-response 'make-list-statements-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statements))
      (common-lisp:list
       (common-lisp:cons "Statements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-statements-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-table-optimizer-runs-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         (common-lisp:error ":catalog-id is required") :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-list-table-optimizer-runs-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-list-table-optimizer-runs-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-list-table-optimizer-runs-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or table-optimizer-type common-lisp:null)
                         :accessor
                         struct-shape-list-table-optimizer-runs-request-type
                         :shape "TableOptimizerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          max-list-table-optimizer-runs-token-results
                          common-lisp:null)
                         :accessor
                         struct-shape-list-table-optimizer-runs-request-max-results
                         :shape "MaxListTableOptimizerRunsTokenResults"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or list-table-optimizer-runs-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-table-optimizer-runs-request-next-token
                         :shape "ListTableOptimizerRunsToken" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-table-optimizer-runs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-table-optimizer-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-table-optimizer-runs-request
                    'make-list-table-optimizer-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-optimizer-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-optimizer-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-optimizer-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-table-optimizer-runs-response common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-list-table-optimizer-runs-response-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-list-table-optimizer-runs-response-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-list-table-optimizer-runs-response-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or list-table-optimizer-runs-token
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-table-optimizer-runs-response-next-token
                         :shape "ListTableOptimizerRunsToken" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table-optimizer-runs :initarg :table-optimizer-runs
                         :initform common-lisp:nil :type
                         (common-lisp:or table-optimizer-runs common-lisp:null)
                         :accessor
                         struct-shape-list-table-optimizer-runs-response-table-optimizer-runs
                         :shape "TableOptimizerRuns" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-table-optimizer-runs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-table-optimizer-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-table-optimizer-runs-response
                    'make-list-table-optimizer-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-optimizer-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-optimizer-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-optimizer-runs))
      (common-lisp:list
       (common-lisp:cons "TableOptimizerRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-optimizer-runs-response))
   common-lisp:nil))
(common-lisp:deftype list-table-optimizer-runs-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-triggers-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-triggers-request-next-token :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dependent-job-name :initarg :dependent-job-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-list-triggers-request-dependent-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-page-size200
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-triggers-request-max-results :shape
                         "OrchestrationPageSize200" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-list-triggers-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-triggers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-triggers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-triggers-request 'make-list-triggers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-triggers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-triggers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependent-job-name))
      (common-lisp:list
       (common-lisp:cons "DependentJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-triggers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-triggers-response common-lisp:nil
                       ((trigger-names :initarg :trigger-names :initform
                         common-lisp:nil :type
                         (common-lisp:or trigger-name-list common-lisp:null)
                         :accessor
                         struct-shape-list-triggers-response-trigger-names
                         :shape "TriggerNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-triggers-response-next-token :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-triggers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-triggers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-triggers-response 'make-list-triggers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-triggers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-triggers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-names))
      (common-lisp:list
       (common-lisp:cons "TriggerNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-triggers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflows-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-workflows-request-next-token :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-page-size25
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-workflows-request-max-results :shape
                         "OrchestrationPageSize25" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workflows-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workflows-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workflows-request 'make-list-workflows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflows-response common-lisp:nil
                       ((workflows :initarg :workflows :initform
                         common-lisp:nil :type
                         (common-lisp:or workflow-names common-lisp:null)
                         :accessor
                         struct-shape-list-workflows-response-workflows :shape
                         "WorkflowNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-list-workflows-response-next-token :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-workflows-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-workflows-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-workflows-response 'make-list-workflows-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflows))
      (common-lisp:list
       (common-lisp:cons "Workflows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass location common-lisp:nil
                       ((jdbc :initarg :jdbc :initform common-lisp:nil :type
                         (common-lisp:or code-gen-node-args common-lisp:null)
                         :accessor struct-shape-location-jdbc :shape
                         "CodeGenNodeArgs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3 :initarg :s3 :initform common-lisp:nil :type
                         (common-lisp:or code-gen-node-args common-lisp:null)
                         :accessor struct-shape-location-s3 :shape
                         "CodeGenNodeArgs" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dynamo-db :initarg :dynamo-db :initform
                         common-lisp:nil :type
                         (common-lisp:or code-gen-node-args common-lisp:null)
                         :accessor struct-shape-location-dynamo-db :shape
                         "CodeGenNodeArgs" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'location 'make-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jdbc))
      (common-lisp:list
       (common-lisp:cons "Jdbc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamo-db))
      (common-lisp:list
       (common-lisp:cons "DynamoDB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype location-map () 'common-lisp:hash-table)
 (common-lisp:defun make-location-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype location-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype location-string-list ()
   '(trivial-types:proper-list location-string))
 (common-lisp:defun make-location-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list location-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-group () 'common-lisp:string)
(common-lisp:deftype log-stream () 'common-lisp:string)
(common-lisp:deftype logical () 'common-lisp:string)
(common-lisp:deftype logical-operator () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass long-column-statistics-data common-lisp:nil
                       ((minimum-value :initarg :minimum-value :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-long-column-statistics-data-minimum-value
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (maximum-value :initarg :maximum-value :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-long-column-statistics-data-maximum-value
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-nulls :initarg :number-of-nulls :initform
                         (common-lisp:error ":number-of-nulls is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-long-column-statistics-data-number-of-nulls
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-distinct-values :initarg
                         :number-of-distinct-values :initform
                         (common-lisp:error
                          ":number-of-distinct-values is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-long-column-statistics-data-number-of-distinct-values
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-long-column-statistics-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'long-column-statistics-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'long-column-statistics-data
                    'make-long-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          long-column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          long-column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-value))
      (common-lisp:list
       (common-lisp:cons "MinimumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-value))
      (common-lisp:list
       (common-lisp:cons "MaximumValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nulls))
      (common-lisp:list
       (common-lisp:cons "NumberOfNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-distinct-values))
      (common-lisp:list
       (common-lisp:cons "NumberOfDistinctValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          long-column-statistics-data))
   common-lisp:nil))
(common-lisp:deftype long-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass mltransform common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor struct-shape-mltransform-transform-id :shape
                         "HashString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-mltransform-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-mltransform-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or transform-status-type
                                         common-lisp:null)
                         :accessor struct-shape-mltransform-status :shape
                         "TransformStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-on :initarg :created-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-mltransform-created-on :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-on :initarg :last-modified-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-mltransform-last-modified-on :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input-record-tables :initarg :input-record-tables
                         :initform common-lisp:nil :type
                         (common-lisp:or glue-tables common-lisp:null)
                         :accessor struct-shape-mltransform-input-record-tables
                         :shape "GlueTables" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or transform-parameters common-lisp:null)
                         :accessor struct-shape-mltransform-parameters :shape
                         "TransformParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-metrics :initarg :evaluation-metrics
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-metrics common-lisp:null)
                         :accessor struct-shape-mltransform-evaluation-metrics
                         :shape "EvaluationMetrics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (label-count :initarg :label-count :initform
                         common-lisp:nil :type
                         (common-lisp:or label-count common-lisp:null)
                         :accessor struct-shape-mltransform-label-count :shape
                         "LabelCount" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type
                         (common-lisp:or transform-schema common-lisp:null)
                         :accessor struct-shape-mltransform-schema :shape
                         "TransformSchema" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role-string common-lisp:null)
                         :accessor struct-shape-mltransform-role :shape
                         "RoleString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (glue-version :initarg :glue-version :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-version-string common-lisp:null)
                         :accessor struct-shape-mltransform-glue-version :shape
                         "GlueVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-mltransform-max-capacity :shape
                         "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-type common-lisp:null)
                         :accessor struct-shape-mltransform-worker-type :shape
                         "WorkerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor struct-shape-mltransform-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor struct-shape-mltransform-timeout :shape
                         "Timeout" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-retries :initarg :max-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor struct-shape-mltransform-max-retries :shape
                         "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transform-encryption :initarg :transform-encryption
                         :initform common-lisp:nil :type
                         (common-lisp:or transform-encryption common-lisp:null)
                         :accessor
                         struct-shape-mltransform-transform-encryption :shape
                         "TransformEncryption" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mltransform
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mltransform
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mltransform 'make-mltransform))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mltransform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mltransform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-record-tables))
      (common-lisp:list
       (common-lisp:cons "InputRecordTables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-metrics))
      (common-lisp:list
       (common-lisp:cons "EvaluationMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-count))
      (common-lisp:list
       (common-lisp:cons "LabelCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "MaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-encryption))
      (common-lisp:list
       (common-lisp:cons "TransformEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mltransform))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition mltransform-not-ready-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       mltransform-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'mltransform-not-ready-exception
                    'mltransform-not-ready-exception-message)))
(common-lisp:progn
 (common-lisp:defclass mluser-data-encryption common-lisp:nil
                       ((ml-user-data-encryption-mode :initarg
                         :ml-user-data-encryption-mode :initform
                         (common-lisp:error
                          ":ml-user-data-encryption-mode is required")
                         :type
                         (common-lisp:or mluser-data-encryption-mode-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-mluser-data-encryption-ml-user-data-encryption-mode
                         :shape "MLUserDataEncryptionModeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-mluser-data-encryption-kms-key-id :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mluser-data-encryption
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mluser-data-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'mluser-data-encryption 'make-mluser-data-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          mluser-data-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          mluser-data-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ml-user-data-encryption-mode))
      (common-lisp:list
       (common-lisp:cons "MlUserDataEncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          mluser-data-encryption))
   common-lisp:nil))
(common-lisp:deftype mluser-data-encryption-mode-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype many-inputs () '(trivial-types:proper-list node-id))
 (common-lisp:defun make-many-inputs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype map-value () 'common-lisp:hash-table)
 (common-lisp:defun make-map-value (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass mapping common-lisp:nil
                       ((to-key :initarg :to-key :initform common-lisp:nil
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-mapping-to-key :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-path :initarg :from-path :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor struct-shape-mapping-from-path :shape
                         "EnclosedInStringProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (from-type :initarg :from-type :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-mapping-from-type :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (to-type :initarg :to-type :initform common-lisp:nil
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-mapping-to-type :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dropped :initarg :dropped :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-mapping-dropped :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (children :initarg :children :initform common-lisp:nil
                         :type (common-lisp:or mappings common-lisp:null)
                         :accessor struct-shape-mapping-children :shape
                         "Mappings" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mapping
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mapping 'make-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-key))
      (common-lisp:list
       (common-lisp:cons "ToKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-path))
      (common-lisp:list
       (common-lisp:cons "FromPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-type))
      (common-lisp:list
       (common-lisp:cons "FromType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-type))
      (common-lisp:list
       (common-lisp:cons "ToType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dropped))
      (common-lisp:list
       (common-lisp:cons "Dropped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "Children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass mapping-entry common-lisp:nil
                       ((source-table :initarg :source-table :initform
                         common-lisp:nil :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         struct-shape-mapping-entry-source-table :shape
                         "TableName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-path :initarg :source-path :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-path-string common-lisp:null)
                         :accessor struct-shape-mapping-entry-source-path
                         :shape "SchemaPathString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or field-type common-lisp:null) :accessor
                         struct-shape-mapping-entry-source-type :shape
                         "FieldType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-table :initarg :target-table :initform
                         common-lisp:nil :type
                         (common-lisp:or table-name common-lisp:null) :accessor
                         struct-shape-mapping-entry-target-table :shape
                         "TableName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-path :initarg :target-path :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-path-string common-lisp:null)
                         :accessor struct-shape-mapping-entry-target-path
                         :shape "SchemaPathString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-type :initarg :target-type :initform
                         common-lisp:nil :type
                         (common-lisp:or field-type common-lisp:null) :accessor
                         struct-shape-mapping-entry-target-type :shape
                         "FieldType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mapping-entry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mapping-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mapping-entry 'make-mapping-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mapping-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mapping-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-table))
      (common-lisp:list
       (common-lisp:cons "SourceTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-path))
      (common-lisp:list
       (common-lisp:cons "SourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table))
      (common-lisp:list
       (common-lisp:cons "TargetTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-path))
      (common-lisp:list
       (common-lisp:cons "TargetPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mapping-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mapping-list ()
   '(trivial-types:proper-list mapping-entry))
 (common-lisp:defun make-mapping-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mapping-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype mappings () '(trivial-types:proper-list mapping))
 (common-lisp:defun make-mappings
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype mask-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype match-criteria ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-match-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-concurrent-runs () 'common-lisp:integer)
(common-lisp:deftype max-list-table-optimizer-runs-token-results ()
  'common-lisp:integer)
(common-lisp:deftype max-results-number () 'common-lisp:integer)
(common-lisp:deftype max-retries () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass merge common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-merge-name :shape "NodeName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or two-inputs common-lisp:null) :accessor
                         struct-shape-merge-inputs :shape "TwoInputs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or node-id common-lisp:null) :accessor
                         struct-shape-merge-source :shape "NodeId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (primary-keys :initarg :primary-keys :initform
                         (common-lisp:error ":primary-keys is required") :type
                         (common-lisp:or glue-studio-path-list
                                         common-lisp:null)
                         :accessor struct-shape-merge-primary-keys :shape
                         "GlueStudioPathList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-merge
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'merge
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'merge 'make-merge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input merge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input merge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-keys))
      (common-lisp:list
       (common-lisp:cons "PrimaryKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input merge))
   common-lisp:nil))
(common-lisp:deftype message-prefix () 'common-lisp:string)
(common-lisp:deftype message-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metadata-info common-lisp:nil
                       ((metadata-value :initarg :metadata-value :initform
                         common-lisp:nil :type
                         (common-lisp:or metadata-value-string
                                         common-lisp:null)
                         :accessor struct-shape-metadata-info-metadata-value
                         :shape "MetadataValueString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or created-timestamp common-lisp:null)
                         :accessor struct-shape-metadata-info-created-time
                         :shape "CreatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (other-metadata-value-list :initarg
                         :other-metadata-value-list :initform common-lisp:nil
                         :type
                         (common-lisp:or other-metadata-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-metadata-info-other-metadata-value-list
                         :shape "OtherMetadataValueList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metadata-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metadata-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'metadata-info 'make-metadata-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metadata-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metadata-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-value))
      (common-lisp:list
       (common-lisp:cons "MetadataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'other-metadata-value-list))
      (common-lisp:list
       (common-lisp:cons "OtherMetadataValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metadata-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metadata-info-map () 'common-lisp:hash-table)
 (common-lisp:defun make-metadata-info-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype metadata-key-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metadata-key-value-pair common-lisp:nil
                       ((metadata-key :initarg :metadata-key :initform
                         common-lisp:nil :type
                         (common-lisp:or metadata-key-string common-lisp:null)
                         :accessor
                         struct-shape-metadata-key-value-pair-metadata-key
                         :shape "MetadataKeyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata-value :initarg :metadata-value :initform
                         common-lisp:nil :type
                         (common-lisp:or metadata-value-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-metadata-key-value-pair-metadata-value
                         :shape "MetadataValueString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metadata-key-value-pair
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metadata-key-value-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metadata-key-value-pair 'make-metadata-key-value-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metadata-key-value-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metadata-key-value-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-key))
      (common-lisp:list
       (common-lisp:cons "MetadataKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-value))
      (common-lisp:list
       (common-lisp:cons "MetadataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metadata-key-value-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metadata-list ()
   '(trivial-types:proper-list metadata-key-value-pair))
 (common-lisp:defun make-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metadata-key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metadata-operation () 'common-lisp:string)
(common-lisp:deftype metadata-value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metric-based-observation common-lisp:nil
                       ((metric-name :initarg :metric-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-metric-based-observation-metric-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metric-values :initarg :metric-values :initform
                         common-lisp:nil :type
                         (common-lisp:or data-quality-metric-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-metric-based-observation-metric-values
                         :shape "DataQualityMetricValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (new-rules :initarg :new-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or new-rules common-lisp:null) :accessor
                         struct-shape-metric-based-observation-new-rules :shape
                         "NewRules" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-metric-based-observation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'metric-based-observation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'metric-based-observation 'make-metric-based-observation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-based-observation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-based-observation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-values))
      (common-lisp:list
       (common-lisp:cons "MetricValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-rules))
      (common-lisp:list
       (common-lisp:cons "NewRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-based-observation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass microsoft-sqlserver-catalog-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-microsoft-sqlserver-catalog-source-name
                         :shape "NodeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-catalog-source-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-catalog-source-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-microsoft-sqlserver-catalog-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'microsoft-sqlserver-catalog-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'microsoft-sqlserver-catalog-source
                    'make-microsoft-sqlserver-catalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-catalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-catalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-catalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass microsoft-sqlserver-catalog-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-microsoft-sqlserver-catalog-target-name
                         :shape "NodeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-microsoft-sqlserver-catalog-target-inputs
                         :shape "OneInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-catalog-target-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-microsoft-sqlserver-catalog-target-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-microsoft-sqlserver-catalog-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'microsoft-sqlserver-catalog-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'microsoft-sqlserver-catalog-target
                    'make-microsoft-sqlserver-catalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-catalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-catalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          microsoft-sqlserver-catalog-target))
   common-lisp:nil))
(common-lisp:deftype milliseconds-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass mongo-dbtarget common-lisp:nil
                       ((connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor struct-shape-mongo-dbtarget-connection-name
                         :shape "ConnectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or path common-lisp:null) :accessor
                         struct-shape-mongo-dbtarget-path :shape "Path"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (scan-all :initarg :scan-all :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor struct-shape-mongo-dbtarget-scan-all :shape
                         "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-mongo-dbtarget
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'mongo-dbtarget
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'mongo-dbtarget 'make-mongo-dbtarget))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mongo-dbtarget))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mongo-dbtarget))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-all))
      (common-lisp:list
       (common-lisp:cons "ScanAll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mongo-dbtarget))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype mongo-dbtarget-list ()
   '(trivial-types:proper-list mongo-dbtarget))
 (common-lisp:defun make-mongo-dbtarget-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mongo-dbtarget))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass my-sqlcatalog-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-my-sqlcatalog-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-my-sqlcatalog-source-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-my-sqlcatalog-source-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-my-sqlcatalog-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'my-sqlcatalog-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'my-sqlcatalog-source 'make-my-sqlcatalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input my-sqlcatalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input my-sqlcatalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input my-sqlcatalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass my-sqlcatalog-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-my-sqlcatalog-target-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-my-sqlcatalog-target-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-my-sqlcatalog-target-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-my-sqlcatalog-target-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-my-sqlcatalog-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'my-sqlcatalog-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'my-sqlcatalog-target 'make-my-sqlcatalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input my-sqlcatalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input my-sqlcatalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input my-sqlcatalog-target))
   common-lisp:nil))
(common-lisp:deftype name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype name-string-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-name-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype new-rules () '(trivial-types:proper-list name-string))
 (common-lisp:defun make-new-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition no-schedule-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-schedule-exception-message)))
 (common-lisp:export
  (common-lisp:list 'no-schedule-exception 'no-schedule-exception-message)))
(common-lisp:progn
 (common-lisp:defclass node common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or node-type common-lisp:null) :accessor
                         struct-shape-node-type :shape "NodeType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-node-name :shape "NameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unique-id :initarg :unique-id :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-node-unique-id :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trigger-details :initarg :trigger-details :initform
                         common-lisp:nil :type
                         (common-lisp:or trigger-node-details common-lisp:null)
                         :accessor struct-shape-node-trigger-details :shape
                         "TriggerNodeDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-details :initarg :job-details :initform
                         common-lisp:nil :type
                         (common-lisp:or job-node-details common-lisp:null)
                         :accessor struct-shape-node-job-details :shape
                         "JobNodeDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (crawler-details :initarg :crawler-details :initform
                         common-lisp:nil :type
                         (common-lisp:or crawler-node-details common-lisp:null)
                         :accessor struct-shape-node-crawler-details :shape
                         "CrawlerNodeDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'node
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'node 'make-node))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input node))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unique-id))
      (common-lisp:list
       (common-lisp:cons "UniqueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-details))
      (common-lisp:list
       (common-lisp:cons "TriggerDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "JobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-details))
      (common-lisp:list
       (common-lisp:cons "CrawlerDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input node))
   common-lisp:nil))
(common-lisp:deftype node-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype node-id-list () '(trivial-types:proper-list name-string))
 (common-lisp:defun make-node-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype node-list () '(trivial-types:proper-list node))
 (common-lisp:defun make-node-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node))
   aws-sdk/generator/shape::members))
(common-lisp:deftype node-name () 'common-lisp:string)
(common-lisp:deftype node-type () 'common-lisp:string)
(common-lisp:deftype non-negative-double () 'common-lisp:double-float)
(common-lisp:deftype non-negative-int () 'common-lisp:integer)
(common-lisp:deftype non-negative-integer () 'common-lisp:integer)
(common-lisp:deftype non-negative-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass notification-property common-lisp:nil
                       ((notify-delay-after :initarg :notify-delay-after
                         :initform common-lisp:nil :type
                         (common-lisp:or notify-delay-after common-lisp:null)
                         :accessor
                         struct-shape-notification-property-notify-delay-after
                         :shape "NotifyDelayAfter" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification-property
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notification-property
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notification-property 'make-notification-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notify-delay-after))
      (common-lisp:list
       (common-lisp:cons "NotifyDelayAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-property))
   common-lisp:nil))
(common-lisp:deftype notify-delay-after () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass null-check-box-list common-lisp:nil
                       ((is-empty :initarg :is-empty :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-null-check-box-list-is-empty
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-null-string :initarg :is-null-string :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-null-check-box-list-is-null-string :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-neg-one :initarg :is-neg-one :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-null-check-box-list-is-neg-one
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-null-check-box-list
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'null-check-box-list
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'null-check-box-list 'make-null-check-box-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input null-check-box-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input null-check-box-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-empty))
      (common-lisp:list
       (common-lisp:cons "IsEmpty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-null-string))
      (common-lisp:list
       (common-lisp:cons "IsNullString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-neg-one))
      (common-lisp:list
       (common-lisp:cons "IsNegOne"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input null-check-box-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass null-value-field common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-null-value-field-value :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (datatype :initarg :datatype :initform
                         (common-lisp:error ":datatype is required") :type
                         (common-lisp:or datatype common-lisp:null) :accessor
                         struct-shape-null-value-field-datatype :shape
                         "Datatype" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-null-value-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'null-value-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'null-value-field 'make-null-value-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input null-value-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input null-value-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datatype))
      (common-lisp:list
       (common-lisp:cons "Datatype"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input null-value-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype null-value-fields ()
   '(trivial-types:proper-list null-value-field))
 (common-lisp:defun make-null-value-fields
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list null-value-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:deftype nullable-double () 'common-lisp:double-float)
(common-lisp:deftype nullable-integer () 'common-lisp:integer)
(common-lisp:deftype nullable-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype one-input () '(trivial-types:proper-list node-id))
 (common-lisp:defun make-one-input
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass open-table-format-input common-lisp:nil
                       ((iceberg-input :initarg :iceberg-input :initform
                         common-lisp:nil :type
                         (common-lisp:or iceberg-input common-lisp:null)
                         :accessor
                         struct-shape-open-table-format-input-iceberg-input
                         :shape "IcebergInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-open-table-format-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'open-table-format-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'open-table-format-input 'make-open-table-format-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-table-format-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-table-format-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iceberg-input))
      (common-lisp:list
       (common-lisp:cons "IcebergInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-table-format-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition operation-timeout-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       operation-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'operation-timeout-exception
                    'operation-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defclass option common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-option-value :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (label :initarg :label :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-option-label :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-option-description :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-option
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'option
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'option 'make-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "Label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype option-list () '(trivial-types:proper-list option))
 (common-lisp:defun make-option-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass oracle-sqlcatalog-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-oracle-sqlcatalog-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-oracle-sqlcatalog-source-database :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-oracle-sqlcatalog-source-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-oracle-sqlcatalog-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'oracle-sqlcatalog-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'oracle-sqlcatalog-source 'make-oracle-sqlcatalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oracle-sqlcatalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oracle-sqlcatalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oracle-sqlcatalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass oracle-sqlcatalog-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-oracle-sqlcatalog-target-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-oracle-sqlcatalog-target-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-oracle-sqlcatalog-target-database :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-oracle-sqlcatalog-target-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-oracle-sqlcatalog-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'oracle-sqlcatalog-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'oracle-sqlcatalog-target 'make-oracle-sqlcatalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oracle-sqlcatalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oracle-sqlcatalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oracle-sqlcatalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype orchestration-arguments-map () 'common-lisp:hash-table)
 (common-lisp:defun make-orchestration-arguments-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype orchestration-arguments-value () 'common-lisp:string)
(common-lisp:deftype orchestration-iamrole-arn () 'common-lisp:string)
(common-lisp:deftype orchestration-name-string () 'common-lisp:string)
(common-lisp:deftype orchestration-page-size200 () 'common-lisp:integer)
(common-lisp:deftype orchestration-page-size25 () 'common-lisp:integer)
(common-lisp:deftype orchestration-role-arn () 'common-lisp:string)
(common-lisp:deftype orchestration-s3location () 'common-lisp:string)
(common-lisp:deftype orchestration-statement-code-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype orchestration-string-list ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun make-orchestration-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype orchestration-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass order common-lisp:nil
                       ((column :initarg :column :initform
                         (common-lisp:error ":column is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-order-column :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         (common-lisp:error ":sort-order is required") :type
                         (common-lisp:or integer-flag common-lisp:null)
                         :accessor struct-shape-order-sort-order :shape
                         "IntegerFlag" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-order
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'order
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'order 'make-order))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input order))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input order))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input order))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype order-list () '(trivial-types:proper-list order))
 (common-lisp:defun make-order-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list order))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype other-metadata-value-list ()
   '(trivial-types:proper-list other-metadata-value-list-item))
 (common-lisp:defun make-other-metadata-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            other-metadata-value-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass other-metadata-value-list-item common-lisp:nil
                       ((metadata-value :initarg :metadata-value :initform
                         common-lisp:nil :type
                         (common-lisp:or metadata-value-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-other-metadata-value-list-item-metadata-value
                         :shape "MetadataValueString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or created-timestamp common-lisp:null)
                         :accessor
                         struct-shape-other-metadata-value-list-item-created-time
                         :shape "CreatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-other-metadata-value-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'other-metadata-value-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'other-metadata-value-list-item
                    'make-other-metadata-value-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          other-metadata-value-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          other-metadata-value-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-value))
      (common-lisp:list
       (common-lisp:cons "MetadataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          other-metadata-value-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass piidetection common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-piidetection-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-piidetection-inputs :shape "OneInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pii-type :initarg :pii-type :initform
                         (common-lisp:error ":pii-type is required") :type
                         (common-lisp:or pii-type common-lisp:null) :accessor
                         struct-shape-piidetection-pii-type :shape "PiiType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (entity-types-to-detect :initarg
                         :entity-types-to-detect :initform
                         (common-lisp:error
                          ":entity-types-to-detect is required")
                         :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-piidetection-entity-types-to-detect
                         :shape "EnclosedInStringProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-column-name :initarg :output-column-name
                         :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-piidetection-output-column-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sample-fraction :initarg :sample-fraction :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-double-fraction
                                         common-lisp:null)
                         :accessor struct-shape-piidetection-sample-fraction
                         :shape "BoxedDoubleFraction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (threshold-fraction :initarg :threshold-fraction
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-double-fraction
                                         common-lisp:null)
                         :accessor struct-shape-piidetection-threshold-fraction
                         :shape "BoxedDoubleFraction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (mask-value :initarg :mask-value :initform
                         common-lisp:nil :type
                         (common-lisp:or mask-value common-lisp:null) :accessor
                         struct-shape-piidetection-mask-value :shape
                         "MaskValue" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-piidetection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'piidetection
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'piidetection 'make-piidetection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input piidetection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input piidetection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-type))
      (common-lisp:list
       (common-lisp:cons "PiiType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'entity-types-to-detect))
      (common-lisp:list
       (common-lisp:cons "EntityTypesToDetect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-column-name))
      (common-lisp:list
       (common-lisp:cons "OutputColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-fraction))
      (common-lisp:list
       (common-lisp:cons "SampleFraction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold-fraction))
      (common-lisp:list
       (common-lisp:cons "ThresholdFraction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mask-value))
      (common-lisp:list
       (common-lisp:cons "MaskValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input piidetection))
   common-lisp:nil))
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype param-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun make-parameters-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype parameters-map-value () 'common-lisp:string)
(common-lisp:deftype parquet-compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass partition common-lisp:nil
                       ((values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor struct-shape-partition-values :shape
                         "ValueStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-partition-database-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-partition-table-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-partition-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-access-time :initarg :last-access-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-partition-last-access-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-descriptor :initarg :storage-descriptor
                         :initform common-lisp:nil :type
                         (common-lisp:or storage-descriptor common-lisp:null)
                         :accessor struct-shape-partition-storage-descriptor
                         :shape "StorageDescriptor" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor struct-shape-partition-parameters :shape
                         "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-analyzed-time :initarg :last-analyzed-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-partition-last-analyzed-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor struct-shape-partition-catalog-id :shape
                         "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-partition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'partition
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'partition 'make-partition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-access-time))
      (common-lisp:list
       (common-lisp:cons "LastAccessTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-descriptor))
      (common-lisp:list
       (common-lisp:cons "StorageDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-analyzed-time))
      (common-lisp:list
       (common-lisp:cons "LastAnalyzedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass partition-error common-lisp:nil
                       ((partition-values :initarg :partition-values :initform
                         common-lisp:nil :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor
                         struct-shape-partition-error-partition-values :shape
                         "ValueStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-detail :initarg :error-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor struct-shape-partition-error-error-detail
                         :shape "ErrorDetail" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-partition-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'partition-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'partition-error 'make-partition-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail))
      (common-lisp:list
       (common-lisp:cons "ErrorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype partition-errors ()
   '(trivial-types:proper-list partition-error))
 (common-lisp:defun make-partition-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass partition-index common-lisp:nil
                       ((keys :initarg :keys :initform
                         (common-lisp:error ":keys is required") :type
                         (common-lisp:or key-list common-lisp:null) :accessor
                         struct-shape-partition-index-keys :shape "KeyList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (index-name :initarg :index-name :initform
                         (common-lisp:error ":index-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-partition-index-index-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-partition-index
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'partition-index
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'partition-index 'make-partition-index))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass partition-index-descriptor common-lisp:nil
                       ((index-name :initarg :index-name :initform
                         (common-lisp:error ":index-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-partition-index-descriptor-index-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (keys :initarg :keys :initform
                         (common-lisp:error ":keys is required") :type
                         (common-lisp:or key-schema-element-list
                                         common-lisp:null)
                         :accessor struct-shape-partition-index-descriptor-keys
                         :shape "KeySchemaElementList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (index-status :initarg :index-status :initform
                         (common-lisp:error ":index-status is required") :type
                         (common-lisp:or partition-index-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-partition-index-descriptor-index-status
                         :shape "PartitionIndexStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (backfill-errors :initarg :backfill-errors :initform
                         common-lisp:nil :type
                         (common-lisp:or backfill-errors common-lisp:null)
                         :accessor
                         struct-shape-partition-index-descriptor-backfill-errors
                         :shape "BackfillErrors" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-partition-index-descriptor
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'partition-index-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'partition-index-descriptor
                    'make-partition-index-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          partition-index-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          partition-index-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-name))
      (common-lisp:list
       (common-lisp:cons "IndexName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keys))
      (common-lisp:list
       (common-lisp:cons "Keys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-status))
      (common-lisp:list
       (common-lisp:cons "IndexStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'backfill-errors))
      (common-lisp:list
       (common-lisp:cons "BackfillErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          partition-index-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype partition-index-descriptor-list ()
   '(trivial-types:proper-list partition-index-descriptor))
 (common-lisp:defun make-partition-index-descriptor-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            partition-index-descriptor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype partition-index-list ()
   '(trivial-types:proper-list partition-index))
 (common-lisp:defun make-partition-index-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-index))
   aws-sdk/generator/shape::members))
(common-lisp:deftype partition-index-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass partition-input common-lisp:nil
                       ((values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor struct-shape-partition-input-values :shape
                         "ValueStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-access-time :initarg :last-access-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-partition-input-last-access-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage-descriptor :initarg :storage-descriptor
                         :initform common-lisp:nil :type
                         (common-lisp:or storage-descriptor common-lisp:null)
                         :accessor
                         struct-shape-partition-input-storage-descriptor :shape
                         "StorageDescriptor" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor struct-shape-partition-input-parameters
                         :shape "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-analyzed-time :initarg :last-analyzed-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-partition-input-last-analyzed-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-partition-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'partition-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'partition-input 'make-partition-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-access-time))
      (common-lisp:list
       (common-lisp:cons "LastAccessTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-descriptor))
      (common-lisp:list
       (common-lisp:cons "StorageDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-analyzed-time))
      (common-lisp:list
       (common-lisp:cons "LastAnalyzedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype partition-input-list ()
   '(trivial-types:proper-list partition-input))
 (common-lisp:defun make-partition-input-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype partition-list () '(trivial-types:proper-list partition))
 (common-lisp:defun make-partition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass partition-value-list common-lisp:nil
                       ((values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor struct-shape-partition-value-list-values
                         :shape "ValueStringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-partition-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'partition-value-list
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'partition-value-list 'make-partition-value-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input partition-value-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input partition-value-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input partition-value-list))
   common-lisp:nil))
(common-lisp:deftype path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype path-list () '(trivial-types:proper-list path))
 (common-lisp:defun make-path-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list path))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype permission-list ()
   '(trivial-types:proper-list permission))
 (common-lisp:defun make-permission-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype permission-type-list ()
   '(trivial-types:proper-list permission-type))
 (common-lisp:defun make-permission-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition permission-type-mismatch-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       permission-type-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'permission-type-mismatch-exception
                    'permission-type-mismatch-exception-message)))
(common-lisp:progn
 (common-lisp:defclass physical-connection-requirements common-lisp:nil
                       ((subnet-id :initarg :subnet-id :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-physical-connection-requirements-subnet-id
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-group-id-list :initarg
                         :security-group-id-list :initform common-lisp:nil
                         :type
                         (common-lisp:or security-group-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-physical-connection-requirements-security-group-id-list
                         :shape "SecurityGroupIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-physical-connection-requirements-availability-zone
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-physical-connection-requirements
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'physical-connection-requirements
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'physical-connection-requirements
                    'make-physical-connection-requirements))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          physical-connection-requirements))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          physical-connection-requirements))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-group-id-list))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          physical-connection-requirements))
   common-lisp:nil))
(common-lisp:deftype pii-type () 'common-lisp:string)
(common-lisp:deftype policy-json-string () 'common-lisp:string)
(common-lisp:deftype polling-time () 'common-lisp:integer)
(common-lisp:deftype positive-integer () 'common-lisp:integer)
(common-lisp:deftype positive-long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass postgre-sqlcatalog-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-postgre-sqlcatalog-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlcatalog-source-database :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-postgre-sqlcatalog-source-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-postgre-sqlcatalog-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'postgre-sqlcatalog-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'postgre-sqlcatalog-source
                    'make-postgre-sqlcatalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sqlcatalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sqlcatalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sqlcatalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass postgre-sqlcatalog-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-postgre-sqlcatalog-target-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-postgre-sqlcatalog-target-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-postgre-sqlcatalog-target-database :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-postgre-sqlcatalog-target-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-postgre-sqlcatalog-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'postgre-sqlcatalog-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'postgre-sqlcatalog-target
                    'make-postgre-sqlcatalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sqlcatalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sqlcatalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          postgre-sqlcatalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass predecessor common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-predecessor-job-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or id-string common-lisp:null)
                         :accessor struct-shape-predecessor-run-id :shape
                         "IdString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-predecessor
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'predecessor
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'predecessor 'make-predecessor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predecessor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predecessor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predecessor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype predecessor-list ()
   '(trivial-types:proper-list predecessor))
 (common-lisp:defun make-predecessor-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list predecessor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass predicate common-lisp:nil
                       ((logical :initarg :logical :initform common-lisp:nil
                         :type (common-lisp:or logical common-lisp:null)
                         :accessor struct-shape-predicate-logical :shape
                         "Logical" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (conditions :initarg :conditions :initform
                         common-lisp:nil :type
                         (common-lisp:or condition-list common-lisp:null)
                         :accessor struct-shape-predicate-conditions :shape
                         "ConditionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-predicate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'predicate
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'predicate 'make-predicate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predicate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predicate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical))
      (common-lisp:list
       (common-lisp:cons "Logical"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conditions))
      (common-lisp:list
       (common-lisp:cons "Conditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predicate))
   common-lisp:nil))
(common-lisp:deftype predicate-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass principal-permissions common-lisp:nil
                       ((principal :initarg :principal :initform
                         common-lisp:nil :type
                         (common-lisp:or data-lake-principal common-lisp:null)
                         :accessor struct-shape-principal-permissions-principal
                         :shape "DataLakePrincipal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permissions :initarg :permissions :initform
                         common-lisp:nil :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor
                         struct-shape-principal-permissions-permissions :shape
                         "PermissionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-principal-permissions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'principal-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'principal-permissions 'make-principal-permissions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          principal-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          principal-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          principal-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype principal-permissions-list ()
   '(trivial-types:proper-list principal-permissions))
 (common-lisp:defun make-principal-permissions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal-permissions))
   aws-sdk/generator/shape::members))
(common-lisp:deftype principal-type () 'common-lisp:string)
(common-lisp:deftype prob () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass property-predicate common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or value-string common-lisp:null)
                         :accessor struct-shape-property-predicate-key :shape
                         "ValueString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or value-string common-lisp:null)
                         :accessor struct-shape-property-predicate-value :shape
                         "ValueString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (comparator :initarg :comparator :initform
                         common-lisp:nil :type
                         (common-lisp:or comparator common-lisp:null) :accessor
                         struct-shape-property-predicate-comparator :shape
                         "Comparator" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-property-predicate
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'property-predicate
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'property-predicate 'make-property-predicate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-predicate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-predicate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparator))
      (common-lisp:list
       (common-lisp:cons "Comparator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-predicate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype public-keys-list ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun make-public-keys-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-data-catalog-encryption-settings-request
                       common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-put-data-catalog-encryption-settings-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-catalog-encryption-settings :initarg
                         :data-catalog-encryption-settings :initform
                         (common-lisp:error
                          ":data-catalog-encryption-settings is required")
                         :type
                         (common-lisp:or data-catalog-encryption-settings
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-data-catalog-encryption-settings-request-data-catalog-encryption-settings
                         :shape "DataCatalogEncryptionSettings" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-data-catalog-encryption-settings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-data-catalog-encryption-settings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-data-catalog-encryption-settings-request
                    'make-put-data-catalog-encryption-settings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-data-catalog-encryption-settings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-data-catalog-encryption-settings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-catalog-encryption-settings))
      (common-lisp:list
       (common-lisp:cons "DataCatalogEncryptionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-data-catalog-encryption-settings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-data-catalog-encryption-settings-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-data-catalog-encryption-settings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-data-catalog-encryption-settings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-data-catalog-encryption-settings-response
                    'make-put-data-catalog-encryption-settings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-data-catalog-encryption-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-data-catalog-encryption-settings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-data-catalog-encryption-settings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-request common-lisp:nil
                       ((policy-in-json :initarg :policy-in-json :initform
                         (common-lisp:error ":policy-in-json is required")
                         :type
                         (common-lisp:or policy-json-string common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-policy-in-json
                         :shape "PolicyJsonString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-resource-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-hash-condition :initarg :policy-hash-condition
                         :initform common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-policy-hash-condition
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-exists-condition :initarg
                         :policy-exists-condition :initform common-lisp:nil
                         :type
                         (common-lisp:or exist-condition common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-policy-exists-condition
                         :shape "ExistCondition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-hybrid :initarg :enable-hybrid :initform
                         common-lisp:nil :type
                         (common-lisp:or enable-hybrid-values common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-enable-hybrid
                         :shape "EnableHybridValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-request
                    'make-put-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-in-json))
      (common-lisp:list
       (common-lisp:cons "PolicyInJson"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-hash-condition))
      (common-lisp:list
       (common-lisp:cons "PolicyHashCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-exists-condition))
      (common-lisp:list
       (common-lisp:cons "PolicyExistsCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-hybrid))
      (common-lisp:list
       (common-lisp:cons "EnableHybrid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-response common-lisp:nil
                       ((policy-hash :initarg :policy-hash :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-response-policy-hash
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-response
                    'make-put-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-hash))
      (common-lisp:list
       (common-lisp:cons "PolicyHash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-schema-version-metadata-input common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-id common-lisp:null) :accessor
                         struct-shape-put-schema-version-metadata-input-schema-id
                         :shape "SchemaId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-version-number :initarg :schema-version-number
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-schema-version-metadata-input-schema-version-number
                         :shape "SchemaVersionNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-version-id :initarg :schema-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-schema-version-metadata-input-schema-version-id
                         :shape "SchemaVersionIdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metadata-key-value :initarg :metadata-key-value
                         :initform
                         (common-lisp:error ":metadata-key-value is required")
                         :type
                         (common-lisp:or metadata-key-value-pair
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-schema-version-metadata-input-metadata-key-value
                         :shape "MetadataKeyValuePair" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-schema-version-metadata-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-schema-version-metadata-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-schema-version-metadata-input
                    'make-put-schema-version-metadata-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-version-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-version-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-number))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-key-value))
      (common-lisp:list
       (common-lisp:cons "MetadataKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-version-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-schema-version-metadata-response common-lisp:nil
                       ((schema-arn :initarg :schema-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-put-schema-version-metadata-response-schema-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-schema-version-metadata-response-schema-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (registry-name :initarg :registry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-schema-version-metadata-response-registry-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (latest-version :initarg :latest-version :initform
                         common-lisp:nil :type
                         (common-lisp:or latest-schema-version-boolean
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-schema-version-metadata-response-latest-version
                         :shape "LatestSchemaVersionBoolean" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or version-long-number common-lisp:null)
                         :accessor
                         struct-shape-put-schema-version-metadata-response-version-number
                         :shape "VersionLongNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-version-id :initarg :schema-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-schema-version-metadata-response-schema-version-id
                         :shape "SchemaVersionIdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metadata-key :initarg :metadata-key :initform
                         common-lisp:nil :type
                         (common-lisp:or metadata-key-string common-lisp:null)
                         :accessor
                         struct-shape-put-schema-version-metadata-response-metadata-key
                         :shape "MetadataKeyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata-value :initarg :metadata-value :initform
                         common-lisp:nil :type
                         (common-lisp:or metadata-value-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-schema-version-metadata-response-metadata-value
                         :shape "MetadataValueString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-schema-version-metadata-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-schema-version-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-schema-version-metadata-response
                    'make-put-schema-version-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-version-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-version-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version))
      (common-lisp:list
       (common-lisp:cons "LatestVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-key))
      (common-lisp:list
       (common-lisp:cons "MetadataKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-value))
      (common-lisp:list
       (common-lisp:cons "MetadataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-version-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-workflow-run-properties-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-put-workflow-run-properties-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (run-id :initarg :run-id :initform
                         (common-lisp:error ":run-id is required") :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-put-workflow-run-properties-request-run-id
                         :shape "IdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (run-properties :initarg :run-properties :initform
                         (common-lisp:error ":run-properties is required")
                         :type
                         (common-lisp:or workflow-run-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-workflow-run-properties-request-run-properties
                         :shape "WorkflowRunProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-workflow-run-properties-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-workflow-run-properties-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-workflow-run-properties-request
                    'make-put-workflow-run-properties-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-workflow-run-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-workflow-run-properties-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-properties))
      (common-lisp:list
       (common-lisp:cons "RunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-workflow-run-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-workflow-run-properties-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-workflow-run-properties-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-workflow-run-properties-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-workflow-run-properties-response
                    'make-put-workflow-run-properties-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-workflow-run-properties-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-workflow-run-properties-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-workflow-run-properties-response))
   common-lisp:nil))
(common-lisp:deftype python-script () 'common-lisp:string)
(common-lisp:deftype python-version-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass query-schema-version-metadata-input common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-id common-lisp:null) :accessor
                         struct-shape-query-schema-version-metadata-input-schema-id
                         :shape "SchemaId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-version-number :initarg :schema-version-number
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-query-schema-version-metadata-input-schema-version-number
                         :shape "SchemaVersionNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-version-id :initarg :schema-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-query-schema-version-metadata-input-schema-version-id
                         :shape "SchemaVersionIdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metadata-list :initarg :metadata-list :initform
                         common-lisp:nil :type
                         (common-lisp:or metadata-list common-lisp:null)
                         :accessor
                         struct-shape-query-schema-version-metadata-input-metadata-list
                         :shape "MetadataList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          query-schema-version-metadata-max-results
                          common-lisp:null)
                         :accessor
                         struct-shape-query-schema-version-metadata-input-max-results
                         :shape "QuerySchemaVersionMetadataMaxResults"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-query-schema-version-metadata-input-next-token
                         :shape "SchemaRegistryTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-schema-version-metadata-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'query-schema-version-metadata-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-schema-version-metadata-input
                    'make-query-schema-version-metadata-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-schema-version-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-schema-version-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-number))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-list))
      (common-lisp:list
       (common-lisp:cons "MetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-schema-version-metadata-input))
   common-lisp:nil))
(common-lisp:deftype query-schema-version-metadata-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass query-schema-version-metadata-response common-lisp:nil
                       ((metadata-info-map :initarg :metadata-info-map
                         :initform common-lisp:nil :type
                         (common-lisp:or metadata-info-map common-lisp:null)
                         :accessor
                         struct-shape-query-schema-version-metadata-response-metadata-info-map
                         :shape "MetadataInfoMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-version-id :initarg :schema-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-query-schema-version-metadata-response-schema-version-id
                         :shape "SchemaVersionIdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-token-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-query-schema-version-metadata-response-next-token
                         :shape "SchemaRegistryTokenString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-schema-version-metadata-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'query-schema-version-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-schema-version-metadata-response
                    'make-query-schema-version-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-schema-version-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-schema-version-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-info-map))
      (common-lisp:list
       (common-lisp:cons "MetadataInfoMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-schema-version-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-session-context common-lisp:nil
                       ((query-id :initarg :query-id :initform common-lisp:nil
                         :type (common-lisp:or hash-string common-lisp:null)
                         :accessor struct-shape-query-session-context-query-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-start-time :initarg :query-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-query-session-context-query-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cluster-id :initarg :cluster-id :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-string common-lisp:null)
                         :accessor
                         struct-shape-query-session-context-cluster-id :shape
                         "NullableString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-authorization-id :initarg
                         :query-authorization-id :initform common-lisp:nil
                         :type (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-query-session-context-query-authorization-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-context :initarg :additional-context
                         :initform common-lisp:nil :type
                         (common-lisp:or additional-context-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-query-session-context-additional-context
                         :shape "AdditionalContextMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-session-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-session-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'query-session-context 'make-query-session-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-session-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-session-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-start-time))
      (common-lisp:list
       (common-lisp:cons "QueryStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-authorization-id))
      (common-lisp:list
       (common-lisp:cons "QueryAuthorizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-context))
      (common-lisp:list
       (common-lisp:cons "AdditionalContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-session-context))
   common-lisp:nil))
(common-lisp:deftype quote-char () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass recipe common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-recipe-name :shape "NodeName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-recipe-inputs :shape "OneInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recipe-reference :initarg :recipe-reference :initform
                         (common-lisp:error ":recipe-reference is required")
                         :type
                         (common-lisp:or recipe-reference common-lisp:null)
                         :accessor struct-shape-recipe-recipe-reference :shape
                         "RecipeReference" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recipe
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recipe
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'recipe 'make-recipe))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recipe))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recipe))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipe-reference))
      (common-lisp:list
       (common-lisp:cons "RecipeReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recipe))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recipe-reference common-lisp:nil
                       ((recipe-arn :initarg :recipe-arn :initform
                         (common-lisp:error ":recipe-arn is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-recipe-reference-recipe-arn
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recipe-version :initarg :recipe-version :initform
                         (common-lisp:error ":recipe-version is required")
                         :type (common-lisp:or recipe-version common-lisp:null)
                         :accessor struct-shape-recipe-reference-recipe-version
                         :shape "RecipeVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recipe-reference
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recipe-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recipe-reference 'make-recipe-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recipe-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recipe-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipe-arn))
      (common-lisp:list
       (common-lisp:cons "RecipeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recipe-version))
      (common-lisp:list
       (common-lisp:cons "RecipeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recipe-reference))
   common-lisp:nil))
(common-lisp:deftype recipe-version () 'common-lisp:string)
(common-lisp:deftype records-count () 'common-lisp:integer)
(common-lisp:deftype recrawl-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass recrawl-policy common-lisp:nil
                       ((recrawl-behavior :initarg :recrawl-behavior :initform
                         common-lisp:nil :type
                         (common-lisp:or recrawl-behavior common-lisp:null)
                         :accessor struct-shape-recrawl-policy-recrawl-behavior
                         :shape "RecrawlBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recrawl-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recrawl-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'recrawl-policy 'make-recrawl-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recrawl-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recrawl-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recrawl-behavior))
      (common-lisp:list
       (common-lisp:cons "RecrawlBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recrawl-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redshift-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-redshift-source-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-redshift-source-database :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-redshift-source-table :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redshift-tmp-dir :initarg :redshift-tmp-dir :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-source-redshift-tmp-dir :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tmp-dir-iamrole :initarg :tmp-dir-iamrole :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-redshift-source-tmp-dir-iamrole
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redshift-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'redshift-source 'make-redshift-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-tmp-dir))
      (common-lisp:list
       (common-lisp:cons "RedshiftTmpDir"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tmp-dir-iamrole))
      (common-lisp:list
       (common-lisp:cons "TmpDirIAMRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redshift-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-redshift-target-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-redshift-target-inputs :shape "OneInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-redshift-target-database :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-redshift-target-table :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (redshift-tmp-dir :initarg :redshift-tmp-dir :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-target-redshift-tmp-dir :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tmp-dir-iamrole :initarg :tmp-dir-iamrole :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-redshift-target-tmp-dir-iamrole
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (upsert-redshift-options :initarg
                         :upsert-redshift-options :initform common-lisp:nil
                         :type
                         (common-lisp:or upsert-redshift-target-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-target-upsert-redshift-options
                         :shape "UpsertRedshiftTargetOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redshift-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'redshift-target 'make-redshift-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input redshift-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input redshift-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redshift-tmp-dir))
      (common-lisp:list
       (common-lisp:cons "RedshiftTmpDir"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tmp-dir-iamrole))
      (common-lisp:list
       (common-lisp:cons "TmpDirIAMRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upsert-redshift-options))
      (common-lisp:list
       (common-lisp:cons "UpsertRedshiftOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input redshift-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-schema-version-input common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         (common-lisp:error ":schema-id is required") :type
                         (common-lisp:or schema-id common-lisp:null) :accessor
                         struct-shape-register-schema-version-input-schema-id
                         :shape "SchemaId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-definition :initarg :schema-definition
                         :initform
                         (common-lisp:error ":schema-definition is required")
                         :type
                         (common-lisp:or schema-definition-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-schema-version-input-schema-definition
                         :shape "SchemaDefinitionString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-schema-version-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-schema-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-schema-version-input
                    'make-register-schema-version-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-schema-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-schema-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "SchemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-schema-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-schema-version-response common-lisp:nil
                       ((schema-version-id :initarg :schema-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-schema-version-response-schema-version-id
                         :shape "SchemaVersionIdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or version-long-number common-lisp:null)
                         :accessor
                         struct-shape-register-schema-version-response-version-number
                         :shape "VersionLongNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or schema-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-schema-version-response-status
                         :shape "SchemaVersionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-schema-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-schema-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-schema-version-response
                    'make-register-schema-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-schema-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-schema-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-schema-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass registry-id common-lisp:nil
                       ((registry-name :initarg :registry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor struct-shape-registry-id-registry-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (registry-arn :initarg :registry-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor struct-shape-registry-id-registry-arn :shape
                         "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-registry-id
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'registry-id
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'registry-id 'make-registry-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input registry-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input registry-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input registry-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype registry-list-definition ()
   '(trivial-types:proper-list registry-list-item))
 (common-lisp:defun make-registry-list-definition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list registry-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass registry-list-item common-lisp:nil
                       ((registry-name :initarg :registry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-registry-list-item-registry-name :shape
                         "SchemaRegistryNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registry-arn :initarg :registry-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor struct-shape-registry-list-item-registry-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-registry-list-item-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or registry-status common-lisp:null)
                         :accessor struct-shape-registry-list-item-status
                         :shape "RegistryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or created-timestamp common-lisp:null)
                         :accessor struct-shape-registry-list-item-created-time
                         :shape "CreatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-time :initarg :updated-time :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-timestamp common-lisp:null)
                         :accessor struct-shape-registry-list-item-updated-time
                         :shape "UpdatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-registry-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'registry-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'registry-list-item 'make-registry-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input registry-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input registry-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "UpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input registry-list-item))
   common-lisp:nil))
(common-lisp:deftype registry-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass relational-catalog-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-relational-catalog-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-relational-catalog-source-database :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-relational-catalog-source-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relational-catalog-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'relational-catalog-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'relational-catalog-source
                    'make-relational-catalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-catalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-catalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-catalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-schema-version-metadata-input common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-id common-lisp:null) :accessor
                         struct-shape-remove-schema-version-metadata-input-schema-id
                         :shape "SchemaId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-version-number :initarg :schema-version-number
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-remove-schema-version-metadata-input-schema-version-number
                         :shape "SchemaVersionNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-version-id :initarg :schema-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-remove-schema-version-metadata-input-schema-version-id
                         :shape "SchemaVersionIdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metadata-key-value :initarg :metadata-key-value
                         :initform
                         (common-lisp:error ":metadata-key-value is required")
                         :type
                         (common-lisp:or metadata-key-value-pair
                                         common-lisp:null)
                         :accessor
                         struct-shape-remove-schema-version-metadata-input-metadata-key-value
                         :shape "MetadataKeyValuePair" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-schema-version-metadata-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-schema-version-metadata-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-schema-version-metadata-input
                    'make-remove-schema-version-metadata-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-schema-version-metadata-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-schema-version-metadata-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-number))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-key-value))
      (common-lisp:list
       (common-lisp:cons "MetadataKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-schema-version-metadata-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-schema-version-metadata-response common-lisp:nil
                       ((schema-arn :initarg :schema-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-remove-schema-version-metadata-response-schema-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-remove-schema-version-metadata-response-schema-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (registry-name :initarg :registry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-remove-schema-version-metadata-response-registry-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (latest-version :initarg :latest-version :initform
                         common-lisp:nil :type
                         (common-lisp:or latest-schema-version-boolean
                                         common-lisp:null)
                         :accessor
                         struct-shape-remove-schema-version-metadata-response-latest-version
                         :shape "LatestSchemaVersionBoolean" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or version-long-number common-lisp:null)
                         :accessor
                         struct-shape-remove-schema-version-metadata-response-version-number
                         :shape "VersionLongNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-version-id :initarg :schema-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-remove-schema-version-metadata-response-schema-version-id
                         :shape "SchemaVersionIdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metadata-key :initarg :metadata-key :initform
                         common-lisp:nil :type
                         (common-lisp:or metadata-key-string common-lisp:null)
                         :accessor
                         struct-shape-remove-schema-version-metadata-response-metadata-key
                         :shape "MetadataKeyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata-value :initarg :metadata-value :initform
                         common-lisp:nil :type
                         (common-lisp:or metadata-value-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-remove-schema-version-metadata-response-metadata-value
                         :shape "MetadataValueString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-schema-version-metadata-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-schema-version-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-schema-version-metadata-response
                    'make-remove-schema-version-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-schema-version-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-schema-version-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version))
      (common-lisp:list
       (common-lisp:cons "LatestVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-key))
      (common-lisp:list
       (common-lisp:cons "MetadataKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-value))
      (common-lisp:list
       (common-lisp:cons "MetadataValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-schema-version-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rename-field common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-rename-field-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-rename-field-inputs :shape "OneInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-path :initarg :source-path :initform
                         (common-lisp:error ":source-path is required") :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor struct-shape-rename-field-source-path :shape
                         "EnclosedInStringProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-path :initarg :target-path :initform
                         (common-lisp:error ":target-path is required") :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor struct-shape-rename-field-target-path :shape
                         "EnclosedInStringProperties" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rename-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rename-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'rename-field 'make-rename-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rename-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rename-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-path))
      (common-lisp:list
       (common-lisp:cons "SourcePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-path))
      (common-lisp:list
       (common-lisp:cons "TargetPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rename-field))
   common-lisp:nil))
(common-lisp:deftype replace-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass reset-job-bookmark-request common-lisp:nil
                       ((job-name :initarg :job-name :initform
                         (common-lisp:error ":job-name is required") :type
                         (common-lisp:or job-name common-lisp:null) :accessor
                         struct-shape-reset-job-bookmark-request-job-name
                         :shape "JobName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or run-id common-lisp:null)
                         :accessor
                         struct-shape-reset-job-bookmark-request-run-id :shape
                         "RunId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-job-bookmark-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reset-job-bookmark-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-job-bookmark-request
                    'make-reset-job-bookmark-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-job-bookmark-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-job-bookmark-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-job-bookmark-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-job-bookmark-response common-lisp:nil
                       ((job-bookmark-entry :initarg :job-bookmark-entry
                         :initform common-lisp:nil :type
                         (common-lisp:or job-bookmark-entry common-lisp:null)
                         :accessor
                         struct-shape-reset-job-bookmark-response-job-bookmark-entry
                         :shape "JobBookmarkEntry" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-job-bookmark-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reset-job-bookmark-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-job-bookmark-response
                    'make-reset-job-bookmark-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-job-bookmark-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-job-bookmark-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-bookmark-entry))
      (common-lisp:list
       (common-lisp:cons "JobBookmarkEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-job-bookmark-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-ready-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-ready-exception
                    'resource-not-ready-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-number-limit-exceeded-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-number-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-number-limit-exceeded-exception
                    'resource-number-limit-exceeded-exception-message)))
(common-lisp:deftype resource-share-type () 'common-lisp:string)
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-uri common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-resource-uri-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (uri :initarg :uri :initform common-lisp:nil :type
                         (common-lisp:or uri common-lisp:null) :accessor
                         struct-shape-resource-uri-uri :shape "URI" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-uri
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-uri
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource-uri 'make-resource-uri))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-uri))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-uri))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-uri))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-uri-list ()
   '(trivial-types:proper-list resource-uri))
 (common-lisp:defun make-resource-uri-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-uri))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resume-workflow-run-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-resume-workflow-run-request-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (run-id :initarg :run-id :initform
                         (common-lisp:error ":run-id is required") :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-resume-workflow-run-request-run-id :shape
                         "IdString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (node-ids :initarg :node-ids :initform
                         (common-lisp:error ":node-ids is required") :type
                         (common-lisp:or node-id-list common-lisp:null)
                         :accessor
                         struct-shape-resume-workflow-run-request-node-ids
                         :shape "NodeIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resume-workflow-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resume-workflow-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resume-workflow-run-request
                    'make-resume-workflow-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-workflow-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-workflow-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-ids))
      (common-lisp:list
       (common-lisp:cons "NodeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-workflow-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resume-workflow-run-response common-lisp:nil
                       ((run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or id-string common-lisp:null)
                         :accessor
                         struct-shape-resume-workflow-run-response-run-id
                         :shape "IdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (node-ids :initarg :node-ids :initform common-lisp:nil
                         :type (common-lisp:or node-id-list common-lisp:null)
                         :accessor
                         struct-shape-resume-workflow-run-response-node-ids
                         :shape "NodeIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resume-workflow-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resume-workflow-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resume-workflow-run-response
                    'make-resume-workflow-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-workflow-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-workflow-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'node-ids))
      (common-lisp:list
       (common-lisp:cons "NodeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-workflow-run-response))
   common-lisp:nil))
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype role-string () 'common-lisp:string)
(common-lisp:deftype row-tag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ruleset-names ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-ruleset-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype run-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass run-metrics common-lisp:nil
                       ((number-of-bytes-compacted :initarg
                         :number-of-bytes-compacted :initform common-lisp:nil
                         :type (common-lisp:or message-string common-lisp:null)
                         :accessor
                         struct-shape-run-metrics-number-of-bytes-compacted
                         :shape "MessageString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-files-compacted :initarg
                         :number-of-files-compacted :initform common-lisp:nil
                         :type (common-lisp:or message-string common-lisp:null)
                         :accessor
                         struct-shape-run-metrics-number-of-files-compacted
                         :shape "MessageString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-dpus :initarg :number-of-dpus :initform
                         common-lisp:nil :type
                         (common-lisp:or message-string common-lisp:null)
                         :accessor struct-shape-run-metrics-number-of-dpus
                         :shape "MessageString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-duration-in-hour :initarg :job-duration-in-hour
                         :initform common-lisp:nil :type
                         (common-lisp:or message-string common-lisp:null)
                         :accessor
                         struct-shape-run-metrics-job-duration-in-hour :shape
                         "MessageString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-run-metrics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'run-metrics
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'run-metrics 'make-run-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input run-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input run-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-bytes-compacted))
      (common-lisp:list
       (common-lisp:cons "NumberOfBytesCompacted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-files-compacted))
      (common-lisp:list
       (common-lisp:cons "NumberOfFilesCompacted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-dpus))
      (common-lisp:list
       (common-lisp:cons "NumberOfDpus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-duration-in-hour))
      (common-lisp:list
       (common-lisp:cons "JobDurationInHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input run-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass run-statement-request common-lisp:nil
                       ((session-id :initarg :session-id :initform
                         (common-lisp:error ":session-id is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-run-statement-request-session-id :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or orchestration-statement-code-string
                                         common-lisp:null)
                         :accessor struct-shape-run-statement-request-code
                         :shape "OrchestrationStatementCodeString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (request-origin :initarg :request-origin :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-run-statement-request-request-origin
                         :shape "OrchestrationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-run-statement-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'run-statement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'run-statement-request 'make-run-statement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-statement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-statement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-statement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass run-statement-response common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor struct-shape-run-statement-response-id
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-run-statement-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'run-statement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'run-statement-response 'make-run-statement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          run-statement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          run-statement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          run-statement-response))
   common-lisp:nil))
(common-lisp:deftype runtime-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3catalog-delta-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3catalog-delta-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3catalog-delta-source-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3catalog-delta-source-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-delta-options :initarg
                         :additional-delta-options :initform common-lisp:nil
                         :type
                         (common-lisp:or additional-options common-lisp:null)
                         :accessor
                         struct-shape-s3catalog-delta-source-additional-delta-options
                         :shape "AdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor
                         struct-shape-s3catalog-delta-source-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3catalog-delta-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3catalog-delta-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3catalog-delta-source 'make-s3catalog-delta-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3catalog-delta-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3catalog-delta-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-delta-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalDeltaOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3catalog-delta-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3catalog-hudi-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3catalog-hudi-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3catalog-hudi-source-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3catalog-hudi-source-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-hudi-options :initarg
                         :additional-hudi-options :initform common-lisp:nil
                         :type
                         (common-lisp:or additional-options common-lisp:null)
                         :accessor
                         struct-shape-s3catalog-hudi-source-additional-hudi-options
                         :shape "AdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor
                         struct-shape-s3catalog-hudi-source-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3catalog-hudi-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3catalog-hudi-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3catalog-hudi-source 'make-s3catalog-hudi-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3catalog-hudi-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3catalog-hudi-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-hudi-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalHudiOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3catalog-hudi-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3catalog-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3catalog-source-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3catalog-source-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3catalog-source-table :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-predicate :initarg :partition-predicate
                         :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3catalog-source-partition-predicate
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or s3source-additional-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3catalog-source-additional-options
                         :shape "S3SourceAdditionalOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3catalog-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3catalog-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3catalog-source 'make-s3catalog-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3catalog-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3catalog-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-predicate))
      (common-lisp:list
       (common-lisp:cons "PartitionPredicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3catalog-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3catalog-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3catalog-target-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-s3catalog-target-inputs :shape "OneInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (partition-keys :initarg :partition-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-studio-path-list
                                         common-lisp:null)
                         :accessor struct-shape-s3catalog-target-partition-keys
                         :shape "GlueStudioPathList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3catalog-target-table :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3catalog-target-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schema-change-policy :initarg :schema-change-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or catalog-schema-change-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3catalog-target-schema-change-policy
                         :shape "CatalogSchemaChangePolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3catalog-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3catalog-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3catalog-target 'make-s3catalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3catalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3catalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3catalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3csv-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3csv-source-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (paths :initarg :paths :initform
                         (common-lisp:error ":paths is required") :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor struct-shape-s3csv-source-paths :shape
                         "EnclosedInStringProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compression-type :initarg :compression-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compression-type common-lisp:null)
                         :accessor struct-shape-s3csv-source-compression-type
                         :shape "CompressionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclusions :initarg :exclusions :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor struct-shape-s3csv-source-exclusions :shape
                         "EnclosedInStringProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-size :initarg :group-size :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3csv-source-group-size :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-files :initarg :group-files :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3csv-source-group-files :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recurse :initarg :recurse :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-s3csv-source-recurse :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-band :initarg :max-band :initform common-lisp:nil
                         :type
                         (common-lisp:or boxed-non-negative-int
                                         common-lisp:null)
                         :accessor struct-shape-s3csv-source-max-band :shape
                         "BoxedNonNegativeInt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-files-in-band :initarg :max-files-in-band
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-int
                                         common-lisp:null)
                         :accessor struct-shape-s3csv-source-max-files-in-band
                         :shape "BoxedNonNegativeInt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or s3direct-source-additional-options
                                         common-lisp:null)
                         :accessor struct-shape-s3csv-source-additional-options
                         :shape "S3DirectSourceAdditionalOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (separator :initarg :separator :initform
                         (common-lisp:error ":separator is required") :type
                         (common-lisp:or separator common-lisp:null) :accessor
                         struct-shape-s3csv-source-separator :shape "Separator"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (escaper :initarg :escaper :initform common-lisp:nil
                         :type
                         (common-lisp:or enclosed-in-string-property-with-quote
                                         common-lisp:null)
                         :accessor struct-shape-s3csv-source-escaper :shape
                         "EnclosedInStringPropertyWithQuote" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (quote-char :initarg :quote-char :initform
                         (common-lisp:error ":quote-char is required") :type
                         (common-lisp:or quote-char common-lisp:null) :accessor
                         struct-shape-s3csv-source-quote-char :shape
                         "QuoteChar" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (multiline :initarg :multiline :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-s3csv-source-multiline :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (with-header :initarg :with-header :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-s3csv-source-with-header :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (write-header :initarg :write-header :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-s3csv-source-write-header
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skip-first :initarg :skip-first :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-s3csv-source-skip-first :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (optimize-performance :initarg :optimize-performance
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-value common-lisp:null)
                         :accessor
                         struct-shape-s3csv-source-optimize-performance :shape
                         "BooleanValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor struct-shape-s3csv-source-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3csv-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3csv-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3csv-source 'make-s3csv-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3csv-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3csv-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-size))
      (common-lisp:list
       (common-lisp:cons "GroupSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-files))
      (common-lisp:list
       (common-lisp:cons "GroupFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurse))
      (common-lisp:list
       (common-lisp:cons "Recurse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-band))
      (common-lisp:list
       (common-lisp:cons "MaxBand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-files-in-band))
      (common-lisp:list
       (common-lisp:cons "MaxFilesInBand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'separator))
      (common-lisp:list
       (common-lisp:cons "Separator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'escaper))
      (common-lisp:list
       (common-lisp:cons "Escaper"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-char))
      (common-lisp:list
       (common-lisp:cons "QuoteChar"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiline))
      (common-lisp:list
       (common-lisp:cons "Multiline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'with-header))
      (common-lisp:list
       (common-lisp:cons "WithHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'write-header))
      (common-lisp:list
       (common-lisp:cons "WriteHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-first))
      (common-lisp:list
       (common-lisp:cons "SkipFirst"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'optimize-performance))
      (common-lisp:list
       (common-lisp:cons "OptimizePerformance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3csv-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3delta-catalog-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3delta-catalog-target-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-s3delta-catalog-target-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (partition-keys :initarg :partition-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-studio-path-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3delta-catalog-target-partition-keys
                         :shape "GlueStudioPathList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3delta-catalog-target-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3delta-catalog-target-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or additional-options common-lisp:null)
                         :accessor
                         struct-shape-s3delta-catalog-target-additional-options
                         :shape "AdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-change-policy :initarg :schema-change-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or catalog-schema-change-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3delta-catalog-target-schema-change-policy
                         :shape "CatalogSchemaChangePolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3delta-catalog-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3delta-catalog-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3delta-catalog-target 'make-s3delta-catalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3delta-catalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3delta-catalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3delta-catalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3delta-direct-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3delta-direct-target-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-s3delta-direct-target-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (partition-keys :initarg :partition-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-studio-path-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3delta-direct-target-partition-keys
                         :shape "GlueStudioPathList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3delta-direct-target-path
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compression :initarg :compression :initform
                         (common-lisp:error ":compression is required") :type
                         (common-lisp:or delta-target-compression-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3delta-direct-target-compression :shape
                         "DeltaTargetCompressionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or target-format common-lisp:null)
                         :accessor struct-shape-s3delta-direct-target-format
                         :shape "TargetFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or additional-options common-lisp:null)
                         :accessor
                         struct-shape-s3delta-direct-target-additional-options
                         :shape "AdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-change-policy :initarg :schema-change-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or direct-schema-change-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3delta-direct-target-schema-change-policy
                         :shape "DirectSchemaChangePolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3delta-direct-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3delta-direct-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3delta-direct-target 'make-s3delta-direct-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3delta-direct-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3delta-direct-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression))
      (common-lisp:list
       (common-lisp:cons "Compression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3delta-direct-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3delta-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3delta-source-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (paths :initarg :paths :initform
                         (common-lisp:error ":paths is required") :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor struct-shape-s3delta-source-paths :shape
                         "EnclosedInStringProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-delta-options :initarg
                         :additional-delta-options :initform common-lisp:nil
                         :type
                         (common-lisp:or additional-options common-lisp:null)
                         :accessor
                         struct-shape-s3delta-source-additional-delta-options
                         :shape "AdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or s3direct-source-additional-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3delta-source-additional-options :shape
                         "S3DirectSourceAdditionalOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor struct-shape-s3delta-source-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3delta-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3delta-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3delta-source 'make-s3delta-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3delta-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3delta-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-delta-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalDeltaOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3delta-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3direct-source-additional-options common-lisp:nil
                       ((bounded-size :initarg :bounded-size :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-long common-lisp:null) :accessor
                         struct-shape-s3direct-source-additional-options-bounded-size
                         :shape "BoxedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bounded-files :initarg :bounded-files :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-long common-lisp:null) :accessor
                         struct-shape-s3direct-source-additional-options-bounded-files
                         :shape "BoxedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enable-sample-path :initarg :enable-sample-path
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-s3direct-source-additional-options-enable-sample-path
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-path :initarg :sample-path :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3direct-source-additional-options-sample-path
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3direct-source-additional-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      's3direct-source-additional-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3direct-source-additional-options
                    'make-s3direct-source-additional-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3direct-source-additional-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3direct-source-additional-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounded-size))
      (common-lisp:list
       (common-lisp:cons "BoundedSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounded-files))
      (common-lisp:list
       (common-lisp:cons "BoundedFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-sample-path))
      (common-lisp:list
       (common-lisp:cons "EnableSamplePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-path))
      (common-lisp:list
       (common-lisp:cons "SamplePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3direct-source-additional-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3direct-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3direct-target-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-s3direct-target-inputs :shape "OneInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (partition-keys :initarg :partition-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-studio-path-list
                                         common-lisp:null)
                         :accessor struct-shape-s3direct-target-partition-keys
                         :shape "GlueStudioPathList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3direct-target-path :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compression :initarg :compression :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3direct-target-compression
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or target-format common-lisp:null)
                         :accessor struct-shape-s3direct-target-format :shape
                         "TargetFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-change-policy :initarg :schema-change-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or direct-schema-change-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3direct-target-schema-change-policy
                         :shape "DirectSchemaChangePolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3direct-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3direct-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3direct-target 'make-s3direct-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3direct-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3direct-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression))
      (common-lisp:list
       (common-lisp:cons "Compression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3direct-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3encryption common-lisp:nil
                       ((s3encryption-mode :initarg :s3encryption-mode
                         :initform common-lisp:nil :type
                         (common-lisp:or s3encryption-mode common-lisp:null)
                         :accessor struct-shape-s3encryption-s3encryption-mode
                         :shape "S3EncryptionMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor struct-shape-s3encryption-kms-key-arn :shape
                         "KmsKeyArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3encryption
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3encryption 'make-s3encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3encryption-mode))
      (common-lisp:list
       (common-lisp:cons "S3EncryptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3encryption-list ()
   '(trivial-types:proper-list s3encryption))
 (common-lisp:defun make-s3encryption-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3encryption))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3encryption-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3glue-parquet-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3glue-parquet-target-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-s3glue-parquet-target-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (partition-keys :initarg :partition-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-studio-path-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3glue-parquet-target-partition-keys
                         :shape "GlueStudioPathList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3glue-parquet-target-path
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compression :initarg :compression :initform
                         common-lisp:nil :type
                         (common-lisp:or parquet-compression-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3glue-parquet-target-compression :shape
                         "ParquetCompressionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-change-policy :initarg :schema-change-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or direct-schema-change-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3glue-parquet-target-schema-change-policy
                         :shape "DirectSchemaChangePolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3glue-parquet-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3glue-parquet-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3glue-parquet-target 'make-s3glue-parquet-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3glue-parquet-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3glue-parquet-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression))
      (common-lisp:list
       (common-lisp:cons "Compression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3glue-parquet-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3hudi-catalog-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3hudi-catalog-target-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-s3hudi-catalog-target-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (partition-keys :initarg :partition-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-studio-path-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3hudi-catalog-target-partition-keys
                         :shape "GlueStudioPathList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform
                         (common-lisp:error ":table is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3hudi-catalog-target-table
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (database :initarg :database :initform
                         (common-lisp:error ":database is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3hudi-catalog-target-database
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform
                         (common-lisp:error ":additional-options is required")
                         :type
                         (common-lisp:or additional-options common-lisp:null)
                         :accessor
                         struct-shape-s3hudi-catalog-target-additional-options
                         :shape "AdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-change-policy :initarg :schema-change-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or catalog-schema-change-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3hudi-catalog-target-schema-change-policy
                         :shape "CatalogSchemaChangePolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3hudi-catalog-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3hudi-catalog-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3hudi-catalog-target 'make-s3hudi-catalog-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3hudi-catalog-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3hudi-catalog-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3hudi-catalog-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3hudi-direct-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3hudi-direct-target-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-s3hudi-direct-target-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3hudi-direct-target-path
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compression :initarg :compression :initform
                         (common-lisp:error ":compression is required") :type
                         (common-lisp:or hudi-target-compression-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3hudi-direct-target-compression :shape
                         "HudiTargetCompressionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-keys :initarg :partition-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-studio-path-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3hudi-direct-target-partition-keys
                         :shape "GlueStudioPathList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format :initarg :format :initform
                         (common-lisp:error ":format is required") :type
                         (common-lisp:or target-format common-lisp:null)
                         :accessor struct-shape-s3hudi-direct-target-format
                         :shape "TargetFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform
                         (common-lisp:error ":additional-options is required")
                         :type
                         (common-lisp:or additional-options common-lisp:null)
                         :accessor
                         struct-shape-s3hudi-direct-target-additional-options
                         :shape "AdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-change-policy :initarg :schema-change-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or direct-schema-change-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3hudi-direct-target-schema-change-policy
                         :shape "DirectSchemaChangePolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3hudi-direct-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3hudi-direct-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3hudi-direct-target 'make-s3hudi-direct-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3hudi-direct-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3hudi-direct-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression))
      (common-lisp:list
       (common-lisp:cons "Compression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "Format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3hudi-direct-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3hudi-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3hudi-source-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (paths :initarg :paths :initform
                         (common-lisp:error ":paths is required") :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor struct-shape-s3hudi-source-paths :shape
                         "EnclosedInStringProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-hudi-options :initarg
                         :additional-hudi-options :initform common-lisp:nil
                         :type
                         (common-lisp:or additional-options common-lisp:null)
                         :accessor
                         struct-shape-s3hudi-source-additional-hudi-options
                         :shape "AdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or s3direct-source-additional-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3hudi-source-additional-options :shape
                         "S3DirectSourceAdditionalOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor struct-shape-s3hudi-source-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3hudi-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3hudi-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3hudi-source 'make-s3hudi-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3hudi-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3hudi-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-hudi-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalHudiOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3hudi-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3json-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3json-source-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (paths :initarg :paths :initform
                         (common-lisp:error ":paths is required") :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor struct-shape-s3json-source-paths :shape
                         "EnclosedInStringProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compression-type :initarg :compression-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compression-type common-lisp:null)
                         :accessor struct-shape-s3json-source-compression-type
                         :shape "CompressionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclusions :initarg :exclusions :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor struct-shape-s3json-source-exclusions :shape
                         "EnclosedInStringProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-size :initarg :group-size :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3json-source-group-size :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-files :initarg :group-files :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3json-source-group-files
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recurse :initarg :recurse :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-s3json-source-recurse :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-band :initarg :max-band :initform common-lisp:nil
                         :type
                         (common-lisp:or boxed-non-negative-int
                                         common-lisp:null)
                         :accessor struct-shape-s3json-source-max-band :shape
                         "BoxedNonNegativeInt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-files-in-band :initarg :max-files-in-band
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-int
                                         common-lisp:null)
                         :accessor struct-shape-s3json-source-max-files-in-band
                         :shape "BoxedNonNegativeInt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or s3direct-source-additional-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3json-source-additional-options :shape
                         "S3DirectSourceAdditionalOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (json-path :initarg :json-path :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3json-source-json-path :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (multiline :initarg :multiline :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-s3json-source-multiline :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor struct-shape-s3json-source-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3json-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3json-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3json-source 'make-s3json-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3json-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3json-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-size))
      (common-lisp:list
       (common-lisp:cons "GroupSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-files))
      (common-lisp:list
       (common-lisp:cons "GroupFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurse))
      (common-lisp:list
       (common-lisp:cons "Recurse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-band))
      (common-lisp:list
       (common-lisp:cons "MaxBand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-files-in-band))
      (common-lisp:list
       (common-lisp:cons "MaxFilesInBand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-path))
      (common-lisp:list
       (common-lisp:cons "JsonPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiline))
      (common-lisp:list
       (common-lisp:cons "Multiline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3json-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3parquet-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-s3parquet-source-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (paths :initarg :paths :initform
                         (common-lisp:error ":paths is required") :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor struct-shape-s3parquet-source-paths :shape
                         "EnclosedInStringProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compression-type :initarg :compression-type :initform
                         common-lisp:nil :type
                         (common-lisp:or parquet-compression-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3parquet-source-compression-type :shape
                         "ParquetCompressionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclusions :initarg :exclusions :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor struct-shape-s3parquet-source-exclusions
                         :shape "EnclosedInStringProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (group-size :initarg :group-size :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3parquet-source-group-size
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (group-files :initarg :group-files :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-s3parquet-source-group-files
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recurse :initarg :recurse :initform common-lisp:nil
                         :type (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor struct-shape-s3parquet-source-recurse :shape
                         "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-band :initarg :max-band :initform common-lisp:nil
                         :type
                         (common-lisp:or boxed-non-negative-int
                                         common-lisp:null)
                         :accessor struct-shape-s3parquet-source-max-band
                         :shape "BoxedNonNegativeInt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-files-in-band :initarg :max-files-in-band
                         :initform common-lisp:nil :type
                         (common-lisp:or boxed-non-negative-int
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3parquet-source-max-files-in-band :shape
                         "BoxedNonNegativeInt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or s3direct-source-additional-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3parquet-source-additional-options
                         :shape "S3DirectSourceAdditionalOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor struct-shape-s3parquet-source-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3parquet-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3parquet-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3parquet-source 'make-s3parquet-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3parquet-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3parquet-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-size))
      (common-lisp:list
       (common-lisp:cons "GroupSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-files))
      (common-lisp:list
       (common-lisp:cons "GroupFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurse))
      (common-lisp:list
       (common-lisp:cons "Recurse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-band))
      (common-lisp:list
       (common-lisp:cons "MaxBand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-files-in-band))
      (common-lisp:list
       (common-lisp:cons "MaxFilesInBand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3parquet-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3source-additional-options common-lisp:nil
                       ((bounded-size :initarg :bounded-size :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-long common-lisp:null) :accessor
                         struct-shape-s3source-additional-options-bounded-size
                         :shape "BoxedLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bounded-files :initarg :bounded-files :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-long common-lisp:null) :accessor
                         struct-shape-s3source-additional-options-bounded-files
                         :shape "BoxedLong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3source-additional-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3source-additional-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3source-additional-options
                    'make-s3source-additional-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3source-additional-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3source-additional-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounded-size))
      (common-lisp:list
       (common-lisp:cons "BoundedSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bounded-files))
      (common-lisp:list
       (common-lisp:cons "BoundedFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3source-additional-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3target common-lisp:nil
                       ((path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or path common-lisp:null) :accessor
                         struct-shape-s3target-path :shape "Path" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (exclusions :initarg :exclusions :initform
                         common-lisp:nil :type
                         (common-lisp:or path-list common-lisp:null) :accessor
                         struct-shape-s3target-exclusions :shape "PathList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor struct-shape-s3target-connection-name :shape
                         "ConnectionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-size :initarg :sample-size :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor struct-shape-s3target-sample-size :shape
                         "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-queue-arn :initarg :event-queue-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or event-queue-arn common-lisp:null)
                         :accessor struct-shape-s3target-event-queue-arn :shape
                         "EventQueueArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dlq-event-queue-arn :initarg :dlq-event-queue-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or event-queue-arn common-lisp:null)
                         :accessor struct-shape-s3target-dlq-event-queue-arn
                         :shape "EventQueueArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3target
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3target 'make-s3target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-size))
      (common-lisp:list
       (common-lisp:cons "SampleSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-queue-arn))
      (common-lisp:list
       (common-lisp:cons "EventQueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dlq-event-queue-arn))
      (common-lisp:list
       (common-lisp:cons "DlqEventQueueArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3target-list () '(trivial-types:proper-list s3target))
 (common-lisp:defun make-s3target-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sample-size-percentage () 'common-lisp:double-float)
(common-lisp:deftype scala-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schedule common-lisp:nil
                       ((schedule-expression :initarg :schedule-expression
                         :initform common-lisp:nil :type
                         (common-lisp:or cron-expression common-lisp:null)
                         :accessor struct-shape-schedule-schedule-expression
                         :shape "CronExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or schedule-state common-lisp:null)
                         :accessor struct-shape-schedule-state :shape
                         "ScheduleState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'schedule 'make-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule))
   common-lisp:nil))
(common-lisp:deftype schedule-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition scheduler-not-running-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       scheduler-not-running-exception-message)))
 (common-lisp:export
  (common-lisp:list 'scheduler-not-running-exception
                    'scheduler-not-running-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition scheduler-running-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       scheduler-running-exception-message)))
 (common-lisp:export
  (common-lisp:list 'scheduler-running-exception
                    'scheduler-running-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition scheduler-transitioning-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       scheduler-transitioning-exception-message)))
 (common-lisp:export
  (common-lisp:list 'scheduler-transitioning-exception
                    'scheduler-transitioning-exception-message)))
(common-lisp:progn
 (common-lisp:defclass schema-change-policy common-lisp:nil
                       ((update-behavior :initarg :update-behavior :initform
                         common-lisp:nil :type
                         (common-lisp:or update-behavior common-lisp:null)
                         :accessor
                         struct-shape-schema-change-policy-update-behavior
                         :shape "UpdateBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-behavior :initarg :delete-behavior :initform
                         common-lisp:nil :type
                         (common-lisp:or delete-behavior common-lisp:null)
                         :accessor
                         struct-shape-schema-change-policy-delete-behavior
                         :shape "DeleteBehavior" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-change-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-change-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schema-change-policy 'make-schema-change-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-change-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-change-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-behavior))
      (common-lisp:list
       (common-lisp:cons "UpdateBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-behavior))
      (common-lisp:list
       (common-lisp:cons "DeleteBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-change-policy))
   common-lisp:nil))
(common-lisp:deftype schema-checkpoint-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass schema-column common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or column-name-string common-lisp:null)
                         :accessor struct-shape-schema-column-name :shape
                         "ColumnNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-type :initarg :data-type :initform
                         common-lisp:nil :type
                         (common-lisp:or column-type-string common-lisp:null)
                         :accessor struct-shape-schema-column-data-type :shape
                         "ColumnTypeString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-column
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-column
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'schema-column 'make-schema-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-column))
   common-lisp:nil))
(common-lisp:deftype schema-definition-diff () 'common-lisp:string)
(common-lisp:deftype schema-definition-string () 'common-lisp:string)
(common-lisp:deftype schema-diff-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schema-id common-lisp:nil
                       ((schema-arn :initarg :schema-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor struct-shape-schema-id-schema-arn :shape
                         "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor struct-shape-schema-id-schema-name :shape
                         "SchemaRegistryNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registry-name :initarg :registry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor struct-shape-schema-id-registry-name :shape
                         "SchemaRegistryNameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-id
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-id
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'schema-id 'make-schema-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-list-definition ()
   '(trivial-types:proper-list schema-list-item))
 (common-lisp:defun make-schema-list-definition
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass schema-list-item common-lisp:nil
                       ((registry-name :initarg :registry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor struct-shape-schema-list-item-registry-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor struct-shape-schema-list-item-schema-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (schema-arn :initarg :schema-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor struct-shape-schema-list-item-schema-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-schema-list-item-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-status :initarg :schema-status :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-status common-lisp:null)
                         :accessor struct-shape-schema-list-item-schema-status
                         :shape "SchemaStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or created-timestamp common-lisp:null)
                         :accessor struct-shape-schema-list-item-created-time
                         :shape "CreatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-time :initarg :updated-time :initform
                         common-lisp:nil :type
                         (common-lisp:or updated-timestamp common-lisp:null)
                         :accessor struct-shape-schema-list-item-updated-time
                         :shape "UpdatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schema-list-item 'make-schema-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-status))
      (common-lisp:list
       (common-lisp:cons "SchemaStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-time))
      (common-lisp:list
       (common-lisp:cons "UpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-list-item))
   common-lisp:nil))
(common-lisp:deftype schema-path-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schema-reference common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-id common-lisp:null) :accessor
                         struct-shape-schema-reference-schema-id :shape
                         "SchemaId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema-version-id :initarg :schema-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-schema-reference-schema-version-id :shape
                         "SchemaVersionIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-version-number :initarg :schema-version-number
                         :initform common-lisp:nil :type
                         (common-lisp:or version-long-number common-lisp:null)
                         :accessor
                         struct-shape-schema-reference-schema-version-number
                         :shape "VersionLongNumber" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-reference
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schema-reference 'make-schema-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-number))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-reference))
   common-lisp:nil))
(common-lisp:deftype schema-registry-name-string () 'common-lisp:string)
(common-lisp:deftype schema-registry-token-string () 'common-lisp:string)
(common-lisp:deftype schema-status () 'common-lisp:string)
(common-lisp:deftype schema-validation-error () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schema-version-error-item common-lisp:nil
                       ((version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or version-long-number common-lisp:null)
                         :accessor
                         struct-shape-schema-version-error-item-version-number
                         :shape "VersionLongNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-details :initarg :error-details :initform
                         common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor
                         struct-shape-schema-version-error-item-error-details
                         :shape "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-version-error-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-version-error-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schema-version-error-item
                    'make-schema-version-error-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-error-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-error-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-error-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-version-error-list ()
   '(trivial-types:proper-list schema-version-error-item))
 (common-lisp:defun make-schema-version-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            schema-version-error-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype schema-version-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype schema-version-list ()
   '(trivial-types:proper-list schema-version-list-item))
 (common-lisp:defun make-schema-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            schema-version-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass schema-version-list-item common-lisp:nil
                       ((schema-arn :initarg :schema-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-schema-version-list-item-schema-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-version-id :initarg :schema-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-schema-version-list-item-schema-version-id
                         :shape "SchemaVersionIdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or version-long-number common-lisp:null)
                         :accessor
                         struct-shape-schema-version-list-item-version-number
                         :shape "VersionLongNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or schema-version-status
                                         common-lisp:null)
                         :accessor struct-shape-schema-version-list-item-status
                         :shape "SchemaVersionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         common-lisp:nil :type
                         (common-lisp:or created-timestamp common-lisp:null)
                         :accessor
                         struct-shape-schema-version-list-item-created-time
                         :shape "CreatedTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-version-list-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-version-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schema-version-list-item 'make-schema-version-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "CreatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schema-version-number common-lisp:nil
                       ((latest-version :initarg :latest-version :initform
                         common-lisp:nil :type
                         (common-lisp:or latest-schema-version-boolean
                                         common-lisp:null)
                         :accessor
                         struct-shape-schema-version-number-latest-version
                         :shape "LatestSchemaVersionBoolean" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (version-number :initarg :version-number :initform
                         common-lisp:nil :type
                         (common-lisp:or version-long-number common-lisp:null)
                         :accessor
                         struct-shape-schema-version-number-version-number
                         :shape "VersionLongNumber" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-version-number
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-version-number
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schema-version-number 'make-schema-version-number))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-number))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-number))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version))
      (common-lisp:list
       (common-lisp:cons "LatestVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-number))
      (common-lisp:list
       (common-lisp:cons "VersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schema-version-number))
   common-lisp:nil))
(common-lisp:deftype schema-version-status () 'common-lisp:string)
(common-lisp:deftype script-location-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype search-property-predicates ()
   '(trivial-types:proper-list property-predicate))
 (common-lisp:defun make-search-property-predicates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-predicate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass search-tables-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-search-tables-request-catalog-id :shape
                         "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-search-tables-request-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or search-property-predicates
                                         common-lisp:null)
                         :accessor struct-shape-search-tables-request-filters
                         :shape "SearchPropertyPredicates" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (search-text :initarg :search-text :initform
                         common-lisp:nil :type
                         (common-lisp:or value-string common-lisp:null)
                         :accessor
                         struct-shape-search-tables-request-search-text :shape
                         "ValueString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-criteria :initarg :sort-criteria :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-criteria common-lisp:null)
                         :accessor
                         struct-shape-search-tables-request-sort-criteria
                         :shape "SortCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or page-size common-lisp:null) :accessor
                         struct-shape-search-tables-request-max-results :shape
                         "PageSize" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-share-type :initarg :resource-share-type
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-share-type common-lisp:null)
                         :accessor
                         struct-shape-search-tables-request-resource-share-type
                         :shape "ResourceShareType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-tables-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-tables-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-tables-request 'make-search-tables-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-text))
      (common-lisp:list
       (common-lisp:cons "SearchText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-criteria))
      (common-lisp:list
       (common-lisp:cons "SortCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-share-type))
      (common-lisp:list
       (common-lisp:cons "ResourceShareType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass search-tables-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-search-tables-response-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (table-list :initarg :table-list :initform
                         common-lisp:nil :type
                         (common-lisp:or table-list common-lisp:null) :accessor
                         struct-shape-search-tables-response-table-list :shape
                         "TableList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-search-tables-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'search-tables-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'search-tables-response 'make-search-tables-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-list))
      (common-lisp:list
       (common-lisp:cons "TableList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          search-tables-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass security-configuration common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-security-configuration-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-time-stamp :initarg :created-time-stamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor
                         struct-shape-security-configuration-created-time-stamp
                         :shape "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-security-configuration-encryption-configuration
                         :shape "EncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-security-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'security-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'security-configuration 'make-security-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          security-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          security-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time-stamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          security-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-configuration-list ()
   '(trivial-types:proper-list security-configuration))
 (common-lisp:defun make-security-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-security-group-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass segment common-lisp:nil
                       ((segment-number :initarg :segment-number :initform
                         (common-lisp:error ":segment-number is required")
                         :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor struct-shape-segment-segment-number :shape
                         "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-segments :initarg :total-segments :initform
                         (common-lisp:error ":total-segments is required")
                         :type
                         (common-lisp:or total-segments-integer
                                         common-lisp:null)
                         :accessor struct-shape-segment-total-segments :shape
                         "TotalSegmentsInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-segment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'segment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'segment 'make-segment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input segment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input segment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-number))
      (common-lisp:list
       (common-lisp:cons "SegmentNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-segments))
      (common-lisp:list
       (common-lisp:cons "TotalSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input segment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass select-fields common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-select-fields-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-select-fields-inputs :shape "OneInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (paths :initarg :paths :initform
                         (common-lisp:error ":paths is required") :type
                         (common-lisp:or glue-studio-path-list
                                         common-lisp:null)
                         :accessor struct-shape-select-fields-paths :shape
                         "GlueStudioPathList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-select-fields
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'select-fields
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'select-fields 'make-select-fields))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input select-fields))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input select-fields))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input select-fields))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass select-from-collection common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-select-from-collection-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-select-from-collection-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (index :initarg :index :initform
                         (common-lisp:error ":index is required") :type
                         (common-lisp:or non-negative-int common-lisp:null)
                         :accessor struct-shape-select-from-collection-index
                         :shape "NonNegativeInt" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-select-from-collection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'select-from-collection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'select-from-collection 'make-select-from-collection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-from-collection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-from-collection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "Index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-from-collection))
   common-lisp:nil))
(common-lisp:deftype separator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ser-de-info common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-ser-de-info-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (serialization-library :initarg :serialization-library
                         :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-ser-de-info-serialization-library :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor struct-shape-ser-de-info-parameters :shape
                         "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ser-de-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ser-de-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ser-de-info 'make-ser-de-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ser-de-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ser-de-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'serialization-library))
      (common-lisp:list
       (common-lisp:cons "SerializationLibrary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ser-de-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass session common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-session-id :shape "NameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-on :initarg :created-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-session-created-on :shape
                         "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or session-status common-lisp:null)
                         :accessor struct-shape-session-status :shape
                         "SessionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-session-error-message :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-session-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or orchestration-role-arn
                                         common-lisp:null)
                         :accessor struct-shape-session-role :shape
                         "OrchestrationRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (command :initarg :command :initform common-lisp:nil
                         :type
                         (common-lisp:or session-command common-lisp:null)
                         :accessor struct-shape-session-command :shape
                         "SessionCommand" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-arguments :initarg :default-arguments
                         :initform common-lisp:nil :type
                         (common-lisp:or orchestration-arguments-map
                                         common-lisp:null)
                         :accessor struct-shape-session-default-arguments
                         :shape "OrchestrationArgumentsMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connections :initarg :connections :initform
                         common-lisp:nil :type
                         (common-lisp:or connections-list common-lisp:null)
                         :accessor struct-shape-session-connections :shape
                         "ConnectionsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (progress :initarg :progress :initform common-lisp:nil
                         :type (common-lisp:or double-value common-lisp:null)
                         :accessor struct-shape-session-progress :shape
                         "DoubleValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-session-max-capacity :shape
                         "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-session-security-configuration
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glue-version :initarg :glue-version :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-version-string common-lisp:null)
                         :accessor struct-shape-session-glue-version :shape
                         "GlueVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor struct-shape-session-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-type common-lisp:null)
                         :accessor struct-shape-session-worker-type :shape
                         "WorkerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completed-on :initarg :completed-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-session-completed-on :shape
                         "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-time :initarg :execution-time :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-session-execution-time :shape
                         "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dpuseconds :initarg :dpuseconds :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor struct-shape-session-dpuseconds :shape
                         "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idle-timeout :initarg :idle-timeout :initform
                         common-lisp:nil :type
                         (common-lisp:or idle-timeout common-lisp:null)
                         :accessor struct-shape-session-idle-timeout :shape
                         "IdleTimeout" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'session 'make-session))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "Command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-arguments))
      (common-lisp:list
       (common-lisp:cons "DefaultArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dpuseconds))
      (common-lisp:list
       (common-lisp:cons "DPUSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idle-timeout))
      (common-lisp:list
       (common-lisp:cons "IdleTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass session-command common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-session-command-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (python-version :initarg :python-version :initform
                         common-lisp:nil :type
                         (common-lisp:or python-version-string
                                         common-lisp:null)
                         :accessor struct-shape-session-command-python-version
                         :shape "PythonVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-session-command
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'session-command
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'session-command 'make-session-command))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-command))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-command))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'python-version))
      (common-lisp:list
       (common-lisp:cons "PythonVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-command))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype session-id-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-session-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype session-list () '(trivial-types:proper-list session))
 (common-lisp:defun make-session-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session))
   aws-sdk/generator/shape::members))
(common-lisp:deftype session-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass skewed-info common-lisp:nil
                       ((skewed-column-names :initarg :skewed-column-names
                         :initform common-lisp:nil :type
                         (common-lisp:or name-string-list common-lisp:null)
                         :accessor struct-shape-skewed-info-skewed-column-names
                         :shape "NameStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skewed-column-values :initarg :skewed-column-values
                         :initform common-lisp:nil :type
                         (common-lisp:or column-value-string-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-skewed-info-skewed-column-values :shape
                         "ColumnValueStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skewed-column-value-location-maps :initarg
                         :skewed-column-value-location-maps :initform
                         common-lisp:nil :type
                         (common-lisp:or location-map common-lisp:null)
                         :accessor
                         struct-shape-skewed-info-skewed-column-value-location-maps
                         :shape "LocationMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-skewed-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'skewed-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'skewed-info 'make-skewed-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input skewed-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input skewed-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skewed-column-names))
      (common-lisp:list
       (common-lisp:cons "SkewedColumnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skewed-column-values))
      (common-lisp:list
       (common-lisp:cons "SkewedColumnValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'skewed-column-value-location-maps))
      (common-lisp:list
       (common-lisp:cons "SkewedColumnValueLocationMaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input skewed-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snowflake-node-data common-lisp:nil
                       ((source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-limited-string
                                         common-lisp:null)
                         :accessor struct-shape-snowflake-node-data-source-type
                         :shape "GenericLimitedString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection :initarg :connection :initform
                         common-lisp:nil :type
                         (common-lisp:or option common-lisp:null) :accessor
                         struct-shape-snowflake-node-data-connection :shape
                         "Option" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-snowflake-node-data-schema
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table :initarg :table :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-snowflake-node-data-table
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database :initarg :database :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-snowflake-node-data-database
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (temp-dir :initarg :temp-dir :initform common-lisp:nil
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-snowflake-node-data-temp-dir
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (iam-role :initarg :iam-role :initform common-lisp:nil
                         :type (common-lisp:or option common-lisp:null)
                         :accessor struct-shape-snowflake-node-data-iam-role
                         :shape "Option" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or additional-options common-lisp:null)
                         :accessor
                         struct-shape-snowflake-node-data-additional-options
                         :shape "AdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-query :initarg :sample-query :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-snowflake-node-data-sample-query :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pre-action :initarg :pre-action :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-snowflake-node-data-pre-action
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (post-action :initarg :post-action :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-snowflake-node-data-post-action
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-snowflake-node-data-action
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upsert :initarg :upsert :initform common-lisp:nil
                         :type (common-lisp:or boolean-value common-lisp:null)
                         :accessor struct-shape-snowflake-node-data-upsert
                         :shape "BooleanValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (merge-action :initarg :merge-action :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-limited-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-snowflake-node-data-merge-action :shape
                         "GenericLimitedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (merge-when-matched :initarg :merge-when-matched
                         :initform common-lisp:nil :type
                         (common-lisp:or generic-limited-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-snowflake-node-data-merge-when-matched
                         :shape "GenericLimitedString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (merge-when-not-matched :initarg
                         :merge-when-not-matched :initform common-lisp:nil
                         :type
                         (common-lisp:or generic-limited-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-snowflake-node-data-merge-when-not-matched
                         :shape "GenericLimitedString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (merge-clause :initarg :merge-clause :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-snowflake-node-data-merge-clause :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (staging-table :initarg :staging-table :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-snowflake-node-data-staging-table :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (selected-columns :initarg :selected-columns :initform
                         common-lisp:nil :type
                         (common-lisp:or option-list common-lisp:null)
                         :accessor
                         struct-shape-snowflake-node-data-selected-columns
                         :shape "OptionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-pushdown :initarg :auto-pushdown :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-value common-lisp:null)
                         :accessor
                         struct-shape-snowflake-node-data-auto-pushdown :shape
                         "BooleanValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-schema :initarg :table-schema :initform
                         common-lisp:nil :type
                         (common-lisp:or option-list common-lisp:null)
                         :accessor
                         struct-shape-snowflake-node-data-table-schema :shape
                         "OptionList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snowflake-node-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snowflake-node-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'snowflake-node-data 'make-snowflake-node-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snowflake-node-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snowflake-node-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temp-dir))
      (common-lisp:list
       (common-lisp:cons "TempDir"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "IamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-query))
      (common-lisp:list
       (common-lisp:cons "SampleQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-action))
      (common-lisp:list
       (common-lisp:cons "PreAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'post-action))
      (common-lisp:list
       (common-lisp:cons "PostAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upsert))
      (common-lisp:list
       (common-lisp:cons "Upsert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-action))
      (common-lisp:list
       (common-lisp:cons "MergeAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-when-matched))
      (common-lisp:list
       (common-lisp:cons "MergeWhenMatched"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'merge-when-not-matched))
      (common-lisp:list
       (common-lisp:cons "MergeWhenNotMatched"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'merge-clause))
      (common-lisp:list
       (common-lisp:cons "MergeClause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'staging-table))
      (common-lisp:list
       (common-lisp:cons "StagingTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selected-columns))
      (common-lisp:list
       (common-lisp:cons "SelectedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-pushdown))
      (common-lisp:list
       (common-lisp:cons "AutoPushdown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-schema))
      (common-lisp:list
       (common-lisp:cons "TableSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snowflake-node-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snowflake-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-snowflake-source-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or snowflake-node-data common-lisp:null)
                         :accessor struct-shape-snowflake-source-data :shape
                         "SnowflakeNodeData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor struct-shape-snowflake-source-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snowflake-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snowflake-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'snowflake-source 'make-snowflake-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snowflake-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snowflake-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snowflake-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snowflake-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-snowflake-target-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data :initarg :data :initform
                         (common-lisp:error ":data is required") :type
                         (common-lisp:or snowflake-node-data common-lisp:null)
                         :accessor struct-shape-snowflake-target-data :shape
                         "SnowflakeNodeData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inputs :initarg :inputs :initform common-lisp:nil
                         :type (common-lisp:or one-input common-lisp:null)
                         :accessor struct-shape-snowflake-target-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snowflake-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snowflake-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'snowflake-target 'make-snowflake-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snowflake-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snowflake-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snowflake-target))
   common-lisp:nil))
(common-lisp:deftype sort () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sort-criteria ()
   '(trivial-types:proper-list sort-criterion))
 (common-lisp:defun make-sort-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sort-criterion))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sort-criterion common-lisp:nil
                       ((field-name :initarg :field-name :initform
                         common-lisp:nil :type
                         (common-lisp:or value-string common-lisp:null)
                         :accessor struct-shape-sort-criterion-field-name
                         :shape "ValueString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort :initarg :sort :initform common-lisp:nil :type
                         (common-lisp:or sort common-lisp:null) :accessor
                         struct-shape-sort-criterion-sort :shape "Sort"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sort-criterion
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sort-criterion
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sort-criterion 'make-sort-criterion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-criterion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-criterion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "FieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "Sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-criterion))
   common-lisp:nil))
(common-lisp:deftype sort-direction-type () 'common-lisp:string)
(common-lisp:deftype source-control-auth-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source-control-details common-lisp:nil
                       ((provider :initarg :provider :initform common-lisp:nil
                         :type
                         (common-lisp:or source-control-provider
                                         common-lisp:null)
                         :accessor struct-shape-source-control-details-provider
                         :shape "SourceControlProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (repository :initarg :repository :initform
                         common-lisp:nil :type
                         (common-lisp:or generic512char-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-control-details-repository :shape
                         "Generic512CharString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or generic512char-string
                                         common-lisp:null)
                         :accessor struct-shape-source-control-details-owner
                         :shape "Generic512CharString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (branch :initarg :branch :initform common-lisp:nil
                         :type
                         (common-lisp:or generic512char-string
                                         common-lisp:null)
                         :accessor struct-shape-source-control-details-branch
                         :shape "Generic512CharString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (folder :initarg :folder :initform common-lisp:nil
                         :type
                         (common-lisp:or generic512char-string
                                         common-lisp:null)
                         :accessor struct-shape-source-control-details-folder
                         :shape "Generic512CharString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-commit-id :initarg :last-commit-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generic512char-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-control-details-last-commit-id
                         :shape "Generic512CharString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auth-strategy :initarg :auth-strategy :initform
                         common-lisp:nil :type
                         (common-lisp:or source-control-auth-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-control-details-auth-strategy
                         :shape "SourceControlAuthStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auth-token :initarg :auth-token :initform
                         common-lisp:nil :type
                         (common-lisp:or generic512char-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-control-details-auth-token :shape
                         "Generic512CharString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-control-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-control-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'source-control-details 'make-source-control-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-control-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-control-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "Repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "Branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder))
      (common-lisp:list
       (common-lisp:cons "Folder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-commit-id))
      (common-lisp:list
       (common-lisp:cons "LastCommitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-strategy))
      (common-lisp:list
       (common-lisp:cons "AuthStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-control-details))
   common-lisp:nil))
(common-lisp:deftype source-control-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass spark-connector-source common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-spark-connector-source-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         (common-lisp:error ":connection-name is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-spark-connector-source-connection-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connector-name :initarg :connector-name :initform
                         (common-lisp:error ":connector-name is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-spark-connector-source-connector-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-type :initarg :connection-type :initform
                         (common-lisp:error ":connection-type is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-spark-connector-source-connection-type
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or additional-options common-lisp:null)
                         :accessor
                         struct-shape-spark-connector-source-additional-options
                         :shape "AdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor
                         struct-shape-spark-connector-source-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-spark-connector-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'spark-connector-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'spark-connector-source 'make-spark-connector-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spark-connector-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spark-connector-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "ConnectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spark-connector-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass spark-connector-target common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-spark-connector-target-name :shape
                         "NodeName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-spark-connector-target-inputs :shape
                         "OneInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         (common-lisp:error ":connection-name is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-spark-connector-target-connection-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connector-name :initarg :connector-name :initform
                         (common-lisp:error ":connector-name is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-spark-connector-target-connector-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-type :initarg :connection-type :initform
                         (common-lisp:error ":connection-type is required")
                         :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-spark-connector-target-connection-type
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (additional-options :initarg :additional-options
                         :initform common-lisp:nil :type
                         (common-lisp:or additional-options common-lisp:null)
                         :accessor
                         struct-shape-spark-connector-target-additional-options
                         :shape "AdditionalOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor
                         struct-shape-spark-connector-target-output-schemas
                         :shape "GlueSchemas" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-spark-connector-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'spark-connector-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'spark-connector-target 'make-spark-connector-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          spark-connector-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          spark-connector-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-name))
      (common-lisp:list
       (common-lisp:cons "ConnectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-type))
      (common-lisp:list
       (common-lisp:cons "ConnectionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          spark-connector-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass spark-sql common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-spark-sql-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or many-inputs common-lisp:null)
                         :accessor struct-shape-spark-sql-inputs :shape
                         "ManyInputs" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sql-query :initarg :sql-query :initform
                         (common-lisp:error ":sql-query is required") :type
                         (common-lisp:or sql-query common-lisp:null) :accessor
                         struct-shape-spark-sql-sql-query :shape "SqlQuery"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sql-aliases :initarg :sql-aliases :initform
                         (common-lisp:error ":sql-aliases is required") :type
                         (common-lisp:or sql-aliases common-lisp:null)
                         :accessor struct-shape-spark-sql-sql-aliases :shape
                         "SqlAliases" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-schemas :initarg :output-schemas :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-schemas common-lisp:null)
                         :accessor struct-shape-spark-sql-output-schemas :shape
                         "GlueSchemas" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-spark-sql
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'spark-sql
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'spark-sql 'make-spark-sql))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spark-sql))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spark-sql))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-query))
      (common-lisp:list
       (common-lisp:cons "SqlQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sql-aliases))
      (common-lisp:list
       (common-lisp:cons "SqlAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-schemas))
      (common-lisp:list
       (common-lisp:cons "OutputSchemas"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spark-sql))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass spigot common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-spigot-name :shape "NodeName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-spigot-inputs :shape "OneInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-spigot-path :shape
                         "EnclosedInStringProperty" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (topk :initarg :topk :initform common-lisp:nil :type
                         (common-lisp:or topk common-lisp:null) :accessor
                         struct-shape-spigot-topk :shape "Topk" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (prob :initarg :prob :initform common-lisp:nil :type
                         (common-lisp:or prob common-lisp:null) :accessor
                         struct-shape-spigot-prob :shape "Prob" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-spigot
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'spigot
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'spigot 'make-spigot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input spigot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input spigot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topk))
      (common-lisp:list
       (common-lisp:cons "Topk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prob))
      (common-lisp:list
       (common-lisp:cons "Prob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input spigot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass split-fields common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-split-fields-name :shape "NodeName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or one-input common-lisp:null) :accessor
                         struct-shape-split-fields-inputs :shape "OneInput"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (paths :initarg :paths :initform
                         (common-lisp:error ":paths is required") :type
                         (common-lisp:or glue-studio-path-list
                                         common-lisp:null)
                         :accessor struct-shape-split-fields-paths :shape
                         "GlueStudioPathList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-split-fields
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'split-fields
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'split-fields 'make-split-fields))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input split-fields))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input split-fields))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'paths))
      (common-lisp:list
       (common-lisp:cons "Paths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input split-fields))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sql-alias common-lisp:nil
                       ((from :initarg :from :initform
                         (common-lisp:error ":from is required") :type
                         (common-lisp:or node-id common-lisp:null) :accessor
                         struct-shape-sql-alias-from :shape "NodeId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (alias :initarg :alias :initform
                         (common-lisp:error ":alias is required") :type
                         (common-lisp:or enclosed-in-string-property-with-quote
                                         common-lisp:null)
                         :accessor struct-shape-sql-alias-alias :shape
                         "EnclosedInStringPropertyWithQuote" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sql-alias
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sql-alias
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sql-alias 'make-sql-alias))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sql-alias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sql-alias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sql-alias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sql-aliases () '(trivial-types:proper-list sql-alias))
 (common-lisp:defun make-sql-aliases
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sql-alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sql-query () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-blueprint-run-request common-lisp:nil
                       ((blueprint-name :initarg :blueprint-name :initform
                         (common-lisp:error ":blueprint-name is required")
                         :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-blueprint-run-request-blueprint-name
                         :shape "OrchestrationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or blueprint-parameters common-lisp:null)
                         :accessor
                         struct-shape-start-blueprint-run-request-parameters
                         :shape "BlueprintParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or orchestration-iamrole-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-blueprint-run-request-role-arn
                         :shape "OrchestrationIAMRoleArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-blueprint-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-blueprint-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-blueprint-run-request
                    'make-start-blueprint-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-blueprint-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-blueprint-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-name))
      (common-lisp:list
       (common-lisp:cons "BlueprintName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-blueprint-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-blueprint-run-response common-lisp:nil
                       ((run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or id-string common-lisp:null)
                         :accessor
                         struct-shape-start-blueprint-run-response-run-id
                         :shape "IdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-blueprint-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-blueprint-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-blueprint-run-response
                    'make-start-blueprint-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-blueprint-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-blueprint-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-blueprint-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-column-statistics-task-run-request common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-start-column-statistics-task-run-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-start-column-statistics-task-run-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (column-name-list :initarg :column-name-list :initform
                         common-lisp:nil :type
                         (common-lisp:or column-name-list common-lisp:null)
                         :accessor
                         struct-shape-start-column-statistics-task-run-request-column-name-list
                         :shape "ColumnNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform
                         (common-lisp:error ":role is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-start-column-statistics-task-run-request-role
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sample-size :initarg :sample-size :initform
                         common-lisp:nil :type
                         (common-lisp:or sample-size-percentage
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-column-statistics-task-run-request-sample-size
                         :shape "SampleSizePercentage" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-start-column-statistics-task-run-request-catalog-id
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-start-column-statistics-task-run-request-security-configuration
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-column-statistics-task-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-column-statistics-task-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-column-statistics-task-run-request
                    'make-start-column-statistics-task-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-column-statistics-task-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-column-statistics-task-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name-list))
      (common-lisp:list
       (common-lisp:cons "ColumnNameList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-size))
      (common-lisp:list
       (common-lisp:cons "SampleSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-column-statistics-task-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-column-statistics-task-run-response
                       common-lisp:nil
                       ((column-statistics-task-run-id :initarg
                         :column-statistics-task-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-start-column-statistics-task-run-response-column-statistics-task-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-column-statistics-task-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-column-statistics-task-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-column-statistics-task-run-response
                    'make-start-column-statistics-task-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-column-statistics-task-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-column-statistics-task-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-statistics-task-run-id))
      (common-lisp:list
       (common-lisp:cons "ColumnStatisticsTaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-column-statistics-task-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-crawler-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-start-crawler-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-crawler-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-crawler-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-crawler-request 'make-start-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-crawler-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-crawler-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-crawler-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-crawler-response 'make-start-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-crawler-schedule-request common-lisp:nil
                       ((crawler-name :initarg :crawler-name :initform
                         (common-lisp:error ":crawler-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-start-crawler-schedule-request-crawler-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-crawler-schedule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-crawler-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-crawler-schedule-request
                    'make-start-crawler-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name))
      (common-lisp:list
       (common-lisp:cons "CrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-crawler-schedule-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-crawler-schedule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-crawler-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-crawler-schedule-response
                    'make-start-crawler-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-crawler-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-data-quality-rule-recommendation-run-request
                       common-lisp:nil
                       ((data-source :initarg :data-source :initform
                         (common-lisp:error ":data-source is required") :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-rule-recommendation-run-request-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform
                         (common-lisp:error ":role is required") :type
                         (common-lisp:or role-string common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-rule-recommendation-run-request-role
                         :shape "RoleString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-rule-recommendation-run-request-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-rule-recommendation-run-request-timeout
                         :shape "Timeout" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-ruleset-name :initarg :created-ruleset-name
                         :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-rule-recommendation-run-request-created-ruleset-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-rule-recommendation-run-request-client-token
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-data-quality-rule-recommendation-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-data-quality-rule-recommendation-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-data-quality-rule-recommendation-run-request
                    'make-start-data-quality-rule-recommendation-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-rule-recommendation-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-rule-recommendation-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'created-ruleset-name))
      (common-lisp:list
       (common-lisp:cons "CreatedRulesetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-rule-recommendation-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-data-quality-rule-recommendation-run-response
                       common-lisp:nil
                       ((run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-rule-recommendation-run-response-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-data-quality-rule-recommendation-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-data-quality-rule-recommendation-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-data-quality-rule-recommendation-run-response
                    'make-start-data-quality-rule-recommendation-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-rule-recommendation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-rule-recommendation-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-rule-recommendation-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-data-quality-ruleset-evaluation-run-request
                       common-lisp:nil
                       ((data-source :initarg :data-source :initform
                         (common-lisp:error ":data-source is required") :type
                         (common-lisp:or data-source common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-ruleset-evaluation-run-request-data-source
                         :shape "DataSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform
                         (common-lisp:error ":role is required") :type
                         (common-lisp:or role-string common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-ruleset-evaluation-run-request-role
                         :shape "RoleString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-ruleset-evaluation-run-request-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-ruleset-evaluation-run-request-timeout
                         :shape "Timeout" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-ruleset-evaluation-run-request-client-token
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-run-options :initarg
                         :additional-run-options :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          data-quality-evaluation-run-additional-run-options
                          common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-ruleset-evaluation-run-request-additional-run-options
                         :shape "DataQualityEvaluationRunAdditionalRunOptions"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ruleset-names :initarg :ruleset-names :initform
                         (common-lisp:error ":ruleset-names is required") :type
                         (common-lisp:or ruleset-names common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-ruleset-evaluation-run-request-ruleset-names
                         :shape "RulesetNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-data-sources :initarg
                         :additional-data-sources :initform common-lisp:nil
                         :type
                         (common-lisp:or data-source-map common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-ruleset-evaluation-run-request-additional-data-sources
                         :shape "DataSourceMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-data-quality-ruleset-evaluation-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-data-quality-ruleset-evaluation-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-data-quality-ruleset-evaluation-run-request
                    'make-start-data-quality-ruleset-evaluation-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-ruleset-evaluation-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-ruleset-evaluation-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-run-options))
      (common-lisp:list
       (common-lisp:cons "AdditionalRunOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset-names))
      (common-lisp:list
       (common-lisp:cons "RulesetNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-data-sources))
      (common-lisp:list
       (common-lisp:cons "AdditionalDataSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-ruleset-evaluation-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-data-quality-ruleset-evaluation-run-response
                       common-lisp:nil
                       ((run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-start-data-quality-ruleset-evaluation-run-response-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-data-quality-ruleset-evaluation-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-data-quality-ruleset-evaluation-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-data-quality-ruleset-evaluation-run-response
                    'make-start-data-quality-ruleset-evaluation-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-ruleset-evaluation-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-ruleset-evaluation-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-quality-ruleset-evaluation-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-export-labels-task-run-request common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         (common-lisp:error ":transform-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-start-export-labels-task-run-request-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-s3path :initarg :output-s3path :initform
                         (common-lisp:error ":output-s3path is required") :type
                         (common-lisp:or uri-string common-lisp:null) :accessor
                         struct-shape-start-export-labels-task-run-request-output-s3path
                         :shape "UriString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-export-labels-task-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-export-labels-task-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-export-labels-task-run-request
                    'make-start-export-labels-task-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-export-labels-task-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-export-labels-task-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3path))
      (common-lisp:list
       (common-lisp:cons "OutputS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-export-labels-task-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-export-labels-task-run-response common-lisp:nil
                       ((task-run-id :initarg :task-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-start-export-labels-task-run-response-task-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-export-labels-task-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-export-labels-task-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-export-labels-task-run-response
                    'make-start-export-labels-task-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-export-labels-task-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-export-labels-task-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-export-labels-task-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-import-labels-task-run-request common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         (common-lisp:error ":transform-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-start-import-labels-task-run-request-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-s3path :initarg :input-s3path :initform
                         (common-lisp:error ":input-s3path is required") :type
                         (common-lisp:or uri-string common-lisp:null) :accessor
                         struct-shape-start-import-labels-task-run-request-input-s3path
                         :shape "UriString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replace-all-labels :initarg :replace-all-labels
                         :initform common-lisp:nil :type
                         (common-lisp:or replace-boolean common-lisp:null)
                         :accessor
                         struct-shape-start-import-labels-task-run-request-replace-all-labels
                         :shape "ReplaceBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-import-labels-task-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-import-labels-task-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-import-labels-task-run-request
                    'make-start-import-labels-task-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-labels-task-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-labels-task-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-s3path))
      (common-lisp:list
       (common-lisp:cons "InputS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replace-all-labels))
      (common-lisp:list
       (common-lisp:cons "ReplaceAllLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-labels-task-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-import-labels-task-run-response common-lisp:nil
                       ((task-run-id :initarg :task-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-start-import-labels-task-run-response-task-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-import-labels-task-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-import-labels-task-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-import-labels-task-run-response
                    'make-start-import-labels-task-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-labels-task-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-labels-task-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-labels-task-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-job-run-request common-lisp:nil
                       ((job-name :initarg :job-name :initform
                         (common-lisp:error ":job-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-start-job-run-request-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-run-id :initarg :job-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-start-job-run-request-job-run-id :shape
                         "IdString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arguments :initarg :arguments :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-map common-lisp:null)
                         :accessor struct-shape-start-job-run-request-arguments
                         :shape "GenericMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allocated-capacity :initarg :allocated-capacity
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-start-job-run-request-allocated-capacity
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor struct-shape-start-job-run-request-timeout
                         :shape "Timeout" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor
                         struct-shape-start-job-run-request-max-capacity :shape
                         "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (security-configuration :initarg
                         :security-configuration :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-start-job-run-request-security-configuration
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-property :initarg :notification-property
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-job-run-request-notification-property
                         :shape "NotificationProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-type common-lisp:null)
                         :accessor
                         struct-shape-start-job-run-request-worker-type :shape
                         "WorkerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-start-job-run-request-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-class :initarg :execution-class :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-class common-lisp:null)
                         :accessor
                         struct-shape-start-job-run-request-execution-class
                         :shape "ExecutionClass" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-job-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-job-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-job-run-request 'make-start-job-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arguments))
      (common-lisp:list
       (common-lisp:cons "Arguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocated-capacity))
      (common-lisp:list
       (common-lisp:cons "AllocatedCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-configuration))
      (common-lisp:list
       (common-lisp:cons "SecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-property))
      (common-lisp:list
       (common-lisp:cons "NotificationProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-class))
      (common-lisp:list
       (common-lisp:cons "ExecutionClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-job-run-response common-lisp:nil
                       ((job-run-id :initarg :job-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-start-job-run-response-job-run-id :shape
                         "IdString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-job-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-job-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-job-run-response 'make-start-job-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-run-id))
      (common-lisp:list
       (common-lisp:cons "JobRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-job-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-mlevaluation-task-run-request common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         (common-lisp:error ":transform-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-start-mlevaluation-task-run-request-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-mlevaluation-task-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-mlevaluation-task-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-mlevaluation-task-run-request
                    'make-start-mlevaluation-task-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mlevaluation-task-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mlevaluation-task-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mlevaluation-task-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-mlevaluation-task-run-response common-lisp:nil
                       ((task-run-id :initarg :task-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-start-mlevaluation-task-run-response-task-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-mlevaluation-task-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-mlevaluation-task-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-mlevaluation-task-run-response
                    'make-start-mlevaluation-task-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mlevaluation-task-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mlevaluation-task-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mlevaluation-task-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-mllabeling-set-generation-task-run-request
                       common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         (common-lisp:error ":transform-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-start-mllabeling-set-generation-task-run-request-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-s3path :initarg :output-s3path :initform
                         (common-lisp:error ":output-s3path is required") :type
                         (common-lisp:or uri-string common-lisp:null) :accessor
                         struct-shape-start-mllabeling-set-generation-task-run-request-output-s3path
                         :shape "UriString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-mllabeling-set-generation-task-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-mllabeling-set-generation-task-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-mllabeling-set-generation-task-run-request
                    'make-start-mllabeling-set-generation-task-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mllabeling-set-generation-task-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mllabeling-set-generation-task-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3path))
      (common-lisp:list
       (common-lisp:cons "OutputS3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mllabeling-set-generation-task-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-mllabeling-set-generation-task-run-response
                       common-lisp:nil
                       ((task-run-id :initarg :task-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-start-mllabeling-set-generation-task-run-response-task-run-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-mllabeling-set-generation-task-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-mllabeling-set-generation-task-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-mllabeling-set-generation-task-run-response
                    'make-start-mllabeling-set-generation-task-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-mllabeling-set-generation-task-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-mllabeling-set-generation-task-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-mllabeling-set-generation-task-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-trigger-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-start-trigger-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-trigger-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-trigger-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-trigger-request 'make-start-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-trigger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-trigger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-trigger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-trigger-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-start-trigger-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-trigger-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-trigger-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-trigger-response 'make-start-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-trigger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-trigger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-trigger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-workflow-run-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-start-workflow-run-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (run-properties :initarg :run-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or workflow-run-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-workflow-run-request-run-properties
                         :shape "WorkflowRunProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-workflow-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-workflow-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-workflow-run-request
                    'make-start-workflow-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-properties))
      (common-lisp:list
       (common-lisp:cons "RunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-workflow-run-response common-lisp:nil
                       ((run-id :initarg :run-id :initform common-lisp:nil
                         :type (common-lisp:or id-string common-lisp:null)
                         :accessor
                         struct-shape-start-workflow-run-response-run-id :shape
                         "IdString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-workflow-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-workflow-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-workflow-run-response
                    'make-start-workflow-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-workflow-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass starting-event-batch-condition common-lisp:nil
                       ((batch-size :initarg :batch-size :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-starting-event-batch-condition-batch-size
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (batch-window :initarg :batch-window :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-starting-event-batch-condition-batch-window
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-starting-event-batch-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'starting-event-batch-condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'starting-event-batch-condition
                    'make-starting-event-batch-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          starting-event-batch-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          starting-event-batch-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-size))
      (common-lisp:list
       (common-lisp:cons "BatchSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-window))
      (common-lisp:list
       (common-lisp:cons "BatchWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          starting-event-batch-condition))
   common-lisp:nil))
(common-lisp:deftype starting-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass statement common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor struct-shape-statement-id :shape
                         "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-statement-code :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or statement-state common-lisp:null)
                         :accessor struct-shape-statement-state :shape
                         "StatementState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output :initarg :output :initform common-lisp:nil
                         :type
                         (common-lisp:or statement-output common-lisp:null)
                         :accessor struct-shape-statement-output :shape
                         "StatementOutput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (progress :initarg :progress :initform common-lisp:nil
                         :type (common-lisp:or double-value common-lisp:null)
                         :accessor struct-shape-statement-progress :shape
                         "DoubleValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         common-lisp:nil :type
                         (common-lisp:or long-value common-lisp:null) :accessor
                         struct-shape-statement-started-on :shape "LongValue"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completed-on :initarg :completed-on :initform
                         common-lisp:nil :type
                         (common-lisp:or long-value common-lisp:null) :accessor
                         struct-shape-statement-completed-on :shape "LongValue"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-statement
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'statement
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'statement 'make-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output))
      (common-lisp:list
       (common-lisp:cons "Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "Progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype statement-list () '(trivial-types:proper-list statement))
 (common-lisp:defun make-statement-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list statement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass statement-output common-lisp:nil
                       ((data :initarg :data :initform common-lisp:nil :type
                         (common-lisp:or statement-output-data
                                         common-lisp:null)
                         :accessor struct-shape-statement-output-data :shape
                         "StatementOutputData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-count :initarg :execution-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-statement-output-execution-count :shape
                         "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or statement-state common-lisp:null)
                         :accessor struct-shape-statement-output-status :shape
                         "StatementState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-name :initarg :error-name :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-statement-output-error-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-value :initarg :error-value :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-statement-output-error-value
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (traceback :initarg :traceback :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-string-list
                                         common-lisp:null)
                         :accessor struct-shape-statement-output-traceback
                         :shape "OrchestrationStringList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-statement-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'statement-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'statement-output 'make-statement-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statement-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statement-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-count))
      (common-lisp:list
       (common-lisp:cons "ExecutionCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-name))
      (common-lisp:list
       (common-lisp:cons "ErrorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-value))
      (common-lisp:list
       (common-lisp:cons "ErrorValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traceback))
      (common-lisp:list
       (common-lisp:cons "Traceback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statement-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass statement-output-data common-lisp:nil
                       ((text-plain :initarg :text-plain :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-statement-output-data-text-plain :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-statement-output-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'statement-output-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'statement-output-data 'make-statement-output-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          statement-output-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          statement-output-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-plain))
      (common-lisp:list
       (common-lisp:cons "TextPlain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          statement-output-data))
   common-lisp:nil))
(common-lisp:deftype statement-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-column-statistics-task-run-request common-lisp:nil
                       ((database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-stop-column-statistics-task-run-request-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-stop-column-statistics-task-run-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-column-statistics-task-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-column-statistics-task-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-column-statistics-task-run-request
                    'make-stop-column-statistics-task-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-column-statistics-task-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-column-statistics-task-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-column-statistics-task-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-column-statistics-task-run-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-column-statistics-task-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-column-statistics-task-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-column-statistics-task-run-response
                    'make-stop-column-statistics-task-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-column-statistics-task-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-column-statistics-task-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-column-statistics-task-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-crawler-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-stop-crawler-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-crawler-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-crawler-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-crawler-request 'make-stop-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-crawler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-crawler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-crawler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-crawler-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-crawler-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-crawler-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-crawler-response 'make-stop-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-crawler-schedule-request common-lisp:nil
                       ((crawler-name :initarg :crawler-name :initform
                         (common-lisp:error ":crawler-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-stop-crawler-schedule-request-crawler-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-crawler-schedule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-crawler-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-crawler-schedule-request
                    'make-stop-crawler-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name))
      (common-lisp:list
       (common-lisp:cons "CrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-crawler-schedule-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-crawler-schedule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-crawler-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-crawler-schedule-response
                    'make-stop-crawler-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-crawler-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-session-request common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-stop-session-request-id :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (request-origin :initarg :request-origin :initform
                         common-lisp:nil :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-stop-session-request-request-origin
                         :shape "OrchestrationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-session-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-session-request 'make-stop-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-origin))
      (common-lisp:list
       (common-lisp:cons "RequestOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-session-response common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-stop-session-response-id :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-session-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-session-response 'make-stop-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-trigger-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-stop-trigger-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-trigger-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-trigger-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-trigger-request 'make-stop-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-trigger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-trigger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-trigger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-trigger-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-stop-trigger-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-trigger-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-trigger-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-trigger-response 'make-stop-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-trigger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-trigger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-trigger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-workflow-run-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-stop-workflow-run-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (run-id :initarg :run-id :initform
                         (common-lisp:error ":run-id is required") :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-stop-workflow-run-request-run-id :shape
                         "IdString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-workflow-run-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-workflow-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-workflow-run-request
                    'make-stop-workflow-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-workflow-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-workflow-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-id))
      (common-lisp:list
       (common-lisp:cons "RunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-workflow-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-workflow-run-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-workflow-run-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stop-workflow-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-workflow-run-response
                    'make-stop-workflow-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-workflow-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-workflow-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-workflow-run-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass storage-descriptor common-lisp:nil
                       ((columns :initarg :columns :initform common-lisp:nil
                         :type (common-lisp:or column-list common-lisp:null)
                         :accessor struct-shape-storage-descriptor-columns
                         :shape "ColumnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or location-string common-lisp:null)
                         :accessor struct-shape-storage-descriptor-location
                         :shape "LocationString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-locations :initarg :additional-locations
                         :initform common-lisp:nil :type
                         (common-lisp:or location-string-list common-lisp:null)
                         :accessor
                         struct-shape-storage-descriptor-additional-locations
                         :shape "LocationStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (input-format :initarg :input-format :initform
                         common-lisp:nil :type
                         (common-lisp:or format-string common-lisp:null)
                         :accessor struct-shape-storage-descriptor-input-format
                         :shape "FormatString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (output-format :initarg :output-format :initform
                         common-lisp:nil :type
                         (common-lisp:or format-string common-lisp:null)
                         :accessor
                         struct-shape-storage-descriptor-output-format :shape
                         "FormatString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compressed :initarg :compressed :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-storage-descriptor-compressed :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (number-of-buckets :initarg :number-of-buckets
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-storage-descriptor-number-of-buckets
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serde-info :initarg :serde-info :initform
                         common-lisp:nil :type
                         (common-lisp:or ser-de-info common-lisp:null)
                         :accessor struct-shape-storage-descriptor-serde-info
                         :shape "SerDeInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bucket-columns :initarg :bucket-columns :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string-list common-lisp:null)
                         :accessor
                         struct-shape-storage-descriptor-bucket-columns :shape
                         "NameStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-columns :initarg :sort-columns :initform
                         common-lisp:nil :type
                         (common-lisp:or order-list common-lisp:null) :accessor
                         struct-shape-storage-descriptor-sort-columns :shape
                         "OrderList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor struct-shape-storage-descriptor-parameters
                         :shape "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (skewed-info :initarg :skewed-info :initform
                         common-lisp:nil :type
                         (common-lisp:or skewed-info common-lisp:null)
                         :accessor struct-shape-storage-descriptor-skewed-info
                         :shape "SkewedInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stored-as-sub-directories :initarg
                         :stored-as-sub-directories :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-storage-descriptor-stored-as-sub-directories
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-reference :initarg :schema-reference :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-reference common-lisp:null)
                         :accessor
                         struct-shape-storage-descriptor-schema-reference
                         :shape "SchemaReference" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-storage-descriptor
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'storage-descriptor
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'storage-descriptor 'make-storage-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "Columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-locations))
      (common-lisp:list
       (common-lisp:cons "AdditionalLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-format))
      (common-lisp:list
       (common-lisp:cons "InputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "OutputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compressed))
      (common-lisp:list
       (common-lisp:cons "Compressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-buckets))
      (common-lisp:list
       (common-lisp:cons "NumberOfBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serde-info))
      (common-lisp:list
       (common-lisp:cons "SerdeInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-columns))
      (common-lisp:list
       (common-lisp:cons "BucketColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-columns))
      (common-lisp:list
       (common-lisp:cons "SortColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skewed-info))
      (common-lisp:list
       (common-lisp:cons "SkewedInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stored-as-sub-directories))
      (common-lisp:list
       (common-lisp:cons "StoredAsSubDirectories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-reference))
      (common-lisp:list
       (common-lisp:cons "SchemaReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass streaming-data-preview-options common-lisp:nil
                       ((polling-time :initarg :polling-time :initform
                         common-lisp:nil :type
                         (common-lisp:or polling-time common-lisp:null)
                         :accessor
                         struct-shape-streaming-data-preview-options-polling-time
                         :shape "PollingTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (record-polling-limit :initarg :record-polling-limit
                         :initform common-lisp:nil :type
                         (common-lisp:or positive-long common-lisp:null)
                         :accessor
                         struct-shape-streaming-data-preview-options-record-polling-limit
                         :shape "PositiveLong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-streaming-data-preview-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'streaming-data-preview-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'streaming-data-preview-options
                    'make-streaming-data-preview-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          streaming-data-preview-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          streaming-data-preview-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'polling-time))
      (common-lisp:list
       (common-lisp:cons "PollingTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-polling-limit))
      (common-lisp:list
       (common-lisp:cons "RecordPollingLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          streaming-data-preview-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass string-column-statistics-data common-lisp:nil
                       ((maximum-length :initarg :maximum-length :initform
                         (common-lisp:error ":maximum-length is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-string-column-statistics-data-maximum-length
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (average-length :initarg :average-length :initform
                         (common-lisp:error ":average-length is required")
                         :type
                         (common-lisp:or non-negative-double common-lisp:null)
                         :accessor
                         struct-shape-string-column-statistics-data-average-length
                         :shape "NonNegativeDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-nulls :initarg :number-of-nulls :initform
                         (common-lisp:error ":number-of-nulls is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-string-column-statistics-data-number-of-nulls
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-distinct-values :initarg
                         :number-of-distinct-values :initform
                         (common-lisp:error
                          ":number-of-distinct-values is required")
                         :type
                         (common-lisp:or non-negative-long common-lisp:null)
                         :accessor
                         struct-shape-string-column-statistics-data-number-of-distinct-values
                         :shape "NonNegativeLong" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-string-column-statistics-data
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'string-column-statistics-data
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'string-column-statistics-data
                    'make-string-column-statistics-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          string-column-statistics-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          string-column-statistics-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-length))
      (common-lisp:list
       (common-lisp:cons "MaximumLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'average-length))
      (common-lisp:list
       (common-lisp:cons "AverageLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-nulls))
      (common-lisp:list
       (common-lisp:cons "NumberOfNulls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-distinct-values))
      (common-lisp:list
       (common-lisp:cons "NumberOfDistinctValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          string-column-statistics-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass supported-dialect common-lisp:nil
                       ((dialect :initarg :dialect :initform common-lisp:nil
                         :type (common-lisp:or view-dialect common-lisp:null)
                         :accessor struct-shape-supported-dialect-dialect
                         :shape "ViewDialect" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dialect-version :initarg :dialect-version :initform
                         common-lisp:nil :type
                         (common-lisp:or view-dialect-version-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-supported-dialect-dialect-version :shape
                         "ViewDialectVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-supported-dialect
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'supported-dialect
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'supported-dialect 'make-supported-dialect))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input supported-dialect))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input supported-dialect))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialect))
      (common-lisp:list
       (common-lisp:cons "Dialect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialect-version))
      (common-lisp:list
       (common-lisp:cons "DialectVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input supported-dialect))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-table-name :shape "NameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-table-database-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-table-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-table-owner :shape "NameString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-table-create-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (update-time :initarg :update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-table-update-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-access-time :initarg :last-access-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-table-last-access-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-analyzed-time :initarg :last-analyzed-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-table-last-analyzed-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (retention :initarg :retention :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor struct-shape-table-retention :shape
                         "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-descriptor :initarg :storage-descriptor
                         :initform common-lisp:nil :type
                         (common-lisp:or storage-descriptor common-lisp:null)
                         :accessor struct-shape-table-storage-descriptor :shape
                         "StorageDescriptor" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-keys :initarg :partition-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or column-list common-lisp:null)
                         :accessor struct-shape-table-partition-keys :shape
                         "ColumnList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (view-original-text :initarg :view-original-text
                         :initform common-lisp:nil :type
                         (common-lisp:or view-text-string common-lisp:null)
                         :accessor struct-shape-table-view-original-text :shape
                         "ViewTextString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (view-expanded-text :initarg :view-expanded-text
                         :initform common-lisp:nil :type
                         (common-lisp:or view-text-string common-lisp:null)
                         :accessor struct-shape-table-view-expanded-text :shape
                         "ViewTextString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-type :initarg :table-type :initform
                         common-lisp:nil :type
                         (common-lisp:or table-type-string common-lisp:null)
                         :accessor struct-shape-table-table-type :shape
                         "TableTypeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor struct-shape-table-parameters :shape
                         "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-table-created-by :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-registered-with-lake-formation :initarg
                         :is-registered-with-lake-formation :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-table-is-registered-with-lake-formation
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-table :initarg :target-table :initform
                         common-lisp:nil :type
                         (common-lisp:or table-identifier common-lisp:null)
                         :accessor struct-shape-table-target-table :shape
                         "TableIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor struct-shape-table-catalog-id :shape
                         "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor struct-shape-table-version-id :shape
                         "VersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (federated-table :initarg :federated-table :initform
                         common-lisp:nil :type
                         (common-lisp:or federated-table common-lisp:null)
                         :accessor struct-shape-table-federated-table :shape
                         "FederatedTable" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'table 'make-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-access-time))
      (common-lisp:list
       (common-lisp:cons "LastAccessTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-analyzed-time))
      (common-lisp:list
       (common-lisp:cons "LastAnalyzedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention))
      (common-lisp:list
       (common-lisp:cons "Retention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-descriptor))
      (common-lisp:list
       (common-lisp:cons "StorageDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-original-text))
      (common-lisp:list
       (common-lisp:cons "ViewOriginalText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-expanded-text))
      (common-lisp:list
       (common-lisp:cons "ViewExpandedText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-type))
      (common-lisp:list
       (common-lisp:cons "TableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-registered-with-lake-formation))
      (common-lisp:list
       (common-lisp:cons "IsRegisteredWithLakeFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table))
      (common-lisp:list
       (common-lisp:cons "TargetTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'federated-table))
      (common-lisp:list
       (common-lisp:cons "FederatedTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-error common-lisp:nil
                       ((table-name :initarg :table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-table-error-table-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-detail :initarg :error-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor struct-shape-table-error-error-detail :shape
                         "ErrorDetail" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'table-error 'make-table-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail))
      (common-lisp:list
       (common-lisp:cons "ErrorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-errors () '(trivial-types:proper-list table-error))
 (common-lisp:defun make-table-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass table-identifier common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor struct-shape-table-identifier-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-table-identifier-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-table-identifier-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-table-identifier-region :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'table-identifier 'make-table-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-input common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-table-input-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-table-input-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner :initarg :owner :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-table-input-owner :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-access-time :initarg :last-access-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-table-input-last-access-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-analyzed-time :initarg :last-analyzed-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-table-input-last-analyzed-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (retention :initarg :retention :initform
                         common-lisp:nil :type
                         (common-lisp:or non-negative-integer common-lisp:null)
                         :accessor struct-shape-table-input-retention :shape
                         "NonNegativeInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-descriptor :initarg :storage-descriptor
                         :initform common-lisp:nil :type
                         (common-lisp:or storage-descriptor common-lisp:null)
                         :accessor struct-shape-table-input-storage-descriptor
                         :shape "StorageDescriptor" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-keys :initarg :partition-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or column-list common-lisp:null)
                         :accessor struct-shape-table-input-partition-keys
                         :shape "ColumnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (view-original-text :initarg :view-original-text
                         :initform common-lisp:nil :type
                         (common-lisp:or view-text-string common-lisp:null)
                         :accessor struct-shape-table-input-view-original-text
                         :shape "ViewTextString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (view-expanded-text :initarg :view-expanded-text
                         :initform common-lisp:nil :type
                         (common-lisp:or view-text-string common-lisp:null)
                         :accessor struct-shape-table-input-view-expanded-text
                         :shape "ViewTextString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-type :initarg :table-type :initform
                         common-lisp:nil :type
                         (common-lisp:or table-type-string common-lisp:null)
                         :accessor struct-shape-table-input-table-type :shape
                         "TableTypeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters-map common-lisp:null)
                         :accessor struct-shape-table-input-parameters :shape
                         "ParametersMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-table :initarg :target-table :initform
                         common-lisp:nil :type
                         (common-lisp:or table-identifier common-lisp:null)
                         :accessor struct-shape-table-input-target-table :shape
                         "TableIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'table-input 'make-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-access-time))
      (common-lisp:list
       (common-lisp:cons "LastAccessTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-analyzed-time))
      (common-lisp:list
       (common-lisp:cons "LastAnalyzedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention))
      (common-lisp:list
       (common-lisp:cons "Retention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-descriptor))
      (common-lisp:list
       (common-lisp:cons "StorageDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-keys))
      (common-lisp:list
       (common-lisp:cons "PartitionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-original-text))
      (common-lisp:list
       (common-lisp:cons "ViewOriginalText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'view-expanded-text))
      (common-lisp:list
       (common-lisp:cons "ViewExpandedText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-type))
      (common-lisp:list
       (common-lisp:cons "TableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-table))
      (common-lisp:list
       (common-lisp:cons "TargetTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-list () '(trivial-types:proper-list table))
 (common-lisp:defun make-table-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table))
   aws-sdk/generator/shape::members))
(common-lisp:deftype table-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass table-optimizer common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or table-optimizer-type common-lisp:null)
                         :accessor struct-shape-table-optimizer-type :shape
                         "TableOptimizerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or table-optimizer-configuration
                                         common-lisp:null)
                         :accessor struct-shape-table-optimizer-configuration
                         :shape "TableOptimizerConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-run :initarg :last-run :initform common-lisp:nil
                         :type
                         (common-lisp:or table-optimizer-run common-lisp:null)
                         :accessor struct-shape-table-optimizer-last-run :shape
                         "TableOptimizerRun" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-optimizer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table-optimizer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'table-optimizer 'make-table-optimizer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-optimizer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-optimizer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run))
      (common-lisp:list
       (common-lisp:cons "lastRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-optimizer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-optimizer-configuration common-lisp:nil
                       ((role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or arn-string common-lisp:null)
                         :accessor
                         struct-shape-table-optimizer-configuration-role-arn
                         :shape "ArnString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-table-optimizer-configuration-enabled
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-optimizer-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'table-optimizer-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'table-optimizer-configuration
                    'make-table-optimizer-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-optimizer-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-optimizer-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-optimizer-configuration))
   common-lisp:nil))
(common-lisp:deftype table-optimizer-event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass table-optimizer-run common-lisp:nil
                       ((event-type :initarg :event-type :initform
                         common-lisp:nil :type
                         (common-lisp:or table-optimizer-event-type
                                         common-lisp:null)
                         :accessor struct-shape-table-optimizer-run-event-type
                         :shape "TableOptimizerEventType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-timestamp :initarg :start-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or table-optimizer-run-timestamp
                                         common-lisp:null)
                         :accessor
                         struct-shape-table-optimizer-run-start-timestamp
                         :shape "TableOptimizerRunTimestamp" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (end-timestamp :initarg :end-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or table-optimizer-run-timestamp
                                         common-lisp:null)
                         :accessor
                         struct-shape-table-optimizer-run-end-timestamp :shape
                         "TableOptimizerRunTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metrics :initarg :metrics :initform common-lisp:nil
                         :type (common-lisp:or run-metrics common-lisp:null)
                         :accessor struct-shape-table-optimizer-run-metrics
                         :shape "RunMetrics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or message-string common-lisp:null)
                         :accessor struct-shape-table-optimizer-run-error
                         :shape "MessageString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-optimizer-run
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table-optimizer-run
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'table-optimizer-run 'make-table-optimizer-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-optimizer-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-optimizer-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "eventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timestamp))
      (common-lisp:list
       (common-lisp:cons "startTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timestamp))
      (common-lisp:list
       (common-lisp:cons "endTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-optimizer-run))
   common-lisp:nil))
(common-lisp:deftype table-optimizer-run-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype table-optimizer-runs ()
   '(trivial-types:proper-list table-optimizer-run))
 (common-lisp:defun make-table-optimizer-runs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-optimizer-run))
   aws-sdk/generator/shape::members))
(common-lisp:deftype table-optimizer-type () 'common-lisp:string)
(common-lisp:deftype table-prefix () 'common-lisp:string)
(common-lisp:deftype table-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass table-version common-lisp:nil
                       ((table :initarg :table :initform common-lisp:nil :type
                         (common-lisp:or table common-lisp:null) :accessor
                         struct-shape-table-version-table :shape "Table"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor struct-shape-table-version-version-id :shape
                         "VersionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'table-version 'make-table-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table))
      (common-lisp:list
       (common-lisp:cons "Table"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass table-version-error common-lisp:nil
                       ((table-name :initarg :table-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-table-version-error-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor struct-shape-table-version-error-version-id
                         :shape "VersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-detail :initarg :error-detail :initform
                         common-lisp:nil :type
                         (common-lisp:or error-detail common-lisp:null)
                         :accessor
                         struct-shape-table-version-error-error-detail :shape
                         "ErrorDetail" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-table-version-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'table-version-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'table-version-error 'make-table-version-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-version-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-version-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail))
      (common-lisp:list
       (common-lisp:cons "ErrorDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-version-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-version-errors ()
   '(trivial-types:proper-list table-version-error))
 (common-lisp:defun make-table-version-errors
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-version-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags-to-add :initarg :tags-to-add :initform
                         (common-lisp:error ":tags-to-add is required") :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags-to-add :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-to-add))
      (common-lisp:list
       (common-lisp:cons "TagsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tags-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype target-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass task-run common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor struct-shape-task-run-transform-id :shape
                         "HashString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (task-run-id :initarg :task-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor struct-shape-task-run-task-run-id :shape
                         "HashString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or task-status-type common-lisp:null)
                         :accessor struct-shape-task-run-status :shape
                         "TaskStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-group-name :initarg :log-group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-task-run-log-group-name :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (properties :initarg :properties :initform
                         common-lisp:nil :type
                         (common-lisp:or task-run-properties common-lisp:null)
                         :accessor struct-shape-task-run-properties :shape
                         "TaskRunProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-string :initarg :error-string :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-task-run-error-string :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-run-started-on :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-on :initarg :last-modified-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-run-last-modified-on :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completed-on :initarg :completed-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-run-completed-on :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (execution-time :initarg :execution-time :initform
                         common-lisp:nil :type
                         (common-lisp:or execution-time common-lisp:null)
                         :accessor struct-shape-task-run-execution-time :shape
                         "ExecutionTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-run
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-run
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'task-run 'make-task-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-id))
      (common-lisp:list
       (common-lisp:cons "TaskRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-string))
      (common-lisp:list
       (common-lisp:cons "ErrorString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-time))
      (common-lisp:list
       (common-lisp:cons "ExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-run))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass task-run-filter-criteria common-lisp:nil
                       ((task-run-type :initarg :task-run-type :initform
                         common-lisp:nil :type
                         (common-lisp:or task-type common-lisp:null) :accessor
                         struct-shape-task-run-filter-criteria-task-run-type
                         :shape "TaskType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or task-status-type common-lisp:null)
                         :accessor struct-shape-task-run-filter-criteria-status
                         :shape "TaskStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-before :initarg :started-before :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-run-filter-criteria-started-before
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (started-after :initarg :started-after :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-task-run-filter-criteria-started-after
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-run-filter-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-run-filter-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-run-filter-criteria 'make-task-run-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-run-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-run-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-run-type))
      (common-lisp:list
       (common-lisp:cons "TaskRunType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-before))
      (common-lisp:list
       (common-lisp:cons "StartedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-after))
      (common-lisp:list
       (common-lisp:cons "StartedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-run-filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype task-run-list () '(trivial-types:proper-list task-run))
 (common-lisp:defun make-task-run-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-run))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass task-run-properties common-lisp:nil
                       ((task-type :initarg :task-type :initform
                         common-lisp:nil :type
                         (common-lisp:or task-type common-lisp:null) :accessor
                         struct-shape-task-run-properties-task-type :shape
                         "TaskType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (import-labels-task-run-properties :initarg
                         :import-labels-task-run-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or import-labels-task-run-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-run-properties-import-labels-task-run-properties
                         :shape "ImportLabelsTaskRunProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (export-labels-task-run-properties :initarg
                         :export-labels-task-run-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or export-labels-task-run-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-run-properties-export-labels-task-run-properties
                         :shape "ExportLabelsTaskRunProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (labeling-set-generation-task-run-properties :initarg
                         :labeling-set-generation-task-run-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          labeling-set-generation-task-run-properties
                          common-lisp:null)
                         :accessor
                         struct-shape-task-run-properties-labeling-set-generation-task-run-properties
                         :shape "LabelingSetGenerationTaskRunProperties"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (find-matches-task-run-properties :initarg
                         :find-matches-task-run-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or find-matches-task-run-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-task-run-properties-find-matches-task-run-properties
                         :shape "FindMatchesTaskRunProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-run-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-run-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-run-properties 'make-task-run-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input task-run-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input task-run-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-type))
      (common-lisp:list
       (common-lisp:cons "TaskType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'import-labels-task-run-properties))
      (common-lisp:list
       (common-lisp:cons "ImportLabelsTaskRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-labels-task-run-properties))
      (common-lisp:list
       (common-lisp:cons "ExportLabelsTaskRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'labeling-set-generation-task-run-properties))
      (common-lisp:list
       (common-lisp:cons "LabelingSetGenerationTaskRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'find-matches-task-run-properties))
      (common-lisp:list
       (common-lisp:cons "FindMatchesTaskRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input task-run-properties))
   common-lisp:nil))
(common-lisp:deftype task-run-sort-column-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass task-run-sort-criteria common-lisp:nil
                       ((column :initarg :column :initform
                         (common-lisp:error ":column is required") :type
                         (common-lisp:or task-run-sort-column-type
                                         common-lisp:null)
                         :accessor struct-shape-task-run-sort-criteria-column
                         :shape "TaskRunSortColumnType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sort-direction :initarg :sort-direction :initform
                         (common-lisp:error ":sort-direction is required")
                         :type
                         (common-lisp:or sort-direction-type common-lisp:null)
                         :accessor
                         struct-shape-task-run-sort-criteria-sort-direction
                         :shape "SortDirectionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-task-run-sort-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'task-run-sort-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'task-run-sort-criteria 'make-task-run-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          task-run-sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          task-run-sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-direction))
      (common-lisp:list
       (common-lisp:cons "SortDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          task-run-sort-criteria))
   common-lisp:nil))
(common-lisp:deftype task-status-type () 'common-lisp:string)
(common-lisp:deftype task-type () 'common-lisp:string)
(common-lisp:deftype timeout () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype timestamp-value () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype topk () 'common-lisp:integer)
(common-lisp:deftype total-segments-integer () 'common-lisp:integer)
(common-lisp:deftype transaction-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transform-config-parameter common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor struct-shape-transform-config-parameter-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or param-type common-lisp:null) :accessor
                         struct-shape-transform-config-parameter-type :shape
                         "ParamType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (validation-rule :initarg :validation-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-transform-config-parameter-validation-rule
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (validation-message :initarg :validation-message
                         :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-transform-config-parameter-validation-message
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-transform-config-parameter-value :shape
                         "EnclosedInStringProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (list-type :initarg :list-type :initform
                         common-lisp:nil :type
                         (common-lisp:or param-type common-lisp:null) :accessor
                         struct-shape-transform-config-parameter-list-type
                         :shape "ParamType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-optional :initarg :is-optional :initform
                         common-lisp:nil :type
                         (common-lisp:or boxed-boolean common-lisp:null)
                         :accessor
                         struct-shape-transform-config-parameter-is-optional
                         :shape "BoxedBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transform-config-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transform-config-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transform-config-parameter
                    'make-transform-config-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transform-config-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transform-config-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-rule))
      (common-lisp:list
       (common-lisp:cons "ValidationRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-message))
      (common-lisp:list
       (common-lisp:cons "ValidationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-type))
      (common-lisp:list
       (common-lisp:cons "ListType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-optional))
      (common-lisp:list
       (common-lisp:cons "IsOptional"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transform-config-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transform-config-parameter-list ()
   '(trivial-types:proper-list transform-config-parameter))
 (common-lisp:defun make-transform-config-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            transform-config-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass transform-encryption common-lisp:nil
                       ((ml-user-data-encryption :initarg
                         :ml-user-data-encryption :initform common-lisp:nil
                         :type
                         (common-lisp:or mluser-data-encryption
                                         common-lisp:null)
                         :accessor
                         struct-shape-transform-encryption-ml-user-data-encryption
                         :shape "MLUserDataEncryption" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (task-run-security-configuration-name :initarg
                         :task-run-security-configuration-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-transform-encryption-task-run-security-configuration-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transform-encryption
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transform-encryption
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transform-encryption 'make-transform-encryption))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transform-encryption))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transform-encryption))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ml-user-data-encryption))
      (common-lisp:list
       (common-lisp:cons "MlUserDataEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-run-security-configuration-name))
      (common-lisp:list
       (common-lisp:cons "TaskRunSecurityConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transform-encryption))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass transform-filter-criteria common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-transform-filter-criteria-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transform-type :initarg :transform-type :initform
                         common-lisp:nil :type
                         (common-lisp:or transform-type common-lisp:null)
                         :accessor
                         struct-shape-transform-filter-criteria-transform-type
                         :shape "TransformType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or transform-status-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-transform-filter-criteria-status :shape
                         "TransformStatusType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glue-version :initarg :glue-version :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-version-string common-lisp:null)
                         :accessor
                         struct-shape-transform-filter-criteria-glue-version
                         :shape "GlueVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-before :initarg :created-before :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-transform-filter-criteria-created-before
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-after :initarg :created-after :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-transform-filter-criteria-created-after
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-before :initarg :last-modified-before
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-transform-filter-criteria-last-modified-before
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-after :initarg :last-modified-after
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-transform-filter-criteria-last-modified-after
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema :initarg :schema :initform common-lisp:nil
                         :type
                         (common-lisp:or transform-schema common-lisp:null)
                         :accessor
                         struct-shape-transform-filter-criteria-schema :shape
                         "TransformSchema" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transform-filter-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transform-filter-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transform-filter-criteria
                    'make-transform-filter-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transform-filter-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transform-filter-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-type))
      (common-lisp:list
       (common-lisp:cons "TransformType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transform-filter-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transform-id-list ()
   '(trivial-types:proper-list hash-string))
 (common-lisp:defun make-transform-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hash-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype transform-list ()
   '(trivial-types:proper-list mltransform))
 (common-lisp:defun make-transform-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mltransform))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass transform-parameters common-lisp:nil
                       ((transform-type :initarg :transform-type :initform
                         (common-lisp:error ":transform-type is required")
                         :type (common-lisp:or transform-type common-lisp:null)
                         :accessor
                         struct-shape-transform-parameters-transform-type
                         :shape "TransformType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (find-matches-parameters :initarg
                         :find-matches-parameters :initform common-lisp:nil
                         :type
                         (common-lisp:or find-matches-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-transform-parameters-find-matches-parameters
                         :shape "FindMatchesParameters" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transform-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transform-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transform-parameters 'make-transform-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transform-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transform-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-type))
      (common-lisp:list
       (common-lisp:cons "TransformType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'find-matches-parameters))
      (common-lisp:list
       (common-lisp:cons "FindMatchesParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transform-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transform-schema ()
   '(trivial-types:proper-list schema-column))
 (common-lisp:defun make-transform-schema
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transform-sort-column-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transform-sort-criteria common-lisp:nil
                       ((column :initarg :column :initform
                         (common-lisp:error ":column is required") :type
                         (common-lisp:or transform-sort-column-type
                                         common-lisp:null)
                         :accessor struct-shape-transform-sort-criteria-column
                         :shape "TransformSortColumnType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sort-direction :initarg :sort-direction :initform
                         (common-lisp:error ":sort-direction is required")
                         :type
                         (common-lisp:or sort-direction-type common-lisp:null)
                         :accessor
                         struct-shape-transform-sort-criteria-sort-direction
                         :shape "SortDirectionType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transform-sort-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transform-sort-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transform-sort-criteria 'make-transform-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transform-sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transform-sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-direction))
      (common-lisp:list
       (common-lisp:cons "SortDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transform-sort-criteria))
   common-lisp:nil))
(common-lisp:deftype transform-status-type () 'common-lisp:string)
(common-lisp:deftype transform-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass trigger common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-trigger-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workflow-name :initarg :workflow-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-trigger-workflow-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-trigger-id :shape "IdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or trigger-type common-lisp:null)
                         :accessor struct-shape-trigger-type :shape
                         "TriggerType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or trigger-state common-lisp:null)
                         :accessor struct-shape-trigger-state :shape
                         "TriggerState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-trigger-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-trigger-schedule :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or action-list common-lisp:null)
                         :accessor struct-shape-trigger-actions :shape
                         "ActionList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predicate :initarg :predicate :initform
                         common-lisp:nil :type
                         (common-lisp:or predicate common-lisp:null) :accessor
                         struct-shape-trigger-predicate :shape "Predicate"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-batching-condition :initarg
                         :event-batching-condition :initform common-lisp:nil
                         :type
                         (common-lisp:or event-batching-condition
                                         common-lisp:null)
                         :accessor
                         struct-shape-trigger-event-batching-condition :shape
                         "EventBatchingCondition" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trigger
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trigger
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trigger 'make-trigger))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-name))
      (common-lisp:list
       (common-lisp:cons "WorkflowName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate))
      (common-lisp:list
       (common-lisp:cons "Predicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-batching-condition))
      (common-lisp:list
       (common-lisp:cons "EventBatchingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trigger-list () '(trivial-types:proper-list trigger))
 (common-lisp:defun make-trigger-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trigger))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype trigger-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-trigger-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass trigger-node-details common-lisp:nil
                       ((trigger :initarg :trigger :initform common-lisp:nil
                         :type (common-lisp:or trigger common-lisp:null)
                         :accessor struct-shape-trigger-node-details-trigger
                         :shape "Trigger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trigger-node-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trigger-node-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'trigger-node-details 'make-trigger-node-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger-node-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger-node-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger))
      (common-lisp:list
       (common-lisp:cons "Trigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger-node-details))
   common-lisp:nil))
(common-lisp:deftype trigger-state () 'common-lisp:string)
(common-lisp:deftype trigger-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass trigger-update common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-trigger-update-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-trigger-update-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-trigger-update-schedule :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or action-list common-lisp:null)
                         :accessor struct-shape-trigger-update-actions :shape
                         "ActionList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (predicate :initarg :predicate :initform
                         common-lisp:nil :type
                         (common-lisp:or predicate common-lisp:null) :accessor
                         struct-shape-trigger-update-predicate :shape
                         "Predicate" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-batching-condition :initarg
                         :event-batching-condition :initform common-lisp:nil
                         :type
                         (common-lisp:or event-batching-condition
                                         common-lisp:null)
                         :accessor
                         struct-shape-trigger-update-event-batching-condition
                         :shape "EventBatchingCondition" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trigger-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trigger-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trigger-update 'make-trigger-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate))
      (common-lisp:list
       (common-lisp:cons "Predicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-batching-condition))
      (common-lisp:list
       (common-lisp:cons "EventBatchingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype two-inputs () '(trivial-types:proper-list node-id))
 (common-lisp:defun make-two-inputs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list node-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype type-string () 'common-lisp:string)
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass unfiltered-partition common-lisp:nil
                       ((partition :initarg :partition :initform
                         common-lisp:nil :type
                         (common-lisp:or partition common-lisp:null) :accessor
                         struct-shape-unfiltered-partition-partition :shape
                         "Partition" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (authorized-columns :initarg :authorized-columns
                         :initform common-lisp:nil :type
                         (common-lisp:or name-string-list common-lisp:null)
                         :accessor
                         struct-shape-unfiltered-partition-authorized-columns
                         :shape "NameStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-registered-with-lake-formation :initarg
                         :is-registered-with-lake-formation :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-unfiltered-partition-is-registered-with-lake-formation
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unfiltered-partition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unfiltered-partition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unfiltered-partition 'make-unfiltered-partition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unfiltered-partition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unfiltered-partition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition))
      (common-lisp:list
       (common-lisp:cons "Partition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorized-columns))
      (common-lisp:list
       (common-lisp:cons "AuthorizedColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-registered-with-lake-formation))
      (common-lisp:list
       (common-lisp:cons "IsRegisteredWithLakeFormation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unfiltered-partition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unfiltered-partition-list ()
   '(trivial-types:proper-list unfiltered-partition))
 (common-lisp:defun make-unfiltered-partition-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unfiltered-partition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass union common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or node-name common-lisp:null) :accessor
                         struct-shape-union-name :shape "NodeName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (inputs :initarg :inputs :initform
                         (common-lisp:error ":inputs is required") :type
                         (common-lisp:or two-inputs common-lisp:null) :accessor
                         struct-shape-union-inputs :shape "TwoInputs" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (union-type :initarg :union-type :initform
                         (common-lisp:error ":union-type is required") :type
                         (common-lisp:or union-type common-lisp:null) :accessor
                         struct-shape-union-union-type :shape "UnionType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-union
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'union
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'union 'make-union))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input union))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input union))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'union-type))
      (common-lisp:list
       (common-lisp:cons "UnionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input union))
   common-lisp:nil))
(common-lisp:deftype union-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags-to-remove :initarg :tags-to-remove :initform
                         (common-lisp:error ":tags-to-remove is required")
                         :type (common-lisp:or tag-keys-list common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-tags-to-remove
                         :shape "TagKeysList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-to-remove))
      (common-lisp:list
       (common-lisp:cons "TagsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype update-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-blueprint-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or orchestration-name-string
                                         common-lisp:null)
                         :accessor struct-shape-update-blueprint-request-name
                         :shape "OrchestrationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or generic512char-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-blueprint-request-description
                         :shape "Generic512CharString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (blueprint-location :initarg :blueprint-location
                         :initform
                         (common-lisp:error ":blueprint-location is required")
                         :type
                         (common-lisp:or orchestration-s3location
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-blueprint-request-blueprint-location
                         :shape "OrchestrationS3Location" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-blueprint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-blueprint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-blueprint-request 'make-update-blueprint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-blueprint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-blueprint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-location))
      (common-lisp:list
       (common-lisp:cons "BlueprintLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-blueprint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-blueprint-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-update-blueprint-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-blueprint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-blueprint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-blueprint-response
                    'make-update-blueprint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-blueprint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-blueprint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-blueprint-response))
   common-lisp:nil))
(common-lisp:deftype update-catalog-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-classifier-request common-lisp:nil
                       ((grok-classifier :initarg :grok-classifier :initform
                         common-lisp:nil :type
                         (common-lisp:or update-grok-classifier-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-classifier-request-grok-classifier
                         :shape "UpdateGrokClassifierRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (xmlclassifier :initarg :xmlclassifier :initform
                         common-lisp:nil :type
                         (common-lisp:or update-xmlclassifier-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-classifier-request-xmlclassifier
                         :shape "UpdateXMLClassifierRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (json-classifier :initarg :json-classifier :initform
                         common-lisp:nil :type
                         (common-lisp:or update-json-classifier-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-classifier-request-json-classifier
                         :shape "UpdateJsonClassifierRequest" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (csv-classifier :initarg :csv-classifier :initform
                         common-lisp:nil :type
                         (common-lisp:or update-csv-classifier-request
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-classifier-request-csv-classifier
                         :shape "UpdateCsvClassifierRequest" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-classifier-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-classifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-classifier-request
                    'make-update-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grok-classifier))
      (common-lisp:list
       (common-lisp:cons "GrokClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xmlclassifier))
      (common-lisp:list
       (common-lisp:cons "XMLClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-classifier))
      (common-lisp:list
       (common-lisp:cons "JsonClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-classifier))
      (common-lisp:list
       (common-lisp:cons "CsvClassifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-classifier-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-classifier-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-classifier-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-classifier-response
                    'make-update-classifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-classifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-classifier-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-classifier-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-column-statistics-for-partition-request
                       common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-update-column-statistics-for-partition-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-column-statistics-for-partition-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-column-statistics-for-partition-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-values :initarg :partition-values :initform
                         (common-lisp:error ":partition-values is required")
                         :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor
                         struct-shape-update-column-statistics-for-partition-request-partition-values
                         :shape "ValueStringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (column-statistics-list :initarg
                         :column-statistics-list :initform
                         (common-lisp:error
                          ":column-statistics-list is required")
                         :type
                         (common-lisp:or update-column-statistics-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-column-statistics-for-partition-request-column-statistics-list
                         :shape "UpdateColumnStatisticsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-column-statistics-for-partition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-column-statistics-for-partition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-column-statistics-for-partition-request
                    'make-update-column-statistics-for-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-values))
      (common-lisp:list
       (common-lisp:cons "PartitionValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-statistics-list))
      (common-lisp:list
       (common-lisp:cons "ColumnStatisticsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-column-statistics-for-partition-response
                       common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or column-statistics-errors
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-column-statistics-for-partition-response-errors
                         :shape "ColumnStatisticsErrors" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-column-statistics-for-partition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-column-statistics-for-partition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-column-statistics-for-partition-response
                    'make-update-column-statistics-for-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-partition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-column-statistics-for-table-request
                       common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-update-column-statistics-for-table-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-column-statistics-for-table-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-column-statistics-for-table-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (column-statistics-list :initarg
                         :column-statistics-list :initform
                         (common-lisp:error
                          ":column-statistics-list is required")
                         :type
                         (common-lisp:or update-column-statistics-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-column-statistics-for-table-request-column-statistics-list
                         :shape "UpdateColumnStatisticsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-column-statistics-for-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-column-statistics-for-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-column-statistics-for-table-request
                    'make-update-column-statistics-for-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'column-statistics-list))
      (common-lisp:list
       (common-lisp:cons "ColumnStatisticsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-column-statistics-for-table-response
                       common-lisp:nil
                       ((errors :initarg :errors :initform common-lisp:nil
                         :type
                         (common-lisp:or column-statistics-errors
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-column-statistics-for-table-response-errors
                         :shape "ColumnStatisticsErrors" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-column-statistics-for-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-column-statistics-for-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-column-statistics-for-table-response
                    'make-update-column-statistics-for-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-table-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-column-statistics-for-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-column-statistics-list ()
   '(trivial-types:proper-list column-statistics))
 (common-lisp:defun make-update-column-statistics-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-connection-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-update-connection-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-update-connection-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-input :initarg :connection-input :initform
                         (common-lisp:error ":connection-input is required")
                         :type
                         (common-lisp:or connection-input common-lisp:null)
                         :accessor
                         struct-shape-update-connection-request-connection-input
                         :shape "ConnectionInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-connection-request
                    'make-update-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-input))
      (common-lisp:list
       (common-lisp:cons "ConnectionInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connection-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-connection-response
                    'make-update-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-crawler-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-update-crawler-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role common-lisp:null) :accessor
                         struct-shape-update-crawler-request-role :shape "Role"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or database-name common-lisp:null)
                         :accessor
                         struct-shape-update-crawler-request-database-name
                         :shape "DatabaseName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string-removable
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-crawler-request-description :shape
                         "DescriptionStringRemovable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (targets :initarg :targets :initform common-lisp:nil
                         :type
                         (common-lisp:or crawler-targets common-lisp:null)
                         :accessor struct-shape-update-crawler-request-targets
                         :shape "CrawlerTargets" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type
                         (common-lisp:or cron-expression common-lisp:null)
                         :accessor struct-shape-update-crawler-request-schedule
                         :shape "CronExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (classifiers :initarg :classifiers :initform
                         common-lisp:nil :type
                         (common-lisp:or classifier-name-list common-lisp:null)
                         :accessor
                         struct-shape-update-crawler-request-classifiers :shape
                         "ClassifierNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-prefix :initarg :table-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or table-prefix common-lisp:null)
                         :accessor
                         struct-shape-update-crawler-request-table-prefix
                         :shape "TablePrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-change-policy :initarg :schema-change-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-change-policy common-lisp:null)
                         :accessor
                         struct-shape-update-crawler-request-schema-change-policy
                         :shape "SchemaChangePolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recrawl-policy :initarg :recrawl-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or recrawl-policy common-lisp:null)
                         :accessor
                         struct-shape-update-crawler-request-recrawl-policy
                         :shape "RecrawlPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (lineage-configuration :initarg :lineage-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or lineage-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-crawler-request-lineage-configuration
                         :shape "LineageConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lake-formation-configuration :initarg
                         :lake-formation-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or lake-formation-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-crawler-request-lake-formation-configuration
                         :shape "LakeFormationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or crawler-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-crawler-request-configuration
                         :shape "CrawlerConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (crawler-security-configuration :initarg
                         :crawler-security-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or crawler-security-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-crawler-request-crawler-security-configuration
                         :shape "CrawlerSecurityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-crawler-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-crawler-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-crawler-request 'make-update-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classifiers))
      (common-lisp:list
       (common-lisp:cons "Classifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-prefix))
      (common-lisp:list
       (common-lisp:cons "TablePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-change-policy))
      (common-lisp:list
       (common-lisp:cons "SchemaChangePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recrawl-policy))
      (common-lisp:list
       (common-lisp:cons "RecrawlPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lineage-configuration))
      (common-lisp:list
       (common-lisp:cons "LineageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lake-formation-configuration))
      (common-lisp:list
       (common-lisp:cons "LakeFormationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crawler-security-configuration))
      (common-lisp:list
       (common-lisp:cons "CrawlerSecurityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-crawler-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-crawler-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-crawler-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-crawler-response 'make-update-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-crawler-schedule-request common-lisp:nil
                       ((crawler-name :initarg :crawler-name :initform
                         (common-lisp:error ":crawler-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-crawler-schedule-request-crawler-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedule :initarg :schedule :initform common-lisp:nil
                         :type
                         (common-lisp:or cron-expression common-lisp:null)
                         :accessor
                         struct-shape-update-crawler-schedule-request-schedule
                         :shape "CronExpression" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-crawler-schedule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-crawler-schedule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-crawler-schedule-request
                    'make-update-crawler-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crawler-name))
      (common-lisp:list
       (common-lisp:cons "CrawlerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-crawler-schedule-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-crawler-schedule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-crawler-schedule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-crawler-schedule-response
                    'make-update-crawler-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-crawler-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-csv-classifier-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-csv-classifier-request-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (delimiter :initarg :delimiter :initform
                         common-lisp:nil :type
                         (common-lisp:or csv-column-delimiter common-lisp:null)
                         :accessor
                         struct-shape-update-csv-classifier-request-delimiter
                         :shape "CsvColumnDelimiter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (quote-symbol :initarg :quote-symbol :initform
                         common-lisp:nil :type
                         (common-lisp:or csv-quote-symbol common-lisp:null)
                         :accessor
                         struct-shape-update-csv-classifier-request-quote-symbol
                         :shape "CsvQuoteSymbol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (contains-header :initarg :contains-header :initform
                         common-lisp:nil :type
                         (common-lisp:or csv-header-option common-lisp:null)
                         :accessor
                         struct-shape-update-csv-classifier-request-contains-header
                         :shape "CsvHeaderOption" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (header :initarg :header :initform common-lisp:nil
                         :type (common-lisp:or csv-header common-lisp:null)
                         :accessor
                         struct-shape-update-csv-classifier-request-header
                         :shape "CsvHeader" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (disable-value-trimming :initarg
                         :disable-value-trimming :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-update-csv-classifier-request-disable-value-trimming
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (allow-single-column :initarg :allow-single-column
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-update-csv-classifier-request-allow-single-column
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-datatype-configured :initarg
                         :custom-datatype-configured :initform common-lisp:nil
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         struct-shape-update-csv-classifier-request-custom-datatype-configured
                         :shape "NullableBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-datatypes :initarg :custom-datatypes :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-datatypes common-lisp:null)
                         :accessor
                         struct-shape-update-csv-classifier-request-custom-datatypes
                         :shape "CustomDatatypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serde :initarg :serde :initform common-lisp:nil :type
                         (common-lisp:or csv-serde-option common-lisp:null)
                         :accessor
                         struct-shape-update-csv-classifier-request-serde
                         :shape "CsvSerdeOption" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-csv-classifier-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-csv-classifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-csv-classifier-request
                    'make-update-csv-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-csv-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-csv-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "Delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quote-symbol))
      (common-lisp:list
       (common-lisp:cons "QuoteSymbol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains-header))
      (common-lisp:list
       (common-lisp:cons "ContainsHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-value-trimming))
      (common-lisp:list
       (common-lisp:cons "DisableValueTrimming"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-single-column))
      (common-lisp:list
       (common-lisp:cons "AllowSingleColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-datatype-configured))
      (common-lisp:list
       (common-lisp:cons "CustomDatatypeConfigured"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-datatypes))
      (common-lisp:list
       (common-lisp:cons "CustomDatatypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serde))
      (common-lisp:list
       (common-lisp:cons "Serde"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-csv-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-quality-ruleset-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-data-quality-ruleset-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-update-data-quality-ruleset-request-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ruleset :initarg :ruleset :initform common-lisp:nil
                         :type
                         (common-lisp:or data-quality-ruleset-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-quality-ruleset-request-ruleset
                         :shape "DataQualityRulesetString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-data-quality-ruleset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-data-quality-ruleset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-data-quality-ruleset-request
                    'make-update-data-quality-ruleset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-quality-ruleset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-quality-ruleset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset))
      (common-lisp:list
       (common-lisp:cons "Ruleset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-quality-ruleset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-data-quality-ruleset-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-data-quality-ruleset-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-update-data-quality-ruleset-response-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ruleset :initarg :ruleset :initform common-lisp:nil
                         :type
                         (common-lisp:or data-quality-ruleset-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-data-quality-ruleset-response-ruleset
                         :shape "DataQualityRulesetString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-data-quality-ruleset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-data-quality-ruleset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-data-quality-ruleset-response
                    'make-update-data-quality-ruleset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-data-quality-ruleset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-data-quality-ruleset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ruleset))
      (common-lisp:list
       (common-lisp:cons "Ruleset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-data-quality-ruleset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-database-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-update-database-request-catalog-id :shape
                         "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-update-database-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-input :initarg :database-input :initform
                         (common-lisp:error ":database-input is required")
                         :type (common-lisp:or database-input common-lisp:null)
                         :accessor
                         struct-shape-update-database-request-database-input
                         :shape "DatabaseInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-database-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-database-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-database-request 'make-update-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-input))
      (common-lisp:list
       (common-lisp:cons "DatabaseInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-database-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-database-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-database-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-database-response 'make-update-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-database-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-database-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dev-endpoint-request common-lisp:nil
                       ((endpoint-name :initarg :endpoint-name :initform
                         (common-lisp:error ":endpoint-name is required") :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-dev-endpoint-request-endpoint-name
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-key :initarg :public-key :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-dev-endpoint-request-public-key
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (add-public-keys :initarg :add-public-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or public-keys-list common-lisp:null)
                         :accessor
                         struct-shape-update-dev-endpoint-request-add-public-keys
                         :shape "PublicKeysList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-public-keys :initarg :delete-public-keys
                         :initform common-lisp:nil :type
                         (common-lisp:or public-keys-list common-lisp:null)
                         :accessor
                         struct-shape-update-dev-endpoint-request-delete-public-keys
                         :shape "PublicKeysList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-libraries :initarg :custom-libraries :initform
                         common-lisp:nil :type
                         (common-lisp:or dev-endpoint-custom-libraries
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-dev-endpoint-request-custom-libraries
                         :shape "DevEndpointCustomLibraries" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (update-etl-libraries :initarg :update-etl-libraries
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean-value common-lisp:null)
                         :accessor
                         struct-shape-update-dev-endpoint-request-update-etl-libraries
                         :shape "BooleanValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-arguments :initarg :delete-arguments :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-update-dev-endpoint-request-delete-arguments
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (add-arguments :initarg :add-arguments :initform
                         common-lisp:nil :type
                         (common-lisp:or map-value common-lisp:null) :accessor
                         struct-shape-update-dev-endpoint-request-add-arguments
                         :shape "MapValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dev-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-dev-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dev-endpoint-request
                    'make-update-dev-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "PublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-public-keys))
      (common-lisp:list
       (common-lisp:cons "AddPublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-public-keys))
      (common-lisp:list
       (common-lisp:cons "DeletePublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-libraries))
      (common-lisp:list
       (common-lisp:cons "CustomLibraries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-etl-libraries))
      (common-lisp:list
       (common-lisp:cons "UpdateEtlLibraries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-arguments))
      (common-lisp:list
       (common-lisp:cons "DeleteArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-arguments))
      (common-lisp:list
       (common-lisp:cons "AddArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dev-endpoint-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dev-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-dev-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dev-endpoint-response
                    'make-update-dev-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dev-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-grok-classifier-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-grok-classifier-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (classification :initarg :classification :initform
                         common-lisp:nil :type
                         (common-lisp:or classification common-lisp:null)
                         :accessor
                         struct-shape-update-grok-classifier-request-classification
                         :shape "Classification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grok-pattern :initarg :grok-pattern :initform
                         common-lisp:nil :type
                         (common-lisp:or grok-pattern common-lisp:null)
                         :accessor
                         struct-shape-update-grok-classifier-request-grok-pattern
                         :shape "GrokPattern" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-patterns :initarg :custom-patterns :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-patterns common-lisp:null)
                         :accessor
                         struct-shape-update-grok-classifier-request-custom-patterns
                         :shape "CustomPatterns" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-grok-classifier-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-grok-classifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-grok-classifier-request
                    'make-update-grok-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-grok-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-grok-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grok-pattern))
      (common-lisp:list
       (common-lisp:cons "GrokPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-patterns))
      (common-lisp:list
       (common-lisp:cons "CustomPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-grok-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-from-source-control-request common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-job-from-source-control-request-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform common-lisp:nil
                         :type
                         (common-lisp:or source-control-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-job-from-source-control-request-provider
                         :shape "SourceControlProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-job-from-source-control-request-repository-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-owner :initarg :repository-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-job-from-source-control-request-repository-owner
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (branch-name :initarg :branch-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-job-from-source-control-request-branch-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (folder :initarg :folder :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-job-from-source-control-request-folder
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (commit-id :initarg :commit-id :initform
                         common-lisp:nil :type
                         (common-lisp:or commit-id-string common-lisp:null)
                         :accessor
                         struct-shape-update-job-from-source-control-request-commit-id
                         :shape "CommitIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-strategy :initarg :auth-strategy :initform
                         common-lisp:nil :type
                         (common-lisp:or source-control-auth-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-job-from-source-control-request-auth-strategy
                         :shape "SourceControlAuthStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auth-token :initarg :auth-token :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-token-string common-lisp:null)
                         :accessor
                         struct-shape-update-job-from-source-control-request-auth-token
                         :shape "AuthTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-job-from-source-control-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-job-from-source-control-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-job-from-source-control-request
                    'make-update-job-from-source-control-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-from-source-control-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-from-source-control-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-owner))
      (common-lisp:list
       (common-lisp:cons "RepositoryOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "BranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder))
      (common-lisp:list
       (common-lisp:cons "Folder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-id))
      (common-lisp:list
       (common-lisp:cons "CommitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-strategy))
      (common-lisp:list
       (common-lisp:cons "AuthStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-from-source-control-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-from-source-control-response common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-job-from-source-control-response-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-job-from-source-control-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-job-from-source-control-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-job-from-source-control-response
                    'make-update-job-from-source-control-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-job-from-source-control-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-job-from-source-control-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-job-from-source-control-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-request common-lisp:nil
                       ((job-name :initarg :job-name :initform
                         (common-lisp:error ":job-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-update-job-request-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (job-update :initarg :job-update :initform
                         (common-lisp:error ":job-update is required") :type
                         (common-lisp:or job-update common-lisp:null) :accessor
                         struct-shape-update-job-request-job-update :shape
                         "JobUpdate" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-job-request 'make-update-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-update))
      (common-lisp:list
       (common-lisp:cons "JobUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-job-response common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-update-job-response-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-job-response 'make-update-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-json-classifier-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-json-classifier-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (json-path :initarg :json-path :initform
                         common-lisp:nil :type
                         (common-lisp:or json-path common-lisp:null) :accessor
                         struct-shape-update-json-classifier-request-json-path
                         :shape "JsonPath" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-json-classifier-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-json-classifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-json-classifier-request
                    'make-update-json-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-json-classifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-json-classifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-path))
      (common-lisp:list
       (common-lisp:cons "JsonPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-json-classifier-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-mltransform-request common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         (common-lisp:error ":transform-id is required") :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-update-mltransform-request-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-update-mltransform-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-update-mltransform-request-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or transform-parameters common-lisp:null)
                         :accessor
                         struct-shape-update-mltransform-request-parameters
                         :shape "TransformParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role :initarg :role :initform common-lisp:nil :type
                         (common-lisp:or role-string common-lisp:null)
                         :accessor struct-shape-update-mltransform-request-role
                         :shape "RoleString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (glue-version :initarg :glue-version :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-version-string common-lisp:null)
                         :accessor
                         struct-shape-update-mltransform-request-glue-version
                         :shape "GlueVersionString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-capacity :initarg :max-capacity :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-double common-lisp:null)
                         :accessor
                         struct-shape-update-mltransform-request-max-capacity
                         :shape "NullableDouble" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (worker-type :initarg :worker-type :initform
                         common-lisp:nil :type
                         (common-lisp:or worker-type common-lisp:null)
                         :accessor
                         struct-shape-update-mltransform-request-worker-type
                         :shape "WorkerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-workers :initarg :number-of-workers
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-update-mltransform-request-number-of-workers
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout :initarg :timeout :initform common-lisp:nil
                         :type (common-lisp:or timeout common-lisp:null)
                         :accessor
                         struct-shape-update-mltransform-request-timeout :shape
                         "Timeout" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-retries :initarg :max-retries :initform
                         common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-update-mltransform-request-max-retries
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-mltransform-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-mltransform-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-mltransform-request
                    'make-update-mltransform-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mltransform-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mltransform-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'glue-version))
      (common-lisp:list
       (common-lisp:cons "GlueVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'worker-type))
      (common-lisp:list
       (common-lisp:cons "WorkerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-workers))
      (common-lisp:list
       (common-lisp:cons "NumberOfWorkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-retries))
      (common-lisp:list
       (common-lisp:cons "MaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mltransform-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-mltransform-response common-lisp:nil
                       ((transform-id :initarg :transform-id :initform
                         common-lisp:nil :type
                         (common-lisp:or hash-string common-lisp:null)
                         :accessor
                         struct-shape-update-mltransform-response-transform-id
                         :shape "HashString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-mltransform-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-mltransform-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-mltransform-response
                    'make-update-mltransform-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-mltransform-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-mltransform-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-id))
      (common-lisp:list
       (common-lisp:cons "TransformId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-mltransform-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-partition-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-update-partition-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-partition-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-partition-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-value-list :initarg :partition-value-list
                         :initform
                         (common-lisp:error
                          ":partition-value-list is required")
                         :type
                         (common-lisp:or bounded-partition-value-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-partition-request-partition-value-list
                         :shape "BoundedPartitionValueList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (partition-input :initarg :partition-input :initform
                         (common-lisp:error ":partition-input is required")
                         :type
                         (common-lisp:or partition-input common-lisp:null)
                         :accessor
                         struct-shape-update-partition-request-partition-input
                         :shape "PartitionInput" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-partition-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-partition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-partition-request 'make-update-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-partition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-partition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partition-value-list))
      (common-lisp:list
       (common-lisp:cons "PartitionValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-input))
      (common-lisp:list
       (common-lisp:cons "PartitionInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-partition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-partition-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-partition-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-partition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-partition-response
                    'make-update-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-partition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-partition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-registry-input common-lisp:nil
                       ((registry-id :initarg :registry-id :initform
                         (common-lisp:error ":registry-id is required") :type
                         (common-lisp:or registry-id common-lisp:null)
                         :accessor
                         struct-shape-update-registry-input-registry-id :shape
                         "RegistryId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor
                         struct-shape-update-registry-input-description :shape
                         "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-registry-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-registry-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-registry-input 'make-update-registry-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-registry-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-registry-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-id))
      (common-lisp:list
       (common-lisp:cons "RegistryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-registry-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-registry-response common-lisp:nil
                       ((registry-name :initarg :registry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-registry-response-registry-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (registry-arn :initarg :registry-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-update-registry-response-registry-arn
                         :shape "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-registry-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-registry-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-registry-response 'make-update-registry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-registry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-registry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-arn))
      (common-lisp:list
       (common-lisp:cons "RegistryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-registry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-schema-input common-lisp:nil
                       ((schema-id :initarg :schema-id :initform
                         (common-lisp:error ":schema-id is required") :type
                         (common-lisp:or schema-id common-lisp:null) :accessor
                         struct-shape-update-schema-input-schema-id :shape
                         "SchemaId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (schema-version-number :initarg :schema-version-number
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-version-number
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-schema-input-schema-version-number
                         :shape "SchemaVersionNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compatibility :initarg :compatibility :initform
                         common-lisp:nil :type
                         (common-lisp:or compatibility common-lisp:null)
                         :accessor
                         struct-shape-update-schema-input-compatibility :shape
                         "Compatibility" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description-string common-lisp:null)
                         :accessor struct-shape-update-schema-input-description
                         :shape "DescriptionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-schema-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-schema-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-schema-input 'make-update-schema-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-schema-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-schema-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-id))
      (common-lisp:list
       (common-lisp:cons "SchemaId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-version-number))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatibility))
      (common-lisp:list
       (common-lisp:cons "Compatibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-schema-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-schema-response common-lisp:nil
                       ((schema-arn :initarg :schema-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or glue-resource-arn common-lisp:null)
                         :accessor
                         struct-shape-update-schema-response-schema-arn :shape
                         "GlueResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-name :initarg :schema-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-schema-response-schema-name :shape
                         "SchemaRegistryNameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (registry-name :initarg :registry-name :initform
                         common-lisp:nil :type
                         (common-lisp:or schema-registry-name-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-schema-response-registry-name
                         :shape "SchemaRegistryNameString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-schema-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-schema-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-schema-response 'make-update-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-name))
      (common-lisp:list
       (common-lisp:cons "SchemaName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-name))
      (common-lisp:list
       (common-lisp:cons "RegistryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-source-control-from-job-request common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-source-control-from-job-request-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (provider :initarg :provider :initform common-lisp:nil
                         :type
                         (common-lisp:or source-control-provider
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-source-control-from-job-request-provider
                         :shape "SourceControlProvider" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (repository-name :initarg :repository-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-source-control-from-job-request-repository-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (repository-owner :initarg :repository-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-source-control-from-job-request-repository-owner
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (branch-name :initarg :branch-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-source-control-from-job-request-branch-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (folder :initarg :folder :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-source-control-from-job-request-folder
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (commit-id :initarg :commit-id :initform
                         common-lisp:nil :type
                         (common-lisp:or commit-id-string common-lisp:null)
                         :accessor
                         struct-shape-update-source-control-from-job-request-commit-id
                         :shape "CommitIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auth-strategy :initarg :auth-strategy :initform
                         common-lisp:nil :type
                         (common-lisp:or source-control-auth-strategy
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-source-control-from-job-request-auth-strategy
                         :shape "SourceControlAuthStrategy" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auth-token :initarg :auth-token :initform
                         common-lisp:nil :type
                         (common-lisp:or auth-token-string common-lisp:null)
                         :accessor
                         struct-shape-update-source-control-from-job-request-auth-token
                         :shape "AuthTokenString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-source-control-from-job-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-source-control-from-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-source-control-from-job-request
                    'make-update-source-control-from-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-source-control-from-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-source-control-from-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "RepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-owner))
      (common-lisp:list
       (common-lisp:cons "RepositoryOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch-name))
      (common-lisp:list
       (common-lisp:cons "BranchName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'folder))
      (common-lisp:list
       (common-lisp:cons "Folder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-id))
      (common-lisp:list
       (common-lisp:cons "CommitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-strategy))
      (common-lisp:list
       (common-lisp:cons "AuthStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-token))
      (common-lisp:list
       (common-lisp:cons "AuthToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-source-control-from-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-source-control-from-job-response common-lisp:nil
                       ((job-name :initarg :job-name :initform common-lisp:nil
                         :type (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-source-control-from-job-response-job-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-source-control-from-job-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-source-control-from-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-source-control-from-job-response
                    'make-update-source-control-from-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-source-control-from-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-source-control-from-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-source-control-from-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-table-optimizer-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         (common-lisp:error ":catalog-id is required") :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-update-table-optimizer-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-table-optimizer-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-name :initarg :table-name :initform
                         (common-lisp:error ":table-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-table-optimizer-request-table-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or table-optimizer-type common-lisp:null)
                         :accessor
                         struct-shape-update-table-optimizer-request-type
                         :shape "TableOptimizerType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (table-optimizer-configuration :initarg
                         :table-optimizer-configuration :initform
                         (common-lisp:error
                          ":table-optimizer-configuration is required")
                         :type
                         (common-lisp:or table-optimizer-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-table-optimizer-request-table-optimizer-configuration
                         :shape "TableOptimizerConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-table-optimizer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-table-optimizer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-table-optimizer-request
                    'make-update-table-optimizer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-table-optimizer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-table-optimizer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'table-optimizer-configuration))
      (common-lisp:list
       (common-lisp:cons "TableOptimizerConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-table-optimizer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-table-optimizer-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-table-optimizer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-table-optimizer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-table-optimizer-response
                    'make-update-table-optimizer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-table-optimizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-table-optimizer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-table-optimizer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-table-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor struct-shape-update-table-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-database-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (table-input :initarg :table-input :initform
                         (common-lisp:error ":table-input is required") :type
                         (common-lisp:or table-input common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-table-input :shape
                         "TableInput" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (skip-archive :initarg :skip-archive :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean-nullable common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-skip-archive :shape
                         "BooleanNullable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transaction-id :initarg :transaction-id :initform
                         common-lisp:nil :type
                         (common-lisp:or transaction-id-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-table-request-transaction-id
                         :shape "TransactionIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (version-id :initarg :version-id :initform
                         common-lisp:nil :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor struct-shape-update-table-request-version-id
                         :shape "VersionString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-table-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-table-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-table-request 'make-update-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-table-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-table-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-input))
      (common-lisp:list
       (common-lisp:cons "TableInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-archive))
      (common-lisp:list
       (common-lisp:cons "SkipArchive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-id))
      (common-lisp:list
       (common-lisp:cons "TransactionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-table-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-table-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-table-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-table-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-table-response 'make-update-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-table-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-table-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-trigger-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-update-trigger-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trigger-update :initarg :trigger-update :initform
                         (common-lisp:error ":trigger-update is required")
                         :type (common-lisp:or trigger-update common-lisp:null)
                         :accessor
                         struct-shape-update-trigger-request-trigger-update
                         :shape "TriggerUpdate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-trigger-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-trigger-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-trigger-request 'make-update-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-trigger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-trigger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-update))
      (common-lisp:list
       (common-lisp:cons "TriggerUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-trigger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-trigger-response common-lisp:nil
                       ((trigger :initarg :trigger :initform common-lisp:nil
                         :type (common-lisp:or trigger common-lisp:null)
                         :accessor struct-shape-update-trigger-response-trigger
                         :shape "Trigger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-trigger-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-trigger-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-trigger-response 'make-update-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-trigger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-trigger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger))
      (common-lisp:list
       (common-lisp:cons "Trigger"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-trigger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-defined-function-request common-lisp:nil
                       ((catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-update-user-defined-function-request-catalog-id
                         :shape "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         (common-lisp:error ":database-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-user-defined-function-request-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-name :initarg :function-name :initform
                         (common-lisp:error ":function-name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-user-defined-function-request-function-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (function-input :initarg :function-input :initform
                         (common-lisp:error ":function-input is required")
                         :type
                         (common-lisp:or user-defined-function-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-user-defined-function-request-function-input
                         :shape "UserDefinedFunctionInput" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-defined-function-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-user-defined-function-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-defined-function-request
                    'make-update-user-defined-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-defined-function-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-defined-function-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-input))
      (common-lisp:list
       (common-lisp:cons "FunctionInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-defined-function-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-defined-function-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-defined-function-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-user-defined-function-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-defined-function-response
                    'make-update-user-defined-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-defined-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-defined-function-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-defined-function-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workflow-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-update-workflow-request-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor
                         struct-shape-update-workflow-request-description
                         :shape "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-run-properties :initarg
                         :default-run-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or workflow-run-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-workflow-request-default-run-properties
                         :shape "WorkflowRunProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (max-concurrent-runs :initarg :max-concurrent-runs
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor
                         struct-shape-update-workflow-request-max-concurrent-runs
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workflow-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workflow-request 'make-update-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-run-properties))
      (common-lisp:list
       (common-lisp:cons "DefaultRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrent-runs))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-workflow-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-update-workflow-response-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-workflow-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-workflow-response 'make-update-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-xmlclassifier-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-update-xmlclassifier-request-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (classification :initarg :classification :initform
                         common-lisp:nil :type
                         (common-lisp:or classification common-lisp:null)
                         :accessor
                         struct-shape-update-xmlclassifier-request-classification
                         :shape "Classification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (row-tag :initarg :row-tag :initform common-lisp:nil
                         :type (common-lisp:or row-tag common-lisp:null)
                         :accessor
                         struct-shape-update-xmlclassifier-request-row-tag
                         :shape "RowTag" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-xmlclassifier-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-xmlclassifier-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-xmlclassifier-request
                    'make-update-xmlclassifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-xmlclassifier-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-xmlclassifier-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-tag))
      (common-lisp:list
       (common-lisp:cons "RowTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-xmlclassifier-request))
   common-lisp:nil))
(common-lisp:deftype updated-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass upsert-redshift-target-options common-lisp:nil
                       ((table-location :initarg :table-location :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-upsert-redshift-target-options-table-location
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-name :initarg :connection-name :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-property
                                         common-lisp:null)
                         :accessor
                         struct-shape-upsert-redshift-target-options-connection-name
                         :shape "EnclosedInStringProperty" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (upsert-keys :initarg :upsert-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or enclosed-in-string-properties-min-one
                                         common-lisp:null)
                         :accessor
                         struct-shape-upsert-redshift-target-options-upsert-keys
                         :shape "EnclosedInStringPropertiesMinOne" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upsert-redshift-target-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'upsert-redshift-target-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upsert-redshift-target-options
                    'make-upsert-redshift-target-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upsert-redshift-target-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upsert-redshift-target-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-location))
      (common-lisp:list
       (common-lisp:cons "TableLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upsert-keys))
      (common-lisp:list
       (common-lisp:cons "UpsertKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upsert-redshift-target-options))
   common-lisp:nil))
(common-lisp:deftype uri-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-defined-function common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-user-defined-function-function-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-name :initarg :database-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-user-defined-function-database-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (class-name :initarg :class-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-user-defined-function-class-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owner-name :initarg :owner-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-user-defined-function-owner-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owner-type :initarg :owner-type :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-type common-lisp:null)
                         :accessor
                         struct-shape-user-defined-function-owner-type :shape
                         "PrincipalType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-user-defined-function-create-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-uris :initarg :resource-uris :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-uri-list common-lisp:null)
                         :accessor
                         struct-shape-user-defined-function-resource-uris
                         :shape "ResourceUriList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (catalog-id :initarg :catalog-id :initform
                         common-lisp:nil :type
                         (common-lisp:or catalog-id-string common-lisp:null)
                         :accessor
                         struct-shape-user-defined-function-catalog-id :shape
                         "CatalogIdString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-defined-function
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-defined-function
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-defined-function 'make-user-defined-function))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-defined-function))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-defined-function))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-name))
      (common-lisp:list
       (common-lisp:cons "DatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'class-name))
      (common-lisp:list
       (common-lisp:cons "ClassName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-name))
      (common-lisp:list
       (common-lisp:cons "OwnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-type))
      (common-lisp:list
       (common-lisp:cons "OwnerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-uris))
      (common-lisp:list
       (common-lisp:cons "ResourceUris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog-id))
      (common-lisp:list
       (common-lisp:cons "CatalogId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-defined-function))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-defined-function-input common-lisp:nil
                       ((function-name :initarg :function-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-user-defined-function-input-function-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (class-name :initarg :class-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-user-defined-function-input-class-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-name :initarg :owner-name :initform
                         common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor
                         struct-shape-user-defined-function-input-owner-name
                         :shape "NameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-type :initarg :owner-type :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-type common-lisp:null)
                         :accessor
                         struct-shape-user-defined-function-input-owner-type
                         :shape "PrincipalType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-uris :initarg :resource-uris :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-uri-list common-lisp:null)
                         :accessor
                         struct-shape-user-defined-function-input-resource-uris
                         :shape "ResourceUriList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-defined-function-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-defined-function-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-defined-function-input
                    'make-user-defined-function-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-defined-function-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-defined-function-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function-name))
      (common-lisp:list
       (common-lisp:cons "FunctionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'class-name))
      (common-lisp:list
       (common-lisp:cons "ClassName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-name))
      (common-lisp:list
       (common-lisp:cons "OwnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-type))
      (common-lisp:list
       (common-lisp:cons "OwnerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-uris))
      (common-lisp:list
       (common-lisp:cons "ResourceUris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-defined-function-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-defined-function-list ()
   '(trivial-types:proper-list user-defined-function))
 (common-lisp:defun make-user-defined-function-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-defined-function))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype value-string-list ()
   '(trivial-types:proper-list value-string))
 (common-lisp:defun make-value-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype version-id () 'common-lisp:integer)
(common-lisp:deftype version-long-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition version-mismatch-exception
     (glue-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       version-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'version-mismatch-exception
                    'version-mismatch-exception-message)))
(common-lisp:deftype version-string () 'common-lisp:string)
(common-lisp:deftype versions-string () 'common-lisp:string)
(common-lisp:deftype view-dialect () 'common-lisp:string)
(common-lisp:deftype view-dialect-version-string () 'common-lisp:string)
(common-lisp:deftype view-text-string () 'common-lisp:string)
(common-lisp:deftype worker-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workflow common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-workflow-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or generic-string common-lisp:null)
                         :accessor struct-shape-workflow-description :shape
                         "GenericString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-run-properties :initarg
                         :default-run-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or workflow-run-properties
                                         common-lisp:null)
                         :accessor struct-shape-workflow-default-run-properties
                         :shape "WorkflowRunProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-on :initarg :created-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-workflow-created-on :shape
                         "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-on :initarg :last-modified-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-workflow-last-modified-on
                         :shape "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-run :initarg :last-run :initform common-lisp:nil
                         :type (common-lisp:or workflow-run common-lisp:null)
                         :accessor struct-shape-workflow-last-run :shape
                         "WorkflowRun" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (graph :initarg :graph :initform common-lisp:nil :type
                         (common-lisp:or workflow-graph common-lisp:null)
                         :accessor struct-shape-workflow-graph :shape
                         "WorkflowGraph" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-concurrent-runs :initarg :max-concurrent-runs
                         :initform common-lisp:nil :type
                         (common-lisp:or nullable-integer common-lisp:null)
                         :accessor struct-shape-workflow-max-concurrent-runs
                         :shape "NullableInteger" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (blueprint-details :initarg :blueprint-details
                         :initform common-lisp:nil :type
                         (common-lisp:or blueprint-details common-lisp:null)
                         :accessor struct-shape-workflow-blueprint-details
                         :shape "BlueprintDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workflow
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workflow
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'workflow 'make-workflow))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-run-properties))
      (common-lisp:list
       (common-lisp:cons "DefaultRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-on))
      (common-lisp:list
       (common-lisp:cons "CreatedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-on))
      (common-lisp:list
       (common-lisp:cons "LastModifiedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run))
      (common-lisp:list
       (common-lisp:cons "LastRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph))
      (common-lisp:list
       (common-lisp:cons "Graph"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrent-runs))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-details))
      (common-lisp:list
       (common-lisp:cons "BlueprintDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass workflow-graph common-lisp:nil
                       ((nodes :initarg :nodes :initform common-lisp:nil :type
                         (common-lisp:or node-list common-lisp:null) :accessor
                         struct-shape-workflow-graph-nodes :shape "NodeList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (edges :initarg :edges :initform common-lisp:nil :type
                         (common-lisp:or edge-list common-lisp:null) :accessor
                         struct-shape-workflow-graph-edges :shape "EdgeList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workflow-graph
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-graph
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'workflow-graph 'make-workflow-graph))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-graph))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-graph))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nodes))
      (common-lisp:list
       (common-lisp:cons "Nodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edges))
      (common-lisp:list
       (common-lisp:cons "Edges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-graph))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workflow-names ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun make-workflow-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass workflow-run common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-workflow-run-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workflow-run-id :initarg :workflow-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-workflow-run-workflow-run-id :shape
                         "IdString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (previous-run-id :initarg :previous-run-id :initform
                         common-lisp:nil :type
                         (common-lisp:or id-string common-lisp:null) :accessor
                         struct-shape-workflow-run-previous-run-id :shape
                         "IdString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (workflow-run-properties :initarg
                         :workflow-run-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or workflow-run-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-workflow-run-workflow-run-properties
                         :shape "WorkflowRunProperties" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-workflow-run-started-on :shape
                         "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completed-on :initarg :completed-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-value common-lisp:null)
                         :accessor struct-shape-workflow-run-completed-on
                         :shape "TimestampValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or workflow-run-status common-lisp:null)
                         :accessor struct-shape-workflow-run-status :shape
                         "WorkflowRunStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-string common-lisp:null)
                         :accessor struct-shape-workflow-run-error-message
                         :shape "ErrorString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (statistics :initarg :statistics :initform
                         common-lisp:nil :type
                         (common-lisp:or workflow-run-statistics
                                         common-lisp:null)
                         :accessor struct-shape-workflow-run-statistics :shape
                         "WorkflowRunStatistics" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (graph :initarg :graph :initform common-lisp:nil :type
                         (common-lisp:or workflow-graph common-lisp:null)
                         :accessor struct-shape-workflow-run-graph :shape
                         "WorkflowGraph" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (starting-event-batch-condition :initarg
                         :starting-event-batch-condition :initform
                         common-lisp:nil :type
                         (common-lisp:or starting-event-batch-condition
                                         common-lisp:null)
                         :accessor
                         struct-shape-workflow-run-starting-event-batch-condition
                         :shape "StartingEventBatchCondition" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workflow-run
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-run
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'workflow-run 'make-workflow-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-run-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-run-id))
      (common-lisp:list
       (common-lisp:cons "PreviousRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workflow-run-properties))
      (common-lisp:list
       (common-lisp:cons "WorkflowRunProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "StartedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "CompletedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'graph))
      (common-lisp:list
       (common-lisp:cons "Graph"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'starting-event-batch-condition))
      (common-lisp:list
       (common-lisp:cons "StartingEventBatchCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-run))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype workflow-run-properties () 'common-lisp:hash-table)
 (common-lisp:defun make-workflow-run-properties
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass workflow-run-statistics common-lisp:nil
                       ((total-actions :initarg :total-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-workflow-run-statistics-total-actions
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timeout-actions :initarg :timeout-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-workflow-run-statistics-timeout-actions
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failed-actions :initarg :failed-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-workflow-run-statistics-failed-actions
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stopped-actions :initarg :stopped-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-workflow-run-statistics-stopped-actions
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (succeeded-actions :initarg :succeeded-actions
                         :initform common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-workflow-run-statistics-succeeded-actions
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (running-actions :initarg :running-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-workflow-run-statistics-running-actions
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (errored-actions :initarg :errored-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-workflow-run-statistics-errored-actions
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (waiting-actions :initarg :waiting-actions :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-value common-lisp:null)
                         :accessor
                         struct-shape-workflow-run-statistics-waiting-actions
                         :shape "IntegerValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-workflow-run-statistics
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-run-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'workflow-run-statistics 'make-workflow-run-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workflow-run-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workflow-run-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-actions))
      (common-lisp:list
       (common-lisp:cons "TotalActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-actions))
      (common-lisp:list
       (common-lisp:cons "TimeoutActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-actions))
      (common-lisp:list
       (common-lisp:cons "FailedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped-actions))
      (common-lisp:list
       (common-lisp:cons "StoppedActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'succeeded-actions))
      (common-lisp:list
       (common-lisp:cons "SucceededActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'running-actions))
      (common-lisp:list
       (common-lisp:cons "RunningActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errored-actions))
      (common-lisp:list
       (common-lisp:cons "ErroredActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'waiting-actions))
      (common-lisp:list
       (common-lisp:cons "WaitingActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workflow-run-statistics))
   common-lisp:nil))
(common-lisp:deftype workflow-run-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workflow-runs ()
   '(trivial-types:proper-list workflow-run))
 (common-lisp:defun make-workflow-runs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-run))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype workflows () '(trivial-types:proper-list workflow))
 (common-lisp:defun make-workflows
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass xmlclassifier common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name-string common-lisp:null)
                         :accessor struct-shape-xmlclassifier-name :shape
                         "NameString" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (classification :initarg :classification :initform
                         (common-lisp:error ":classification is required")
                         :type (common-lisp:or classification common-lisp:null)
                         :accessor struct-shape-xmlclassifier-classification
                         :shape "Classification" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-xmlclassifier-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-xmlclassifier-last-updated :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version-id common-lisp:null)
                         :accessor struct-shape-xmlclassifier-version :shape
                         "VersionId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (row-tag :initarg :row-tag :initform common-lisp:nil
                         :type (common-lisp:or row-tag common-lisp:null)
                         :accessor struct-shape-xmlclassifier-row-tag :shape
                         "RowTag" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-xmlclassifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'xmlclassifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'xmlclassifier 'make-xmlclassifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input xmlclassifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input xmlclassifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'classification))
      (common-lisp:list
       (common-lisp:cons "Classification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-tag))
      (common-lisp:list
       (common-lisp:cons "RowTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input xmlclassifier))
   common-lisp:nil))
(common-lisp:deftype |databaseNameString| () 'common-lisp:string)
(common-lisp:deftype |tableNameString| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-create-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-input-list)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-input-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-create-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchCreatePartition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-create-partition))
(common-lisp:progn
 (common-lisp:defun batch-delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id connection-name-list)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id connection-name-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeleteConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-delete-connection))
(common-lisp:progn
 (common-lisp:defun batch-delete-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partitions-to-delete)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partitions-to-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeletePartition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-delete-partition))
(common-lisp:progn
 (common-lisp:defun batch-delete-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name tables-to-delete
                     transaction-id)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name tables-to-delete
     transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeleteTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-delete-table))
(common-lisp:progn
 (common-lisp:defun batch-delete-table-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     version-ids)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name version-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-delete-table-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDeleteTableVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-delete-table-version))
(common-lisp:progn
 (common-lisp:defun batch-get-blueprints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names include-blueprint
                     include-parameter-spec)
   (common-lisp:declare
    (common-lisp:ignorable names include-blueprint include-parameter-spec))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-blueprints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetBlueprints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-blueprints))
(common-lisp:progn
 (common-lisp:defun batch-get-crawlers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-names)
   (common-lisp:declare (common-lisp:ignorable crawler-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-crawlers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetCrawlers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-crawlers))
(common-lisp:progn
 (common-lisp:defun batch-get-custom-entity-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names)
   (common-lisp:declare (common-lisp:ignorable names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-custom-entity-types-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetCustomEntityTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-custom-entity-types))
(common-lisp:progn
 (common-lisp:defun batch-get-data-quality-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key result-ids)
   (common-lisp:declare (common-lisp:ignorable result-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-data-quality-result-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetDataQualityResult"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-data-quality-result))
(common-lisp:progn
 (common-lisp:defun batch-get-dev-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dev-endpoint-names)
   (common-lisp:declare (common-lisp:ignorable dev-endpoint-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-dev-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetDevEndpoints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-dev-endpoints))
(common-lisp:progn
 (common-lisp:defun batch-get-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-names)
   (common-lisp:declare (common-lisp:ignorable job-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-jobs))
(common-lisp:progn
 (common-lisp:defun batch-get-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partitions-to-get)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partitions-to-get))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetPartition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-partition))
(common-lisp:progn
 (common-lisp:defun batch-get-table-optimizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entries)
   (common-lisp:declare (common-lisp:ignorable entries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-table-optimizer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetTableOptimizer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-table-optimizer))
(common-lisp:progn
 (common-lisp:defun batch-get-triggers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trigger-names)
   (common-lisp:declare (common-lisp:ignorable trigger-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-triggers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetTriggers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-triggers))
(common-lisp:progn
 (common-lisp:defun batch-get-workflows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key names include-graph)
   (common-lisp:declare (common-lisp:ignorable names include-graph))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-workflows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetWorkflows"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-workflows))
(common-lisp:progn
 (common-lisp:defun batch-stop-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name job-run-ids)
   (common-lisp:declare (common-lisp:ignorable job-name job-run-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-stop-job-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchStopJobRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-stop-job-run))
(common-lisp:progn
 (common-lisp:defun batch-update-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     entries)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name entries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-update-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchUpdatePartition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-update-partition))
(common-lisp:progn
 (common-lisp:defun cancel-data-quality-rule-recommendation-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key run-id)
   (common-lisp:declare (common-lisp:ignorable run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-data-quality-rule-recommendation-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelDataQualityRuleRecommendationRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-data-quality-rule-recommendation-run))
(common-lisp:progn
 (common-lisp:defun cancel-data-quality-ruleset-evaluation-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key run-id)
   (common-lisp:declare (common-lisp:ignorable run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-data-quality-ruleset-evaluation-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelDataQualityRulesetEvaluationRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-data-quality-ruleset-evaluation-run))
(common-lisp:progn
 (common-lisp:defun cancel-mltask-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id task-run-id)
   (common-lisp:declare (common-lisp:ignorable transform-id task-run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-mltask-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelMLTaskRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-mltask-run))
(common-lisp:progn
 (common-lisp:defun cancel-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id id request-origin)
   (common-lisp:declare (common-lisp:ignorable session-id id request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-statement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelStatement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-statement))
(common-lisp:progn
 (common-lisp:defun check-schema-version-validity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-format schema-definition)
   (common-lisp:declare (common-lisp:ignorable data-format schema-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-check-schema-version-validity-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CheckSchemaVersionValidity"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'check-schema-version-validity))
(common-lisp:progn
 (common-lisp:defun create-blueprint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description blueprint-location tags)
   (common-lisp:declare
    (common-lisp:ignorable name description blueprint-location tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-blueprint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateBlueprint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-blueprint))
(common-lisp:progn
 (common-lisp:defun create-classifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grok-classifier xmlclassifier
                     json-classifier csv-classifier)
   (common-lisp:declare
    (common-lisp:ignorable grok-classifier xmlclassifier json-classifier
     csv-classifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-classifier-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateClassifier"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-classifier))
(common-lisp:progn
 (common-lisp:defun create-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id connection-input tags)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id connection-input tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-connection))
(common-lisp:progn
 (common-lisp:defun create-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name role database-name description
                     targets schedule classifiers table-prefix
                     schema-change-policy recrawl-policy lineage-configuration
                     lake-formation-configuration configuration
                     crawler-security-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable name role database-name description targets schedule
     classifiers table-prefix schema-change-policy recrawl-policy
     lineage-configuration lake-formation-configuration configuration
     crawler-security-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCrawler"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-crawler))
(common-lisp:progn
 (common-lisp:defun create-custom-entity-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name regex-string context-words tags)
   (common-lisp:declare
    (common-lisp:ignorable name regex-string context-words tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-custom-entity-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCustomEntityType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-custom-entity-type))
(common-lisp:progn
 (common-lisp:defun create-data-quality-ruleset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description ruleset tags
                     target-table client-token)
   (common-lisp:declare
    (common-lisp:ignorable name description ruleset tags target-table
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-data-quality-ruleset-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDataQualityRuleset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-data-quality-ruleset))
(common-lisp:progn
 (common-lisp:defun create-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-input tags)
   (common-lisp:declare (common-lisp:ignorable catalog-id database-input tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-database))
(common-lisp:progn
 (common-lisp:defun create-dev-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name role-arn security-group-ids
                     subnet-id public-key public-keys number-of-nodes
                     worker-type glue-version number-of-workers
                     extra-python-libs-s3path extra-jars-s3path
                     security-configuration tags arguments)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name role-arn security-group-ids subnet-id
     public-key public-keys number-of-nodes worker-type glue-version
     number-of-workers extra-python-libs-s3path extra-jars-s3path
     security-configuration tags arguments))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dev-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDevEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-dev-endpoint))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description log-uri role
                     execution-property command default-arguments
                     non-overridable-arguments connections max-retries
                     allocated-capacity timeout max-capacity
                     security-configuration tags notification-property
                     glue-version number-of-workers worker-type
                     code-gen-configuration-nodes execution-class
                     source-control-details)
   (common-lisp:declare
    (common-lisp:ignorable name description log-uri role execution-property
     command default-arguments non-overridable-arguments connections
     max-retries allocated-capacity timeout max-capacity security-configuration
     tags notification-property glue-version number-of-workers worker-type
     code-gen-configuration-nodes execution-class source-control-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-mltransform
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description input-record-tables
                     parameters role glue-version max-capacity worker-type
                     number-of-workers timeout max-retries tags
                     transform-encryption)
   (common-lisp:declare
    (common-lisp:ignorable name description input-record-tables parameters role
     glue-version max-capacity worker-type number-of-workers timeout
     max-retries tags transform-encryption))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-mltransform-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateMLTransform"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-mltransform))
(common-lisp:progn
 (common-lisp:defun create-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePartition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-partition))
(common-lisp:progn
 (common-lisp:defun create-partition-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-index)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-index))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-partition-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePartitionIndex"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-partition-index))
(common-lisp:progn
 (common-lisp:defun create-registry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-name description tags)
   (common-lisp:declare (common-lisp:ignorable registry-name description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-registry-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRegistry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-registry))
(common-lisp:progn
 (common-lisp:defun create-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id schema-name data-format
                     compatibility description tags schema-definition)
   (common-lisp:declare
    (common-lisp:ignorable registry-id schema-name data-format compatibility
     description tags schema-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSchema"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-schema))
(common-lisp:progn
 (common-lisp:defun create-script
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dag-nodes dag-edges language)
   (common-lisp:declare (common-lisp:ignorable dag-nodes dag-edges language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-script-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateScript"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-script))
(common-lisp:progn
 (common-lisp:defun create-security-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name encryption-configuration)
   (common-lisp:declare (common-lisp:ignorable name encryption-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-security-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSecurityConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-security-configuration))
(common-lisp:progn
 (common-lisp:defun create-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id description role command timeout
                     idle-timeout default-arguments connections max-capacity
                     number-of-workers worker-type security-configuration
                     glue-version tags request-origin)
   (common-lisp:declare
    (common-lisp:ignorable id description role command timeout idle-timeout
     default-arguments connections max-capacity number-of-workers worker-type
     security-configuration glue-version tags request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-session))
(common-lisp:progn
 (common-lisp:defun create-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-input
                     partition-indexes transaction-id open-table-format-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-input
     partition-indexes transaction-id open-table-format-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-table))
(common-lisp:progn
 (common-lisp:defun create-table-optimizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name type
                     table-optimizer-configuration)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name type
     table-optimizer-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-table-optimizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTableOptimizer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-table-optimizer))
(common-lisp:progn
 (common-lisp:defun create-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name workflow-name type schedule
                     predicate actions description start-on-creation tags
                     event-batching-condition)
   (common-lisp:declare
    (common-lisp:ignorable name workflow-name type schedule predicate actions
     description start-on-creation tags event-batching-condition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTrigger"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-trigger))
(common-lisp:progn
 (common-lisp:defun create-user-defined-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name function-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name function-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-user-defined-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUserDefinedFunction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user-defined-function))
(common-lisp:progn
 (common-lisp:defun create-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description default-run-properties
                     tags max-concurrent-runs)
   (common-lisp:declare
    (common-lisp:ignorable name description default-run-properties tags
     max-concurrent-runs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateWorkflow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-workflow))
(common-lisp:progn
 (common-lisp:defun delete-blueprint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-blueprint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteBlueprint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-blueprint))
(common-lisp:progn
 (common-lisp:defun delete-classifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-classifier-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteClassifier"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-classifier))
(common-lisp:progn
 (common-lisp:defun delete-column-statistics-for-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-values column-name)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name partition-values
     column-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-column-statistics-for-partition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteColumnStatisticsForPartition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-column-statistics-for-partition))
(common-lisp:progn
 (common-lisp:defun delete-column-statistics-for-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     column-name)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name column-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-column-statistics-for-table-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteColumnStatisticsForTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-column-statistics-for-table))
(common-lisp:progn
 (common-lisp:defun delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id connection-name)
   (common-lisp:declare (common-lisp:ignorable catalog-id connection-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-connection))
(common-lisp:progn
 (common-lisp:defun delete-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCrawler"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-crawler))
(common-lisp:progn
 (common-lisp:defun delete-custom-entity-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-custom-entity-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCustomEntityType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-custom-entity-type))
(common-lisp:progn
 (common-lisp:defun delete-data-quality-ruleset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-data-quality-ruleset-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDataQualityRuleset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-data-quality-ruleset))
(common-lisp:progn
 (common-lisp:defun delete-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name)
   (common-lisp:declare (common-lisp:ignorable catalog-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-database))
(common-lisp:progn
 (common-lisp:defun delete-dev-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name)
   (common-lisp:declare (common-lisp:ignorable endpoint-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dev-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDevEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-dev-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name)
   (common-lisp:declare (common-lisp:ignorable job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-job))
(common-lisp:progn
 (common-lisp:defun delete-mltransform
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id)
   (common-lisp:declare (common-lisp:ignorable transform-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-mltransform-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMLTransform"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-mltransform))
(common-lisp:progn
 (common-lisp:defun delete-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-values)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePartition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-partition))
(common-lisp:progn
 (common-lisp:defun delete-partition-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     index-name)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name index-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-partition-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePartitionIndex"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-partition-index))
(common-lisp:progn
 (common-lisp:defun delete-registry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id)
   (common-lisp:declare (common-lisp:ignorable registry-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-registry-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRegistry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-registry))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-hash-condition resource-arn)
   (common-lisp:declare
    (common-lisp:ignorable policy-hash-condition resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun delete-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id)
   (common-lisp:declare (common-lisp:ignorable schema-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSchema"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-schema))
(common-lisp:progn
 (common-lisp:defun delete-schema-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id versions)
   (common-lisp:declare (common-lisp:ignorable schema-id versions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-schema-versions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSchemaVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-schema-versions))
(common-lisp:progn
 (common-lisp:defun delete-security-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-security-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSecurityConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-security-configuration))
(common-lisp:progn
 (common-lisp:defun delete-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id request-origin)
   (common-lisp:declare (common-lisp:ignorable id request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-session))
(common-lisp:progn
 (common-lisp:defun delete-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name name
                     transaction-id)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name name transaction-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-table))
(common-lisp:progn
 (common-lisp:defun delete-table-optimizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name type)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-table-optimizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTableOptimizer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-table-optimizer))
(common-lisp:progn
 (common-lisp:defun delete-table-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     version-id)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-table-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTableVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-table-version))
(common-lisp:progn
 (common-lisp:defun delete-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTrigger"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-trigger))
(common-lisp:progn
 (common-lisp:defun delete-user-defined-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name function-name)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name function-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-user-defined-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUserDefinedFunction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-user-defined-function))
(common-lisp:progn
 (common-lisp:defun delete-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteWorkflow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-workflow))
(common-lisp:progn
 (common-lisp:defun get-blueprint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name include-blueprint
                     include-parameter-spec)
   (common-lisp:declare
    (common-lisp:ignorable name include-blueprint include-parameter-spec))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-blueprint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBlueprint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-blueprint))
(common-lisp:progn
 (common-lisp:defun get-blueprint-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key blueprint-name run-id)
   (common-lisp:declare (common-lisp:ignorable blueprint-name run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-blueprint-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBlueprintRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-blueprint-run))
(common-lisp:progn
 (common-lisp:defun get-blueprint-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key blueprint-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable blueprint-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-blueprint-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBlueprintRuns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-blueprint-runs))
(common-lisp:progn
 (common-lisp:defun get-catalog-import-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id)
   (common-lisp:declare (common-lisp:ignorable catalog-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-catalog-import-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCatalogImportStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-catalog-import-status))
(common-lisp:progn
 (common-lisp:defun get-classifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-classifier-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetClassifier"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-classifier))
(common-lisp:progn
 (common-lisp:defun get-classifiers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-classifiers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetClassifiers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-classifiers))
(common-lisp:progn
 (common-lisp:defun get-column-statistics-for-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-values column-names)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name partition-values
     column-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-column-statistics-for-partition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetColumnStatisticsForPartition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-column-statistics-for-partition))
(common-lisp:progn
 (common-lisp:defun get-column-statistics-for-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     column-names)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name column-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-column-statistics-for-table-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetColumnStatisticsForTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-column-statistics-for-table))
(common-lisp:progn
 (common-lisp:defun get-column-statistics-task-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key column-statistics-task-run-id)
   (common-lisp:declare (common-lisp:ignorable column-statistics-task-run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-column-statistics-task-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetColumnStatisticsTaskRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-column-statistics-task-run))
(common-lisp:progn
 (common-lisp:defun get-column-statistics-task-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-name table-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable database-name table-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-column-statistics-task-runs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetColumnStatisticsTaskRuns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-column-statistics-task-runs))
(common-lisp:progn
 (common-lisp:defun get-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name hide-password)
   (common-lisp:declare (common-lisp:ignorable catalog-id name hide-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-connection))
(common-lisp:progn
 (common-lisp:defun get-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id filter hide-password
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id filter hide-password next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetConnections"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-connections))
(common-lisp:progn
 (common-lisp:defun get-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCrawler"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-crawler))
(common-lisp:progn
 (common-lisp:defun get-crawler-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-name-list max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable crawler-name-list max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-crawler-metrics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCrawlerMetrics"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-crawler-metrics))
(common-lisp:progn
 (common-lisp:defun get-crawlers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-crawlers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCrawlers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-crawlers))
(common-lisp:progn
 (common-lisp:defun get-custom-entity-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-custom-entity-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCustomEntityType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-custom-entity-type))
(common-lisp:progn
 (common-lisp:defun get-data-catalog-encryption-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id)
   (common-lisp:declare (common-lisp:ignorable catalog-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-data-catalog-encryption-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDataCatalogEncryptionSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-data-catalog-encryption-settings))
(common-lisp:progn
 (common-lisp:defun get-data-quality-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key result-id)
   (common-lisp:declare (common-lisp:ignorable result-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-quality-result-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDataQualityResult"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-data-quality-result))
(common-lisp:progn
 (common-lisp:defun get-data-quality-rule-recommendation-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key run-id)
   (common-lisp:declare (common-lisp:ignorable run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-data-quality-rule-recommendation-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDataQualityRuleRecommendationRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-data-quality-rule-recommendation-run))
(common-lisp:progn
 (common-lisp:defun get-data-quality-ruleset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-quality-ruleset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDataQualityRuleset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-data-quality-ruleset))
(common-lisp:progn
 (common-lisp:defun get-data-quality-ruleset-evaluation-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key run-id)
   (common-lisp:declare (common-lisp:ignorable run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-data-quality-ruleset-evaluation-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDataQualityRulesetEvaluationRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-data-quality-ruleset-evaluation-run))
(common-lisp:progn
 (common-lisp:defun get-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name)
   (common-lisp:declare (common-lisp:ignorable catalog-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-database))
(common-lisp:progn
 (common-lisp:defun get-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id next-token max-results
                     resource-share-type)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id next-token max-results
     resource-share-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-databases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDatabases"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-databases))
(common-lisp:progn
 (common-lisp:defun get-dataflow-graph
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key python-script)
   (common-lisp:declare (common-lisp:ignorable python-script))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dataflow-graph-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDataflowGraph"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-dataflow-graph))
(common-lisp:progn
 (common-lisp:defun get-dev-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name)
   (common-lisp:declare (common-lisp:ignorable endpoint-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dev-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDevEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-dev-endpoint))
(common-lisp:progn
 (common-lisp:defun get-dev-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dev-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDevEndpoints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-dev-endpoints))
(common-lisp:progn
 (common-lisp:defun get-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name)
   (common-lisp:declare (common-lisp:ignorable job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-job))
(common-lisp:progn
 (common-lisp:defun get-job-bookmark
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name run-id)
   (common-lisp:declare (common-lisp:ignorable job-name run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-bookmark-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetJobBookmark"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-job-bookmark))
(common-lisp:progn
 (common-lisp:defun get-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name run-id predecessors-included)
   (common-lisp:declare
    (common-lisp:ignorable job-name run-id predecessors-included))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetJobRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-job-run))
(common-lisp:progn
 (common-lisp:defun get-job-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable job-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetJobRuns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-job-runs))
(common-lisp:progn
 (common-lisp:defun get-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-jobs))
(common-lisp:progn
 (common-lisp:defun get-mltask-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id task-run-id)
   (common-lisp:declare (common-lisp:ignorable transform-id task-run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mltask-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMLTaskRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-mltask-run))
(common-lisp:progn
 (common-lisp:defun get-mltask-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id next-token max-results
                     filter sort)
   (common-lisp:declare
    (common-lisp:ignorable transform-id next-token max-results filter sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mltask-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMLTaskRuns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-mltask-runs))
(common-lisp:progn
 (common-lisp:defun get-mltransform
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id)
   (common-lisp:declare (common-lisp:ignorable transform-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mltransform-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMLTransform"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-mltransform))
(common-lisp:progn
 (common-lisp:defun get-mltransforms
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filter sort)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results filter sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mltransforms-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMLTransforms"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-mltransforms))
(common-lisp:progn
 (common-lisp:defun get-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source sinks location)
   (common-lisp:declare (common-lisp:ignorable source sinks location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mapping-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMapping"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-mapping))
(common-lisp:progn
 (common-lisp:defun get-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-values)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPartition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-partition))
(common-lisp:progn
 (common-lisp:defun get-partition-indexes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-partition-indexes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPartitionIndexes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-partition-indexes))
(common-lisp:progn
 (common-lisp:defun get-partitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     expression next-token segment max-results
                     exclude-column-schema transaction-id query-as-of-time)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name expression
     next-token segment max-results exclude-column-schema transaction-id
     query-as-of-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-partitions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPartitions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-partitions))
(common-lisp:progn
 (common-lisp:defun get-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mapping source sinks location language
                     additional-plan-options-map)
   (common-lisp:declare
    (common-lisp:ignorable mapping source sinks location language
     additional-plan-options-map))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-plan-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetPlan"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-plan))
(common-lisp:progn
 (common-lisp:defun get-registry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id)
   (common-lisp:declare (common-lisp:ignorable registry-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-registry-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRegistry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-registry))
(common-lisp:progn
 (common-lisp:defun get-resource-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetResourcePolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resource-policies))
(common-lisp:progn
 (common-lisp:defun get-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resource-policy))
(common-lisp:progn
 (common-lisp:defun get-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id)
   (common-lisp:declare (common-lisp:ignorable schema-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSchema"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-schema))
(common-lisp:progn
 (common-lisp:defun get-schema-by-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id schema-definition)
   (common-lisp:declare (common-lisp:ignorable schema-id schema-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-by-definition-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSchemaByDefinition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-schema-by-definition))
(common-lisp:progn
 (common-lisp:defun get-schema-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id schema-version-id
                     schema-version-number)
   (common-lisp:declare
    (common-lisp:ignorable schema-id schema-version-id schema-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-version-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSchemaVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-schema-version))
(common-lisp:progn
 (common-lisp:defun get-schema-versions-diff
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id first-schema-version-number
                     second-schema-version-number schema-diff-type)
   (common-lisp:declare
    (common-lisp:ignorable schema-id first-schema-version-number
     second-schema-version-number schema-diff-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-versions-diff-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSchemaVersionsDiff"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-schema-versions-diff))
(common-lisp:progn
 (common-lisp:defun get-security-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-security-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSecurityConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-security-configuration))
(common-lisp:progn
 (common-lisp:defun get-security-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-security-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSecurityConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-security-configurations))
(common-lisp:progn
 (common-lisp:defun get-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id request-origin)
   (common-lisp:declare (common-lisp:ignorable id request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-session))
(common-lisp:progn
 (common-lisp:defun get-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id id request-origin)
   (common-lisp:declare (common-lisp:ignorable session-id id request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-statement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetStatement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-statement))
(common-lisp:progn
 (common-lisp:defun get-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name name
                     transaction-id query-as-of-time)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name name transaction-id
     query-as-of-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-table))
(common-lisp:progn
 (common-lisp:defun get-table-optimizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name type)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-optimizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTableOptimizer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-table-optimizer))
(common-lisp:progn
 (common-lisp:defun get-table-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     version-id)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTableVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-table-version))
(common-lisp:progn
 (common-lisp:defun get-table-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTableVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-table-versions))
(common-lisp:progn
 (common-lisp:defun get-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name expression
                     next-token max-results transaction-id query-as-of-time)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name expression next-token
     max-results transaction-id query-as-of-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-tables-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTables"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-tables))
(common-lisp:progn
 (common-lisp:defun get-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-tags))
(common-lisp:progn
 (common-lisp:defun get-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTrigger"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-trigger))
(common-lisp:progn
 (common-lisp:defun get-triggers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token dependent-job-name
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable next-token dependent-job-name max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-triggers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTriggers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-triggers))
(common-lisp:progn
 (common-lisp:defun get-unfiltered-partition-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key region catalog-id database-name
                     table-name partition-values audit-context
                     supported-permission-types query-session-context)
   (common-lisp:declare
    (common-lisp:ignorable region catalog-id database-name table-name
     partition-values audit-context supported-permission-types
     query-session-context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-unfiltered-partition-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUnfilteredPartitionMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-unfiltered-partition-metadata))
(common-lisp:progn
 (common-lisp:defun get-unfiltered-partitions-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key region catalog-id database-name
                     table-name expression audit-context
                     supported-permission-types next-token segment max-results
                     query-session-context)
   (common-lisp:declare
    (common-lisp:ignorable region catalog-id database-name table-name
     expression audit-context supported-permission-types next-token segment
     max-results query-session-context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-unfiltered-partitions-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUnfilteredPartitionsMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-unfiltered-partitions-metadata))
(common-lisp:progn
 (common-lisp:defun get-unfiltered-table-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key region catalog-id database-name name
                     audit-context supported-permission-types supported-dialect
                     permissions query-session-context)
   (common-lisp:declare
    (common-lisp:ignorable region catalog-id database-name name audit-context
     supported-permission-types supported-dialect permissions
     query-session-context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-unfiltered-table-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUnfilteredTableMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-unfiltered-table-metadata))
(common-lisp:progn
 (common-lisp:defun get-user-defined-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name function-name)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name function-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-user-defined-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUserDefinedFunction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-user-defined-function))
(common-lisp:progn
 (common-lisp:defun get-user-defined-functions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name pattern
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name pattern next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-user-defined-functions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUserDefinedFunctions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-user-defined-functions))
(common-lisp:progn
 (common-lisp:defun get-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name include-graph)
   (common-lisp:declare (common-lisp:ignorable name include-graph))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetWorkflow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-workflow))
(common-lisp:progn
 (common-lisp:defun get-workflow-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name run-id include-graph)
   (common-lisp:declare (common-lisp:ignorable name run-id include-graph))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetWorkflowRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-workflow-run))
(common-lisp:progn
 (common-lisp:defun get-workflow-run-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name run-id)
   (common-lisp:declare (common-lisp:ignorable name run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-workflow-run-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetWorkflowRunProperties"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-workflow-run-properties))
(common-lisp:progn
 (common-lisp:defun get-workflow-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name include-graph next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable name include-graph next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-workflow-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetWorkflowRuns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-workflow-runs))
(common-lisp:progn
 (common-lisp:defun import-catalog-to-glue
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id)
   (common-lisp:declare (common-lisp:ignorable catalog-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-catalog-to-glue-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportCatalogToGlue"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'import-catalog-to-glue))
(common-lisp:progn
 (common-lisp:defun list-blueprints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results tags)
   (common-lisp:declare (common-lisp:ignorable next-token max-results tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-blueprints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListBlueprints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-blueprints))
(common-lisp:progn
 (common-lisp:defun list-column-statistics-task-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-column-statistics-task-runs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListColumnStatisticsTaskRuns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-column-statistics-task-runs))
(common-lisp:progn
 (common-lisp:defun list-crawlers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token tags)
   (common-lisp:declare (common-lisp:ignorable max-results next-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-crawlers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCrawlers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-crawlers))
(common-lisp:progn
 (common-lisp:defun list-crawls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-name max-results filters
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable crawler-name max-results filters next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-crawls-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCrawls"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-crawls))
(common-lisp:progn
 (common-lisp:defun list-custom-entity-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results tags)
   (common-lisp:declare (common-lisp:ignorable next-token max-results tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-custom-entity-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCustomEntityTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-custom-entity-types))
(common-lisp:progn
 (common-lisp:defun list-data-quality-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-quality-results-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDataQualityResults"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-data-quality-results))
(common-lisp:progn
 (common-lisp:defun list-data-quality-rule-recommendation-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-quality-rule-recommendation-runs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDataQualityRuleRecommendationRuns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-data-quality-rule-recommendation-runs))
(common-lisp:progn
 (common-lisp:defun list-data-quality-ruleset-evaluation-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-quality-ruleset-evaluation-runs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDataQualityRulesetEvaluationRuns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-data-quality-ruleset-evaluation-runs))
(common-lisp:progn
 (common-lisp:defun list-data-quality-rulesets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filter tags)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results filter tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-quality-rulesets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDataQualityRulesets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-data-quality-rulesets))
(common-lisp:progn
 (common-lisp:defun list-dev-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results tags)
   (common-lisp:declare (common-lisp:ignorable next-token max-results tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dev-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDevEndpoints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-dev-endpoints))
(common-lisp:progn
 (common-lisp:defun list-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results tags)
   (common-lisp:declare (common-lisp:ignorable next-token max-results tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListJobs"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-jobs))
(common-lisp:progn
 (common-lisp:defun list-mltransforms
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filter sort tags)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results filter sort tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mltransforms-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMLTransforms"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-mltransforms))
(common-lisp:progn
 (common-lisp:defun list-registries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-registries-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRegistries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-registries))
(common-lisp:progn
 (common-lisp:defun list-schema-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable schema-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-schema-versions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSchemaVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-schema-versions))
(common-lisp:progn
 (common-lisp:defun list-schemas
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable registry-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-schemas-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSchemas"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-schemas))
(common-lisp:progn
 (common-lisp:defun list-sessions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results tags
                     request-origin)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results tags request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sessions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSessions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-sessions))
(common-lisp:progn
 (common-lisp:defun list-statements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id request-origin next-token)
   (common-lisp:declare
    (common-lisp:ignorable session-id request-origin next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-statements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStatements"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-statements))
(common-lisp:progn
 (common-lisp:defun list-table-optimizer-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name type
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name type max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-table-optimizer-runs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTableOptimizerRuns"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-table-optimizer-runs))
(common-lisp:progn
 (common-lisp:defun list-triggers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token dependent-job-name max-results
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable next-token dependent-job-name max-results tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-triggers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTriggers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-triggers))
(common-lisp:progn
 (common-lisp:defun list-workflows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workflows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListWorkflows"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-workflows))
(common-lisp:progn
 (common-lisp:defun put-data-catalog-encryption-settings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id
                     data-catalog-encryption-settings)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id data-catalog-encryption-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-data-catalog-encryption-settings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutDataCatalogEncryptionSettings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-data-catalog-encryption-settings))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-in-json resource-arn
                     policy-hash-condition policy-exists-condition
                     enable-hybrid)
   (common-lisp:declare
    (common-lisp:ignorable policy-in-json resource-arn policy-hash-condition
     policy-exists-condition enable-hybrid))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun put-schema-version-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id schema-version-number
                     schema-version-id metadata-key-value)
   (common-lisp:declare
    (common-lisp:ignorable schema-id schema-version-number schema-version-id
     metadata-key-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-schema-version-metadata-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutSchemaVersionMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-schema-version-metadata))
(common-lisp:progn
 (common-lisp:defun put-workflow-run-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name run-id run-properties)
   (common-lisp:declare (common-lisp:ignorable name run-id run-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-workflow-run-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutWorkflowRunProperties"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-workflow-run-properties))
(common-lisp:progn
 (common-lisp:defun query-schema-version-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id schema-version-number
                     schema-version-id metadata-list max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable schema-id schema-version-number schema-version-id
     metadata-list max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-query-schema-version-metadata-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "QuerySchemaVersionMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'query-schema-version-metadata))
(common-lisp:progn
 (common-lisp:defun register-schema-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id schema-definition)
   (common-lisp:declare (common-lisp:ignorable schema-id schema-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-schema-version-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterSchemaVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-schema-version))
(common-lisp:progn
 (common-lisp:defun remove-schema-version-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id schema-version-number
                     schema-version-id metadata-key-value)
   (common-lisp:declare
    (common-lisp:ignorable schema-id schema-version-number schema-version-id
     metadata-key-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-schema-version-metadata-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveSchemaVersionMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-schema-version-metadata))
(common-lisp:progn
 (common-lisp:defun reset-job-bookmark
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name run-id)
   (common-lisp:declare (common-lisp:ignorable job-name run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-job-bookmark-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetJobBookmark"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reset-job-bookmark))
(common-lisp:progn
 (common-lisp:defun resume-workflow-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name run-id node-ids)
   (common-lisp:declare (common-lisp:ignorable name run-id node-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resume-workflow-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResumeWorkflowRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'resume-workflow-run))
(common-lisp:progn
 (common-lisp:defun run-statement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key session-id code request-origin)
   (common-lisp:declare (common-lisp:ignorable session-id code request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-run-statement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RunStatement"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'run-statement))
(common-lisp:progn
 (common-lisp:defun search-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id next-token filters search-text
                     sort-criteria max-results resource-share-type)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id next-token filters search-text
     sort-criteria max-results resource-share-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-tables-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SearchTables"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'search-tables))
(common-lisp:progn
 (common-lisp:defun start-blueprint-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key blueprint-name parameters role-arn)
   (common-lisp:declare
    (common-lisp:ignorable blueprint-name parameters role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-blueprint-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartBlueprintRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-blueprint-run))
(common-lisp:progn
 (common-lisp:defun start-column-statistics-task-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-name table-name column-name-list
                     role sample-size catalog-id security-configuration)
   (common-lisp:declare
    (common-lisp:ignorable database-name table-name column-name-list role
     sample-size catalog-id security-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-column-statistics-task-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartColumnStatisticsTaskRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-column-statistics-task-run))
(common-lisp:progn
 (common-lisp:defun start-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartCrawler"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-crawler))
(common-lisp:progn
 (common-lisp:defun start-crawler-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-name)
   (common-lisp:declare (common-lisp:ignorable crawler-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-crawler-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartCrawlerSchedule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-crawler-schedule))
(common-lisp:progn
 (common-lisp:defun start-data-quality-rule-recommendation-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source role number-of-workers
                     timeout created-ruleset-name client-token)
   (common-lisp:declare
    (common-lisp:ignorable data-source role number-of-workers timeout
     created-ruleset-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-data-quality-rule-recommendation-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartDataQualityRuleRecommendationRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-data-quality-rule-recommendation-run))
(common-lisp:progn
 (common-lisp:defun start-data-quality-ruleset-evaluation-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-source role number-of-workers
                     timeout client-token additional-run-options ruleset-names
                     additional-data-sources)
   (common-lisp:declare
    (common-lisp:ignorable data-source role number-of-workers timeout
     client-token additional-run-options ruleset-names
     additional-data-sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-data-quality-ruleset-evaluation-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartDataQualityRulesetEvaluationRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-data-quality-ruleset-evaluation-run))
(common-lisp:progn
 (common-lisp:defun start-export-labels-task-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id output-s3path)
   (common-lisp:declare (common-lisp:ignorable transform-id output-s3path))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-export-labels-task-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartExportLabelsTaskRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-export-labels-task-run))
(common-lisp:progn
 (common-lisp:defun start-import-labels-task-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id input-s3path
                     replace-all-labels)
   (common-lisp:declare
    (common-lisp:ignorable transform-id input-s3path replace-all-labels))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-import-labels-task-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartImportLabelsTaskRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-import-labels-task-run))
(common-lisp:progn
 (common-lisp:defun start-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name job-run-id arguments
                     allocated-capacity timeout max-capacity
                     security-configuration notification-property worker-type
                     number-of-workers execution-class)
   (common-lisp:declare
    (common-lisp:ignorable job-name job-run-id arguments allocated-capacity
     timeout max-capacity security-configuration notification-property
     worker-type number-of-workers execution-class))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-job-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartJobRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-job-run))
(common-lisp:progn
 (common-lisp:defun start-mlevaluation-task-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id)
   (common-lisp:declare (common-lisp:ignorable transform-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-mlevaluation-task-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMLEvaluationTaskRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-mlevaluation-task-run))
(common-lisp:progn
 (common-lisp:defun start-mllabeling-set-generation-task-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id output-s3path)
   (common-lisp:declare (common-lisp:ignorable transform-id output-s3path))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-mllabeling-set-generation-task-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMLLabelingSetGenerationTaskRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-mllabeling-set-generation-task-run))
(common-lisp:progn
 (common-lisp:defun start-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartTrigger"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-trigger))
(common-lisp:progn
 (common-lisp:defun start-workflow-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name run-properties)
   (common-lisp:declare (common-lisp:ignorable name run-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-workflow-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartWorkflowRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-workflow-run))
(common-lisp:progn
 (common-lisp:defun stop-column-statistics-task-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key database-name table-name)
   (common-lisp:declare (common-lisp:ignorable database-name table-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-column-statistics-task-run-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopColumnStatisticsTaskRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-column-statistics-task-run))
(common-lisp:progn
 (common-lisp:defun stop-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopCrawler"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-crawler))
(common-lisp:progn
 (common-lisp:defun stop-crawler-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-name)
   (common-lisp:declare (common-lisp:ignorable crawler-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-crawler-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopCrawlerSchedule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-crawler-schedule))
(common-lisp:progn
 (common-lisp:defun stop-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id request-origin)
   (common-lisp:declare (common-lisp:ignorable id request-origin))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopSession"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-session))
(common-lisp:progn
 (common-lisp:defun stop-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopTrigger"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-trigger))
(common-lisp:progn
 (common-lisp:defun stop-workflow-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name run-id)
   (common-lisp:declare (common-lisp:ignorable name run-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-workflow-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopWorkflowRun"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-workflow-run))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags-to-add)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags-to-add))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags-to-remove)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-blueprint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description blueprint-location)
   (common-lisp:declare
    (common-lisp:ignorable name description blueprint-location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-blueprint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateBlueprint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-blueprint))
(common-lisp:progn
 (common-lisp:defun update-classifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grok-classifier xmlclassifier
                     json-classifier csv-classifier)
   (common-lisp:declare
    (common-lisp:ignorable grok-classifier xmlclassifier json-classifier
     csv-classifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-classifier-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateClassifier"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-classifier))
(common-lisp:progn
 (common-lisp:defun update-column-statistics-for-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-values column-statistics-list)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name partition-values
     column-statistics-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-column-statistics-for-partition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateColumnStatisticsForPartition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-column-statistics-for-partition))
(common-lisp:progn
 (common-lisp:defun update-column-statistics-for-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     column-statistics-list)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     column-statistics-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-column-statistics-for-table-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateColumnStatisticsForTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-column-statistics-for-table))
(common-lisp:progn
 (common-lisp:defun update-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name connection-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id name connection-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-connection))
(common-lisp:progn
 (common-lisp:defun update-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name role database-name description
                     targets schedule classifiers table-prefix
                     schema-change-policy recrawl-policy lineage-configuration
                     lake-formation-configuration configuration
                     crawler-security-configuration)
   (common-lisp:declare
    (common-lisp:ignorable name role database-name description targets schedule
     classifiers table-prefix schema-change-policy recrawl-policy
     lineage-configuration lake-formation-configuration configuration
     crawler-security-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCrawler"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-crawler))
(common-lisp:progn
 (common-lisp:defun update-crawler-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-name schedule)
   (common-lisp:declare (common-lisp:ignorable crawler-name schedule))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-crawler-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCrawlerSchedule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-crawler-schedule))
(common-lisp:progn
 (common-lisp:defun update-data-quality-ruleset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description ruleset)
   (common-lisp:declare (common-lisp:ignorable name description ruleset))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-data-quality-ruleset-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDataQualityRuleset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-data-quality-ruleset))
(common-lisp:progn
 (common-lisp:defun update-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name database-input)
   (common-lisp:declare (common-lisp:ignorable catalog-id name database-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDatabase"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-database))
(common-lisp:progn
 (common-lisp:defun update-dev-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name public-key add-public-keys
                     delete-public-keys custom-libraries update-etl-libraries
                     delete-arguments add-arguments)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name public-key add-public-keys
     delete-public-keys custom-libraries update-etl-libraries delete-arguments
     add-arguments))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dev-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDevEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-dev-endpoint))
(common-lisp:progn
 (common-lisp:defun update-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name job-update)
   (common-lisp:declare (common-lisp:ignorable job-name job-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-job))
(common-lisp:progn
 (common-lisp:defun update-job-from-source-control
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name provider repository-name
                     repository-owner branch-name folder commit-id
                     auth-strategy auth-token)
   (common-lisp:declare
    (common-lisp:ignorable job-name provider repository-name repository-owner
     branch-name folder commit-id auth-strategy auth-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-job-from-source-control-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateJobFromSourceControl"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-job-from-source-control))
(common-lisp:progn
 (common-lisp:defun update-mltransform
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-id name description parameters
                     role glue-version max-capacity worker-type
                     number-of-workers timeout max-retries)
   (common-lisp:declare
    (common-lisp:ignorable transform-id name description parameters role
     glue-version max-capacity worker-type number-of-workers timeout
     max-retries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-mltransform-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateMLTransform"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-mltransform))
(common-lisp:progn
 (common-lisp:defun update-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-value-list partition-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-value-list partition-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdatePartition"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-partition))
(common-lisp:progn
 (common-lisp:defun update-registry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registry-id description)
   (common-lisp:declare (common-lisp:ignorable registry-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-registry-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRegistry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-registry))
(common-lisp:progn
 (common-lisp:defun update-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-id schema-version-number
                     compatibility description)
   (common-lisp:declare
    (common-lisp:ignorable schema-id schema-version-number compatibility
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-schema-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSchema"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-schema))
(common-lisp:progn
 (common-lisp:defun update-source-control-from-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name provider repository-name
                     repository-owner branch-name folder commit-id
                     auth-strategy auth-token)
   (common-lisp:declare
    (common-lisp:ignorable job-name provider repository-name repository-owner
     branch-name folder commit-id auth-strategy auth-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-source-control-from-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSourceControlFromJob"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-source-control-from-job))
(common-lisp:progn
 (common-lisp:defun update-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-input
                     skip-archive transaction-id version-id)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-input skip-archive
     transaction-id version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTable"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-table))
(common-lisp:progn
 (common-lisp:defun update-table-optimizer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name type
                     table-optimizer-configuration)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name type
     table-optimizer-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-table-optimizer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTableOptimizer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-table-optimizer))
(common-lisp:progn
 (common-lisp:defun update-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name trigger-update)
   (common-lisp:declare (common-lisp:ignorable name trigger-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTrigger"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-trigger))
(common-lisp:progn
 (common-lisp:defun update-user-defined-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name function-name
                     function-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name function-name
     function-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-user-defined-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateUserDefinedFunction"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-user-defined-function))
(common-lisp:progn
 (common-lisp:defun update-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description default-run-properties
                     max-concurrent-runs)
   (common-lisp:declare
    (common-lisp:ignorable name description default-run-properties
     max-concurrent-runs))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'glue-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateWorkflow"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-workflow))
