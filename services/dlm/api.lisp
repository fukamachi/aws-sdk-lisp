;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/dlm/api (:use)
                             (:nicknames #:aws/dlm)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/dlm/api)
(common-lisp:progn
 (common-lisp:define-condition dlm-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'dlm-error))
(common-lisp:progn
 (common-lisp:defclass dlm-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "dlm" :api-version
                        "2018-01-12" :host-prefix "dlm" :signing-name "dlm"
                        :global-host common-lisp:nil))
 (common-lisp:export 'dlm-request))
(common-lisp:defvar *error-map*
  '(("InternalServerException" . internal-server-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass action common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or action-name common-lisp:null)
                         :accessor struct-shape-action-name :shape "ActionName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cross-region-copy :initarg :cross-region-copy
                         :initform
                         (common-lisp:error ":cross-region-copy is required")
                         :type
                         (common-lisp:or cross-region-copy-action-list
                                         common-lisp:null)
                         :accessor struct-shape-action-cross-region-copy :shape
                         "CrossRegionCopyActionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cross-region-copy))
      (common-lisp:list
       (common-lisp:cons "CrossRegionCopy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list action))
 (common-lisp:defun make-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass archive-retain-rule common-lisp:nil
                       ((retention-archive-tier :initarg
                         :retention-archive-tier :initform
                         (common-lisp:error
                          ":retention-archive-tier is required")
                         :type
                         (common-lisp:or retention-archive-tier
                                         common-lisp:null)
                         :accessor
                         struct-shape-archive-retain-rule-retention-archive-tier
                         :shape "RetentionArchiveTier" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-archive-retain-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'archive-retain-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'archive-retain-rule 'make-archive-retain-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-retain-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-retain-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-archive-tier))
      (common-lisp:list
       (common-lisp:cons "RetentionArchiveTier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-retain-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass archive-rule common-lisp:nil
                       ((retain-rule :initarg :retain-rule :initform
                         (common-lisp:error ":retain-rule is required") :type
                         (common-lisp:or archive-retain-rule common-lisp:null)
                         :accessor struct-shape-archive-rule-retain-rule :shape
                         "ArchiveRetainRule" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-archive-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'archive-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'archive-rule 'make-archive-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-rule))
      (common-lisp:list
       (common-lisp:cons "RetainRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-rule))
   common-lisp:nil))
(common-lisp:deftype availability-zone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun make-availability-zone-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype cmk-arn () 'common-lisp:string)
(common-lisp:deftype copy-tags () 'common-lisp:boolean)
(common-lisp:deftype copy-tags-nullable () 'common-lisp:boolean)
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:deftype create-interval () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-lifecycle-policy-request common-lisp:nil
                       ((execution-role-arn :initarg :execution-role-arn
                         :initform
                         (common-lisp:error ":execution-role-arn is required")
                         :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-lifecycle-policy-request-execution-role-arn
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         (common-lisp:error ":description is required") :type
                         (common-lisp:or policy-description common-lisp:null)
                         :accessor
                         struct-shape-create-lifecycle-policy-request-description
                         :shape "PolicyDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or settable-policy-state-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-lifecycle-policy-request-state
                         :shape "SettablePolicyStateValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (policy-details :initarg :policy-details :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-details common-lisp:null)
                         :accessor
                         struct-shape-create-lifecycle-policy-request-policy-details
                         :shape "PolicyDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-lifecycle-policy-request-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-policy :initarg :default-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or default-policy-type-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-lifecycle-policy-request-default-policy
                         :shape "DefaultPolicyTypeValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (create-interval :initarg :create-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or create-interval common-lisp:null)
                         :accessor
                         struct-shape-create-lifecycle-policy-request-create-interval
                         :shape "CreateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retain-interval :initarg :retain-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or retain-interval common-lisp:null)
                         :accessor
                         struct-shape-create-lifecycle-policy-request-retain-interval
                         :shape "RetainInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags :initarg :copy-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or copy-tags-nullable common-lisp:null)
                         :accessor
                         struct-shape-create-lifecycle-policy-request-copy-tags
                         :shape "CopyTagsNullable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extend-deletion :initarg :extend-deletion :initform
                         common-lisp:nil :type
                         (common-lisp:or extend-deletion common-lisp:null)
                         :accessor
                         struct-shape-create-lifecycle-policy-request-extend-deletion
                         :shape "ExtendDeletion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cross-region-copy-targets :initarg
                         :cross-region-copy-targets :initform common-lisp:nil
                         :type
                         (common-lisp:or cross-region-copy-target-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-lifecycle-policy-request-cross-region-copy-targets
                         :shape "CrossRegionCopyTargetList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (exclusions :initarg :exclusions :initform
                         common-lisp:nil :type
                         (common-lisp:or exclusions common-lisp:null) :accessor
                         struct-shape-create-lifecycle-policy-request-exclusions
                         :shape "Exclusions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-lifecycle-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-lifecycle-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-lifecycle-policy-request
                    'make-create-lifecycle-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-details))
      (common-lisp:list
       (common-lisp:cons "PolicyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-policy))
      (common-lisp:list
       (common-lisp:cons "DefaultPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-interval))
      (common-lisp:list
       (common-lisp:cons "CreateInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-interval))
      (common-lisp:list
       (common-lisp:cons "RetainInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extend-deletion))
      (common-lisp:list
       (common-lisp:cons "ExtendDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-region-copy-targets))
      (common-lisp:list
       (common-lisp:cons "CrossRegionCopyTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-lifecycle-policy-response common-lisp:nil
                       ((policy-id :initarg :policy-id :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         struct-shape-create-lifecycle-policy-response-policy-id
                         :shape "PolicyId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-lifecycle-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-lifecycle-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-lifecycle-policy-response
                    'make-create-lifecycle-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-rule common-lisp:nil
                       ((location :initarg :location :initform common-lisp:nil
                         :type
                         (common-lisp:or location-values common-lisp:null)
                         :accessor struct-shape-create-rule-location :shape
                         "LocationValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interval :initarg :interval :initform common-lisp:nil
                         :type (common-lisp:or interval common-lisp:null)
                         :accessor struct-shape-create-rule-interval :shape
                         "Interval" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (interval-unit :initarg :interval-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or interval-unit-values common-lisp:null)
                         :accessor struct-shape-create-rule-interval-unit
                         :shape "IntervalUnitValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (times :initarg :times :initform common-lisp:nil :type
                         (common-lisp:or times-list common-lisp:null) :accessor
                         struct-shape-create-rule-times :shape "TimesList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cron-expression :initarg :cron-expression :initform
                         common-lisp:nil :type
                         (common-lisp:or cron-expression common-lisp:null)
                         :accessor struct-shape-create-rule-cron-expression
                         :shape "CronExpression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (scripts :initarg :scripts :initform common-lisp:nil
                         :type (common-lisp:or scripts-list common-lisp:null)
                         :accessor struct-shape-create-rule-scripts :shape
                         "ScriptsList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'create-rule 'make-create-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'times))
      (common-lisp:list
       (common-lisp:cons "Times"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cron-expression))
      (common-lisp:list
       (common-lisp:cons "CronExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scripts))
      (common-lisp:list
       (common-lisp:cons "Scripts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule))
   common-lisp:nil))
(common-lisp:deftype cron-expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cross-region-copy-action common-lisp:nil
                       ((target :initarg :target :initform
                         (common-lisp:error ":target is required") :type
                         (common-lisp:or target common-lisp:null) :accessor
                         struct-shape-cross-region-copy-action-target :shape
                         "Target" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :initform
                         (common-lisp:error
                          ":encryption-configuration is required")
                         :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-cross-region-copy-action-encryption-configuration
                         :shape "EncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (retain-rule :initarg :retain-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or cross-region-copy-retain-rule
                                         common-lisp:null)
                         :accessor
                         struct-shape-cross-region-copy-action-retain-rule
                         :shape "CrossRegionCopyRetainRule" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cross-region-copy-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cross-region-copy-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cross-region-copy-action 'make-cross-region-copy-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-rule))
      (common-lisp:list
       (common-lisp:cons "RetainRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cross-region-copy-action-list ()
   '(trivial-types:proper-list cross-region-copy-action))
 (common-lisp:defun make-cross-region-copy-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cross-region-copy-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cross-region-copy-deprecate-rule common-lisp:nil
                       ((interval :initarg :interval :initform common-lisp:nil
                         :type (common-lisp:or interval common-lisp:null)
                         :accessor
                         struct-shape-cross-region-copy-deprecate-rule-interval
                         :shape "Interval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interval-unit :initarg :interval-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-interval-unit-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-cross-region-copy-deprecate-rule-interval-unit
                         :shape "RetentionIntervalUnitValues" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cross-region-copy-deprecate-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cross-region-copy-deprecate-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cross-region-copy-deprecate-rule
                    'make-cross-region-copy-deprecate-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-deprecate-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-deprecate-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-deprecate-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cross-region-copy-retain-rule common-lisp:nil
                       ((interval :initarg :interval :initform common-lisp:nil
                         :type (common-lisp:or interval common-lisp:null)
                         :accessor
                         struct-shape-cross-region-copy-retain-rule-interval
                         :shape "Interval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interval-unit :initarg :interval-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-interval-unit-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-cross-region-copy-retain-rule-interval-unit
                         :shape "RetentionIntervalUnitValues" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cross-region-copy-retain-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cross-region-copy-retain-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cross-region-copy-retain-rule
                    'make-cross-region-copy-retain-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-retain-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-retain-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-retain-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cross-region-copy-rule common-lisp:nil
                       ((target-region :initarg :target-region :initform
                         common-lisp:nil :type
                         (common-lisp:or target-region common-lisp:null)
                         :accessor
                         struct-shape-cross-region-copy-rule-target-region
                         :shape "TargetRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target :initarg :target :initform common-lisp:nil
                         :type (common-lisp:or target common-lisp:null)
                         :accessor struct-shape-cross-region-copy-rule-target
                         :shape "Target" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encrypted :initarg :encrypted :initform
                         (common-lisp:error ":encrypted is required") :type
                         (common-lisp:or encrypted common-lisp:null) :accessor
                         struct-shape-cross-region-copy-rule-encrypted :shape
                         "Encrypted" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cmk-arn :initarg :cmk-arn :initform common-lisp:nil
                         :type (common-lisp:or cmk-arn common-lisp:null)
                         :accessor struct-shape-cross-region-copy-rule-cmk-arn
                         :shape "CmkArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags :initarg :copy-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or copy-tags-nullable common-lisp:null)
                         :accessor
                         struct-shape-cross-region-copy-rule-copy-tags :shape
                         "CopyTagsNullable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retain-rule :initarg :retain-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or cross-region-copy-retain-rule
                                         common-lisp:null)
                         :accessor
                         struct-shape-cross-region-copy-rule-retain-rule :shape
                         "CrossRegionCopyRetainRule" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deprecate-rule :initarg :deprecate-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or cross-region-copy-deprecate-rule
                                         common-lisp:null)
                         :accessor
                         struct-shape-cross-region-copy-rule-deprecate-rule
                         :shape "CrossRegionCopyDeprecateRule" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cross-region-copy-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cross-region-copy-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cross-region-copy-rule 'make-cross-region-copy-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-region))
      (common-lisp:list
       (common-lisp:cons "TargetRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cmk-arn))
      (common-lisp:list
       (common-lisp:cons "CmkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-rule))
      (common-lisp:list
       (common-lisp:cons "RetainRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecate-rule))
      (common-lisp:list
       (common-lisp:cons "DeprecateRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cross-region-copy-rules ()
   '(trivial-types:proper-list cross-region-copy-rule))
 (common-lisp:defun make-cross-region-copy-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cross-region-copy-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cross-region-copy-target common-lisp:nil
                       ((target-region :initarg :target-region :initform
                         common-lisp:nil :type
                         (common-lisp:or target-region common-lisp:null)
                         :accessor
                         struct-shape-cross-region-copy-target-target-region
                         :shape "TargetRegion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cross-region-copy-target
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cross-region-copy-target
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cross-region-copy-target 'make-cross-region-copy-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-region))
      (common-lisp:list
       (common-lisp:cons "TargetRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cross-region-copy-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cross-region-copy-target-list ()
   '(trivial-types:proper-list cross-region-copy-target))
 (common-lisp:defun make-cross-region-copy-target-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cross-region-copy-target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype default-policies-type-values () 'common-lisp:string)
(common-lisp:deftype default-policy () 'common-lisp:boolean)
(common-lisp:deftype default-policy-type-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-lifecycle-policy-request common-lisp:nil
                       ((policy-id :initarg :policy-id :initform
                         (common-lisp:error ":policy-id is required") :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         struct-shape-delete-lifecycle-policy-request-policy-id
                         :shape "PolicyId" :location "uri" :location-name
                         "policyId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-lifecycle-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-lifecycle-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-lifecycle-policy-request
                    'make-delete-lifecycle-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-lifecycle-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-lifecycle-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-lifecycle-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-lifecycle-policy-response
                    'make-delete-lifecycle-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deprecate-rule common-lisp:nil
                       ((count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-deprecate-rule-count :shape "Count"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (interval :initarg :interval :initform common-lisp:nil
                         :type (common-lisp:or interval common-lisp:null)
                         :accessor struct-shape-deprecate-rule-interval :shape
                         "Interval" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (interval-unit :initarg :interval-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-interval-unit-values
                                         common-lisp:null)
                         :accessor struct-shape-deprecate-rule-interval-unit
                         :shape "RetentionIntervalUnitValues" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deprecate-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'deprecate-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'deprecate-rule 'make-deprecate-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deprecate-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deprecate-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deprecate-rule))
   common-lisp:nil))
(common-lisp:deftype description-regex () 'common-lisp:string)
(common-lisp:deftype encrypted () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass encryption-configuration common-lisp:nil
                       ((encrypted :initarg :encrypted :initform
                         (common-lisp:error ":encrypted is required") :type
                         (common-lisp:or encrypted common-lisp:null) :accessor
                         struct-shape-encryption-configuration-encrypted :shape
                         "Encrypted" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cmk-arn :initarg :cmk-arn :initform common-lisp:nil
                         :type (common-lisp:or cmk-arn common-lisp:null)
                         :accessor
                         struct-shape-encryption-configuration-cmk-arn :shape
                         "CmkArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cmk-arn))
      (common-lisp:list
       (common-lisp:cons "CmkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-parameters common-lisp:nil
                       ((event-type :initarg :event-type :initform
                         (common-lisp:error ":event-type is required") :type
                         (common-lisp:or event-type-values common-lisp:null)
                         :accessor struct-shape-event-parameters-event-type
                         :shape "EventTypeValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-owner :initarg :snapshot-owner :initform
                         (common-lisp:error ":snapshot-owner is required")
                         :type
                         (common-lisp:or snapshot-owner-list common-lisp:null)
                         :accessor struct-shape-event-parameters-snapshot-owner
                         :shape "SnapshotOwnerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description-regex :initarg :description-regex
                         :initform
                         (common-lisp:error ":description-regex is required")
                         :type
                         (common-lisp:or description-regex common-lisp:null)
                         :accessor
                         struct-shape-event-parameters-description-regex :shape
                         "DescriptionRegex" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'event-parameters 'make-event-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "EventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-owner))
      (common-lisp:list
       (common-lisp:cons "SnapshotOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description-regex))
      (common-lisp:list
       (common-lisp:cons "DescriptionRegex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-parameters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass event-source common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or event-source-values common-lisp:null)
                         :accessor struct-shape-event-source-type :shape
                         "EventSourceValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or event-parameters common-lisp:null)
                         :accessor struct-shape-event-source-parameters :shape
                         "EventParameters" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'event-source 'make-event-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-source))
   common-lisp:nil))
(common-lisp:deftype event-source-values () 'common-lisp:string)
(common-lisp:deftype event-type-values () 'common-lisp:string)
(common-lisp:deftype exclude-boot-volume () 'common-lisp:boolean)
(common-lisp:deftype exclude-boot-volumes () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype exclude-data-volume-tag-list ()
   '(trivial-types:proper-list tag))
 (common-lisp:defun make-exclude-data-volume-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype exclude-tags-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-exclude-tags-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype exclude-volume-types-list ()
   '(trivial-types:proper-list volume-type-values))
 (common-lisp:defun make-exclude-volume-types-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list volume-type-values))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass exclusions common-lisp:nil
                       ((exclude-boot-volumes :initarg :exclude-boot-volumes
                         :initform common-lisp:nil :type
                         (common-lisp:or exclude-boot-volumes common-lisp:null)
                         :accessor struct-shape-exclusions-exclude-boot-volumes
                         :shape "ExcludeBootVolumes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclude-volume-types :initarg :exclude-volume-types
                         :initform common-lisp:nil :type
                         (common-lisp:or exclude-volume-types-list
                                         common-lisp:null)
                         :accessor struct-shape-exclusions-exclude-volume-types
                         :shape "ExcludeVolumeTypesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (exclude-tags :initarg :exclude-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or exclude-tags-list common-lisp:null)
                         :accessor struct-shape-exclusions-exclude-tags :shape
                         "ExcludeTagsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-exclusions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'exclusions
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'exclusions 'make-exclusions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exclusions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exclusions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-boot-volumes))
      (common-lisp:list
       (common-lisp:cons "ExcludeBootVolumes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-volume-types))
      (common-lisp:list
       (common-lisp:cons "ExcludeVolumeTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude-tags))
      (common-lisp:list
       (common-lisp:cons "ExcludeTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exclusions))
   common-lisp:nil))
(common-lisp:deftype execute-operation-on-script-failure ()
  'common-lisp:boolean)
(common-lisp:deftype execution-handler () 'common-lisp:string)
(common-lisp:deftype execution-handler-service-values () 'common-lisp:string)
(common-lisp:deftype execution-role-arn () 'common-lisp:string)
(common-lisp:deftype extend-deletion () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass fast-restore-rule common-lisp:nil
                       ((count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-fast-restore-rule-count :shape "Count"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (interval :initarg :interval :initform common-lisp:nil
                         :type (common-lisp:or interval common-lisp:null)
                         :accessor struct-shape-fast-restore-rule-interval
                         :shape "Interval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interval-unit :initarg :interval-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-interval-unit-values
                                         common-lisp:null)
                         :accessor struct-shape-fast-restore-rule-interval-unit
                         :shape "RetentionIntervalUnitValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (availability-zones :initarg :availability-zones
                         :initform
                         (common-lisp:error ":availability-zones is required")
                         :type
                         (common-lisp:or availability-zone-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-fast-restore-rule-availability-zones
                         :shape "AvailabilityZoneList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-fast-restore-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'fast-restore-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'fast-restore-rule 'make-fast-restore-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fast-restore-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fast-restore-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fast-restore-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lifecycle-policies-request common-lisp:nil
                       ((policy-ids :initarg :policy-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-id-list common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policies-request-policy-ids
                         :shape "PolicyIdList" :location "querystring"
                         :location-name "policyIds")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or gettable-policy-state-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policies-request-state
                         :shape "GettablePolicyStateValues" :location
                         "querystring" :location-name "state")
                        (resource-types :initarg :resource-types :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type-values-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policies-request-resource-types
                         :shape "ResourceTypeValuesList" :location
                         "querystring" :location-name "resourceTypes")
                        (target-tags :initarg :target-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or target-tags-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policies-request-target-tags
                         :shape "TargetTagsFilterList" :location "querystring"
                         :location-name "targetTags")
                        (tags-to-add :initarg :tags-to-add :initform
                         common-lisp:nil :type
                         (common-lisp:or tags-to-add-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policies-request-tags-to-add
                         :shape "TagsToAddFilterList" :location "querystring"
                         :location-name "tagsToAdd")
                        (default-policy-type :initarg :default-policy-type
                         :initform common-lisp:nil :type
                         (common-lisp:or default-policies-type-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policies-request-default-policy-type
                         :shape "DefaultPoliciesTypeValues" :location
                         "querystring" :location-name "defaultPolicyType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lifecycle-policies-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-lifecycle-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policies-request
                    'make-get-lifecycle-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lifecycle-policies-response common-lisp:nil
                       ((policies :initarg :policies :initform common-lisp:nil
                         :type
                         (common-lisp:or lifecycle-policy-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policies-response-policies
                         :shape "LifecyclePolicySummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lifecycle-policies-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-lifecycle-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policies-response
                    'make-get-lifecycle-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lifecycle-policy-request common-lisp:nil
                       ((policy-id :initarg :policy-id :initform
                         (common-lisp:error ":policy-id is required") :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         struct-shape-get-lifecycle-policy-request-policy-id
                         :shape "PolicyId" :location "uri" :location-name
                         "policyId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lifecycle-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-lifecycle-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policy-request
                    'make-get-lifecycle-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-lifecycle-policy-response common-lisp:nil
                       ((policy :initarg :policy :initform common-lisp:nil
                         :type
                         (common-lisp:or lifecycle-policy common-lisp:null)
                         :accessor
                         struct-shape-get-lifecycle-policy-response-policy
                         :shape "LifecyclePolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-lifecycle-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-lifecycle-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-lifecycle-policy-response
                    'make-get-lifecycle-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:deftype gettable-policy-state-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (dlm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       internal-server-exception-code)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-code)))
(common-lisp:deftype interval () 'common-lisp:integer)
(common-lisp:deftype interval-unit-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (dlm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       invalid-request-exception-code)
      (required-parameters :initarg :required-parameters :initform
       common-lisp:nil :reader invalid-request-exception-required-parameters)
      (mutually-exclusive-parameters :initarg :mutually-exclusive-parameters
       :initform common-lisp:nil :reader
       invalid-request-exception-mutually-exclusive-parameters)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message
                    'invalid-request-exception-code
                    'invalid-request-exception-required-parameters
                    'invalid-request-exception-mutually-exclusive-parameters)))
(common-lisp:progn
 (common-lisp:defclass lifecycle-policy common-lisp:nil
                       ((policy-id :initarg :policy-id :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         struct-shape-lifecycle-policy-policy-id :shape
                         "PolicyId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-description common-lisp:null)
                         :accessor struct-shape-lifecycle-policy-description
                         :shape "PolicyDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or gettable-policy-state-values
                                         common-lisp:null)
                         :accessor struct-shape-lifecycle-policy-state :shape
                         "GettablePolicyStateValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor struct-shape-lifecycle-policy-status-message
                         :shape "StatusMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-policy-execution-role-arn
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (date-created :initarg :date-created :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-lifecycle-policy-date-created :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (date-modified :initarg :date-modified :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-lifecycle-policy-date-modified :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy-details :initarg :policy-details :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-details common-lisp:null)
                         :accessor struct-shape-lifecycle-policy-policy-details
                         :shape "PolicyDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-lifecycle-policy-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy-arn :initarg :policy-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         struct-shape-lifecycle-policy-policy-arn :shape
                         "PolicyArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (default-policy :initarg :default-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or default-policy common-lisp:null)
                         :accessor struct-shape-lifecycle-policy-default-policy
                         :shape "DefaultPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lifecycle-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lifecycle-policy 'make-lifecycle-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lifecycle-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lifecycle-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-created))
      (common-lisp:list
       (common-lisp:cons "DateCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-modified))
      (common-lisp:list
       (common-lisp:cons "DateModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-details))
      (common-lisp:list
       (common-lisp:cons "PolicyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-policy))
      (common-lisp:list
       (common-lisp:cons "DefaultPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lifecycle-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lifecycle-policy-summary common-lisp:nil
                       ((policy-id :initarg :policy-id :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         struct-shape-lifecycle-policy-summary-policy-id :shape
                         "PolicyId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-description common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-policy-summary-description
                         :shape "PolicyDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or gettable-policy-state-values
                                         common-lisp:null)
                         :accessor struct-shape-lifecycle-policy-summary-state
                         :shape "GettablePolicyStateValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-lifecycle-policy-summary-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy-type :initarg :policy-type :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-type-values common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-policy-summary-policy-type
                         :shape "PolicyTypeValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (default-policy :initarg :default-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or default-policy common-lisp:null)
                         :accessor
                         struct-shape-lifecycle-policy-summary-default-policy
                         :shape "DefaultPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lifecycle-policy-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lifecycle-policy-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lifecycle-policy-summary 'make-lifecycle-policy-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-policy))
      (common-lisp:list
       (common-lisp:cons "DefaultPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lifecycle-policy-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lifecycle-policy-summary-list ()
   '(trivial-types:proper-list lifecycle-policy-summary))
 (common-lisp:defun make-lifecycle-policy-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lifecycle-policy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (dlm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       limit-exceeded-exception-code)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       limit-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-code
                    'limit-exceeded-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "PolicyArn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype location-values () 'common-lisp:string)
(common-lisp:deftype no-reboot () 'common-lisp:boolean)
(common-lisp:deftype parameter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-list () '(trivial-types:proper-list parameter))
 (common-lisp:defun make-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parameters common-lisp:nil
                       ((exclude-boot-volume :initarg :exclude-boot-volume
                         :initform common-lisp:nil :type
                         (common-lisp:or exclude-boot-volume common-lisp:null)
                         :accessor struct-shape-parameters-exclude-boot-volume
                         :shape "ExcludeBootVolume" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (no-reboot :initarg :no-reboot :initform
                         common-lisp:nil :type
                         (common-lisp:or no-reboot common-lisp:null) :accessor
                         struct-shape-parameters-no-reboot :shape "NoReboot"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (exclude-data-volume-tags :initarg
                         :exclude-data-volume-tags :initform common-lisp:nil
                         :type
                         (common-lisp:or exclude-data-volume-tag-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-parameters-exclude-data-volume-tags
                         :shape "ExcludeDataVolumeTagList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'parameters
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'parameters 'make-parameters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclude-boot-volume))
      (common-lisp:list
       (common-lisp:cons "ExcludeBootVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-reboot))
      (common-lisp:list
       (common-lisp:cons "NoReboot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-data-volume-tags))
      (common-lisp:list
       (common-lisp:cons "ExcludeDataVolumeTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameters))
   common-lisp:nil))
(common-lisp:deftype policy-arn () 'common-lisp:string)
(common-lisp:deftype policy-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass policy-details common-lisp:nil
                       ((policy-type :initarg :policy-type :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-type-values common-lisp:null)
                         :accessor struct-shape-policy-details-policy-type
                         :shape "PolicyTypeValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-types :initarg :resource-types :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type-values-list
                                         common-lisp:null)
                         :accessor struct-shape-policy-details-resource-types
                         :shape "ResourceTypeValuesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-locations :initarg :resource-locations
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-location-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-policy-details-resource-locations :shape
                         "ResourceLocationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-tags :initarg :target-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or target-tag-list common-lisp:null)
                         :accessor struct-shape-policy-details-target-tags
                         :shape "TargetTagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schedules :initarg :schedules :initform
                         common-lisp:nil :type
                         (common-lisp:or schedule-list common-lisp:null)
                         :accessor struct-shape-policy-details-schedules :shape
                         "ScheduleList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         struct-shape-policy-details-parameters :shape
                         "Parameters" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-source :initarg :event-source :initform
                         common-lisp:nil :type
                         (common-lisp:or event-source common-lisp:null)
                         :accessor struct-shape-policy-details-event-source
                         :shape "EventSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or action-list common-lisp:null)
                         :accessor struct-shape-policy-details-actions :shape
                         "ActionList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy-language :initarg :policy-language :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-language-values
                                         common-lisp:null)
                         :accessor struct-shape-policy-details-policy-language
                         :shape "PolicyLanguageValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type-values common-lisp:null)
                         :accessor struct-shape-policy-details-resource-type
                         :shape "ResourceTypeValues" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-interval :initarg :create-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or create-interval common-lisp:null)
                         :accessor struct-shape-policy-details-create-interval
                         :shape "CreateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retain-interval :initarg :retain-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or retain-interval common-lisp:null)
                         :accessor struct-shape-policy-details-retain-interval
                         :shape "RetainInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags :initarg :copy-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or copy-tags-nullable common-lisp:null)
                         :accessor struct-shape-policy-details-copy-tags :shape
                         "CopyTagsNullable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cross-region-copy-targets :initarg
                         :cross-region-copy-targets :initform common-lisp:nil
                         :type
                         (common-lisp:or cross-region-copy-target-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-policy-details-cross-region-copy-targets
                         :shape "CrossRegionCopyTargetList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (extend-deletion :initarg :extend-deletion :initform
                         common-lisp:nil :type
                         (common-lisp:or extend-deletion common-lisp:null)
                         :accessor struct-shape-policy-details-extend-deletion
                         :shape "ExtendDeletion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclusions :initarg :exclusions :initform
                         common-lisp:nil :type
                         (common-lisp:or exclusions common-lisp:null) :accessor
                         struct-shape-policy-details-exclusions :shape
                         "Exclusions" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'policy-details 'make-policy-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-locations))
      (common-lisp:list
       (common-lisp:cons "ResourceLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-tags))
      (common-lisp:list
       (common-lisp:cons "TargetTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedules))
      (common-lisp:list
       (common-lisp:cons "Schedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source))
      (common-lisp:list
       (common-lisp:cons "EventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-language))
      (common-lisp:list
       (common-lisp:cons "PolicyLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-interval))
      (common-lisp:list
       (common-lisp:cons "CreateInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-interval))
      (common-lisp:list
       (common-lisp:cons "RetainInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-region-copy-targets))
      (common-lisp:list
       (common-lisp:cons "CrossRegionCopyTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extend-deletion))
      (common-lisp:list
       (common-lisp:cons "ExtendDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-details))
   common-lisp:nil))
(common-lisp:deftype policy-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-id-list () '(trivial-types:proper-list policy-id))
 (common-lisp:defun make-policy-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-language-values () 'common-lisp:string)
(common-lisp:deftype policy-type-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-location-list ()
   '(trivial-types:proper-list resource-location-values))
 (common-lisp:defun make-resource-location-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-location-values))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-location-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (dlm-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (code :initarg :code :initform common-lisp:nil :reader
       resource-not-found-exception-code)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)
      (resource-ids :initarg :resource-ids :initform common-lisp:nil :reader
       resource-not-found-exception-resource-ids)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-code
                    'resource-not-found-exception-resource-type
                    'resource-not-found-exception-resource-ids)))
(common-lisp:deftype resource-type-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-type-values-list ()
   '(trivial-types:proper-list resource-type-values))
 (common-lisp:defun make-resource-type-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-type-values))
   aws-sdk/generator/shape::members))
(common-lisp:deftype retain-interval () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass retain-rule common-lisp:nil
                       ((count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or standard-tier-retain-rule-count
                                         common-lisp:null)
                         :accessor struct-shape-retain-rule-count :shape
                         "StandardTierRetainRuleCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (interval :initarg :interval :initform common-lisp:nil
                         :type
                         (common-lisp:or standard-tier-retain-rule-interval
                                         common-lisp:null)
                         :accessor struct-shape-retain-rule-interval :shape
                         "StandardTierRetainRuleInterval" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (interval-unit :initarg :interval-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-interval-unit-values
                                         common-lisp:null)
                         :accessor struct-shape-retain-rule-interval-unit
                         :shape "RetentionIntervalUnitValues" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retain-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retain-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'retain-rule 'make-retain-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retain-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retain-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retain-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass retention-archive-tier common-lisp:nil
                       ((count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or count common-lisp:null) :accessor
                         struct-shape-retention-archive-tier-count :shape
                         "Count" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (interval :initarg :interval :initform common-lisp:nil
                         :type (common-lisp:or interval common-lisp:null)
                         :accessor struct-shape-retention-archive-tier-interval
                         :shape "Interval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (interval-unit :initarg :interval-unit :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-interval-unit-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-retention-archive-tier-interval-unit
                         :shape "RetentionIntervalUnitValues" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retention-archive-tier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retention-archive-tier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retention-archive-tier 'make-retention-archive-tier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retention-archive-tier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retention-archive-tier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-unit))
      (common-lisp:list
       (common-lisp:cons "IntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retention-archive-tier))
   common-lisp:nil))
(common-lisp:deftype retention-interval-unit-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass schedule common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or schedule-name common-lisp:null)
                         :accessor struct-shape-schedule-name :shape
                         "ScheduleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags :initarg :copy-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or copy-tags common-lisp:null) :accessor
                         struct-shape-schedule-copy-tags :shape "CopyTags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags-to-add :initarg :tags-to-add :initform
                         common-lisp:nil :type
                         (common-lisp:or tags-to-add-list common-lisp:null)
                         :accessor struct-shape-schedule-tags-to-add :shape
                         "TagsToAddList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (variable-tags :initarg :variable-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or variable-tags-list common-lisp:null)
                         :accessor struct-shape-schedule-variable-tags :shape
                         "VariableTagsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-rule :initarg :create-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or create-rule common-lisp:null)
                         :accessor struct-shape-schedule-create-rule :shape
                         "CreateRule" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (retain-rule :initarg :retain-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or retain-rule common-lisp:null)
                         :accessor struct-shape-schedule-retain-rule :shape
                         "RetainRule" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (fast-restore-rule :initarg :fast-restore-rule
                         :initform common-lisp:nil :type
                         (common-lisp:or fast-restore-rule common-lisp:null)
                         :accessor struct-shape-schedule-fast-restore-rule
                         :shape "FastRestoreRule" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cross-region-copy-rules :initarg
                         :cross-region-copy-rules :initform common-lisp:nil
                         :type
                         (common-lisp:or cross-region-copy-rules
                                         common-lisp:null)
                         :accessor
                         struct-shape-schedule-cross-region-copy-rules :shape
                         "CrossRegionCopyRules" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (share-rules :initarg :share-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or share-rules common-lisp:null)
                         :accessor struct-shape-schedule-share-rules :shape
                         "ShareRules" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deprecate-rule :initarg :deprecate-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or deprecate-rule common-lisp:null)
                         :accessor struct-shape-schedule-deprecate-rule :shape
                         "DeprecateRule" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (archive-rule :initarg :archive-rule :initform
                         common-lisp:nil :type
                         (common-lisp:or archive-rule common-lisp:null)
                         :accessor struct-shape-schedule-archive-rule :shape
                         "ArchiveRule" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schedule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'schedule 'make-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-to-add))
      (common-lisp:list
       (common-lisp:cons "TagsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable-tags))
      (common-lisp:list
       (common-lisp:cons "VariableTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-rule))
      (common-lisp:list
       (common-lisp:cons "CreateRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-rule))
      (common-lisp:list
       (common-lisp:cons "RetainRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fast-restore-rule))
      (common-lisp:list
       (common-lisp:cons "FastRestoreRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-region-copy-rules))
      (common-lisp:list
       (common-lisp:cons "CrossRegionCopyRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-rules))
      (common-lisp:list
       (common-lisp:cons "ShareRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecate-rule))
      (common-lisp:list
       (common-lisp:cons "DeprecateRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-rule))
      (common-lisp:list
       (common-lisp:cons "ArchiveRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schedule-list () '(trivial-types:proper-list schedule))
 (common-lisp:defun make-schedule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schedule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype schedule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass script common-lisp:nil
                       ((stages :initarg :stages :initform common-lisp:nil
                         :type (common-lisp:or stages-list common-lisp:null)
                         :accessor struct-shape-script-stages :shape
                         "StagesList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (execution-handler-service :initarg
                         :execution-handler-service :initform common-lisp:nil
                         :type
                         (common-lisp:or execution-handler-service-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-script-execution-handler-service :shape
                         "ExecutionHandlerServiceValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-handler :initarg :execution-handler
                         :initform
                         (common-lisp:error ":execution-handler is required")
                         :type
                         (common-lisp:or execution-handler common-lisp:null)
                         :accessor struct-shape-script-execution-handler :shape
                         "ExecutionHandler" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execute-operation-on-script-failure :initarg
                         :execute-operation-on-script-failure :initform
                         common-lisp:nil :type
                         (common-lisp:or execute-operation-on-script-failure
                                         common-lisp:null)
                         :accessor
                         struct-shape-script-execute-operation-on-script-failure
                         :shape "ExecuteOperationOnScriptFailure" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (execution-timeout :initarg :execution-timeout
                         :initform common-lisp:nil :type
                         (common-lisp:or script-execution-timeout
                                         common-lisp:null)
                         :accessor struct-shape-script-execution-timeout :shape
                         "ScriptExecutionTimeout" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-retry-count :initarg :maximum-retry-count
                         :initform common-lisp:nil :type
                         (common-lisp:or script-maximum-retry-count
                                         common-lisp:null)
                         :accessor struct-shape-script-maximum-retry-count
                         :shape "ScriptMaximumRetryCount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-script
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'script
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'script 'make-script))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input script))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input script))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stages))
      (common-lisp:list
       (common-lisp:cons "Stages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-handler-service))
      (common-lisp:list
       (common-lisp:cons "ExecutionHandlerService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-handler))
      (common-lisp:list
       (common-lisp:cons "ExecutionHandler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execute-operation-on-script-failure))
      (common-lisp:list
       (common-lisp:cons "ExecuteOperationOnScriptFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-timeout))
      (common-lisp:list
       (common-lisp:cons "ExecutionTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-retry-count))
      (common-lisp:list
       (common-lisp:cons "MaximumRetryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input script))
   common-lisp:nil))
(common-lisp:deftype script-execution-timeout () 'common-lisp:integer)
(common-lisp:deftype script-maximum-retry-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype scripts-list () '(trivial-types:proper-list script))
 (common-lisp:defun make-scripts-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list script))
   aws-sdk/generator/shape::members))
(common-lisp:deftype settable-policy-state-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass share-rule common-lisp:nil
                       ((target-accounts :initarg :target-accounts :initform
                         (common-lisp:error ":target-accounts is required")
                         :type
                         (common-lisp:or share-target-account-list
                                         common-lisp:null)
                         :accessor struct-shape-share-rule-target-accounts
                         :shape "ShareTargetAccountList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unshare-interval :initarg :unshare-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or interval common-lisp:null) :accessor
                         struct-shape-share-rule-unshare-interval :shape
                         "Interval" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unshare-interval-unit :initarg :unshare-interval-unit
                         :initform common-lisp:nil :type
                         (common-lisp:or retention-interval-unit-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-share-rule-unshare-interval-unit :shape
                         "RetentionIntervalUnitValues" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-share-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'share-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'share-rule 'make-share-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input share-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input share-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-accounts))
      (common-lisp:list
       (common-lisp:cons "TargetAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unshare-interval))
      (common-lisp:list
       (common-lisp:cons "UnshareInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unshare-interval-unit))
      (common-lisp:list
       (common-lisp:cons "UnshareIntervalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input share-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype share-rules () '(trivial-types:proper-list share-rule))
 (common-lisp:defun make-share-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list share-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype share-target-account-list ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun make-share-target-account-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype snapshot-owner-list ()
   '(trivial-types:proper-list aws-account-id))
 (common-lisp:defun make-snapshot-owner-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aws-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stage-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stages-list () '(trivial-types:proper-list stage-values))
 (common-lisp:defun make-stages-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stage-values))
   aws-sdk/generator/shape::members))
(common-lisp:deftype standard-tier-retain-rule-count () 'common-lisp:integer)
(common-lisp:deftype standard-tier-retain-rule-interval () 'common-lisp:integer)
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-key :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-filter () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "PolicyArn" :location "uri" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags-to-add-filter-list ()
   '(trivial-types:proper-list tag-filter))
 (common-lisp:defun make-tags-to-add-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tags-to-add-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tags-to-add-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype target () 'common-lisp:string)
(common-lisp:deftype target-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype target-tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-target-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype target-tags-filter-list ()
   '(trivial-types:proper-list tag-filter))
 (common-lisp:defun make-target-tags-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype times-list () '(trivial-types:proper-list time))
 (common-lisp:defun make-times-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list time))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or policy-arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "PolicyArn" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-lifecycle-policy-request common-lisp:nil
                       ((policy-id :initarg :policy-id :initform
                         (common-lisp:error ":policy-id is required") :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         struct-shape-update-lifecycle-policy-request-policy-id
                         :shape "PolicyId" :location "uri" :location-name
                         "policyId")
                        (execution-role-arn :initarg :execution-role-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-lifecycle-policy-request-execution-role-arn
                         :shape "ExecutionRoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or settable-policy-state-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-lifecycle-policy-request-state
                         :shape "SettablePolicyStateValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-description common-lisp:null)
                         :accessor
                         struct-shape-update-lifecycle-policy-request-description
                         :shape "PolicyDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-details :initarg :policy-details :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-details common-lisp:null)
                         :accessor
                         struct-shape-update-lifecycle-policy-request-policy-details
                         :shape "PolicyDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-interval :initarg :create-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or create-interval common-lisp:null)
                         :accessor
                         struct-shape-update-lifecycle-policy-request-create-interval
                         :shape "CreateInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retain-interval :initarg :retain-interval :initform
                         common-lisp:nil :type
                         (common-lisp:or retain-interval common-lisp:null)
                         :accessor
                         struct-shape-update-lifecycle-policy-request-retain-interval
                         :shape "RetainInterval" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (copy-tags :initarg :copy-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or copy-tags-nullable common-lisp:null)
                         :accessor
                         struct-shape-update-lifecycle-policy-request-copy-tags
                         :shape "CopyTagsNullable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (extend-deletion :initarg :extend-deletion :initform
                         common-lisp:nil :type
                         (common-lisp:or extend-deletion common-lisp:null)
                         :accessor
                         struct-shape-update-lifecycle-policy-request-extend-deletion
                         :shape "ExtendDeletion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cross-region-copy-targets :initarg
                         :cross-region-copy-targets :initform common-lisp:nil
                         :type
                         (common-lisp:or cross-region-copy-target-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-lifecycle-policy-request-cross-region-copy-targets
                         :shape "CrossRegionCopyTargetList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (exclusions :initarg :exclusions :initform
                         common-lisp:nil :type
                         (common-lisp:or exclusions common-lisp:null) :accessor
                         struct-shape-update-lifecycle-policy-request-exclusions
                         :shape "Exclusions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-lifecycle-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-lifecycle-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-lifecycle-policy-request
                    'make-update-lifecycle-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-details))
      (common-lisp:list
       (common-lisp:cons "PolicyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-interval))
      (common-lisp:list
       (common-lisp:cons "CreateInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-interval))
      (common-lisp:list
       (common-lisp:cons "RetainInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-tags))
      (common-lisp:list
       (common-lisp:cons "CopyTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extend-deletion))
      (common-lisp:list
       (common-lisp:cons "ExtendDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-region-copy-targets))
      (common-lisp:list
       (common-lisp:cons "CrossRegionCopyTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "Exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-lifecycle-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-lifecycle-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-lifecycle-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-lifecycle-policy-response
                    'make-update-lifecycle-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-lifecycle-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype variable-tags-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-variable-tags-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype volume-type-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key execution-role-arn description state
                     policy-details tags default-policy create-interval
                     retain-interval copy-tags extend-deletion
                     cross-region-copy-targets exclusions)
   (common-lisp:declare
    (common-lisp:ignorable execution-role-arn description state policy-details
     tags default-policy create-interval retain-interval copy-tags
     extend-deletion cross-region-copy-targets exclusions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/policies"
                                                        "CreateLifecyclePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-lifecycle-policy))
(common-lisp:progn
 (common-lisp:defun delete-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id)
   (common-lisp:declare (common-lisp:ignorable policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-id))))
                                                        "DeleteLifecyclePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-lifecycle-policy))
(common-lisp:progn
 (common-lisp:defun get-lifecycle-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-ids state resource-types
                     target-tags tags-to-add default-policy-type)
   (common-lisp:declare
    (common-lisp:ignorable policy-ids state resource-types target-tags
     tags-to-add default-policy-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lifecycle-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/policies"
                                                        "GetLifecyclePolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-lifecycle-policies))
(common-lisp:progn
 (common-lisp:defun get-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id)
   (common-lisp:declare (common-lisp:ignorable policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-id))))
                                                        "GetLifecyclePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-lifecycle-policy))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-lifecycle-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id execution-role-arn state
                     description policy-details create-interval retain-interval
                     copy-tags extend-deletion cross-region-copy-targets
                     exclusions)
   (common-lisp:declare
    (common-lisp:ignorable policy-id execution-role-arn state description
     policy-details create-interval retain-interval copy-tags extend-deletion
     cross-region-copy-targets exclusions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-lifecycle-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'dlm-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-id))))
                                                        "UpdateLifecyclePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-lifecycle-policy))
