;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/qldb/api
  (:use)
  (:nicknames #:aws/qldb)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/qldb/api)
(common-lisp:progn
 (common-lisp:define-condition qldb-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'qldb-error))
(common-lisp:progn
 (common-lisp:defclass qldb-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "qldb" :api-version
                        "2019-01-02" :host-prefix "qldb" :signing-name "qldb"
                        :global-host common-lisp:nil))
 (common-lisp:export 'qldb-request))
(common-lisp:defvar *error-map*
  '(("InvalidParameterException" . invalid-parameter-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourcePreconditionNotMetException"
     . resource-precondition-not-met-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-journal-kinesis-stream-request common-lisp:nil
                       ((ledger-name :initarg :ledger-name :initform
                         (common-lisp:error ":ledger-name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor
                         struct-shape-cancel-journal-kinesis-stream-request-ledger-name
                         :shape "LedgerName" :location "uri" :location-name
                         "name")
                        (stream-id :initarg :stream-id :initform
                         (common-lisp:error ":stream-id is required") :type
                         (common-lisp:or unique-id common-lisp:null) :accessor
                         struct-shape-cancel-journal-kinesis-stream-request-stream-id
                         :shape "UniqueId" :location "uri" :location-name
                         "streamId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-journal-kinesis-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-journal-kinesis-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-journal-kinesis-stream-request
                    'make-cancel-journal-kinesis-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-journal-kinesis-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-journal-kinesis-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-journal-kinesis-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-journal-kinesis-stream-response common-lisp:nil
                       ((stream-id :initarg :stream-id :initform
                         common-lisp:nil :type
                         (common-lisp:or unique-id common-lisp:null) :accessor
                         struct-shape-cancel-journal-kinesis-stream-response-stream-id
                         :shape "UniqueId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-journal-kinesis-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-journal-kinesis-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-journal-kinesis-stream-response
                    'make-cancel-journal-kinesis-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-journal-kinesis-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-journal-kinesis-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-journal-kinesis-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ledger-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor struct-shape-create-ledger-request-name
                         :shape "LedgerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-create-ledger-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (permissions-mode :initarg :permissions-mode :initform
                         (common-lisp:error ":permissions-mode is required")
                         :type
                         (common-lisp:or permissions-mode common-lisp:null)
                         :accessor
                         struct-shape-create-ledger-request-permissions-mode
                         :shape "PermissionsMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or deletion-protection common-lisp:null)
                         :accessor
                         struct-shape-create-ledger-request-deletion-protection
                         :shape "DeletionProtection" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key :initarg :kms-key :initform common-lisp:nil
                         :type (common-lisp:or kms-key common-lisp:null)
                         :accessor struct-shape-create-ledger-request-kms-key
                         :shape "KmsKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-ledger-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-ledger-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-ledger-request 'make-create-ledger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ledger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions-mode))
      (common-lisp:list
       (common-lisp:cons "PermissionsMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ledger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-ledger-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor struct-shape-create-ledger-response-name
                         :shape "LedgerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-ledger-response-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or ledger-state common-lisp:null)
                         :accessor struct-shape-create-ledger-response-state
                         :shape "LedgerState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-ledger-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permissions-mode :initarg :permissions-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or permissions-mode common-lisp:null)
                         :accessor
                         struct-shape-create-ledger-response-permissions-mode
                         :shape "PermissionsMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or deletion-protection common-lisp:null)
                         :accessor
                         struct-shape-create-ledger-response-deletion-protection
                         :shape "DeletionProtection" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-ledger-response-kms-key-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-ledger-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-ledger-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-ledger-response 'make-create-ledger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ledger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ledger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions-mode))
      (common-lisp:list
       (common-lisp:cons "PermissionsMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ledger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-ledger-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor struct-shape-delete-ledger-request-name
                         :shape "LedgerName" :location "uri" :location-name
                         "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-ledger-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-ledger-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-ledger-request 'make-delete-ledger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ledger-request))
   common-lisp:nil))
(common-lisp:deftype deletion-protection () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass describe-journal-kinesis-stream-request common-lisp:nil
                       ((ledger-name :initarg :ledger-name :initform
                         (common-lisp:error ":ledger-name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor
                         struct-shape-describe-journal-kinesis-stream-request-ledger-name
                         :shape "LedgerName" :location "uri" :location-name
                         "name")
                        (stream-id :initarg :stream-id :initform
                         (common-lisp:error ":stream-id is required") :type
                         (common-lisp:or unique-id common-lisp:null) :accessor
                         struct-shape-describe-journal-kinesis-stream-request-stream-id
                         :shape "UniqueId" :location "uri" :location-name
                         "streamId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-journal-kinesis-stream-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-journal-kinesis-stream-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-journal-kinesis-stream-request
                    'make-describe-journal-kinesis-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-kinesis-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-kinesis-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-kinesis-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-journal-kinesis-stream-response common-lisp:nil
                       ((stream :initarg :stream :initform common-lisp:nil
                         :type
                         (common-lisp:or journal-kinesis-stream-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-journal-kinesis-stream-response-stream
                         :shape "JournalKinesisStreamDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-journal-kinesis-stream-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-journal-kinesis-stream-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-journal-kinesis-stream-response
                    'make-describe-journal-kinesis-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-kinesis-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-kinesis-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream))
      (common-lisp:list
       (common-lisp:cons "Stream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-kinesis-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-journal-s3export-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor
                         struct-shape-describe-journal-s3export-request-name
                         :shape "LedgerName" :location "uri" :location-name
                         "name")
                        (export-id :initarg :export-id :initform
                         (common-lisp:error ":export-id is required") :type
                         (common-lisp:or unique-id common-lisp:null) :accessor
                         struct-shape-describe-journal-s3export-request-export-id
                         :shape "UniqueId" :location "uri" :location-name
                         "exportId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-journal-s3export-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-journal-s3export-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-journal-s3export-request
                    'make-describe-journal-s3export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-s3export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-s3export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-s3export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-journal-s3export-response common-lisp:nil
                       ((export-description :initarg :export-description
                         :initform
                         (common-lisp:error ":export-description is required")
                         :type
                         (common-lisp:or journal-s3export-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-journal-s3export-response-export-description
                         :shape "JournalS3ExportDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-journal-s3export-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-journal-s3export-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-journal-s3export-response
                    'make-describe-journal-s3export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-s3export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-s3export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-description))
      (common-lisp:list
       (common-lisp:cons "ExportDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-s3export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ledger-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor struct-shape-describe-ledger-request-name
                         :shape "LedgerName" :location "uri" :location-name
                         "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-ledger-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-ledger-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-ledger-request 'make-describe-ledger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ledger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-ledger-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor struct-shape-describe-ledger-response-name
                         :shape "LedgerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-ledger-response-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or ledger-state common-lisp:null)
                         :accessor struct-shape-describe-ledger-response-state
                         :shape "LedgerState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-describe-ledger-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permissions-mode :initarg :permissions-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or permissions-mode common-lisp:null)
                         :accessor
                         struct-shape-describe-ledger-response-permissions-mode
                         :shape "PermissionsMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or deletion-protection common-lisp:null)
                         :accessor
                         struct-shape-describe-ledger-response-deletion-protection
                         :shape "DeletionProtection" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-description :initarg
                         :encryption-description :initform common-lisp:nil
                         :type
                         (common-lisp:or ledger-encryption-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-ledger-response-encryption-description
                         :shape "LedgerEncryptionDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-ledger-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-ledger-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-ledger-response 'make-describe-ledger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ledger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ledger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions-mode))
      (common-lisp:list
       (common-lisp:cons "PermissionsMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-description))
      (common-lisp:list
       (common-lisp:cons "EncryptionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ledger-response))
   common-lisp:nil))
(common-lisp:deftype digest ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype encryption-status () 'common-lisp:string)
(common-lisp:deftype error-cause () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-journal-to-s3request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor
                         struct-shape-export-journal-to-s3request-name :shape
                         "LedgerName" :location "uri" :location-name "name")
                        (inclusive-start-time :initarg :inclusive-start-time
                         :initform
                         (common-lisp:error
                          ":inclusive-start-time is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-export-journal-to-s3request-inclusive-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclusive-end-time :initarg :exclusive-end-time
                         :initform
                         (common-lisp:error ":exclusive-end-time is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-export-journal-to-s3request-exclusive-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3export-configuration :initarg
                         :s3export-configuration :initform
                         (common-lisp:error
                          ":s3export-configuration is required")
                         :type
                         (common-lisp:or s3export-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-export-journal-to-s3request-s3export-configuration
                         :shape "S3ExportConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-export-journal-to-s3request-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-format :initarg :output-format :initform
                         common-lisp:nil :type
                         (common-lisp:or output-format common-lisp:null)
                         :accessor
                         struct-shape-export-journal-to-s3request-output-format
                         :shape "OutputFormat" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-journal-to-s3request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-journal-to-s3request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-journal-to-s3request
                    'make-export-journal-to-s3request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-journal-to-s3request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-journal-to-s3request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inclusive-start-time))
      (common-lisp:list
       (common-lisp:cons "InclusiveStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusive-end-time))
      (common-lisp:list
       (common-lisp:cons "ExclusiveEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3export-configuration))
      (common-lisp:list
       (common-lisp:cons "S3ExportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "OutputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-journal-to-s3request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-journal-to-s3response common-lisp:nil
                       ((export-id :initarg :export-id :initform
                         (common-lisp:error ":export-id is required") :type
                         (common-lisp:or unique-id common-lisp:null) :accessor
                         struct-shape-export-journal-to-s3response-export-id
                         :shape "UniqueId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-export-journal-to-s3response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'export-journal-to-s3response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'export-journal-to-s3response
                    'make-export-journal-to-s3response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-journal-to-s3response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-journal-to-s3response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "ExportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-journal-to-s3response))
   common-lisp:nil))
(common-lisp:deftype export-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-block-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor struct-shape-get-block-request-name :shape
                         "LedgerName" :location "uri" :location-name "name")
                        (block-address :initarg :block-address :initform
                         (common-lisp:error ":block-address is required") :type
                         (common-lisp:or value-holder common-lisp:null)
                         :accessor struct-shape-get-block-request-block-address
                         :shape "ValueHolder" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (digest-tip-address :initarg :digest-tip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or value-holder common-lisp:null)
                         :accessor
                         struct-shape-get-block-request-digest-tip-address
                         :shape "ValueHolder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-block-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-block-request 'make-get-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-address))
      (common-lisp:list
       (common-lisp:cons "BlockAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest-tip-address))
      (common-lisp:list
       (common-lisp:cons "DigestTipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-block-response common-lisp:nil
                       ((block :initarg :block :initform
                         (common-lisp:error ":block is required") :type
                         (common-lisp:or value-holder common-lisp:null)
                         :accessor struct-shape-get-block-response-block :shape
                         "ValueHolder" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (proof :initarg :proof :initform common-lisp:nil :type
                         (common-lisp:or value-holder common-lisp:null)
                         :accessor struct-shape-get-block-response-proof :shape
                         "ValueHolder" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-block-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-block-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-block-response 'make-get-block-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-block-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-block-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block))
      (common-lisp:list
       (common-lisp:cons "Block"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proof))
      (common-lisp:list
       (common-lisp:cons "Proof"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-block-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-digest-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor struct-shape-get-digest-request-name :shape
                         "LedgerName" :location "uri" :location-name "name"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-digest-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-digest-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-digest-request 'make-get-digest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-digest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-digest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-digest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-digest-response common-lisp:nil
                       ((digest :initarg :digest :initform
                         (common-lisp:error ":digest is required") :type
                         (common-lisp:or digest common-lisp:null) :accessor
                         struct-shape-get-digest-response-digest :shape
                         "Digest" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (digest-tip-address :initarg :digest-tip-address
                         :initform
                         (common-lisp:error ":digest-tip-address is required")
                         :type (common-lisp:or value-holder common-lisp:null)
                         :accessor
                         struct-shape-get-digest-response-digest-tip-address
                         :shape "ValueHolder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-digest-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-digest-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-digest-response 'make-get-digest-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-digest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-digest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest))
      (common-lisp:list
       (common-lisp:cons "Digest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest-tip-address))
      (common-lisp:list
       (common-lisp:cons "DigestTipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-digest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-revision-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor struct-shape-get-revision-request-name
                         :shape "LedgerName" :location "uri" :location-name
                         "name")
                        (block-address :initarg :block-address :initform
                         (common-lisp:error ":block-address is required") :type
                         (common-lisp:or value-holder common-lisp:null)
                         :accessor
                         struct-shape-get-revision-request-block-address :shape
                         "ValueHolder" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (document-id :initarg :document-id :initform
                         (common-lisp:error ":document-id is required") :type
                         (common-lisp:or unique-id common-lisp:null) :accessor
                         struct-shape-get-revision-request-document-id :shape
                         "UniqueId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (digest-tip-address :initarg :digest-tip-address
                         :initform common-lisp:nil :type
                         (common-lisp:or value-holder common-lisp:null)
                         :accessor
                         struct-shape-get-revision-request-digest-tip-address
                         :shape "ValueHolder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-revision-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-revision-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-revision-request 'make-get-revision-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-revision-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-revision-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-address))
      (common-lisp:list
       (common-lisp:cons "BlockAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-id))
      (common-lisp:list
       (common-lisp:cons "DocumentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest-tip-address))
      (common-lisp:list
       (common-lisp:cons "DigestTipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-revision-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-revision-response common-lisp:nil
                       ((proof :initarg :proof :initform common-lisp:nil :type
                         (common-lisp:or value-holder common-lisp:null)
                         :accessor struct-shape-get-revision-response-proof
                         :shape "ValueHolder" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revision :initarg :revision :initform
                         (common-lisp:error ":revision is required") :type
                         (common-lisp:or value-holder common-lisp:null)
                         :accessor struct-shape-get-revision-response-revision
                         :shape "ValueHolder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-revision-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-revision-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-revision-response 'make-get-revision-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-revision-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-revision-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proof))
      (common-lisp:list
       (common-lisp:cons "Proof"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "Revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-revision-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (qldb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)
      (parameter-name :initarg :parameter-name :initform common-lisp:nil
       :reader invalid-parameter-exception-parameter-name)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message
                    'invalid-parameter-exception-parameter-name)))
(common-lisp:deftype ion-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass journal-kinesis-stream-description common-lisp:nil
                       ((ledger-name :initarg :ledger-name :initform
                         (common-lisp:error ":ledger-name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor
                         struct-shape-journal-kinesis-stream-description-ledger-name
                         :shape "LedgerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-journal-kinesis-stream-description-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inclusive-start-time :initarg :inclusive-start-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-journal-kinesis-stream-description-inclusive-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclusive-end-time :initarg :exclusive-end-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-journal-kinesis-stream-description-exclusive-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-journal-kinesis-stream-description-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stream-id :initarg :stream-id :initform
                         (common-lisp:error ":stream-id is required") :type
                         (common-lisp:or unique-id common-lisp:null) :accessor
                         struct-shape-journal-kinesis-stream-description-stream-id
                         :shape "UniqueId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-journal-kinesis-stream-description-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or stream-status common-lisp:null)
                         :accessor
                         struct-shape-journal-kinesis-stream-description-status
                         :shape "StreamStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kinesis-configuration :initarg :kinesis-configuration
                         :initform
                         (common-lisp:error
                          ":kinesis-configuration is required")
                         :type
                         (common-lisp:or kinesis-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-journal-kinesis-stream-description-kinesis-configuration
                         :shape "KinesisConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-cause :initarg :error-cause :initform
                         common-lisp:nil :type
                         (common-lisp:or error-cause common-lisp:null)
                         :accessor
                         struct-shape-journal-kinesis-stream-description-error-cause
                         :shape "ErrorCause" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stream-name :initarg :stream-name :initform
                         (common-lisp:error ":stream-name is required") :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-journal-kinesis-stream-description-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-journal-kinesis-stream-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'journal-kinesis-stream-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'journal-kinesis-stream-description
                    'make-journal-kinesis-stream-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          journal-kinesis-stream-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          journal-kinesis-stream-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ledger-name))
      (common-lisp:list
       (common-lisp:cons "LedgerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inclusive-start-time))
      (common-lisp:list
       (common-lisp:cons "InclusiveStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusive-end-time))
      (common-lisp:list
       (common-lisp:cons "ExclusiveEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-configuration))
      (common-lisp:list
       (common-lisp:cons "KinesisConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-cause))
      (common-lisp:list
       (common-lisp:cons "ErrorCause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          journal-kinesis-stream-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype journal-kinesis-stream-description-list ()
   '(trivial-types:proper-list journal-kinesis-stream-description))
 (common-lisp:defun make-journal-kinesis-stream-description-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            journal-kinesis-stream-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass journal-s3export-description common-lisp:nil
                       ((ledger-name :initarg :ledger-name :initform
                         (common-lisp:error ":ledger-name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor
                         struct-shape-journal-s3export-description-ledger-name
                         :shape "LedgerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-id :initarg :export-id :initform
                         (common-lisp:error ":export-id is required") :type
                         (common-lisp:or unique-id common-lisp:null) :accessor
                         struct-shape-journal-s3export-description-export-id
                         :shape "UniqueId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (export-creation-time :initarg :export-creation-time
                         :initform
                         (common-lisp:error
                          ":export-creation-time is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-journal-s3export-description-export-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or export-status common-lisp:null)
                         :accessor
                         struct-shape-journal-s3export-description-status
                         :shape "ExportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inclusive-start-time :initarg :inclusive-start-time
                         :initform
                         (common-lisp:error
                          ":inclusive-start-time is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-journal-s3export-description-inclusive-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclusive-end-time :initarg :exclusive-end-time
                         :initform
                         (common-lisp:error ":exclusive-end-time is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-journal-s3export-description-exclusive-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3export-configuration :initarg
                         :s3export-configuration :initform
                         (common-lisp:error
                          ":s3export-configuration is required")
                         :type
                         (common-lisp:or s3export-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-journal-s3export-description-s3export-configuration
                         :shape "S3ExportConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-journal-s3export-description-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (output-format :initarg :output-format :initform
                         common-lisp:nil :type
                         (common-lisp:or output-format common-lisp:null)
                         :accessor
                         struct-shape-journal-s3export-description-output-format
                         :shape "OutputFormat" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-journal-s3export-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'journal-s3export-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'journal-s3export-description
                    'make-journal-s3export-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          journal-s3export-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          journal-s3export-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ledger-name))
      (common-lisp:list
       (common-lisp:cons "LedgerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "ExportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-creation-time))
      (common-lisp:list
       (common-lisp:cons "ExportCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inclusive-start-time))
      (common-lisp:list
       (common-lisp:cons "InclusiveStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusive-end-time))
      (common-lisp:list
       (common-lisp:cons "ExclusiveEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3export-configuration))
      (common-lisp:list
       (common-lisp:cons "S3ExportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "OutputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          journal-s3export-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype journal-s3export-list ()
   '(trivial-types:proper-list journal-s3export-description))
 (common-lisp:defun make-journal-s3export-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            journal-s3export-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kinesis-configuration common-lisp:nil
                       ((stream-arn :initarg :stream-arn :initform
                         (common-lisp:error ":stream-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-kinesis-configuration-stream-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (aggregation-enabled :initarg :aggregation-enabled
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-kinesis-configuration-aggregation-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kinesis-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kinesis-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kinesis-configuration 'make-kinesis-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-enabled))
      (common-lisp:list
       (common-lisp:cons "AggregationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-configuration))
   common-lisp:nil))
(common-lisp:deftype kms-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ledger-encryption-description common-lisp:nil
                       ((kms-key-arn :initarg :kms-key-arn :initform
                         (common-lisp:error ":kms-key-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-ledger-encryption-description-kms-key-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-status :initarg :encryption-status
                         :initform
                         (common-lisp:error ":encryption-status is required")
                         :type
                         (common-lisp:or encryption-status common-lisp:null)
                         :accessor
                         struct-shape-ledger-encryption-description-encryption-status
                         :shape "EncryptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inaccessible-kms-key-date-time :initarg
                         :inaccessible-kms-key-date-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-ledger-encryption-description-inaccessible-kms-key-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ledger-encryption-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'ledger-encryption-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ledger-encryption-description
                    'make-ledger-encryption-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ledger-encryption-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ledger-encryption-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-status))
      (common-lisp:list
       (common-lisp:cons "EncryptionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inaccessible-kms-key-date-time))
      (common-lisp:list
       (common-lisp:cons "InaccessibleKmsKeyDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ledger-encryption-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ledger-list ()
   '(trivial-types:proper-list ledger-summary))
 (common-lisp:defun make-ledger-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ledger-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ledger-name () 'common-lisp:string)
(common-lisp:deftype ledger-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ledger-summary common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor struct-shape-ledger-summary-name :shape
                         "LedgerName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or ledger-state common-lisp:null)
                         :accessor struct-shape-ledger-summary-state :shape
                         "LedgerState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-ledger-summary-creation-date-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ledger-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ledger-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ledger-summary 'make-ledger-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ledger-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ledger-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ledger-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (qldb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       limit-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass list-journal-kinesis-streams-for-ledger-request
                       common-lisp:nil
                       ((ledger-name :initarg :ledger-name :initform
                         (common-lisp:error ":ledger-name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor
                         struct-shape-list-journal-kinesis-streams-for-ledger-request-ledger-name
                         :shape "LedgerName" :location "uri" :location-name
                         "name")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-journal-kinesis-streams-for-ledger-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-journal-kinesis-streams-for-ledger-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "next_token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-journal-kinesis-streams-for-ledger-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-journal-kinesis-streams-for-ledger-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-journal-kinesis-streams-for-ledger-request
                    'make-list-journal-kinesis-streams-for-ledger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-kinesis-streams-for-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-kinesis-streams-for-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-kinesis-streams-for-ledger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-journal-kinesis-streams-for-ledger-response
                       common-lisp:nil
                       ((streams :initarg :streams :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          journal-kinesis-stream-description-list
                          common-lisp:null)
                         :accessor
                         struct-shape-list-journal-kinesis-streams-for-ledger-response-streams
                         :shape "JournalKinesisStreamDescriptionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-journal-kinesis-streams-for-ledger-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-journal-kinesis-streams-for-ledger-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-journal-kinesis-streams-for-ledger-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-journal-kinesis-streams-for-ledger-response
                    'make-list-journal-kinesis-streams-for-ledger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-kinesis-streams-for-ledger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-kinesis-streams-for-ledger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams))
      (common-lisp:list
       (common-lisp:cons "Streams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-kinesis-streams-for-ledger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-journal-s3exports-for-ledger-request
                       common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor
                         struct-shape-list-journal-s3exports-for-ledger-request-name
                         :shape "LedgerName" :location "uri" :location-name
                         "name")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-journal-s3exports-for-ledger-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-journal-s3exports-for-ledger-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "next_token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-journal-s3exports-for-ledger-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-journal-s3exports-for-ledger-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-journal-s3exports-for-ledger-request
                    'make-list-journal-s3exports-for-ledger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-for-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-for-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-for-ledger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-journal-s3exports-for-ledger-response
                       common-lisp:nil
                       ((journal-s3exports :initarg :journal-s3exports
                         :initform common-lisp:nil :type
                         (common-lisp:or journal-s3export-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-journal-s3exports-for-ledger-response-journal-s3exports
                         :shape "JournalS3ExportList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-journal-s3exports-for-ledger-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-journal-s3exports-for-ledger-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-journal-s3exports-for-ledger-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-journal-s3exports-for-ledger-response
                    'make-list-journal-s3exports-for-ledger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-for-ledger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-for-ledger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journal-s3exports))
      (common-lisp:list
       (common-lisp:cons "JournalS3Exports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-for-ledger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-journal-s3exports-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-journal-s3exports-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-journal-s3exports-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "next_token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-journal-s3exports-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-journal-s3exports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-journal-s3exports-request
                    'make-list-journal-s3exports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-journal-s3exports-response common-lisp:nil
                       ((journal-s3exports :initarg :journal-s3exports
                         :initform common-lisp:nil :type
                         (common-lisp:or journal-s3export-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-journal-s3exports-response-journal-s3exports
                         :shape "JournalS3ExportList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-journal-s3exports-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-journal-s3exports-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-journal-s3exports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-journal-s3exports-response
                    'make-list-journal-s3exports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journal-s3exports))
      (common-lisp:list
       (common-lisp:cons "JournalS3Exports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ledgers-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-ledgers-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "max_results")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-ledgers-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "next_token"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-ledgers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-ledgers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-ledgers-request 'make-list-ledgers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-ledgers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-ledgers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-ledgers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-ledgers-response common-lisp:nil
                       ((ledgers :initarg :ledgers :initform common-lisp:nil
                         :type (common-lisp:or ledger-list common-lisp:null)
                         :accessor struct-shape-list-ledgers-response-ledgers
                         :shape "LedgerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-ledgers-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-ledgers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-ledgers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-ledgers-response 'make-list-ledgers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ledgers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ledgers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ledgers))
      (common-lisp:list
       (common-lisp:cons "Ledgers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ledgers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "Arn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype output-format () 'common-lisp:string)
(common-lisp:deftype parameter-name () 'common-lisp:string)
(common-lisp:deftype permissions-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (qldb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-already-exists-exception-resource-type)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-already-exists-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message
                    'resource-already-exists-exception-resource-type
                    'resource-already-exists-exception-resource-name)))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (qldb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-in-use-exception-resource-type)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-in-use-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message
                    'resource-in-use-exception-resource-type
                    'resource-in-use-exception-resource-name)))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (qldb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-type
                    'resource-not-found-exception-resource-name)))
(common-lisp:progn
 (common-lisp:define-condition resource-precondition-not-met-exception
     (qldb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-precondition-not-met-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-precondition-not-met-exception-resource-type)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-precondition-not-met-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-precondition-not-met-exception
                    'resource-precondition-not-met-exception-message
                    'resource-precondition-not-met-exception-resource-type
                    'resource-precondition-not-met-exception-resource-name)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3encryption-configuration common-lisp:nil
                       ((object-encryption-type :initarg
                         :object-encryption-type :initform
                         (common-lisp:error
                          ":object-encryption-type is required")
                         :type
                         (common-lisp:or s3object-encryption-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3encryption-configuration-object-encryption-type
                         :shape "S3ObjectEncryptionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-s3encryption-configuration-kms-key-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3encryption-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3encryption-configuration
                    'make-s3encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-encryption-type))
      (common-lisp:list
       (common-lisp:cons "ObjectEncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3export-configuration common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         struct-shape-s3export-configuration-bucket :shape
                         "S3Bucket" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (prefix :initarg :prefix :initform
                         (common-lisp:error ":prefix is required") :type
                         (common-lisp:or s3prefix common-lisp:null) :accessor
                         struct-shape-s3export-configuration-prefix :shape
                         "S3Prefix" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :initform
                         (common-lisp:error
                          ":encryption-configuration is required")
                         :type
                         (common-lisp:or s3encryption-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3export-configuration-encryption-configuration
                         :shape "S3EncryptionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3export-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3export-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3export-configuration 'make-s3export-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3export-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3export-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3export-configuration))
   common-lisp:nil))
(common-lisp:deftype s3object-encryption-type () 'common-lisp:string)
(common-lisp:deftype s3prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stream-journal-to-kinesis-request common-lisp:nil
                       ((ledger-name :initarg :ledger-name :initform
                         (common-lisp:error ":ledger-name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor
                         struct-shape-stream-journal-to-kinesis-request-ledger-name
                         :shape "LedgerName" :location "uri" :location-name
                         "name")
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-stream-journal-to-kinesis-request-role-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-stream-journal-to-kinesis-request-tags
                         :shape "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inclusive-start-time :initarg :inclusive-start-time
                         :initform
                         (common-lisp:error
                          ":inclusive-start-time is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-stream-journal-to-kinesis-request-inclusive-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclusive-end-time :initarg :exclusive-end-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-stream-journal-to-kinesis-request-exclusive-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kinesis-configuration :initarg :kinesis-configuration
                         :initform
                         (common-lisp:error
                          ":kinesis-configuration is required")
                         :type
                         (common-lisp:or kinesis-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-stream-journal-to-kinesis-request-kinesis-configuration
                         :shape "KinesisConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stream-name :initarg :stream-name :initform
                         (common-lisp:error ":stream-name is required") :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor
                         struct-shape-stream-journal-to-kinesis-request-stream-name
                         :shape "StreamName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-journal-to-kinesis-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stream-journal-to-kinesis-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-journal-to-kinesis-request
                    'make-stream-journal-to-kinesis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-journal-to-kinesis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-journal-to-kinesis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inclusive-start-time))
      (common-lisp:list
       (common-lisp:cons "InclusiveStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusive-end-time))
      (common-lisp:list
       (common-lisp:cons "ExclusiveEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-configuration))
      (common-lisp:list
       (common-lisp:cons "KinesisConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-journal-to-kinesis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stream-journal-to-kinesis-response common-lisp:nil
                       ((stream-id :initarg :stream-id :initform
                         common-lisp:nil :type
                         (common-lisp:or unique-id common-lisp:null) :accessor
                         struct-shape-stream-journal-to-kinesis-response-stream-id
                         :shape "UniqueId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stream-journal-to-kinesis-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stream-journal-to-kinesis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stream-journal-to-kinesis-response
                    'make-stream-journal-to-kinesis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-journal-to-kinesis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-journal-to-kinesis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-journal-to-kinesis-response))
   common-lisp:nil))
(common-lisp:deftype stream-name () 'common-lisp:string)
(common-lisp:deftype stream-status () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "Arn" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype unique-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "Arn" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ledger-permissions-mode-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor
                         struct-shape-update-ledger-permissions-mode-request-name
                         :shape "LedgerName" :location "uri" :location-name
                         "name")
                        (permissions-mode :initarg :permissions-mode :initform
                         (common-lisp:error ":permissions-mode is required")
                         :type
                         (common-lisp:or permissions-mode common-lisp:null)
                         :accessor
                         struct-shape-update-ledger-permissions-mode-request-permissions-mode
                         :shape "PermissionsMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-ledger-permissions-mode-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-ledger-permissions-mode-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-ledger-permissions-mode-request
                    'make-update-ledger-permissions-mode-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-permissions-mode-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-permissions-mode-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions-mode))
      (common-lisp:list
       (common-lisp:cons "PermissionsMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-permissions-mode-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ledger-permissions-mode-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor
                         struct-shape-update-ledger-permissions-mode-response-name
                         :shape "LedgerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-ledger-permissions-mode-response-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (permissions-mode :initarg :permissions-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or permissions-mode common-lisp:null)
                         :accessor
                         struct-shape-update-ledger-permissions-mode-response-permissions-mode
                         :shape "PermissionsMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-ledger-permissions-mode-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-ledger-permissions-mode-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-ledger-permissions-mode-response
                    'make-update-ledger-permissions-mode-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-permissions-mode-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-permissions-mode-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions-mode))
      (common-lisp:list
       (common-lisp:cons "PermissionsMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-permissions-mode-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ledger-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor struct-shape-update-ledger-request-name
                         :shape "LedgerName" :location "uri" :location-name
                         "name")
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or deletion-protection common-lisp:null)
                         :accessor
                         struct-shape-update-ledger-request-deletion-protection
                         :shape "DeletionProtection" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key :initarg :kms-key :initform common-lisp:nil
                         :type (common-lisp:or kms-key common-lisp:null)
                         :accessor struct-shape-update-ledger-request-kms-key
                         :shape "KmsKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-ledger-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-ledger-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-ledger-request 'make-update-ledger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-ledger-response common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or ledger-name common-lisp:null)
                         :accessor struct-shape-update-ledger-response-name
                         :shape "LedgerName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-ledger-response-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or ledger-state common-lisp:null)
                         :accessor struct-shape-update-ledger-response-state
                         :shape "LedgerState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-date-time :initarg :creation-date-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-ledger-response-creation-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protection :initarg :deletion-protection
                         :initform common-lisp:nil :type
                         (common-lisp:or deletion-protection common-lisp:null)
                         :accessor
                         struct-shape-update-ledger-response-deletion-protection
                         :shape "DeletionProtection" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-description :initarg
                         :encryption-description :initform common-lisp:nil
                         :type
                         (common-lisp:or ledger-encryption-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-ledger-response-encryption-description
                         :shape "LedgerEncryptionDescription" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-ledger-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-ledger-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-ledger-response 'make-update-ledger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-description))
      (common-lisp:list
       (common-lisp:cons "EncryptionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass value-holder common-lisp:nil
                       ((ion-text :initarg :ion-text :initform common-lisp:nil
                         :type (common-lisp:or ion-text common-lisp:null)
                         :accessor struct-shape-value-holder-ion-text :shape
                         "IonText" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-value-holder
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'value-holder
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'value-holder 'make-value-holder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input value-holder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input value-holder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ion-text))
      (common-lisp:list
       (common-lisp:cons "IonText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input value-holder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun cancel-journal-kinesis-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ledger-name stream-id)
   (common-lisp:declare (common-lisp:ignorable ledger-name stream-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-journal-kinesis-stream-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/journal-kinesis-streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "CancelJournalKinesisStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-journal-kinesis-stream))
(common-lisp:progn
 (common-lisp:defun create-ledger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name tags permissions-mode
                     deletion-protection kms-key)
   (common-lisp:declare
    (common-lisp:ignorable name tags permissions-mode deletion-protection
     kms-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-ledger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/ledgers"
                                                        "CreateLedger"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-ledger))
(common-lisp:progn
 (common-lisp:defun delete-ledger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-ledger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteLedger"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-ledger))
(common-lisp:progn
 (common-lisp:defun describe-journal-kinesis-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ledger-name stream-id)
   (common-lisp:declare (common-lisp:ignorable ledger-name stream-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-journal-kinesis-stream-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/journal-kinesis-streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "DescribeJournalKinesisStream"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-journal-kinesis-stream))
(common-lisp:progn
 (common-lisp:defun describe-journal-s3export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name export-id)
   (common-lisp:declare (common-lisp:ignorable name export-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-journal-s3export-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/journal-s3-exports/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'export-id))))
                                                        "DescribeJournalS3Export"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-journal-s3export))
(common-lisp:progn
 (common-lisp:defun describe-ledger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-ledger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DescribeLedger"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-ledger))
(common-lisp:progn
 (common-lisp:defun export-journal-to-s3
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name inclusive-start-time
                     exclusive-end-time s3export-configuration role-arn
                     output-format)
   (common-lisp:declare
    (common-lisp:ignorable name inclusive-start-time exclusive-end-time
     s3export-configuration role-arn output-format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-journal-to-s3request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/journal-s3-exports"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ExportJournalToS3"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'export-journal-to-s3))
(common-lisp:progn
 (common-lisp:defun get-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name block-address digest-tip-address)
   (common-lisp:declare
    (common-lisp:ignorable name block-address digest-tip-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/block"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBlock"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-block))
(common-lisp:progn
 (common-lisp:defun get-digest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-digest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/digest"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetDigest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-digest))
(common-lisp:progn
 (common-lisp:defun get-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name block-address document-id
                     digest-tip-address)
   (common-lisp:declare
    (common-lisp:ignorable name block-address document-id digest-tip-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-revision-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/revision"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetRevision"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-revision))
(common-lisp:progn
 (common-lisp:defun list-journal-kinesis-streams-for-ledger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ledger-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable ledger-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-journal-kinesis-streams-for-ledger-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/journal-kinesis-streams"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListJournalKinesisStreamsForLedger"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-journal-kinesis-streams-for-ledger))
(common-lisp:progn
 (common-lisp:defun list-journal-s3exports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-journal-s3exports-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/journal-s3-exports"
                                                        "ListJournalS3Exports"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-journal-s3exports))
(common-lisp:progn
 (common-lisp:defun list-journal-s3exports-for-ledger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name max-results next-token)
   (common-lisp:declare (common-lisp:ignorable name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-journal-s3exports-for-ledger-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/journal-s3-exports"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListJournalS3ExportsForLedger"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-journal-s3exports-for-ledger))
(common-lisp:progn
 (common-lisp:defun list-ledgers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ledgers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/ledgers"
                                                        "ListLedgers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-ledgers))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun stream-journal-to-kinesis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ledger-name role-arn tags
                     inclusive-start-time exclusive-end-time
                     kinesis-configuration stream-name)
   (common-lisp:declare
    (common-lisp:ignorable ledger-name role-arn tags inclusive-start-time
     exclusive-end-time kinesis-configuration stream-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stream-journal-to-kinesis-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/journal-kinesis-streams"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "StreamJournalToKinesis"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stream-journal-to-kinesis))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-ledger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name deletion-protection kms-key)
   (common-lisp:declare
    (common-lisp:ignorable name deletion-protection kms-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-ledger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateLedger"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-ledger))
(common-lisp:progn
 (common-lisp:defun update-ledger-permissions-mode
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name permissions-mode)
   (common-lisp:declare (common-lisp:ignorable name permissions-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-ledger-permissions-mode-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/permissions-mode"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateLedgerPermissionsMode"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-ledger-permissions-mode))
