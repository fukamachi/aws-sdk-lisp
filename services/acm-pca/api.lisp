;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/acm-pca/api (:use)
                             (:nicknames #:aws/acm-pca)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/acm-pca/api)
(common-lisp:progn
 (common-lisp:define-condition acm-pca-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'acm-pca-error))
(common-lisp:progn
 (common-lisp:defclass acm-pca-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "acm-pca" :api-version
                        "2017-08-22" :host-prefix "acm-pca" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "ACMPrivateCA" :json-version "1.1"))
 (common-lisp:export 'acm-pca-request))
(common-lisp:defvar *error-map*
  '(("CertificateMismatchException" . certificate-mismatch-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("InvalidArgsException" . invalid-args-exception)
    ("InvalidArnException" . invalid-arn-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidPolicyException" . invalid-policy-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("InvalidStateException" . invalid-state-exception)
    ("InvalidTagException" . invalid-tag-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("LockoutPreventedException" . lockout-prevented-exception)
    ("MalformedCSRException" . malformed-csrexception)
    ("MalformedCertificateException" . malformed-certificate-exception)
    ("PermissionAlreadyExistsException" . permission-already-exists-exception)
    ("RequestAlreadyProcessedException" . request-already-processed-exception)
    ("RequestFailedException" . request-failed-exception)
    ("RequestInProgressException" . request-in-progress-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TooManyTagsException" . too-many-tags-exception)))
(common-lisp:deftype asn1printable-string64 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass asn1subject common-lisp:nil
                       ((country :initarg :country :initform common-lisp:nil
                         :type
                         (common-lisp:or country-code-string common-lisp:null)
                         :accessor struct-shape-asn1subject-country :shape
                         "CountryCodeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (organization :initarg :organization :initform
                         common-lisp:nil :type
                         (common-lisp:or string64 common-lisp:null) :accessor
                         struct-shape-asn1subject-organization :shape
                         "String64" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (organizational-unit :initarg :organizational-unit
                         :initform common-lisp:nil :type
                         (common-lisp:or string64 common-lisp:null) :accessor
                         struct-shape-asn1subject-organizational-unit :shape
                         "String64" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (distinguished-name-qualifier :initarg
                         :distinguished-name-qualifier :initform
                         common-lisp:nil :type
                         (common-lisp:or asn1printable-string64
                                         common-lisp:null)
                         :accessor
                         struct-shape-asn1subject-distinguished-name-qualifier
                         :shape "ASN1PrintableString64" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or string128 common-lisp:null) :accessor
                         struct-shape-asn1subject-state :shape "String128"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (common-name :initarg :common-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string64 common-lisp:null) :accessor
                         struct-shape-asn1subject-common-name :shape "String64"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (serial-number :initarg :serial-number :initform
                         common-lisp:nil :type
                         (common-lisp:or asn1printable-string64
                                         common-lisp:null)
                         :accessor struct-shape-asn1subject-serial-number
                         :shape "ASN1PrintableString64" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (locality :initarg :locality :initform common-lisp:nil
                         :type (common-lisp:or string128 common-lisp:null)
                         :accessor struct-shape-asn1subject-locality :shape
                         "String128" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or string64 common-lisp:null) :accessor
                         struct-shape-asn1subject-title :shape "String64"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (surname :initarg :surname :initform common-lisp:nil
                         :type (common-lisp:or string40 common-lisp:null)
                         :accessor struct-shape-asn1subject-surname :shape
                         "String40" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (given-name :initarg :given-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string16 common-lisp:null) :accessor
                         struct-shape-asn1subject-given-name :shape "String16"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (initials :initarg :initials :initform common-lisp:nil
                         :type (common-lisp:or string5 common-lisp:null)
                         :accessor struct-shape-asn1subject-initials :shape
                         "String5" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pseudonym :initarg :pseudonym :initform
                         common-lisp:nil :type
                         (common-lisp:or string128 common-lisp:null) :accessor
                         struct-shape-asn1subject-pseudonym :shape "String128"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (generation-qualifier :initarg :generation-qualifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string3 common-lisp:null) :accessor
                         struct-shape-asn1subject-generation-qualifier :shape
                         "String3" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (custom-attributes :initarg :custom-attributes
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-attribute-list
                                         common-lisp:null)
                         :accessor struct-shape-asn1subject-custom-attributes
                         :shape "CustomAttributeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-asn1subject
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'asn1subject
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'asn1subject 'make-asn1subject))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asn1subject))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asn1subject))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization))
      (common-lisp:list
       (common-lisp:cons "Organization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organizational-unit))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'distinguished-name-qualifier))
      (common-lisp:list
       (common-lisp:cons "DistinguishedNameQualifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-name))
      (common-lisp:list
       (common-lisp:cons "CommonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locality))
      (common-lisp:list
       (common-lisp:cons "Locality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surname))
      (common-lisp:list
       (common-lisp:cons "Surname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'given-name))
      (common-lisp:list
       (common-lisp:cons "GivenName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initials))
      (common-lisp:list
       (common-lisp:cons "Initials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pseudonym))
      (common-lisp:list
       (common-lisp:cons "Pseudonym"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-qualifier))
      (common-lisp:list
       (common-lisp:cons "GenerationQualifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-attributes))
      (common-lisp:list
       (common-lisp:cons "CustomAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asn1subject))
   common-lisp:nil))
(common-lisp:deftype awspolicy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-description common-lisp:nil
                       ((access-method :initarg :access-method :initform
                         (common-lisp:error ":access-method is required") :type
                         (common-lisp:or access-method common-lisp:null)
                         :accessor
                         struct-shape-access-description-access-method :shape
                         "AccessMethod" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-location :initarg :access-location :initform
                         (common-lisp:error ":access-location is required")
                         :type (common-lisp:or general-name common-lisp:null)
                         :accessor
                         struct-shape-access-description-access-location :shape
                         "GeneralName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-description
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-description
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-description 'make-access-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-method))
      (common-lisp:list
       (common-lisp:cons "AccessMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-location))
      (common-lisp:list
       (common-lisp:cons "AccessLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-description-list ()
   '(trivial-types:proper-list access-description))
 (common-lisp:defun make-access-description-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass access-method common-lisp:nil
                       ((custom-object-identifier :initarg
                         :custom-object-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or custom-object-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-access-method-custom-object-identifier
                         :shape "CustomObjectIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (access-method-type :initarg :access-method-type
                         :initform common-lisp:nil :type
                         (common-lisp:or access-method-type common-lisp:null)
                         :accessor
                         struct-shape-access-method-access-method-type :shape
                         "AccessMethodType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-method
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-method
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'access-method 'make-access-method))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-method))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-object-identifier))
      (common-lisp:list
       (common-lisp:cons "CustomObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-method-type))
      (common-lisp:list
       (common-lisp:cons "AccessMethodType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-method))
   common-lisp:nil))
(common-lisp:deftype access-method-type () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list action-type))
 (common-lisp:defun make-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass api-passthrough common-lisp:nil
                       ((extensions :initarg :extensions :initform
                         common-lisp:nil :type
                         (common-lisp:or extensions common-lisp:null) :accessor
                         struct-shape-api-passthrough-extensions :shape
                         "Extensions" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subject :initarg :subject :initform common-lisp:nil
                         :type (common-lisp:or asn1subject common-lisp:null)
                         :accessor struct-shape-api-passthrough-subject :shape
                         "ASN1Subject" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-api-passthrough
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'api-passthrough
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'api-passthrough 'make-api-passthrough))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input api-passthrough))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input api-passthrough))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extensions))
      (common-lisp:list
       (common-lisp:cons "Extensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input api-passthrough))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype audit-report-id () 'common-lisp:string)
(common-lisp:deftype audit-report-response-format () 'common-lisp:string)
(common-lisp:deftype audit-report-status () 'common-lisp:string)
(common-lisp:deftype base64string1to4096 () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype certificate-authorities ()
   '(trivial-types:proper-list certificate-authority))
 (common-lisp:defun make-certificate-authorities
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-authority))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass certificate-authority common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-certificate-authority-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owner-account :initarg :owner-account :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-certificate-authority-owner-account
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-certificate-authority-created-at :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-state-change-at :initarg :last-state-change-at
                         :initform common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-certificate-authority-last-state-change-at
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or certificate-authority-type
                                         common-lisp:null)
                         :accessor struct-shape-certificate-authority-type
                         :shape "CertificateAuthorityType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (serial :initarg :serial :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-certificate-authority-serial
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-authority-status
                                         common-lisp:null)
                         :accessor struct-shape-certificate-authority-status
                         :shape "CertificateAuthorityStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (not-before :initarg :not-before :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-certificate-authority-not-before :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (not-after :initarg :not-after :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-certificate-authority-not-after :shape
                         "TStamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or failure-reason common-lisp:null)
                         :accessor
                         struct-shape-certificate-authority-failure-reason
                         :shape "FailureReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-authority-configuration :initarg
                         :certificate-authority-configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-authority-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-certificate-authority-certificate-authority-configuration
                         :shape "CertificateAuthorityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (revocation-configuration :initarg
                         :revocation-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or revocation-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-certificate-authority-revocation-configuration
                         :shape "RevocationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (restorable-until :initarg :restorable-until :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-certificate-authority-restorable-until
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-storage-security-standard :initarg
                         :key-storage-security-standard :initform
                         common-lisp:nil :type
                         (common-lisp:or key-storage-security-standard
                                         common-lisp:null)
                         :accessor
                         struct-shape-certificate-authority-key-storage-security-standard
                         :shape "KeyStorageSecurityStandard" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (usage-mode :initarg :usage-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-authority-usage-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-certificate-authority-usage-mode :shape
                         "CertificateAuthorityUsageMode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate-authority
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-authority
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'certificate-authority 'make-certificate-authority))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-authority))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-authority))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account))
      (common-lisp:list
       (common-lisp:cons "OwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-state-change-at))
      (common-lisp:list
       (common-lisp:cons "LastStateChangeAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial))
      (common-lisp:list
       (common-lisp:cons "Serial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before))
      (common-lisp:list
       (common-lisp:cons "NotBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after))
      (common-lisp:list
       (common-lisp:cons "NotAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-configuration))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'revocation-configuration))
      (common-lisp:list
       (common-lisp:cons "RevocationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restorable-until))
      (common-lisp:list
       (common-lisp:cons "RestorableUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'key-storage-security-standard))
      (common-lisp:list
       (common-lisp:cons "KeyStorageSecurityStandard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-mode))
      (common-lisp:list
       (common-lisp:cons "UsageMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-authority))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass certificate-authority-configuration common-lisp:nil
                       ((key-algorithm :initarg :key-algorithm :initform
                         (common-lisp:error ":key-algorithm is required") :type
                         (common-lisp:or key-algorithm common-lisp:null)
                         :accessor
                         struct-shape-certificate-authority-configuration-key-algorithm
                         :shape "KeyAlgorithm" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (signing-algorithm :initarg :signing-algorithm
                         :initform
                         (common-lisp:error ":signing-algorithm is required")
                         :type
                         (common-lisp:or signing-algorithm common-lisp:null)
                         :accessor
                         struct-shape-certificate-authority-configuration-signing-algorithm
                         :shape "SigningAlgorithm" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subject :initarg :subject :initform
                         (common-lisp:error ":subject is required") :type
                         (common-lisp:or asn1subject common-lisp:null)
                         :accessor
                         struct-shape-certificate-authority-configuration-subject
                         :shape "ASN1Subject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (csr-extensions :initarg :csr-extensions :initform
                         common-lisp:nil :type
                         (common-lisp:or csr-extensions common-lisp:null)
                         :accessor
                         struct-shape-certificate-authority-configuration-csr-extensions
                         :shape "CsrExtensions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-certificate-authority-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'certificate-authority-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'certificate-authority-configuration
                    'make-certificate-authority-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-authority-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-authority-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-algorithm))
      (common-lisp:list
       (common-lisp:cons "KeyAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-algorithm))
      (common-lisp:list
       (common-lisp:cons "SigningAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "Subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csr-extensions))
      (common-lisp:list
       (common-lisp:cons "CsrExtensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-authority-configuration))
   common-lisp:nil))
(common-lisp:deftype certificate-authority-status () 'common-lisp:string)
(common-lisp:deftype certificate-authority-type () 'common-lisp:string)
(common-lisp:deftype certificate-authority-usage-mode () 'common-lisp:string)
(common-lisp:deftype certificate-body () 'common-lisp:string)
(common-lisp:deftype certificate-body-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype certificate-chain () 'common-lisp:string)
(common-lisp:deftype certificate-chain-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:define-condition certificate-mismatch-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       certificate-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'certificate-mismatch-exception
                    'certificate-mismatch-exception-message)))
(common-lisp:progn
 (common-lisp:deftype certificate-policy-list ()
   '(trivial-types:proper-list policy-information))
 (common-lisp:defun make-certificate-policy-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-information))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cname-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:deftype country-code-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-certificate-authority-audit-report-request
                       common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-certificate-authority-audit-report-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         (common-lisp:error ":s3bucket-name is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-authority-audit-report-request-s3bucket-name
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (audit-report-response-format :initarg
                         :audit-report-response-format :initform
                         (common-lisp:error
                          ":audit-report-response-format is required")
                         :type
                         (common-lisp:or audit-report-response-format
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-authority-audit-report-request-audit-report-response-format
                         :shape "AuditReportResponseFormat" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-certificate-authority-audit-report-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-certificate-authority-audit-report-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-certificate-authority-audit-report-request
                    'make-create-certificate-authority-audit-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-authority-audit-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-authority-audit-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audit-report-response-format))
      (common-lisp:list
       (common-lisp:cons "AuditReportResponseFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-authority-audit-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-certificate-authority-audit-report-response
                       common-lisp:nil
                       ((audit-report-id :initarg :audit-report-id :initform
                         common-lisp:nil :type
                         (common-lisp:or audit-report-id common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-authority-audit-report-response-audit-report-id
                         :shape "AuditReportId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3key :initarg :s3key :initform common-lisp:nil :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-create-certificate-authority-audit-report-response-s3key
                         :shape "S3Key" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-certificate-authority-audit-report-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-certificate-authority-audit-report-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-certificate-authority-audit-report-response
                    'make-create-certificate-authority-audit-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-authority-audit-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-authority-audit-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-report-id))
      (common-lisp:list
       (common-lisp:cons "AuditReportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-authority-audit-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-certificate-authority-request common-lisp:nil
                       ((certificate-authority-configuration :initarg
                         :certificate-authority-configuration :initform
                         (common-lisp:error
                          ":certificate-authority-configuration is required")
                         :type
                         (common-lisp:or certificate-authority-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-authority-request-certificate-authority-configuration
                         :shape "CertificateAuthorityConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (revocation-configuration :initarg
                         :revocation-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or revocation-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-authority-request-revocation-configuration
                         :shape "RevocationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (certificate-authority-type :initarg
                         :certificate-authority-type :initform
                         (common-lisp:error
                          ":certificate-authority-type is required")
                         :type
                         (common-lisp:or certificate-authority-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-authority-request-certificate-authority-type
                         :shape "CertificateAuthorityType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token
                         :initform common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-authority-request-idempotency-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key-storage-security-standard :initarg
                         :key-storage-security-standard :initform
                         common-lisp:nil :type
                         (common-lisp:or key-storage-security-standard
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-authority-request-key-storage-security-standard
                         :shape "KeyStorageSecurityStandard" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-certificate-authority-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (usage-mode :initarg :usage-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-authority-usage-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-certificate-authority-request-usage-mode
                         :shape "CertificateAuthorityUsageMode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-certificate-authority-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-certificate-authority-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-certificate-authority-request
                    'make-create-certificate-authority-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-authority-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-authority-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-configuration))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'revocation-configuration))
      (common-lisp:list
       (common-lisp:cons "RevocationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-type))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'key-storage-security-standard))
      (common-lisp:list
       (common-lisp:cons "KeyStorageSecurityStandard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-mode))
      (common-lisp:list
       (common-lisp:cons "UsageMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-authority-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-certificate-authority-response common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-certificate-authority-response-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-certificate-authority-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-certificate-authority-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-certificate-authority-response
                    'make-create-certificate-authority-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-authority-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-authority-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-authority-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-permission-request common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-permission-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (principal :initarg :principal :initform
                         (common-lisp:error ":principal is required") :type
                         (common-lisp:or principal common-lisp:null) :accessor
                         struct-shape-create-permission-request-principal
                         :shape "Principal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-account :initarg :source-account :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-create-permission-request-source-account
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or action-list common-lisp:null)
                         :accessor
                         struct-shape-create-permission-request-actions :shape
                         "ActionList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-permission-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-permission-request
                    'make-create-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-account))
      (common-lisp:list
       (common-lisp:cons "SourceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass crl-configuration common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-crl-configuration-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (expiration-in-days :initarg :expiration-in-days
                         :initform common-lisp:nil :type
                         (common-lisp:or integer1to5000 common-lisp:null)
                         :accessor
                         struct-shape-crl-configuration-expiration-in-days
                         :shape "Integer1To5000" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-cname :initarg :custom-cname :initform
                         common-lisp:nil :type
                         (common-lisp:or cname-string common-lisp:null)
                         :accessor struct-shape-crl-configuration-custom-cname
                         :shape "CnameString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or s3bucket-name3to255 common-lisp:null)
                         :accessor struct-shape-crl-configuration-s3bucket-name
                         :shape "S3BucketName3To255" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3object-acl :initarg :s3object-acl :initform
                         common-lisp:nil :type
                         (common-lisp:or s3object-acl common-lisp:null)
                         :accessor struct-shape-crl-configuration-s3object-acl
                         :shape "S3ObjectAcl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (crl-distribution-point-extension-configuration
                         :initarg
                         :crl-distribution-point-extension-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          crl-distribution-point-extension-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-crl-configuration-crl-distribution-point-extension-configuration
                         :shape "CrlDistributionPointExtensionConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-crl-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'crl-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'crl-configuration 'make-crl-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input crl-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input crl-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-in-days))
      (common-lisp:list
       (common-lisp:cons "ExpirationInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-cname))
      (common-lisp:list
       (common-lisp:cons "CustomCname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-acl))
      (common-lisp:list
       (common-lisp:cons "S3ObjectAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'crl-distribution-point-extension-configuration))
      (common-lisp:list
       (common-lisp:cons "CrlDistributionPointExtensionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input crl-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass crl-distribution-point-extension-configuration
                       common-lisp:nil
                       ((omit-extension :initarg :omit-extension :initform
                         (common-lisp:error ":omit-extension is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-crl-distribution-point-extension-configuration-omit-extension
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-crl-distribution-point-extension-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'crl-distribution-point-extension-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'crl-distribution-point-extension-configuration
                    'make-crl-distribution-point-extension-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          crl-distribution-point-extension-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          crl-distribution-point-extension-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'omit-extension))
      (common-lisp:list
       (common-lisp:cons "OmitExtension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          crl-distribution-point-extension-configuration))
   common-lisp:nil))
(common-lisp:deftype csr-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype csr-body () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass csr-extensions common-lisp:nil
                       ((key-usage :initarg :key-usage :initform
                         common-lisp:nil :type
                         (common-lisp:or key-usage common-lisp:null) :accessor
                         struct-shape-csr-extensions-key-usage :shape
                         "KeyUsage" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subject-information-access :initarg
                         :subject-information-access :initform common-lisp:nil
                         :type
                         (common-lisp:or access-description-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-csr-extensions-subject-information-access
                         :shape "AccessDescriptionList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-csr-extensions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'csr-extensions
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'csr-extensions 'make-csr-extensions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input csr-extensions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input csr-extensions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage))
      (common-lisp:list
       (common-lisp:cons "KeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-information-access))
      (common-lisp:list
       (common-lisp:cons "SubjectInformationAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input csr-extensions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-attribute common-lisp:nil
                       ((object-identifier :initarg :object-identifier
                         :initform
                         (common-lisp:error ":object-identifier is required")
                         :type
                         (common-lisp:or custom-object-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-attribute-object-identifier :shape
                         "CustomObjectIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string1to256 common-lisp:null)
                         :accessor struct-shape-custom-attribute-value :shape
                         "String1To256" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-attribute
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-attribute 'make-custom-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-attribute-list ()
   '(trivial-types:proper-list custom-attribute))
 (common-lisp:defun make-custom-attribute-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass custom-extension common-lisp:nil
                       ((object-identifier :initarg :object-identifier
                         :initform
                         (common-lisp:error ":object-identifier is required")
                         :type
                         (common-lisp:or custom-object-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-custom-extension-object-identifier :shape
                         "CustomObjectIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or base64string1to4096 common-lisp:null)
                         :accessor struct-shape-custom-extension-value :shape
                         "Base64String1To4096" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (critical :initarg :critical :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-custom-extension-critical
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-extension
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-extension
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-extension 'make-custom-extension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-extension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-extension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'critical))
      (common-lisp:list
       (common-lisp:cons "Critical"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-extension))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-extension-list ()
   '(trivial-types:proper-list custom-extension))
 (common-lisp:defun make-custom-extension-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-extension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype custom-object-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-certificate-authority-request common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-certificate-authority-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (permanent-deletion-time-in-days :initarg
                         :permanent-deletion-time-in-days :initform
                         common-lisp:nil :type
                         (common-lisp:or permanent-deletion-time-in-days
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-certificate-authority-request-permanent-deletion-time-in-days
                         :shape "PermanentDeletionTimeInDays" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-certificate-authority-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-certificate-authority-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-authority-request
                    'make-delete-certificate-authority-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-authority-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-authority-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permanent-deletion-time-in-days))
      (common-lisp:list
       (common-lisp:cons "PermanentDeletionTimeInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-authority-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-permission-request common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-permission-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (principal :initarg :principal :initform
                         (common-lisp:error ":principal is required") :type
                         (common-lisp:or principal common-lisp:null) :accessor
                         struct-shape-delete-permission-request-principal
                         :shape "Principal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-account :initarg :source-account :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-delete-permission-request-source-account
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-permission-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-permission-request
                    'make-delete-permission-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-account))
      (common-lisp:list
       (common-lisp:cons "SourceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-policy-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-policy-request-resource-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-policy-request 'make-delete-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificate-authority-audit-report-request
                       common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-certificate-authority-audit-report-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (audit-report-id :initarg :audit-report-id :initform
                         (common-lisp:error ":audit-report-id is required")
                         :type
                         (common-lisp:or audit-report-id common-lisp:null)
                         :accessor
                         struct-shape-describe-certificate-authority-audit-report-request-audit-report-id
                         :shape "AuditReportId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-certificate-authority-audit-report-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-certificate-authority-audit-report-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-authority-audit-report-request
                    'make-describe-certificate-authority-audit-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-authority-audit-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-authority-audit-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-report-id))
      (common-lisp:list
       (common-lisp:cons "AuditReportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-authority-audit-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificate-authority-audit-report-response
                       common-lisp:nil
                       ((audit-report-status :initarg :audit-report-status
                         :initform common-lisp:nil :type
                         (common-lisp:or audit-report-status common-lisp:null)
                         :accessor
                         struct-shape-describe-certificate-authority-audit-report-response-audit-report-status
                         :shape "AuditReportStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor
                         struct-shape-describe-certificate-authority-audit-report-response-s3bucket-name
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3key :initarg :s3key :initform common-lisp:nil :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-describe-certificate-authority-audit-report-response-s3key
                         :shape "S3Key" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-describe-certificate-authority-audit-report-response-created-at
                         :shape "TStamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-certificate-authority-audit-report-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-certificate-authority-audit-report-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-authority-audit-report-response
                    'make-describe-certificate-authority-audit-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-authority-audit-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-authority-audit-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audit-report-status))
      (common-lisp:list
       (common-lisp:cons "AuditReportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-authority-audit-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificate-authority-request common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-describe-certificate-authority-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-certificate-authority-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-certificate-authority-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-authority-request
                    'make-describe-certificate-authority-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-authority-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-authority-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-authority-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificate-authority-response common-lisp:nil
                       ((certificate-authority :initarg :certificate-authority
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-authority
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-certificate-authority-response-certificate-authority
                         :shape "CertificateAuthority" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-certificate-authority-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-certificate-authority-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-authority-response
                    'make-describe-certificate-authority-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-authority-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-authority-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-authority-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass edi-party-name common-lisp:nil
                       ((party-name :initarg :party-name :initform
                         (common-lisp:error ":party-name is required") :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         struct-shape-edi-party-name-party-name :shape
                         "String256" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name-assigner :initarg :name-assigner :initform
                         common-lisp:nil :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         struct-shape-edi-party-name-name-assigner :shape
                         "String256" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-edi-party-name
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'edi-party-name
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'edi-party-name 'make-edi-party-name))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input edi-party-name))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input edi-party-name))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'party-name))
      (common-lisp:list
       (common-lisp:cons "PartyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-assigner))
      (common-lisp:list
       (common-lisp:cons "NameAssigner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input edi-party-name))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass extended-key-usage common-lisp:nil
                       ((extended-key-usage-type :initarg
                         :extended-key-usage-type :initform common-lisp:nil
                         :type
                         (common-lisp:or extended-key-usage-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-extended-key-usage-extended-key-usage-type
                         :shape "ExtendedKeyUsageType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (extended-key-usage-object-identifier :initarg
                         :extended-key-usage-object-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-object-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-extended-key-usage-extended-key-usage-object-identifier
                         :shape "CustomObjectIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-extended-key-usage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'extended-key-usage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'extended-key-usage 'make-extended-key-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extended-key-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extended-key-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extended-key-usage-type))
      (common-lisp:list
       (common-lisp:cons "ExtendedKeyUsageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'extended-key-usage-object-identifier))
      (common-lisp:list
       (common-lisp:cons "ExtendedKeyUsageObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extended-key-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype extended-key-usage-list ()
   '(trivial-types:proper-list extended-key-usage))
 (common-lisp:defun make-extended-key-usage-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list extended-key-usage))
   aws-sdk/generator/shape::members))
(common-lisp:deftype extended-key-usage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass extensions common-lisp:nil
                       ((certificate-policies :initarg :certificate-policies
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-policy-list
                                         common-lisp:null)
                         :accessor struct-shape-extensions-certificate-policies
                         :shape "CertificatePolicyList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (extended-key-usage :initarg :extended-key-usage
                         :initform common-lisp:nil :type
                         (common-lisp:or extended-key-usage-list
                                         common-lisp:null)
                         :accessor struct-shape-extensions-extended-key-usage
                         :shape "ExtendedKeyUsageList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (key-usage :initarg :key-usage :initform
                         common-lisp:nil :type
                         (common-lisp:or key-usage common-lisp:null) :accessor
                         struct-shape-extensions-key-usage :shape "KeyUsage"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subject-alternative-names :initarg
                         :subject-alternative-names :initform common-lisp:nil
                         :type
                         (common-lisp:or general-name-list common-lisp:null)
                         :accessor
                         struct-shape-extensions-subject-alternative-names
                         :shape "GeneralNameList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-extensions :initarg :custom-extensions
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-extension-list
                                         common-lisp:null)
                         :accessor struct-shape-extensions-custom-extensions
                         :shape "CustomExtensionList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-extensions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'extensions
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'extensions 'make-extensions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input extensions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input extensions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-policies))
      (common-lisp:list
       (common-lisp:cons "CertificatePolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extended-key-usage))
      (common-lisp:list
       (common-lisp:cons "ExtendedKeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-usage))
      (common-lisp:list
       (common-lisp:cons "KeyUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "SubjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-extensions))
      (common-lisp:list
       (common-lisp:cons "CustomExtensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input extensions))
   common-lisp:nil))
(common-lisp:deftype failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass general-name common-lisp:nil
                       ((other-name :initarg :other-name :initform
                         common-lisp:nil :type
                         (common-lisp:or other-name common-lisp:null) :accessor
                         struct-shape-general-name-other-name :shape
                         "OtherName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rfc822name :initarg :rfc822name :initform
                         common-lisp:nil :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         struct-shape-general-name-rfc822name :shape
                         "String256" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dns-name :initarg :dns-name :initform common-lisp:nil
                         :type (common-lisp:or string253 common-lisp:null)
                         :accessor struct-shape-general-name-dns-name :shape
                         "String253" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (directory-name :initarg :directory-name :initform
                         common-lisp:nil :type
                         (common-lisp:or asn1subject common-lisp:null)
                         :accessor struct-shape-general-name-directory-name
                         :shape "ASN1Subject" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edi-party-name :initarg :edi-party-name :initform
                         common-lisp:nil :type
                         (common-lisp:or edi-party-name common-lisp:null)
                         :accessor struct-shape-general-name-edi-party-name
                         :shape "EdiPartyName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (uniform-resource-identifier :initarg
                         :uniform-resource-identifier :initform common-lisp:nil
                         :type (common-lisp:or string253 common-lisp:null)
                         :accessor
                         struct-shape-general-name-uniform-resource-identifier
                         :shape "String253" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or string39 common-lisp:null) :accessor
                         struct-shape-general-name-ip-address :shape "String39"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (registered-id :initarg :registered-id :initform
                         common-lisp:nil :type
                         (common-lisp:or custom-object-identifier
                                         common-lisp:null)
                         :accessor struct-shape-general-name-registered-id
                         :shape "CustomObjectIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-general-name
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'general-name
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'general-name 'make-general-name))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input general-name))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input general-name))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'other-name))
      (common-lisp:list
       (common-lisp:cons "OtherName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rfc822name))
      (common-lisp:list
       (common-lisp:cons "Rfc822Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "DnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-name))
      (common-lisp:list
       (common-lisp:cons "DirectoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edi-party-name))
      (common-lisp:list
       (common-lisp:cons "EdiPartyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'uniform-resource-identifier))
      (common-lisp:list
       (common-lisp:cons "UniformResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-id))
      (common-lisp:list
       (common-lisp:cons "RegisteredId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input general-name))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype general-name-list ()
   '(trivial-types:proper-list general-name))
 (common-lisp:defun make-general-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list general-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-certificate-authority-certificate-request
                       common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-certificate-authority-certificate-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-certificate-authority-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-certificate-authority-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-certificate-authority-certificate-request
                    'make-get-certificate-authority-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-authority-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-authority-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-authority-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-certificate-authority-certificate-response
                       common-lisp:nil
                       ((certificate :initarg :certificate :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-body common-lisp:null)
                         :accessor
                         struct-shape-get-certificate-authority-certificate-response-certificate
                         :shape "CertificateBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-chain :initarg :certificate-chain
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-chain common-lisp:null)
                         :accessor
                         struct-shape-get-certificate-authority-certificate-response-certificate-chain
                         :shape "CertificateChain" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-certificate-authority-certificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-certificate-authority-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-certificate-authority-certificate-response
                    'make-get-certificate-authority-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-authority-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-authority-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "CertificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-authority-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-certificate-authority-csr-request common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-certificate-authority-csr-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-certificate-authority-csr-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-certificate-authority-csr-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-certificate-authority-csr-request
                    'make-get-certificate-authority-csr-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-authority-csr-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-authority-csr-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-authority-csr-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-certificate-authority-csr-response common-lisp:nil
                       ((csr :initarg :csr :initform common-lisp:nil :type
                         (common-lisp:or csr-body common-lisp:null) :accessor
                         struct-shape-get-certificate-authority-csr-response-csr
                         :shape "CsrBody" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-certificate-authority-csr-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-certificate-authority-csr-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-certificate-authority-csr-response
                    'make-get-certificate-authority-csr-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-authority-csr-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-authority-csr-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csr))
      (common-lisp:list
       (common-lisp:cons "Csr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-authority-csr-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-certificate-request common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-certificate-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificate-arn :initarg :certificate-arn :initform
                         (common-lisp:error ":certificate-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-certificate-request-certificate-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-certificate-request 'make-get-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-certificate-response common-lisp:nil
                       ((certificate :initarg :certificate :initform
                         common-lisp:nil :type
                         (common-lisp:or certificate-body common-lisp:null)
                         :accessor
                         struct-shape-get-certificate-response-certificate
                         :shape "CertificateBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-chain :initarg :certificate-chain
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-chain common-lisp:null)
                         :accessor
                         struct-shape-get-certificate-response-certificate-chain
                         :shape "CertificateChain" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-certificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-certificate-response 'make-get-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "CertificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-policy-request-resource-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-response common-lisp:nil
                       ((policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or awspolicy common-lisp:null)
                         :accessor struct-shape-get-policy-response-policy
                         :shape "AWSPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-response))
   common-lisp:nil))
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-certificate-authority-certificate-request
                       common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-import-certificate-authority-certificate-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificate :initarg :certificate :initform
                         (common-lisp:error ":certificate is required") :type
                         (common-lisp:or certificate-body-blob
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-certificate-authority-certificate-request-certificate
                         :shape "CertificateBodyBlob" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-chain :initarg :certificate-chain
                         :initform common-lisp:nil :type
                         (common-lisp:or certificate-chain-blob
                                         common-lisp:null)
                         :accessor
                         struct-shape-import-certificate-authority-certificate-request-certificate-chain
                         :shape "CertificateChainBlob" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-import-certificate-authority-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-certificate-authority-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'import-certificate-authority-certificate-request
                    'make-import-certificate-authority-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-authority-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-authority-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "CertificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-authority-certificate-request))
   common-lisp:nil))
(common-lisp:deftype integer1to5000 () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-args-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-args-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-args-exception 'invalid-args-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-arn-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-arn-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-arn-exception 'invalid-arn-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-policy-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-policy-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-policy-exception
                    'invalid-policy-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-state-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-state-exception 'invalid-state-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-tag-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-tag-exception 'invalid-tag-exception-message)))
(common-lisp:progn
 (common-lisp:defclass issue-certificate-request common-lisp:nil
                       ((api-passthrough :initarg :api-passthrough :initform
                         common-lisp:nil :type
                         (common-lisp:or api-passthrough common-lisp:null)
                         :accessor
                         struct-shape-issue-certificate-request-api-passthrough
                         :shape "ApiPassthrough" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-issue-certificate-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (csr :initarg :csr :initform
                         (common-lisp:error ":csr is required") :type
                         (common-lisp:or csr-blob common-lisp:null) :accessor
                         struct-shape-issue-certificate-request-csr :shape
                         "CsrBlob" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (signing-algorithm :initarg :signing-algorithm
                         :initform
                         (common-lisp:error ":signing-algorithm is required")
                         :type
                         (common-lisp:or signing-algorithm common-lisp:null)
                         :accessor
                         struct-shape-issue-certificate-request-signing-algorithm
                         :shape "SigningAlgorithm" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-arn :initarg :template-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-issue-certificate-request-template-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (validity :initarg :validity :initform
                         (common-lisp:error ":validity is required") :type
                         (common-lisp:or validity common-lisp:null) :accessor
                         struct-shape-issue-certificate-request-validity :shape
                         "Validity" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (validity-not-before :initarg :validity-not-before
                         :initform common-lisp:nil :type
                         (common-lisp:or validity common-lisp:null) :accessor
                         struct-shape-issue-certificate-request-validity-not-before
                         :shape "Validity" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idempotency-token :initarg :idempotency-token
                         :initform common-lisp:nil :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor
                         struct-shape-issue-certificate-request-idempotency-token
                         :shape "IdempotencyToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-issue-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'issue-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'issue-certificate-request
                    'make-issue-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          issue-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          issue-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-passthrough))
      (common-lisp:list
       (common-lisp:cons "ApiPassthrough"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csr))
      (common-lisp:list
       (common-lisp:cons "Csr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-algorithm))
      (common-lisp:list
       (common-lisp:cons "SigningAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-arn))
      (common-lisp:list
       (common-lisp:cons "TemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity))
      (common-lisp:list
       (common-lisp:cons "Validity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity-not-before))
      (common-lisp:list
       (common-lisp:cons "ValidityNotBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idempotency-token))
      (common-lisp:list
       (common-lisp:cons "IdempotencyToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          issue-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass issue-certificate-response common-lisp:nil
                       ((certificate-arn :initarg :certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-issue-certificate-response-certificate-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-issue-certificate-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'issue-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'issue-certificate-response
                    'make-issue-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          issue-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          issue-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          issue-certificate-response))
   common-lisp:nil))
(common-lisp:deftype key-algorithm () 'common-lisp:string)
(common-lisp:deftype key-storage-security-standard () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass key-usage common-lisp:nil
                       ((digital-signature :initarg :digital-signature
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-digital-signature :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (non-repudiation :initarg :non-repudiation :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-non-repudiation :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-encipherment :initarg :key-encipherment :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-key-encipherment :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (data-encipherment :initarg :data-encipherment
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-data-encipherment :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-agreement :initarg :key-agreement :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-key-agreement :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key-cert-sign :initarg :key-cert-sign :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-key-cert-sign :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (crlsign :initarg :crlsign :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-key-usage-crlsign :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (encipher-only :initarg :encipher-only :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-encipher-only :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (decipher-only :initarg :decipher-only :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-key-usage-decipher-only :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-key-usage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'key-usage
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'key-usage 'make-key-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digital-signature))
      (common-lisp:list
       (common-lisp:cons "DigitalSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'non-repudiation))
      (common-lisp:list
       (common-lisp:cons "NonRepudiation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-encipherment))
      (common-lisp:list
       (common-lisp:cons "KeyEncipherment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-encipherment))
      (common-lisp:list
       (common-lisp:cons "DataEncipherment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-agreement))
      (common-lisp:list
       (common-lisp:cons "KeyAgreement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-cert-sign))
      (common-lisp:list
       (common-lisp:cons "KeyCertSign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crlsign))
      (common-lisp:list
       (common-lisp:cons "CRLSign"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encipher-only))
      (common-lisp:list
       (common-lisp:cons "EncipherOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'decipher-only))
      (common-lisp:list
       (common-lisp:cons "DecipherOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-certificate-authorities-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-certificate-authorities-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-certificate-authorities-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-owner :initarg :resource-owner :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-owner common-lisp:null)
                         :accessor
                         struct-shape-list-certificate-authorities-request-resource-owner
                         :shape "ResourceOwner" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-certificate-authorities-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-certificate-authorities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-certificate-authorities-request
                    'make-list-certificate-authorities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-authorities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-authorities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "ResourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-authorities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-certificate-authorities-response common-lisp:nil
                       ((certificate-authorities :initarg
                         :certificate-authorities :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-authorities
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-certificate-authorities-response-certificate-authorities
                         :shape "CertificateAuthorities" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-certificate-authorities-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-certificate-authorities-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-certificate-authorities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-certificate-authorities-response
                    'make-list-certificate-authorities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-authorities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-authorities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authorities))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificate-authorities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-permissions-request common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-permissions-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-permissions-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-permissions-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-permissions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-permissions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-permissions-request 'make-list-permissions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-permissions-response common-lisp:nil
                       ((permissions :initarg :permissions :initform
                         common-lisp:nil :type
                         (common-lisp:or permission-list common-lisp:null)
                         :accessor
                         struct-shape-list-permissions-response-permissions
                         :shape "PermissionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-permissions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-permissions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-permissions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-permissions-response
                    'make-list-permissions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permissions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-request common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-request-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-list-tags-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-request 'make-list-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-response-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-response 'make-list-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition lockout-prevented-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       lockout-prevented-exception-message)))
 (common-lisp:export
  (common-lisp:list 'lockout-prevented-exception
                    'lockout-prevented-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition malformed-csrexception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-csrexception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-csrexception 'malformed-csrexception-message)))
(common-lisp:progn
 (common-lisp:define-condition malformed-certificate-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-certificate-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-certificate-exception
                    'malformed-certificate-exception-message)))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ocsp-configuration common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-ocsp-configuration-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ocsp-custom-cname :initarg :ocsp-custom-cname
                         :initform common-lisp:nil :type
                         (common-lisp:or cname-string common-lisp:null)
                         :accessor
                         struct-shape-ocsp-configuration-ocsp-custom-cname
                         :shape "CnameString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ocsp-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ocsp-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ocsp-configuration 'make-ocsp-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ocsp-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ocsp-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ocsp-custom-cname))
      (common-lisp:list
       (common-lisp:cons "OcspCustomCname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ocsp-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass other-name common-lisp:nil
                       ((type-id :initarg :type-id :initform
                         (common-lisp:error ":type-id is required") :type
                         (common-lisp:or custom-object-identifier
                                         common-lisp:null)
                         :accessor struct-shape-other-name-type-id :shape
                         "CustomObjectIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         struct-shape-other-name-value :shape "String256"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-other-name
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'other-name
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'other-name 'make-other-name))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input other-name))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input other-name))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-id))
      (common-lisp:list
       (common-lisp:cons "TypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input other-name))
   common-lisp:nil))
(common-lisp:deftype permanent-deletion-time-in-days () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass permission common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-permission-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or tstamp common-lisp:null) :accessor
                         struct-shape-permission-created-at :shape "TStamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (principal :initarg :principal :initform
                         common-lisp:nil :type
                         (common-lisp:or principal common-lisp:null) :accessor
                         struct-shape-permission-principal :shape "Principal"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-account :initarg :source-account :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-permission-source-account :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or action-list common-lisp:null)
                         :accessor struct-shape-permission-actions :shape
                         "ActionList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy :initarg :policy :initform common-lisp:nil
                         :type (common-lisp:or awspolicy common-lisp:null)
                         :accessor struct-shape-permission-policy :shape
                         "AWSPolicy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-permission
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'permission
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'permission 'make-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-account))
      (common-lisp:list
       (common-lisp:cons "SourceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition permission-already-exists-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       permission-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'permission-already-exists-exception
                    'permission-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:deftype permission-list ()
   '(trivial-types:proper-list permission))
 (common-lisp:defun make-permission-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass policy-information common-lisp:nil
                       ((cert-policy-id :initarg :cert-policy-id :initform
                         (common-lisp:error ":cert-policy-id is required")
                         :type
                         (common-lisp:or custom-object-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-policy-information-cert-policy-id :shape
                         "CustomObjectIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-qualifiers :initarg :policy-qualifiers
                         :initform common-lisp:nil :type
                         (common-lisp:or policy-qualifier-info-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-policy-information-policy-qualifiers
                         :shape "PolicyQualifierInfoList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-information
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy-information
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'policy-information 'make-policy-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cert-policy-id))
      (common-lisp:list
       (common-lisp:cons "CertPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-qualifiers))
      (common-lisp:list
       (common-lisp:cons "PolicyQualifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-information))
   common-lisp:nil))
(common-lisp:deftype policy-qualifier-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass policy-qualifier-info common-lisp:nil
                       ((policy-qualifier-id :initarg :policy-qualifier-id
                         :initform
                         (common-lisp:error ":policy-qualifier-id is required")
                         :type
                         (common-lisp:or policy-qualifier-id common-lisp:null)
                         :accessor
                         struct-shape-policy-qualifier-info-policy-qualifier-id
                         :shape "PolicyQualifierId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (qualifier :initarg :qualifier :initform
                         (common-lisp:error ":qualifier is required") :type
                         (common-lisp:or qualifier common-lisp:null) :accessor
                         struct-shape-policy-qualifier-info-qualifier :shape
                         "Qualifier" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-qualifier-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy-qualifier-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'policy-qualifier-info 'make-policy-qualifier-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-qualifier-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-qualifier-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-qualifier-id))
      (common-lisp:list
       (common-lisp:cons "PolicyQualifierId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qualifier))
      (common-lisp:list
       (common-lisp:cons "Qualifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-qualifier-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-qualifier-info-list ()
   '(trivial-types:proper-list policy-qualifier-info))
 (common-lisp:defun make-policy-qualifier-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-qualifier-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype positive-long () 'common-lisp:integer)
(common-lisp:deftype principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-policy-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-put-policy-request-resource-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or awspolicy common-lisp:null) :accessor
                         struct-shape-put-policy-request-policy :shape
                         "AWSPolicy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-policy-request 'make-put-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass qualifier common-lisp:nil
                       ((cps-uri :initarg :cps-uri :initform
                         (common-lisp:error ":cps-uri is required") :type
                         (common-lisp:or string256 common-lisp:null) :accessor
                         struct-shape-qualifier-cps-uri :shape "String256"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-qualifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'qualifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'qualifier 'make-qualifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input qualifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input qualifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cps-uri))
      (common-lisp:list
       (common-lisp:cons "CpsUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input qualifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition request-already-processed-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-already-processed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-already-processed-exception
                    'request-already-processed-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition request-failed-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-failed-exception
                    'request-failed-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition request-in-progress-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-in-progress-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-in-progress-exception
                    'request-in-progress-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-owner () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass restore-certificate-authority-request common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-restore-certificate-authority-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-certificate-authority-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-certificate-authority-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-certificate-authority-request
                    'make-restore-certificate-authority-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-certificate-authority-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-certificate-authority-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-certificate-authority-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revocation-configuration common-lisp:nil
                       ((crl-configuration :initarg :crl-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or crl-configuration common-lisp:null)
                         :accessor
                         struct-shape-revocation-configuration-crl-configuration
                         :shape "CrlConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ocsp-configuration :initarg :ocsp-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or ocsp-configuration common-lisp:null)
                         :accessor
                         struct-shape-revocation-configuration-ocsp-configuration
                         :shape "OcspConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revocation-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'revocation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revocation-configuration 'make-revocation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revocation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revocation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'crl-configuration))
      (common-lisp:list
       (common-lisp:cons "CrlConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ocsp-configuration))
      (common-lisp:list
       (common-lisp:cons "OcspConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revocation-configuration))
   common-lisp:nil))
(common-lisp:deftype revocation-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass revoke-certificate-request common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-revoke-certificate-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (certificate-serial :initarg :certificate-serial
                         :initform
                         (common-lisp:error ":certificate-serial is required")
                         :type (common-lisp:or string128 common-lisp:null)
                         :accessor
                         struct-shape-revoke-certificate-request-certificate-serial
                         :shape "String128" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (revocation-reason :initarg :revocation-reason
                         :initform
                         (common-lisp:error ":revocation-reason is required")
                         :type
                         (common-lisp:or revocation-reason common-lisp:null)
                         :accessor
                         struct-shape-revoke-certificate-request-revocation-reason
                         :shape "RevocationReason" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-certificate-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'revoke-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-certificate-request
                    'make-revoke-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-serial))
      (common-lisp:list
       (common-lisp:cons "CertificateSerial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-reason))
      (common-lisp:list
       (common-lisp:cons "RevocationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-certificate-request))
   common-lisp:nil))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3bucket-name3to255 () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:deftype s3object-acl () 'common-lisp:string)
(common-lisp:deftype signing-algorithm () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string128 () 'common-lisp:string)
(common-lisp:deftype string16 () 'common-lisp:string)
(common-lisp:deftype string1to256 () 'common-lisp:string)
(common-lisp:deftype string253 () 'common-lisp:string)
(common-lisp:deftype string256 () 'common-lisp:string)
(common-lisp:deftype string3 () 'common-lisp:string)
(common-lisp:deftype string39 () 'common-lisp:string)
(common-lisp:deftype string40 () 'common-lisp:string)
(common-lisp:deftype string5 () 'common-lisp:string)
(common-lisp:deftype string64 () 'common-lisp:string)
(common-lisp:deftype tstamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-certificate-authority-request common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-tag-certificate-authority-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-certificate-authority-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-certificate-authority-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'tag-certificate-authority-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-certificate-authority-request
                    'make-tag-certificate-authority-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-certificate-authority-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-certificate-authority-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-certificate-authority-request))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (acm-pca-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-certificate-authority-request common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-untag-certificate-authority-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-untag-certificate-authority-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-certificate-authority-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'untag-certificate-authority-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-certificate-authority-request
                    'make-untag-certificate-authority-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-certificate-authority-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-certificate-authority-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-certificate-authority-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-certificate-authority-request common-lisp:nil
                       ((certificate-authority-arn :initarg
                         :certificate-authority-arn :initform
                         (common-lisp:error
                          ":certificate-authority-arn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-certificate-authority-request-certificate-authority-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (revocation-configuration :initarg
                         :revocation-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or revocation-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-certificate-authority-request-revocation-configuration
                         :shape "RevocationConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or certificate-authority-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-certificate-authority-request-status
                         :shape "CertificateAuthorityStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-certificate-authority-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-certificate-authority-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-certificate-authority-request
                    'make-update-certificate-authority-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-authority-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-authority-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-authority-arn))
      (common-lisp:list
       (common-lisp:cons "CertificateAuthorityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'revocation-configuration))
      (common-lisp:list
       (common-lisp:cons "RevocationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-authority-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validity common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or positive-long common-lisp:null)
                         :accessor struct-shape-validity-value :shape
                         "PositiveLong" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or validity-period-type common-lisp:null)
                         :accessor struct-shape-validity-type :shape
                         "ValidityPeriodType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validity
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validity
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'validity 'make-validity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validity))
   common-lisp:nil))
(common-lisp:deftype validity-period-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-certificate-authority
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-configuration
                     revocation-configuration certificate-authority-type
                     idempotency-token key-storage-security-standard tags
                     usage-mode)
   (common-lisp:declare
    (common-lisp:ignorable certificate-authority-configuration
     revocation-configuration certificate-authority-type idempotency-token
     key-storage-security-standard tags usage-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-certificate-authority-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCertificateAuthority"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-certificate-authority))
(common-lisp:progn
 (common-lisp:defun create-certificate-authority-audit-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn s3bucket-name
                     audit-report-response-format)
   (common-lisp:declare
    (common-lisp:ignorable certificate-authority-arn s3bucket-name
     audit-report-response-format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-certificate-authority-audit-report-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCertificateAuthorityAuditReport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-certificate-authority-audit-report))
(common-lisp:progn
 (common-lisp:defun create-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn principal
                     source-account actions)
   (common-lisp:declare
    (common-lisp:ignorable certificate-authority-arn principal source-account
     actions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePermission"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-permission))
(common-lisp:progn
 (common-lisp:defun delete-certificate-authority
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn
                     permanent-deletion-time-in-days)
   (common-lisp:declare
    (common-lisp:ignorable certificate-authority-arn
     permanent-deletion-time-in-days))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-certificate-authority-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCertificateAuthority"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-certificate-authority))
(common-lisp:progn
 (common-lisp:defun delete-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn principal
                     source-account)
   (common-lisp:declare
    (common-lisp:ignorable certificate-authority-arn principal source-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePermission"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-permission))
(common-lisp:progn
 (common-lisp:defun delete-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun describe-certificate-authority
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn)
   (common-lisp:declare (common-lisp:ignorable certificate-authority-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-certificate-authority-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCertificateAuthority"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-certificate-authority))
(common-lisp:progn
 (common-lisp:defun describe-certificate-authority-audit-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn
                     audit-report-id)
   (common-lisp:declare
    (common-lisp:ignorable certificate-authority-arn audit-report-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-certificate-authority-audit-report-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCertificateAuthorityAuditReport"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-certificate-authority-audit-report))
(common-lisp:progn
 (common-lisp:defun get-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn
                     certificate-arn)
   (common-lisp:declare
    (common-lisp:ignorable certificate-authority-arn certificate-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-certificate))
(common-lisp:progn
 (common-lisp:defun get-certificate-authority-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn)
   (common-lisp:declare (common-lisp:ignorable certificate-authority-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-certificate-authority-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCertificateAuthorityCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-certificate-authority-certificate))
(common-lisp:progn
 (common-lisp:defun get-certificate-authority-csr
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn)
   (common-lisp:declare (common-lisp:ignorable certificate-authority-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-certificate-authority-csr-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCertificateAuthorityCsr"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-certificate-authority-csr))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun import-certificate-authority-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn certificate
                     certificate-chain)
   (common-lisp:declare
    (common-lisp:ignorable certificate-authority-arn certificate
     certificate-chain))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-import-certificate-authority-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportCertificateAuthorityCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'import-certificate-authority-certificate))
(common-lisp:progn
 (common-lisp:defun issue-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key api-passthrough certificate-authority-arn
                     csr signing-algorithm template-arn validity
                     validity-not-before idempotency-token)
   (common-lisp:declare
    (common-lisp:ignorable api-passthrough certificate-authority-arn csr
     signing-algorithm template-arn validity validity-not-before
     idempotency-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-issue-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "IssueCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'issue-certificate))
(common-lisp:progn
 (common-lisp:defun list-certificate-authorities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results resource-owner)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results resource-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-certificate-authorities-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCertificateAuthorities"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-certificate-authorities))
(common-lisp:progn
 (common-lisp:defun list-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable certificate-authority-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-permissions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPermissions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-permissions))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable certificate-authority-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun put-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn policy)
   (common-lisp:declare (common-lisp:ignorable resource-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-policy))
(common-lisp:progn
 (common-lisp:defun restore-certificate-authority
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn)
   (common-lisp:declare (common-lisp:ignorable certificate-authority-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-certificate-authority-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreCertificateAuthority"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'restore-certificate-authority))
(common-lisp:progn
 (common-lisp:defun revoke-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn
                     certificate-serial revocation-reason)
   (common-lisp:declare
    (common-lisp:ignorable certificate-authority-arn certificate-serial
     revocation-reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-revoke-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RevokeCertificate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'revoke-certificate))
(common-lisp:progn
 (common-lisp:defun tag-certificate-authority
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn tags)
   (common-lisp:declare (common-lisp:ignorable certificate-authority-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-tag-certificate-authority-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagCertificateAuthority"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-certificate-authority))
(common-lisp:progn
 (common-lisp:defun untag-certificate-authority
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn tags)
   (common-lisp:declare (common-lisp:ignorable certificate-authority-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-untag-certificate-authority-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagCertificateAuthority"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-certificate-authority))
(common-lisp:progn
 (common-lisp:defun update-certificate-authority
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-authority-arn
                     revocation-configuration status)
   (common-lisp:declare
    (common-lisp:ignorable certificate-authority-arn revocation-configuration
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-certificate-authority-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'acm-pca-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCertificateAuthority"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-certificate-authority))
