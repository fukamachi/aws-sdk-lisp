;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/networkmanager/api (:use)
                             (:nicknames #:aws/networkmanager)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/networkmanager/api)
(common-lisp:progn
 (common-lisp:define-condition networkmanager-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'networkmanager-error))
(common-lisp:progn
 (common-lisp:defclass networkmanager-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "networkmanager"
                        :api-version "2019-07-05" :host-prefix "networkmanager"
                        :signing-name "networkmanager" :global-host
                        common-lisp:nil))
 (common-lisp:export 'networkmanager-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("CoreNetworkPolicyException" . core-network-policy-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype awsaccount-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass awslocation common-lisp:nil
                       ((zone :initarg :zone :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-awslocation-zone :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-arn :initarg :subnet-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-arn common-lisp:null) :accessor
                         struct-shape-awslocation-subnet-arn :shape "SubnetArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-awslocation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'awslocation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'awslocation 'make-awslocation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input awslocation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input awslocation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone))
      (common-lisp:list
       (common-lisp:cons "Zone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-arn))
      (common-lisp:list
       (common-lisp:cons "SubnetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input awslocation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-attachment-request common-lisp:nil
                       ((attachment-id :initarg :attachment-id :initform
                         (common-lisp:error ":attachment-id is required") :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-accept-attachment-request-attachment-id
                         :shape "AttachmentId" :location "uri" :location-name
                         "attachmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accept-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-attachment-request
                    'make-accept-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-attachment-response common-lisp:nil
                       ((attachment :initarg :attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or attachment common-lisp:null) :accessor
                         struct-shape-accept-attachment-response-attachment
                         :shape "Attachment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'accept-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-attachment-response
                    'make-accept-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "Attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (networkmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass account-status common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-account-status-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (slrdeployment-status :initarg :slrdeployment-status
                         :initform common-lisp:nil :type
                         (common-lisp:or slrdeployment-status common-lisp:null)
                         :accessor
                         struct-shape-account-status-slrdeployment-status
                         :shape "SLRDeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'account-status 'make-account-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slrdeployment-status))
      (common-lisp:list
       (common-lisp:cons "SLRDeploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-status-list ()
   '(trivial-types:proper-list account-status))
 (common-lisp:defun make-account-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-connect-peer-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-associate-connect-peer-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (connect-peer-id :initarg :connect-peer-id :initform
                         (common-lisp:error ":connect-peer-id is required")
                         :type
                         (common-lisp:or connect-peer-id common-lisp:null)
                         :accessor
                         struct-shape-associate-connect-peer-request-connect-peer-id
                         :shape "ConnectPeerId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-id :initarg :device-id :initform
                         (common-lisp:error ":device-id is required") :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-associate-connect-peer-request-device-id
                         :shape "DeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (link-id :initarg :link-id :initform common-lisp:nil
                         :type (common-lisp:or link-id common-lisp:null)
                         :accessor
                         struct-shape-associate-connect-peer-request-link-id
                         :shape "LinkId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-connect-peer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-connect-peer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-connect-peer-request
                    'make-associate-connect-peer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-connect-peer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-connect-peer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-peer-id))
      (common-lisp:list
       (common-lisp:cons "ConnectPeerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-id))
      (common-lisp:list
       (common-lisp:cons "LinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-connect-peer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-connect-peer-response common-lisp:nil
                       ((connect-peer-association :initarg
                         :connect-peer-association :initform common-lisp:nil
                         :type
                         (common-lisp:or connect-peer-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-connect-peer-response-connect-peer-association
                         :shape "ConnectPeerAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-connect-peer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-connect-peer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-connect-peer-response
                    'make-associate-connect-peer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-connect-peer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-connect-peer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-peer-association))
      (common-lisp:list
       (common-lisp:cons "ConnectPeerAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-connect-peer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-customer-gateway-request common-lisp:nil
                       ((customer-gateway-arn :initarg :customer-gateway-arn
                         :initform
                         (common-lisp:error
                          ":customer-gateway-arn is required")
                         :type
                         (common-lisp:or customer-gateway-arn common-lisp:null)
                         :accessor
                         struct-shape-associate-customer-gateway-request-customer-gateway-arn
                         :shape "CustomerGatewayArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-associate-customer-gateway-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (device-id :initarg :device-id :initform
                         (common-lisp:error ":device-id is required") :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-associate-customer-gateway-request-device-id
                         :shape "DeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (link-id :initarg :link-id :initform common-lisp:nil
                         :type (common-lisp:or link-id common-lisp:null)
                         :accessor
                         struct-shape-associate-customer-gateway-request-link-id
                         :shape "LinkId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-customer-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-customer-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-customer-gateway-request
                    'make-associate-customer-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-customer-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-customer-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-gateway-arn))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-id))
      (common-lisp:list
       (common-lisp:cons "LinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-customer-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-customer-gateway-response common-lisp:nil
                       ((customer-gateway-association :initarg
                         :customer-gateway-association :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-gateway-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-customer-gateway-response-customer-gateway-association
                         :shape "CustomerGatewayAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-customer-gateway-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-customer-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-customer-gateway-response
                    'make-associate-customer-gateway-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-customer-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-customer-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-gateway-association))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-customer-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-link-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-associate-link-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (device-id :initarg :device-id :initform
                         (common-lisp:error ":device-id is required") :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-associate-link-request-device-id :shape
                         "DeviceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (link-id :initarg :link-id :initform
                         (common-lisp:error ":link-id is required") :type
                         (common-lisp:or link-id common-lisp:null) :accessor
                         struct-shape-associate-link-request-link-id :shape
                         "LinkId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-link-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-link-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-link-request 'make-associate-link-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-link-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-link-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-id))
      (common-lisp:list
       (common-lisp:cons "LinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-link-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-link-response common-lisp:nil
                       ((link-association :initarg :link-association :initform
                         common-lisp:nil :type
                         (common-lisp:or link-association common-lisp:null)
                         :accessor
                         struct-shape-associate-link-response-link-association
                         :shape "LinkAssociation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-link-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-link-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-link-response 'make-associate-link-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-link-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-link-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-association))
      (common-lisp:list
       (common-lisp:cons "LinkAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-link-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-transit-gateway-connect-peer-request
                       common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-associate-transit-gateway-connect-peer-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (transit-gateway-connect-peer-arn :initarg
                         :transit-gateway-connect-peer-arn :initform
                         (common-lisp:error
                          ":transit-gateway-connect-peer-arn is required")
                         :type
                         (common-lisp:or transit-gateway-connect-peer-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-transit-gateway-connect-peer-request-transit-gateway-connect-peer-arn
                         :shape "TransitGatewayConnectPeerArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (device-id :initarg :device-id :initform
                         (common-lisp:error ":device-id is required") :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-associate-transit-gateway-connect-peer-request-device-id
                         :shape "DeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (link-id :initarg :link-id :initform common-lisp:nil
                         :type (common-lisp:or link-id common-lisp:null)
                         :accessor
                         struct-shape-associate-transit-gateway-connect-peer-request-link-id
                         :shape "LinkId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-transit-gateway-connect-peer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-transit-gateway-connect-peer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-transit-gateway-connect-peer-request
                    'make-associate-transit-gateway-connect-peer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-transit-gateway-connect-peer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-transit-gateway-connect-peer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-connect-peer-arn))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayConnectPeerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-id))
      (common-lisp:list
       (common-lisp:cons "LinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-transit-gateway-connect-peer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-transit-gateway-connect-peer-response
                       common-lisp:nil
                       ((transit-gateway-connect-peer-association :initarg
                         :transit-gateway-connect-peer-association :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          transit-gateway-connect-peer-association
                          common-lisp:null)
                         :accessor
                         struct-shape-associate-transit-gateway-connect-peer-response-transit-gateway-connect-peer-association
                         :shape "TransitGatewayConnectPeerAssociation"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-transit-gateway-connect-peer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-transit-gateway-connect-peer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-transit-gateway-connect-peer-response
                    'make-associate-transit-gateway-connect-peer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-transit-gateway-connect-peer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-transit-gateway-connect-peer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-connect-peer-association))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayConnectPeerAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-transit-gateway-connect-peer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attachment common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor struct-shape-attachment-core-network-id
                         :shape "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (core-network-arn :initarg :core-network-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-arn common-lisp:null)
                         :accessor struct-shape-attachment-core-network-arn
                         :shape "CoreNetworkArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attachment-id :initarg :attachment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor struct-shape-attachment-attachment-id :shape
                         "AttachmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-account-id :initarg :owner-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor struct-shape-attachment-owner-account-id
                         :shape "AWSAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attachment-type :initarg :attachment-type :initform
                         common-lisp:nil :type
                         (common-lisp:or attachment-type common-lisp:null)
                         :accessor struct-shape-attachment-attachment-type
                         :shape "AttachmentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or attachment-state common-lisp:null)
                         :accessor struct-shape-attachment-state :shape
                         "AttachmentState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edge-location :initarg :edge-location :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor struct-shape-attachment-edge-location :shape
                         "ExternalRegionCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor struct-shape-attachment-resource-arn :shape
                         "ResourceArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attachment-policy-rule-number :initarg
                         :attachment-policy-rule-number :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-attachment-attachment-policy-rule-number
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segment-name :initarg :segment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-attachment-segment-name :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-attachment-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (proposed-segment-change :initarg
                         :proposed-segment-change :initform common-lisp:nil
                         :type
                         (common-lisp:or proposed-segment-change
                                         common-lisp:null)
                         :accessor
                         struct-shape-attachment-proposed-segment-change :shape
                         "ProposedSegmentChange" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-attachment-created-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-attachment-updated-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attachment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'attachment 'make-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-arn))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-type))
      (common-lisp:list
       (common-lisp:cons "AttachmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-location))
      (common-lisp:list
       (common-lisp:cons "EdgeLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachment-policy-rule-number))
      (common-lisp:list
       (common-lisp:cons "AttachmentPolicyRuleNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-name))
      (common-lisp:list
       (common-lisp:cons "SegmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proposed-segment-change))
      (common-lisp:list
       (common-lisp:cons "ProposedSegmentChange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachment))
   common-lisp:nil))
(common-lisp:deftype attachment-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attachment-list ()
   '(trivial-types:proper-list attachment))
 (common-lisp:defun make-attachment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attachment-state () 'common-lisp:string)
(common-lisp:deftype attachment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bandwidth common-lisp:nil
                       ((upload-speed :initarg :upload-speed :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-bandwidth-upload-speed :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (download-speed :initarg :download-speed :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-bandwidth-download-speed :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bandwidth
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bandwidth
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bandwidth 'make-bandwidth))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bandwidth))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bandwidth))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-speed))
      (common-lisp:list
       (common-lisp:cons "UploadSpeed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-speed))
      (common-lisp:list
       (common-lisp:cons "DownloadSpeed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bandwidth))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bgp-options common-lisp:nil
                       ((peer-asn :initarg :peer-asn :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-bgp-options-peer-asn :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-bgp-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'bgp-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'bgp-options 'make-bgp-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bgp-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bgp-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-asn))
      (common-lisp:list
       (common-lisp:cons "PeerAsn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bgp-options))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype change-action () 'common-lisp:string)
(common-lisp:deftype change-set-state () 'common-lisp:string)
(common-lisp:deftype change-status () 'common-lisp:string)
(common-lisp:deftype change-type () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (networkmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass connect-attachment common-lisp:nil
                       ((attachment :initarg :attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or attachment common-lisp:null) :accessor
                         struct-shape-connect-attachment-attachment :shape
                         "Attachment" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (transport-attachment-id :initarg
                         :transport-attachment-id :initform common-lisp:nil
                         :type (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-connect-attachment-transport-attachment-id
                         :shape "AttachmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (options :initarg :options :initform common-lisp:nil
                         :type
                         (common-lisp:or connect-attachment-options
                                         common-lisp:null)
                         :accessor struct-shape-connect-attachment-options
                         :shape "ConnectAttachmentOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connect-attachment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connect-attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connect-attachment 'make-connect-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connect-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connect-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "Attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transport-attachment-id))
      (common-lisp:list
       (common-lisp:cons "TransportAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connect-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connect-attachment-options common-lisp:nil
                       ((protocol :initarg :protocol :initform common-lisp:nil
                         :type
                         (common-lisp:or tunnel-protocol common-lisp:null)
                         :accessor
                         struct-shape-connect-attachment-options-protocol
                         :shape "TunnelProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connect-attachment-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connect-attachment-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connect-attachment-options
                    'make-connect-attachment-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connect-attachment-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connect-attachment-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connect-attachment-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connect-peer common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor struct-shape-connect-peer-core-network-id
                         :shape "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connect-attachment-id :initarg :connect-attachment-id
                         :initform common-lisp:nil :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-connect-peer-connect-attachment-id :shape
                         "AttachmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connect-peer-id :initarg :connect-peer-id :initform
                         common-lisp:nil :type
                         (common-lisp:or connect-peer-id common-lisp:null)
                         :accessor struct-shape-connect-peer-connect-peer-id
                         :shape "ConnectPeerId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edge-location :initarg :edge-location :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor struct-shape-connect-peer-edge-location
                         :shape "ExternalRegionCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or connect-peer-state common-lisp:null)
                         :accessor struct-shape-connect-peer-state :shape
                         "ConnectPeerState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-connect-peer-created-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or connect-peer-configuration
                                         common-lisp:null)
                         :accessor struct-shape-connect-peer-configuration
                         :shape "ConnectPeerConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-connect-peer-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-arn :initarg :subnet-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-arn common-lisp:null) :accessor
                         struct-shape-connect-peer-subnet-arn :shape
                         "SubnetArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connect-peer
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connect-peer
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'connect-peer 'make-connect-peer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connect-peer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connect-peer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-attachment-id))
      (common-lisp:list
       (common-lisp:cons "ConnectAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-peer-id))
      (common-lisp:list
       (common-lisp:cons "ConnectPeerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-location))
      (common-lisp:list
       (common-lisp:cons "EdgeLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-arn))
      (common-lisp:list
       (common-lisp:cons "SubnetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connect-peer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connect-peer-association common-lisp:nil
                       ((connect-peer-id :initarg :connect-peer-id :initform
                         common-lisp:nil :type
                         (common-lisp:or connect-peer-id common-lisp:null)
                         :accessor
                         struct-shape-connect-peer-association-connect-peer-id
                         :shape "ConnectPeerId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-network-id :initarg :global-network-id
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-connect-peer-association-global-network-id
                         :shape "GlobalNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-id :initarg :device-id :initform
                         common-lisp:nil :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-connect-peer-association-device-id :shape
                         "DeviceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (link-id :initarg :link-id :initform common-lisp:nil
                         :type (common-lisp:or link-id common-lisp:null)
                         :accessor
                         struct-shape-connect-peer-association-link-id :shape
                         "LinkId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or connect-peer-association-state
                                         common-lisp:null)
                         :accessor struct-shape-connect-peer-association-state
                         :shape "ConnectPeerAssociationState" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connect-peer-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connect-peer-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connect-peer-association 'make-connect-peer-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connect-peer-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connect-peer-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-peer-id))
      (common-lisp:list
       (common-lisp:cons "ConnectPeerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-id))
      (common-lisp:list
       (common-lisp:cons "LinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connect-peer-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connect-peer-association-list ()
   '(trivial-types:proper-list connect-peer-association))
 (common-lisp:defun make-connect-peer-association-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            connect-peer-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connect-peer-association-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connect-peer-bgp-configuration common-lisp:nil
                       ((core-network-asn :initarg :core-network-asn :initform
                         common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-connect-peer-bgp-configuration-core-network-asn
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (peer-asn :initarg :peer-asn :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-connect-peer-bgp-configuration-peer-asn
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (core-network-address :initarg :core-network-address
                         :initform common-lisp:nil :type
                         (common-lisp:or ipaddress common-lisp:null) :accessor
                         struct-shape-connect-peer-bgp-configuration-core-network-address
                         :shape "IPAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (peer-address :initarg :peer-address :initform
                         common-lisp:nil :type
                         (common-lisp:or ipaddress common-lisp:null) :accessor
                         struct-shape-connect-peer-bgp-configuration-peer-address
                         :shape "IPAddress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connect-peer-bgp-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'connect-peer-bgp-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connect-peer-bgp-configuration
                    'make-connect-peer-bgp-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connect-peer-bgp-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connect-peer-bgp-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-asn))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkAsn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-asn))
      (common-lisp:list
       (common-lisp:cons "PeerAsn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'core-network-address))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-address))
      (common-lisp:list
       (common-lisp:cons "PeerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connect-peer-bgp-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connect-peer-bgp-configuration-list ()
   '(trivial-types:proper-list connect-peer-bgp-configuration))
 (common-lisp:defun make-connect-peer-bgp-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            connect-peer-bgp-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass connect-peer-configuration common-lisp:nil
                       ((core-network-address :initarg :core-network-address
                         :initform common-lisp:nil :type
                         (common-lisp:or ipaddress common-lisp:null) :accessor
                         struct-shape-connect-peer-configuration-core-network-address
                         :shape "IPAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (peer-address :initarg :peer-address :initform
                         common-lisp:nil :type
                         (common-lisp:or ipaddress common-lisp:null) :accessor
                         struct-shape-connect-peer-configuration-peer-address
                         :shape "IPAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inside-cidr-blocks :initarg :inside-cidr-blocks
                         :initform common-lisp:nil :type
                         (common-lisp:or constrained-string-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-connect-peer-configuration-inside-cidr-blocks
                         :shape "ConstrainedStringList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (protocol :initarg :protocol :initform common-lisp:nil
                         :type
                         (common-lisp:or tunnel-protocol common-lisp:null)
                         :accessor
                         struct-shape-connect-peer-configuration-protocol
                         :shape "TunnelProtocol" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bgp-configurations :initarg :bgp-configurations
                         :initform common-lisp:nil :type
                         (common-lisp:or connect-peer-bgp-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-connect-peer-configuration-bgp-configurations
                         :shape "ConnectPeerBgpConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connect-peer-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connect-peer-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connect-peer-configuration
                    'make-connect-peer-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connect-peer-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connect-peer-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'core-network-address))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-address))
      (common-lisp:list
       (common-lisp:cons "PeerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inside-cidr-blocks))
      (common-lisp:list
       (common-lisp:cons "InsideCidrBlocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-configurations))
      (common-lisp:list
       (common-lisp:cons "BgpConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connect-peer-configuration))
   common-lisp:nil))
(common-lisp:deftype connect-peer-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connect-peer-id-list ()
   '(trivial-types:proper-list connect-peer-id))
 (common-lisp:defun make-connect-peer-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connect-peer-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connect-peer-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connect-peer-summary common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-connect-peer-summary-core-network-id
                         :shape "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connect-attachment-id :initarg :connect-attachment-id
                         :initform common-lisp:nil :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-connect-peer-summary-connect-attachment-id
                         :shape "AttachmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connect-peer-id :initarg :connect-peer-id :initform
                         common-lisp:nil :type
                         (common-lisp:or connect-peer-id common-lisp:null)
                         :accessor
                         struct-shape-connect-peer-summary-connect-peer-id
                         :shape "ConnectPeerId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edge-location :initarg :edge-location :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor
                         struct-shape-connect-peer-summary-edge-location :shape
                         "ExternalRegionCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connect-peer-state :initarg :connect-peer-state
                         :initform common-lisp:nil :type
                         (common-lisp:or connect-peer-state common-lisp:null)
                         :accessor
                         struct-shape-connect-peer-summary-connect-peer-state
                         :shape "ConnectPeerState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-connect-peer-summary-created-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-connect-peer-summary-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-arn :initarg :subnet-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-arn common-lisp:null) :accessor
                         struct-shape-connect-peer-summary-subnet-arn :shape
                         "SubnetArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connect-peer-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connect-peer-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connect-peer-summary 'make-connect-peer-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connect-peer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connect-peer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-attachment-id))
      (common-lisp:list
       (common-lisp:cons "ConnectAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-peer-id))
      (common-lisp:list
       (common-lisp:cons "ConnectPeerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-location))
      (common-lisp:list
       (common-lisp:cons "EdgeLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-peer-state))
      (common-lisp:list
       (common-lisp:cons "ConnectPeerState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-arn))
      (common-lisp:list
       (common-lisp:cons "SubnetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connect-peer-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connect-peer-summary-list ()
   '(trivial-types:proper-list connect-peer-summary))
 (common-lisp:defun make-connect-peer-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connect-peer-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass connection common-lisp:nil
                       ((connection-id :initarg :connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor struct-shape-connection-connection-id :shape
                         "ConnectionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-arn :initarg :connection-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor struct-shape-connection-connection-arn
                         :shape "ConnectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-network-id :initarg :global-network-id
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor struct-shape-connection-global-network-id
                         :shape "GlobalNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-id :initarg :device-id :initform
                         common-lisp:nil :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-connection-device-id :shape "DeviceId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connected-device-id :initarg :connected-device-id
                         :initform common-lisp:nil :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-connection-connected-device-id :shape
                         "DeviceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (link-id :initarg :link-id :initform common-lisp:nil
                         :type (common-lisp:or link-id common-lisp:null)
                         :accessor struct-shape-connection-link-id :shape
                         "LinkId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connected-link-id :initarg :connected-link-id
                         :initform common-lisp:nil :type
                         (common-lisp:or link-id common-lisp:null) :accessor
                         struct-shape-connection-connected-link-id :shape
                         "LinkId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-connection-description :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-connection-created-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or connection-state common-lisp:null)
                         :accessor struct-shape-connection-state :shape
                         "ConnectionState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-connection-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connection
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'connection 'make-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "ConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connected-device-id))
      (common-lisp:list
       (common-lisp:cons "ConnectedDeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-id))
      (common-lisp:list
       (common-lisp:cons "LinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connected-link-id))
      (common-lisp:list
       (common-lisp:cons "ConnectedLinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection))
   common-lisp:nil))
(common-lisp:deftype connection-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connection-health common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or connection-type common-lisp:null)
                         :accessor struct-shape-connection-health-type :shape
                         "ConnectionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or connection-status common-lisp:null)
                         :accessor struct-shape-connection-health-status :shape
                         "ConnectionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-connection-health-timestamp :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-connection-health
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'connection-health
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'connection-health 'make-connection-health))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection-health))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection-health))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection-health))
   common-lisp:nil))
(common-lisp:deftype connection-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connection-id-list ()
   '(trivial-types:proper-list connection-id))
 (common-lisp:defun make-connection-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype connection-list ()
   '(trivial-types:proper-list connection))
 (common-lisp:defun make-connection-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-state () 'common-lisp:string)
(common-lisp:deftype connection-status () 'common-lisp:string)
(common-lisp:deftype connection-type () 'common-lisp:string)
(common-lisp:deftype constrained-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype constrained-string-list ()
   '(trivial-types:proper-list constrained-string))
 (common-lisp:defun make-constrained-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list constrained-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass core-network common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor struct-shape-core-network-global-network-id
                         :shape "GlobalNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor struct-shape-core-network-core-network-id
                         :shape "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (core-network-arn :initarg :core-network-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-arn common-lisp:null)
                         :accessor struct-shape-core-network-core-network-arn
                         :shape "CoreNetworkArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-core-network-description :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-core-network-created-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or core-network-state common-lisp:null)
                         :accessor struct-shape-core-network-state :shape
                         "CoreNetworkState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segments :initarg :segments :initform common-lisp:nil
                         :type
                         (common-lisp:or core-network-segment-list
                                         common-lisp:null)
                         :accessor struct-shape-core-network-segments :shape
                         "CoreNetworkSegmentList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edges :initarg :edges :initform common-lisp:nil :type
                         (common-lisp:or core-network-edge-list
                                         common-lisp:null)
                         :accessor struct-shape-core-network-edges :shape
                         "CoreNetworkEdgeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-core-network-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-core-network
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'core-network
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'core-network 'make-core-network))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input core-network))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input core-network))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-arn))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segments))
      (common-lisp:list
       (common-lisp:cons "Segments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edges))
      (common-lisp:list
       (common-lisp:cons "Edges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input core-network))
   common-lisp:nil))
(common-lisp:deftype core-network-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass core-network-change common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or change-type common-lisp:null)
                         :accessor struct-shape-core-network-change-type :shape
                         "ChangeType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or change-action common-lisp:null)
                         :accessor struct-shape-core-network-change-action
                         :shape "ChangeAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-core-network-change-identifier
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (previous-values :initarg :previous-values :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-change-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-previous-values
                         :shape "CoreNetworkChangeValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (new-values :initarg :new-values :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-change-values
                                         common-lisp:null)
                         :accessor struct-shape-core-network-change-new-values
                         :shape "CoreNetworkChangeValues" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (identifier-path :initarg :identifier-path :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-identifier-path
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-core-network-change
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'core-network-change
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'core-network-change 'make-core-network-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input core-network-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input core-network-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'previous-values))
      (common-lisp:list
       (common-lisp:cons "PreviousValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-values))
      (common-lisp:list
       (common-lisp:cons "NewValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier-path))
      (common-lisp:list
       (common-lisp:cons "IdentifierPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input core-network-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass core-network-change-event common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or change-type common-lisp:null)
                         :accessor struct-shape-core-network-change-event-type
                         :shape "ChangeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or change-action common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-event-action :shape
                         "ChangeAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier-path :initarg :identifier-path :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-event-identifier-path
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-time :initarg :event-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-core-network-change-event-event-time
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or change-status common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-event-status :shape
                         "ChangeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or core-network-change-event-values
                                         common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-event-values :shape
                         "CoreNetworkChangeEventValues" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-core-network-change-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'core-network-change-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'core-network-change-event
                    'make-core-network-change-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          core-network-change-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          core-network-change-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier-path))
      (common-lisp:list
       (common-lisp:cons "IdentifierPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time))
      (common-lisp:list
       (common-lisp:cons "EventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          core-network-change-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype core-network-change-event-list ()
   '(trivial-types:proper-list core-network-change-event))
 (common-lisp:defun make-core-network-change-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            core-network-change-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass core-network-change-event-values common-lisp:nil
                       ((edge-location :initarg :edge-location :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-event-values-edge-location
                         :shape "ExternalRegionCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segment-name :initarg :segment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-event-values-segment-name
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (attachment-id :initarg :attachment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-event-values-attachment-id
                         :shape "AttachmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cidr :initarg :cidr :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-event-values-cidr
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-core-network-change-event-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'core-network-change-event-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'core-network-change-event-values
                    'make-core-network-change-event-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          core-network-change-event-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          core-network-change-event-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-location))
      (common-lisp:list
       (common-lisp:cons "EdgeLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-name))
      (common-lisp:list
       (common-lisp:cons "SegmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "AttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          core-network-change-event-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype core-network-change-list ()
   '(trivial-types:proper-list core-network-change))
 (common-lisp:defun make-core-network-change-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list core-network-change))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass core-network-change-values common-lisp:nil
                       ((segment-name :initarg :segment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-values-segment-name
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edge-locations :initarg :edge-locations :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-values-edge-locations
                         :shape "ExternalRegionCodeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (asn :initarg :asn :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-core-network-change-values-asn :shape
                         "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cidr :initarg :cidr :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-core-network-change-values-cidr
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-identifier :initarg
                         :destination-identifier :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-values-destination-identifier
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inside-cidr-blocks :initarg :inside-cidr-blocks
                         :initform common-lisp:nil :type
                         (common-lisp:or constrained-string-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-values-inside-cidr-blocks
                         :shape "ConstrainedStringList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (shared-segments :initarg :shared-segments :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-core-network-change-values-shared-segments
                         :shape "ConstrainedStringList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-core-network-change-values
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'core-network-change-values
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'core-network-change-values
                    'make-core-network-change-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          core-network-change-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          core-network-change-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-name))
      (common-lisp:list
       (common-lisp:cons "SegmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-locations))
      (common-lisp:list
       (common-lisp:cons "EdgeLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "Asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-identifier))
      (common-lisp:list
       (common-lisp:cons "DestinationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inside-cidr-blocks))
      (common-lisp:list
       (common-lisp:cons "InsideCidrBlocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-segments))
      (common-lisp:list
       (common-lisp:cons "SharedSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          core-network-change-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass core-network-edge common-lisp:nil
                       ((edge-location :initarg :edge-location :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor struct-shape-core-network-edge-edge-location
                         :shape "ExternalRegionCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (asn :initarg :asn :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-core-network-edge-asn :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (inside-cidr-blocks :initarg :inside-cidr-blocks
                         :initform common-lisp:nil :type
                         (common-lisp:or constrained-string-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-core-network-edge-inside-cidr-blocks
                         :shape "ConstrainedStringList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-core-network-edge
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'core-network-edge
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'core-network-edge 'make-core-network-edge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input core-network-edge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input core-network-edge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-location))
      (common-lisp:list
       (common-lisp:cons "EdgeLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asn))
      (common-lisp:list
       (common-lisp:cons "Asn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inside-cidr-blocks))
      (common-lisp:list
       (common-lisp:cons "InsideCidrBlocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input core-network-edge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype core-network-edge-list ()
   '(trivial-types:proper-list core-network-edge))
 (common-lisp:defun make-core-network-edge-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list core-network-edge))
   aws-sdk/generator/shape::members))
(common-lisp:deftype core-network-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass core-network-policy common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-core-network-policy-core-network-id
                         :shape "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-version-id :initarg :policy-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-core-network-policy-policy-version-id
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or core-network-policy-alias
                                         common-lisp:null)
                         :accessor struct-shape-core-network-policy-alias
                         :shape "CoreNetworkPolicyAlias" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-core-network-policy-description
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-core-network-policy-created-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (change-set-state :initarg :change-set-state :initform
                         common-lisp:nil :type
                         (common-lisp:or change-set-state common-lisp:null)
                         :accessor
                         struct-shape-core-network-policy-change-set-state
                         :shape "ChangeSetState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-errors :initarg :policy-errors :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-policy-error-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-core-network-policy-policy-errors :shape
                         "CoreNetworkPolicyErrorList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-policy-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-core-network-policy-policy-document
                         :shape "CoreNetworkPolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-core-network-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'core-network-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'core-network-policy 'make-core-network-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input core-network-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input core-network-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-id))
      (common-lisp:list
       (common-lisp:cons "PolicyVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-state))
      (common-lisp:list
       (common-lisp:cons "ChangeSetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-errors))
      (common-lisp:list
       (common-lisp:cons "PolicyErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input core-network-policy))
   common-lisp:nil))
(common-lisp:deftype core-network-policy-alias () 'common-lisp:string)
(common-lisp:deftype core-network-policy-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass core-network-policy-error common-lisp:nil
                       ((error-code :initarg :error-code :initform
                         (common-lisp:error ":error-code is required") :type
                         (common-lisp:or server-side-string common-lisp:null)
                         :accessor
                         struct-shape-core-network-policy-error-error-code
                         :shape "ServerSideString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or server-side-string common-lisp:null)
                         :accessor
                         struct-shape-core-network-policy-error-message :shape
                         "ServerSideString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or server-side-string common-lisp:null)
                         :accessor struct-shape-core-network-policy-error-path
                         :shape "ServerSideString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-core-network-policy-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'core-network-policy-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'core-network-policy-error
                    'make-core-network-policy-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          core-network-policy-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          core-network-policy-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          core-network-policy-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype core-network-policy-error-list ()
   '(trivial-types:proper-list core-network-policy-error))
 (common-lisp:defun make-core-network-policy-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            core-network-policy-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition core-network-policy-exception
     (networkmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       core-network-policy-exception-message)
      (errors :initarg :errors :initform common-lisp:nil :reader
       core-network-policy-exception-errors)))
 (common-lisp:export
  (common-lisp:list 'core-network-policy-exception
                    'core-network-policy-exception-message
                    'core-network-policy-exception-errors)))
(common-lisp:progn
 (common-lisp:defclass core-network-policy-version common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-core-network-policy-version-core-network-id
                         :shape "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-version-id :initarg :policy-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-core-network-policy-version-policy-version-id
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or core-network-policy-alias
                                         common-lisp:null)
                         :accessor
                         struct-shape-core-network-policy-version-alias :shape
                         "CoreNetworkPolicyAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-core-network-policy-version-description
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-core-network-policy-version-created-at
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (change-set-state :initarg :change-set-state :initform
                         common-lisp:nil :type
                         (common-lisp:or change-set-state common-lisp:null)
                         :accessor
                         struct-shape-core-network-policy-version-change-set-state
                         :shape "ChangeSetState" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-core-network-policy-version
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'core-network-policy-version
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'core-network-policy-version
                    'make-core-network-policy-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          core-network-policy-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          core-network-policy-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-id))
      (common-lisp:list
       (common-lisp:cons "PolicyVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-state))
      (common-lisp:list
       (common-lisp:cons "ChangeSetState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          core-network-policy-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype core-network-policy-version-list ()
   '(trivial-types:proper-list core-network-policy-version))
 (common-lisp:defun make-core-network-policy-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            core-network-policy-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass core-network-segment common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-core-network-segment-name
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edge-locations :initarg :edge-locations :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-core-network-segment-edge-locations
                         :shape "ExternalRegionCodeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (shared-segments :initarg :shared-segments :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-core-network-segment-shared-segments
                         :shape "ConstrainedStringList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-core-network-segment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'core-network-segment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'core-network-segment 'make-core-network-segment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input core-network-segment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input core-network-segment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-locations))
      (common-lisp:list
       (common-lisp:cons "EdgeLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-segments))
      (common-lisp:list
       (common-lisp:cons "SharedSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input core-network-segment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass core-network-segment-edge-identifier common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-core-network-segment-edge-identifier-core-network-id
                         :shape "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segment-name :initarg :segment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-core-network-segment-edge-identifier-segment-name
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edge-location :initarg :edge-location :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor
                         struct-shape-core-network-segment-edge-identifier-edge-location
                         :shape "ExternalRegionCode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-core-network-segment-edge-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'core-network-segment-edge-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'core-network-segment-edge-identifier
                    'make-core-network-segment-edge-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          core-network-segment-edge-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          core-network-segment-edge-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-name))
      (common-lisp:list
       (common-lisp:cons "SegmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-location))
      (common-lisp:list
       (common-lisp:cons "EdgeLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          core-network-segment-edge-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype core-network-segment-list ()
   '(trivial-types:proper-list core-network-segment))
 (common-lisp:defun make-core-network-segment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list core-network-segment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype core-network-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass core-network-summary common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-core-network-summary-core-network-id
                         :shape "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (core-network-arn :initarg :core-network-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-arn common-lisp:null)
                         :accessor
                         struct-shape-core-network-summary-core-network-arn
                         :shape "CoreNetworkArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-network-id :initarg :global-network-id
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-core-network-summary-global-network-id
                         :shape "GlobalNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-account-id :initarg :owner-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor
                         struct-shape-core-network-summary-owner-account-id
                         :shape "AWSAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or core-network-state common-lisp:null)
                         :accessor struct-shape-core-network-summary-state
                         :shape "CoreNetworkState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-core-network-summary-description :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-core-network-summary-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-core-network-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'core-network-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'core-network-summary 'make-core-network-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input core-network-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input core-network-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-arn))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input core-network-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype core-network-summary-list ()
   '(trivial-types:proper-list core-network-summary))
 (common-lisp:defun make-core-network-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list core-network-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-connect-attachment-request common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-create-connect-attachment-request-core-network-id
                         :shape "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edge-location :initarg :edge-location :initform
                         (common-lisp:error ":edge-location is required") :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor
                         struct-shape-create-connect-attachment-request-edge-location
                         :shape "ExternalRegionCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transport-attachment-id :initarg
                         :transport-attachment-id :initform
                         (common-lisp:error
                          ":transport-attachment-id is required")
                         :type (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-create-connect-attachment-request-transport-attachment-id
                         :shape "AttachmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or connect-attachment-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-connect-attachment-request-options
                         :shape "ConnectAttachmentOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-connect-attachment-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-connect-attachment-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-connect-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-connect-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-connect-attachment-request
                    'make-create-connect-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-location))
      (common-lisp:list
       (common-lisp:cons "EdgeLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transport-attachment-id))
      (common-lisp:list
       (common-lisp:cons "TransportAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connect-attachment-response common-lisp:nil
                       ((connect-attachment :initarg :connect-attachment
                         :initform common-lisp:nil :type
                         (common-lisp:or connect-attachment common-lisp:null)
                         :accessor
                         struct-shape-create-connect-attachment-response-connect-attachment
                         :shape "ConnectAttachment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-connect-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-connect-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-connect-attachment-response
                    'make-create-connect-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-attachment))
      (common-lisp:list
       (common-lisp:cons "ConnectAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connect-peer-request common-lisp:nil
                       ((connect-attachment-id :initarg :connect-attachment-id
                         :initform
                         (common-lisp:error
                          ":connect-attachment-id is required")
                         :type (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-create-connect-peer-request-connect-attachment-id
                         :shape "AttachmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (core-network-address :initarg :core-network-address
                         :initform common-lisp:nil :type
                         (common-lisp:or ipaddress common-lisp:null) :accessor
                         struct-shape-create-connect-peer-request-core-network-address
                         :shape "IPAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (peer-address :initarg :peer-address :initform
                         (common-lisp:error ":peer-address is required") :type
                         (common-lisp:or ipaddress common-lisp:null) :accessor
                         struct-shape-create-connect-peer-request-peer-address
                         :shape "IPAddress" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bgp-options :initarg :bgp-options :initform
                         common-lisp:nil :type
                         (common-lisp:or bgp-options common-lisp:null)
                         :accessor
                         struct-shape-create-connect-peer-request-bgp-options
                         :shape "BgpOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (inside-cidr-blocks :initarg :inside-cidr-blocks
                         :initform common-lisp:nil :type
                         (common-lisp:or constrained-string-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-connect-peer-request-inside-cidr-blocks
                         :shape "ConstrainedStringList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-connect-peer-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-connect-peer-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-arn :initarg :subnet-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-arn common-lisp:null) :accessor
                         struct-shape-create-connect-peer-request-subnet-arn
                         :shape "SubnetArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-connect-peer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-connect-peer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-connect-peer-request
                    'make-create-connect-peer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-peer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-peer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-attachment-id))
      (common-lisp:list
       (common-lisp:cons "ConnectAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'core-network-address))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peer-address))
      (common-lisp:list
       (common-lisp:cons "PeerAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bgp-options))
      (common-lisp:list
       (common-lisp:cons "BgpOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inside-cidr-blocks))
      (common-lisp:list
       (common-lisp:cons "InsideCidrBlocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-arn))
      (common-lisp:list
       (common-lisp:cons "SubnetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-peer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connect-peer-response common-lisp:nil
                       ((connect-peer :initarg :connect-peer :initform
                         common-lisp:nil :type
                         (common-lisp:or connect-peer common-lisp:null)
                         :accessor
                         struct-shape-create-connect-peer-response-connect-peer
                         :shape "ConnectPeer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-connect-peer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-connect-peer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-connect-peer-response
                    'make-create-connect-peer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-peer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-peer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-peer))
      (common-lisp:list
       (common-lisp:cons "ConnectPeer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connect-peer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-create-connection-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (device-id :initarg :device-id :initform
                         (common-lisp:error ":device-id is required") :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-create-connection-request-device-id
                         :shape "DeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connected-device-id :initarg :connected-device-id
                         :initform
                         (common-lisp:error ":connected-device-id is required")
                         :type (common-lisp:or device-id common-lisp:null)
                         :accessor
                         struct-shape-create-connection-request-connected-device-id
                         :shape "DeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (link-id :initarg :link-id :initform common-lisp:nil
                         :type (common-lisp:or link-id common-lisp:null)
                         :accessor
                         struct-shape-create-connection-request-link-id :shape
                         "LinkId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connected-link-id :initarg :connected-link-id
                         :initform common-lisp:nil :type
                         (common-lisp:or link-id common-lisp:null) :accessor
                         struct-shape-create-connection-request-connected-link-id
                         :shape "LinkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-create-connection-request-description
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-connection-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-connection-request
                    'make-create-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connected-device-id))
      (common-lisp:list
       (common-lisp:cons "ConnectedDeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-id))
      (common-lisp:list
       (common-lisp:cons "LinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connected-link-id))
      (common-lisp:list
       (common-lisp:cons "ConnectedLinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-response common-lisp:nil
                       ((connection :initarg :connection :initform
                         common-lisp:nil :type
                         (common-lisp:or connection common-lisp:null) :accessor
                         struct-shape-create-connection-response-connection
                         :shape "Connection" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-connection-response
                    'make-create-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-core-network-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-create-core-network-request-global-network-id
                         :shape "GlobalNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-create-core-network-request-description
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-core-network-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-policy-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-core-network-request-policy-document
                         :shape "CoreNetworkPolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-core-network-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-core-network-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-core-network-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-core-network-request
                    'make-create-core-network-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-core-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-core-network-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-core-network-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-core-network-response common-lisp:nil
                       ((core-network :initarg :core-network :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network common-lisp:null)
                         :accessor
                         struct-shape-create-core-network-response-core-network
                         :shape "CoreNetwork" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-core-network-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-core-network-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-core-network-response
                    'make-create-core-network-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-core-network-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-core-network-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network))
      (common-lisp:list
       (common-lisp:cons "CoreNetwork"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-core-network-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-device-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-create-device-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (awslocation :initarg :awslocation :initform
                         common-lisp:nil :type
                         (common-lisp:or awslocation common-lisp:null)
                         :accessor
                         struct-shape-create-device-request-awslocation :shape
                         "AWSLocation" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-create-device-request-description :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-create-device-request-type
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vendor :initarg :vendor :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-create-device-request-vendor
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model :initarg :model :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-create-device-request-model
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serial-number :initarg :serial-number :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-create-device-request-serial-number
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor struct-shape-create-device-request-location
                         :shape "Location" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (site-id :initarg :site-id :initform common-lisp:nil
                         :type (common-lisp:or site-id common-lisp:null)
                         :accessor struct-shape-create-device-request-site-id
                         :shape "SiteId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-device-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-device-request 'make-create-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'awslocation))
      (common-lisp:list
       (common-lisp:cons "AWSLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor))
      (common-lisp:list
       (common-lisp:cons "Vendor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "Model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-id))
      (common-lisp:list
       (common-lisp:cons "SiteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-device-response common-lisp:nil
                       ((device :initarg :device :initform common-lisp:nil
                         :type (common-lisp:or device common-lisp:null)
                         :accessor struct-shape-create-device-response-device
                         :shape "Device" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-device-response 'make-create-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "Device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-global-network-request common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-create-global-network-request-description
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-global-network-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-global-network-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-global-network-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-global-network-request
                    'make-create-global-network-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-network-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-network-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-global-network-response common-lisp:nil
                       ((global-network :initarg :global-network :initform
                         common-lisp:nil :type
                         (common-lisp:or global-network common-lisp:null)
                         :accessor
                         struct-shape-create-global-network-response-global-network
                         :shape "GlobalNetwork" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-global-network-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-global-network-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-global-network-response
                    'make-create-global-network-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-global-network-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-global-network-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network))
      (common-lisp:list
       (common-lisp:cons "GlobalNetwork"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-global-network-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-link-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-create-link-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-create-link-request-description
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-create-link-request-type :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bandwidth :initarg :bandwidth :initform
                         (common-lisp:error ":bandwidth is required") :type
                         (common-lisp:or bandwidth common-lisp:null) :accessor
                         struct-shape-create-link-request-bandwidth :shape
                         "Bandwidth" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider :initarg :provider :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-create-link-request-provider
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (site-id :initarg :site-id :initform
                         (common-lisp:error ":site-id is required") :type
                         (common-lisp:or site-id common-lisp:null) :accessor
                         struct-shape-create-link-request-site-id :shape
                         "SiteId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-link-request-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-link-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-link-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-link-request 'make-create-link-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-link-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-link-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "Bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-id))
      (common-lisp:list
       (common-lisp:cons "SiteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-link-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-link-response common-lisp:nil
                       ((link :initarg :link :initform common-lisp:nil :type
                         (common-lisp:or link common-lisp:null) :accessor
                         struct-shape-create-link-response-link :shape "Link"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-link-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-link-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-link-response 'make-create-link-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-link-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-link-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link))
      (common-lisp:list
       (common-lisp:cons "Link"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-link-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-site-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-create-site-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-create-site-request-description
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor struct-shape-create-site-request-location
                         :shape "Location" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-site-request-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-site-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-site-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-site-request 'make-create-site-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-site-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-site-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-site-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-site-response common-lisp:nil
                       ((site :initarg :site :initform common-lisp:nil :type
                         (common-lisp:or site common-lisp:null) :accessor
                         struct-shape-create-site-response-site :shape "Site"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-site-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-site-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-site-response 'make-create-site-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-site-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-site-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site))
      (common-lisp:list
       (common-lisp:cons "Site"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-site-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-site-to-site-vpn-attachment-request
                       common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-create-site-to-site-vpn-attachment-request-core-network-id
                         :shape "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpn-connection-arn :initarg :vpn-connection-arn
                         :initform
                         (common-lisp:error ":vpn-connection-arn is required")
                         :type
                         (common-lisp:or vpn-connection-arn common-lisp:null)
                         :accessor
                         struct-shape-create-site-to-site-vpn-attachment-request-vpn-connection-arn
                         :shape "VpnConnectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-site-to-site-vpn-attachment-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-site-to-site-vpn-attachment-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-site-to-site-vpn-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-site-to-site-vpn-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-site-to-site-vpn-attachment-request
                    'make-create-site-to-site-vpn-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-site-to-site-vpn-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-site-to-site-vpn-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpnConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-site-to-site-vpn-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-site-to-site-vpn-attachment-response
                       common-lisp:nil
                       ((site-to-site-vpn-attachment :initarg
                         :site-to-site-vpn-attachment :initform common-lisp:nil
                         :type
                         (common-lisp:or site-to-site-vpn-attachment
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-site-to-site-vpn-attachment-response-site-to-site-vpn-attachment
                         :shape "SiteToSiteVpnAttachment" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-site-to-site-vpn-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-site-to-site-vpn-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-site-to-site-vpn-attachment-response
                    'make-create-site-to-site-vpn-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-site-to-site-vpn-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-site-to-site-vpn-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'site-to-site-vpn-attachment))
      (common-lisp:list
       (common-lisp:cons "SiteToSiteVpnAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-site-to-site-vpn-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-transit-gateway-peering-request common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-create-transit-gateway-peering-request-core-network-id
                         :shape "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-gateway-arn :initarg :transit-gateway-arn
                         :initform
                         (common-lisp:error ":transit-gateway-arn is required")
                         :type
                         (common-lisp:or transit-gateway-arn common-lisp:null)
                         :accessor
                         struct-shape-create-transit-gateway-peering-request-transit-gateway-arn
                         :shape "TransitGatewayArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-transit-gateway-peering-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-transit-gateway-peering-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-transit-gateway-peering-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-transit-gateway-peering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-transit-gateway-peering-request
                    'make-create-transit-gateway-peering-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-gateway-peering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-gateway-peering-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transit-gateway-arn))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-gateway-peering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-transit-gateway-peering-response common-lisp:nil
                       ((transit-gateway-peering :initarg
                         :transit-gateway-peering :initform common-lisp:nil
                         :type
                         (common-lisp:or transit-gateway-peering
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-transit-gateway-peering-response-transit-gateway-peering
                         :shape "TransitGatewayPeering" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-transit-gateway-peering-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-transit-gateway-peering-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-transit-gateway-peering-response
                    'make-create-transit-gateway-peering-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-gateway-peering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-gateway-peering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-peering))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayPeering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-gateway-peering-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-transit-gateway-route-table-attachment-request
                       common-lisp:nil
                       ((peering-id :initarg :peering-id :initform
                         (common-lisp:error ":peering-id is required") :type
                         (common-lisp:or peering-id common-lisp:null) :accessor
                         struct-shape-create-transit-gateway-route-table-attachment-request-peering-id
                         :shape "PeeringId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-gateway-route-table-arn :initarg
                         :transit-gateway-route-table-arn :initform
                         (common-lisp:error
                          ":transit-gateway-route-table-arn is required")
                         :type
                         (common-lisp:or transit-gateway-route-table-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-transit-gateway-route-table-attachment-request-transit-gateway-route-table-arn
                         :shape "TransitGatewayRouteTableArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-transit-gateway-route-table-attachment-request-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-transit-gateway-route-table-attachment-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-transit-gateway-route-table-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-transit-gateway-route-table-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-transit-gateway-route-table-attachment-request
                    'make-create-transit-gateway-route-table-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-gateway-route-table-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-gateway-route-table-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peering-id))
      (common-lisp:list
       (common-lisp:cons "PeeringId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-route-table-arn))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayRouteTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-gateway-route-table-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-transit-gateway-route-table-attachment-response
                       common-lisp:nil
                       ((transit-gateway-route-table-attachment :initarg
                         :transit-gateway-route-table-attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-route-table-attachment
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-transit-gateway-route-table-attachment-response-transit-gateway-route-table-attachment
                         :shape "TransitGatewayRouteTableAttachment" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-transit-gateway-route-table-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-transit-gateway-route-table-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-transit-gateway-route-table-attachment-response
                    'make-create-transit-gateway-route-table-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-gateway-route-table-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-gateway-route-table-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-route-table-attachment))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayRouteTableAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-transit-gateway-route-table-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-attachment-request common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-attachment-request-core-network-id
                         :shape "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-arn :initarg :vpc-arn :initform
                         (common-lisp:error ":vpc-arn is required") :type
                         (common-lisp:or vpc-arn common-lisp:null) :accessor
                         struct-shape-create-vpc-attachment-request-vpc-arn
                         :shape "VpcArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subnet-arns :initarg :subnet-arns :initform
                         (common-lisp:error ":subnet-arns is required") :type
                         (common-lisp:or subnet-arn-list common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-attachment-request-subnet-arns
                         :shape "SubnetArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (options :initarg :options :initform common-lisp:nil
                         :type (common-lisp:or vpc-options common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-attachment-request-options
                         :shape "VpcOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-create-vpc-attachment-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-attachment-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vpc-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpc-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vpc-attachment-request
                    'make-create-vpc-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-arn))
      (common-lisp:list
       (common-lisp:cons "VpcArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-arns))
      (common-lisp:list
       (common-lisp:cons "SubnetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-attachment-response common-lisp:nil
                       ((vpc-attachment :initarg :vpc-attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-attachment common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-attachment-response-vpc-attachment
                         :shape "VpcAttachment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vpc-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpc-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vpc-attachment-response
                    'make-create-vpc-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-attachment-response))
   common-lisp:nil))
(common-lisp:deftype customer-gateway-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype customer-gateway-arn-list ()
   '(trivial-types:proper-list customer-gateway-arn))
 (common-lisp:defun make-customer-gateway-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list customer-gateway-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass customer-gateway-association common-lisp:nil
                       ((customer-gateway-arn :initarg :customer-gateway-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or customer-gateway-arn common-lisp:null)
                         :accessor
                         struct-shape-customer-gateway-association-customer-gateway-arn
                         :shape "CustomerGatewayArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-network-id :initarg :global-network-id
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-customer-gateway-association-global-network-id
                         :shape "GlobalNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-id :initarg :device-id :initform
                         common-lisp:nil :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-customer-gateway-association-device-id
                         :shape "DeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (link-id :initarg :link-id :initform common-lisp:nil
                         :type (common-lisp:or link-id common-lisp:null)
                         :accessor
                         struct-shape-customer-gateway-association-link-id
                         :shape "LinkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or customer-gateway-association-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-customer-gateway-association-state :shape
                         "CustomerGatewayAssociationState" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-customer-gateway-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'customer-gateway-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'customer-gateway-association
                    'make-customer-gateway-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-gateway-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-gateway-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-gateway-arn))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-id))
      (common-lisp:list
       (common-lisp:cons "LinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-gateway-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype customer-gateway-association-list ()
   '(trivial-types:proper-list customer-gateway-association))
 (common-lisp:defun make-customer-gateway-association-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            customer-gateway-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype customer-gateway-association-state () 'common-lisp:string)
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-attachment-request common-lisp:nil
                       ((attachment-id :initarg :attachment-id :initform
                         (common-lisp:error ":attachment-id is required") :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-delete-attachment-request-attachment-id
                         :shape "AttachmentId" :location "uri" :location-name
                         "attachmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-attachment-request
                    'make-delete-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-attachment-response common-lisp:nil
                       ((attachment :initarg :attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or attachment common-lisp:null) :accessor
                         struct-shape-delete-attachment-response-attachment
                         :shape "Attachment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-attachment-response
                    'make-delete-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "Attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connect-peer-request common-lisp:nil
                       ((connect-peer-id :initarg :connect-peer-id :initform
                         (common-lisp:error ":connect-peer-id is required")
                         :type
                         (common-lisp:or connect-peer-id common-lisp:null)
                         :accessor
                         struct-shape-delete-connect-peer-request-connect-peer-id
                         :shape "ConnectPeerId" :location "uri" :location-name
                         "connectPeerId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-connect-peer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connect-peer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-connect-peer-request
                    'make-delete-connect-peer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-peer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-peer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-peer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connect-peer-response common-lisp:nil
                       ((connect-peer :initarg :connect-peer :initform
                         common-lisp:nil :type
                         (common-lisp:or connect-peer common-lisp:null)
                         :accessor
                         struct-shape-delete-connect-peer-response-connect-peer
                         :shape "ConnectPeer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-connect-peer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connect-peer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-connect-peer-response
                    'make-delete-connect-peer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-peer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-peer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-peer))
      (common-lisp:list
       (common-lisp:cons "ConnectPeer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connect-peer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-delete-connection-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connection-id is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-delete-connection-request-connection-id
                         :shape "ConnectionId" :location "uri" :location-name
                         "connectionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-connection-request
                    'make-delete-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-response common-lisp:nil
                       ((connection :initarg :connection :initform
                         common-lisp:nil :type
                         (common-lisp:or connection common-lisp:null) :accessor
                         struct-shape-delete-connection-response-connection
                         :shape "Connection" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-connection-response
                    'make-delete-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-core-network-policy-version-request
                       common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-delete-core-network-policy-version-request-core-network-id
                         :shape "CoreNetworkId" :location "uri" :location-name
                         "coreNetworkId")
                        (policy-version-id :initarg :policy-version-id
                         :initform
                         (common-lisp:error ":policy-version-id is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-delete-core-network-policy-version-request-policy-version-id
                         :shape "Integer" :location "uri" :location-name
                         "policyVersionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-core-network-policy-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-core-network-policy-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-core-network-policy-version-request
                    'make-delete-core-network-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-core-network-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-core-network-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-core-network-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-core-network-policy-version-response
                       common-lisp:nil
                       ((core-network-policy :initarg :core-network-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or core-network-policy common-lisp:null)
                         :accessor
                         struct-shape-delete-core-network-policy-version-response-core-network-policy
                         :shape "CoreNetworkPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-core-network-policy-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-core-network-policy-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-core-network-policy-version-response
                    'make-delete-core-network-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-core-network-policy-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-core-network-policy-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-policy))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-core-network-policy-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-core-network-request common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-delete-core-network-request-core-network-id
                         :shape "CoreNetworkId" :location "uri" :location-name
                         "coreNetworkId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-core-network-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-core-network-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-core-network-request
                    'make-delete-core-network-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-core-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-core-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-core-network-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-core-network-response common-lisp:nil
                       ((core-network :initarg :core-network :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network common-lisp:null)
                         :accessor
                         struct-shape-delete-core-network-response-core-network
                         :shape "CoreNetwork" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-core-network-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-core-network-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-core-network-response
                    'make-delete-core-network-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-core-network-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-core-network-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network))
      (common-lisp:list
       (common-lisp:cons "CoreNetwork"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-core-network-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-device-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-delete-device-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (device-id :initarg :device-id :initform
                         (common-lisp:error ":device-id is required") :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-delete-device-request-device-id :shape
                         "DeviceId" :location "uri" :location-name "deviceId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-device-request 'make-delete-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-device-response common-lisp:nil
                       ((device :initarg :device :initform common-lisp:nil
                         :type (common-lisp:or device common-lisp:null)
                         :accessor struct-shape-delete-device-response-device
                         :shape "Device" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-device-response 'make-delete-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "Device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-global-network-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-delete-global-network-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-global-network-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-global-network-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-global-network-request
                    'make-delete-global-network-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-network-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-global-network-response common-lisp:nil
                       ((global-network :initarg :global-network :initform
                         common-lisp:nil :type
                         (common-lisp:or global-network common-lisp:null)
                         :accessor
                         struct-shape-delete-global-network-response-global-network
                         :shape "GlobalNetwork" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-global-network-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-global-network-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-global-network-response
                    'make-delete-global-network-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-network-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-network-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network))
      (common-lisp:list
       (common-lisp:cons "GlobalNetwork"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-global-network-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-link-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-delete-link-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (link-id :initarg :link-id :initform
                         (common-lisp:error ":link-id is required") :type
                         (common-lisp:or link-id common-lisp:null) :accessor
                         struct-shape-delete-link-request-link-id :shape
                         "LinkId" :location "uri" :location-name "linkId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-link-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-link-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-link-request 'make-delete-link-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-link-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-link-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-link-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-link-response common-lisp:nil
                       ((link :initarg :link :initform common-lisp:nil :type
                         (common-lisp:or link common-lisp:null) :accessor
                         struct-shape-delete-link-response-link :shape "Link"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-link-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-link-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-link-response 'make-delete-link-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-link-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-link-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link))
      (common-lisp:list
       (common-lisp:cons "Link"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-link-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-peering-request common-lisp:nil
                       ((peering-id :initarg :peering-id :initform
                         (common-lisp:error ":peering-id is required") :type
                         (common-lisp:or peering-id common-lisp:null) :accessor
                         struct-shape-delete-peering-request-peering-id :shape
                         "PeeringId" :location "uri" :location-name
                         "peeringId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-peering-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-peering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-peering-request 'make-delete-peering-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-peering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-peering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-peering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-peering-response common-lisp:nil
                       ((peering :initarg :peering :initform common-lisp:nil
                         :type (common-lisp:or peering common-lisp:null)
                         :accessor struct-shape-delete-peering-response-peering
                         :shape "Peering" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-peering-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-peering-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-peering-response 'make-delete-peering-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-peering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-peering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peering))
      (common-lisp:list
       (common-lisp:cons "Peering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-peering-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-policy-request-resource-arn
                         :shape "ResourceArn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-request
                    'make-delete-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-response
                    'make-delete-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-site-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-delete-site-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (site-id :initarg :site-id :initform
                         (common-lisp:error ":site-id is required") :type
                         (common-lisp:or site-id common-lisp:null) :accessor
                         struct-shape-delete-site-request-site-id :shape
                         "SiteId" :location "uri" :location-name "siteId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-site-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-site-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-site-request 'make-delete-site-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-site-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-site-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-site-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-site-response common-lisp:nil
                       ((site :initarg :site :initform common-lisp:nil :type
                         (common-lisp:or site common-lisp:null) :accessor
                         struct-shape-delete-site-response-site :shape "Site"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-site-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-site-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-site-response 'make-delete-site-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-site-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-site-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site))
      (common-lisp:list
       (common-lisp:cons "Site"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-site-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-transit-gateway-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-deregister-transit-gateway-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (transit-gateway-arn :initarg :transit-gateway-arn
                         :initform
                         (common-lisp:error ":transit-gateway-arn is required")
                         :type
                         (common-lisp:or transit-gateway-arn common-lisp:null)
                         :accessor
                         struct-shape-deregister-transit-gateway-request-transit-gateway-arn
                         :shape "TransitGatewayArn" :location "uri"
                         :location-name "transitGatewayArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-transit-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-transit-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-transit-gateway-request
                    'make-deregister-transit-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-transit-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-transit-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-transit-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-transit-gateway-response common-lisp:nil
                       ((transit-gateway-registration :initarg
                         :transit-gateway-registration :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-registration
                                         common-lisp:null)
                         :accessor
                         struct-shape-deregister-transit-gateway-response-transit-gateway-registration
                         :shape "TransitGatewayRegistration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deregister-transit-gateway-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-transit-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deregister-transit-gateway-response
                    'make-deregister-transit-gateway-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-transit-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-transit-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-registration))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayRegistration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-transit-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-global-networks-request common-lisp:nil
                       ((global-network-ids :initarg :global-network-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-id-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-global-networks-request-global-network-ids
                         :shape "GlobalNetworkIdList" :location "querystring"
                         :location-name "globalNetworkIds")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-global-networks-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-global-networks-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-global-networks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-global-networks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-global-networks-request
                    'make-describe-global-networks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-networks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-networks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-networks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-global-networks-response common-lisp:nil
                       ((global-networks :initarg :global-networks :initform
                         common-lisp:nil :type
                         (common-lisp:or global-network-list common-lisp:null)
                         :accessor
                         struct-shape-describe-global-networks-response-global-networks
                         :shape "GlobalNetworkList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-global-networks-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-global-networks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-global-networks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-global-networks-response
                    'make-describe-global-networks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-networks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-networks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-networks))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-global-networks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass device common-lisp:nil
                       ((device-id :initarg :device-id :initform
                         common-lisp:nil :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-device-device-id :shape "DeviceId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (device-arn :initarg :device-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or device-arn common-lisp:null) :accessor
                         struct-shape-device-device-arn :shape "DeviceArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (global-network-id :initarg :global-network-id
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor struct-shape-device-global-network-id :shape
                         "GlobalNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (awslocation :initarg :awslocation :initform
                         common-lisp:nil :type
                         (common-lisp:or awslocation common-lisp:null)
                         :accessor struct-shape-device-awslocation :shape
                         "AWSLocation" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-device-description :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-device-type :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vendor :initarg :vendor :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-device-vendor :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model :initarg :model :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-device-model :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serial-number :initarg :serial-number :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-device-serial-number :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor struct-shape-device-location :shape
                         "Location" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (site-id :initarg :site-id :initform common-lisp:nil
                         :type (common-lisp:or site-id common-lisp:null)
                         :accessor struct-shape-device-site-id :shape "SiteId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-device-created-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or device-state common-lisp:null)
                         :accessor struct-shape-device-state :shape
                         "DeviceState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-device-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-device
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'device
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'device 'make-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'awslocation))
      (common-lisp:list
       (common-lisp:cons "AWSLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor))
      (common-lisp:list
       (common-lisp:cons "Vendor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "Model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-id))
      (common-lisp:list
       (common-lisp:cons "SiteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device))
   common-lisp:nil))
(common-lisp:deftype device-arn () 'common-lisp:string)
(common-lisp:deftype device-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-id-list () '(trivial-types:proper-list device-id))
 (common-lisp:defun make-device-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype device-list () '(trivial-types:proper-list device))
 (common-lisp:defun make-device-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-connect-peer-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-connect-peer-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (connect-peer-id :initarg :connect-peer-id :initform
                         (common-lisp:error ":connect-peer-id is required")
                         :type
                         (common-lisp:or connect-peer-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-connect-peer-request-connect-peer-id
                         :shape "ConnectPeerId" :location "uri" :location-name
                         "connectPeerId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-connect-peer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-connect-peer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-connect-peer-request
                    'make-disassociate-connect-peer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connect-peer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connect-peer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connect-peer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-connect-peer-response common-lisp:nil
                       ((connect-peer-association :initarg
                         :connect-peer-association :initform common-lisp:nil
                         :type
                         (common-lisp:or connect-peer-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-disassociate-connect-peer-response-connect-peer-association
                         :shape "ConnectPeerAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-connect-peer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-connect-peer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-connect-peer-response
                    'make-disassociate-connect-peer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connect-peer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connect-peer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-peer-association))
      (common-lisp:list
       (common-lisp:cons "ConnectPeerAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-connect-peer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-customer-gateway-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-customer-gateway-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (customer-gateway-arn :initarg :customer-gateway-arn
                         :initform
                         (common-lisp:error
                          ":customer-gateway-arn is required")
                         :type
                         (common-lisp:or customer-gateway-arn common-lisp:null)
                         :accessor
                         struct-shape-disassociate-customer-gateway-request-customer-gateway-arn
                         :shape "CustomerGatewayArn" :location "uri"
                         :location-name "customerGatewayArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-customer-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-customer-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-customer-gateway-request
                    'make-disassociate-customer-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-customer-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-customer-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-customer-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-customer-gateway-response common-lisp:nil
                       ((customer-gateway-association :initarg
                         :customer-gateway-association :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-gateway-association
                                         common-lisp:null)
                         :accessor
                         struct-shape-disassociate-customer-gateway-response-customer-gateway-association
                         :shape "CustomerGatewayAssociation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-customer-gateway-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-customer-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-customer-gateway-response
                    'make-disassociate-customer-gateway-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-customer-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-customer-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-gateway-association))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-customer-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-link-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-link-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (device-id :initarg :device-id :initform
                         (common-lisp:error ":device-id is required") :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-disassociate-link-request-device-id
                         :shape "DeviceId" :location "querystring"
                         :location-name "deviceId")
                        (link-id :initarg :link-id :initform
                         (common-lisp:error ":link-id is required") :type
                         (common-lisp:or link-id common-lisp:null) :accessor
                         struct-shape-disassociate-link-request-link-id :shape
                         "LinkId" :location "querystring" :location-name
                         "linkId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-link-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-link-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-link-request
                    'make-disassociate-link-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-link-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-link-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-link-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-link-response common-lisp:nil
                       ((link-association :initarg :link-association :initform
                         common-lisp:nil :type
                         (common-lisp:or link-association common-lisp:null)
                         :accessor
                         struct-shape-disassociate-link-response-link-association
                         :shape "LinkAssociation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-link-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disassociate-link-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-link-response
                    'make-disassociate-link-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-link-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-link-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-association))
      (common-lisp:list
       (common-lisp:cons "LinkAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-link-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-transit-gateway-connect-peer-request
                       common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-transit-gateway-connect-peer-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (transit-gateway-connect-peer-arn :initarg
                         :transit-gateway-connect-peer-arn :initform
                         (common-lisp:error
                          ":transit-gateway-connect-peer-arn is required")
                         :type
                         (common-lisp:or transit-gateway-connect-peer-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-disassociate-transit-gateway-connect-peer-request-transit-gateway-connect-peer-arn
                         :shape "TransitGatewayConnectPeerArn" :location "uri"
                         :location-name "transitGatewayConnectPeerArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-transit-gateway-connect-peer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-transit-gateway-connect-peer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-transit-gateway-connect-peer-request
                    'make-disassociate-transit-gateway-connect-peer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-transit-gateway-connect-peer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-transit-gateway-connect-peer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-transit-gateway-connect-peer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-transit-gateway-connect-peer-response
                       common-lisp:nil
                       ((transit-gateway-connect-peer-association :initarg
                         :transit-gateway-connect-peer-association :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          transit-gateway-connect-peer-association
                          common-lisp:null)
                         :accessor
                         struct-shape-disassociate-transit-gateway-connect-peer-response-transit-gateway-connect-peer-association
                         :shape "TransitGatewayConnectPeerAssociation"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-transit-gateway-connect-peer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-transit-gateway-connect-peer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-transit-gateway-connect-peer-response
                    'make-disassociate-transit-gateway-connect-peer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-transit-gateway-connect-peer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-transit-gateway-connect-peer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-connect-peer-association))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayConnectPeerAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-transit-gateway-connect-peer-response))
   common-lisp:nil))
(common-lisp:deftype exception-context-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype exception-context-map () 'common-lisp:hash-table)
 (common-lisp:defun make-exception-context-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype exception-context-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execute-core-network-change-set-request common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-execute-core-network-change-set-request-core-network-id
                         :shape "CoreNetworkId" :location "uri" :location-name
                         "coreNetworkId")
                        (policy-version-id :initarg :policy-version-id
                         :initform
                         (common-lisp:error ":policy-version-id is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-execute-core-network-change-set-request-policy-version-id
                         :shape "Integer" :location "uri" :location-name
                         "policyVersionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-core-network-change-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-core-network-change-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-core-network-change-set-request
                    'make-execute-core-network-change-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-core-network-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-core-network-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-core-network-change-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-core-network-change-set-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execute-core-network-change-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'execute-core-network-change-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execute-core-network-change-set-response
                    'make-execute-core-network-change-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-core-network-change-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-core-network-change-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-core-network-change-set-response))
   common-lisp:nil))
(common-lisp:deftype external-region-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype external-region-code-list ()
   '(trivial-types:proper-list external-region-code))
 (common-lisp:defun make-external-region-code-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list external-region-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filter-map () 'common-lisp:hash-table)
 (common-lisp:defun make-filter-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun make-filter-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-connect-attachment-request common-lisp:nil
                       ((attachment-id :initarg :attachment-id :initform
                         (common-lisp:error ":attachment-id is required") :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-get-connect-attachment-request-attachment-id
                         :shape "AttachmentId" :location "uri" :location-name
                         "attachmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connect-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-connect-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connect-attachment-request
                    'make-get-connect-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connect-attachment-response common-lisp:nil
                       ((connect-attachment :initarg :connect-attachment
                         :initform common-lisp:nil :type
                         (common-lisp:or connect-attachment common-lisp:null)
                         :accessor
                         struct-shape-get-connect-attachment-response-connect-attachment
                         :shape "ConnectAttachment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connect-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-connect-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connect-attachment-response
                    'make-get-connect-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-attachment))
      (common-lisp:list
       (common-lisp:cons "ConnectAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connect-peer-associations-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-connect-peer-associations-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (connect-peer-ids :initarg :connect-peer-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or connect-peer-id-list common-lisp:null)
                         :accessor
                         struct-shape-get-connect-peer-associations-request-connect-peer-ids
                         :shape "ConnectPeerIdList" :location "querystring"
                         :location-name "connectPeerIds")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-connect-peer-associations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-connect-peer-associations-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connect-peer-associations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-connect-peer-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connect-peer-associations-request
                    'make-get-connect-peer-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-peer-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-peer-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-peer-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connect-peer-associations-response common-lisp:nil
                       ((connect-peer-associations :initarg
                         :connect-peer-associations :initform common-lisp:nil
                         :type
                         (common-lisp:or connect-peer-association-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-connect-peer-associations-response-connect-peer-associations
                         :shape "ConnectPeerAssociationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-connect-peer-associations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connect-peer-associations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-connect-peer-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connect-peer-associations-response
                    'make-get-connect-peer-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-peer-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-peer-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connect-peer-associations))
      (common-lisp:list
       (common-lisp:cons "ConnectPeerAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-peer-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connect-peer-request common-lisp:nil
                       ((connect-peer-id :initarg :connect-peer-id :initform
                         (common-lisp:error ":connect-peer-id is required")
                         :type
                         (common-lisp:or connect-peer-id common-lisp:null)
                         :accessor
                         struct-shape-get-connect-peer-request-connect-peer-id
                         :shape "ConnectPeerId" :location "uri" :location-name
                         "connectPeerId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connect-peer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connect-peer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connect-peer-request 'make-get-connect-peer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-peer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-peer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-peer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connect-peer-response common-lisp:nil
                       ((connect-peer :initarg :connect-peer :initform
                         common-lisp:nil :type
                         (common-lisp:or connect-peer common-lisp:null)
                         :accessor
                         struct-shape-get-connect-peer-response-connect-peer
                         :shape "ConnectPeer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connect-peer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connect-peer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connect-peer-response
                    'make-get-connect-peer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-peer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-peer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-peer))
      (common-lisp:list
       (common-lisp:cons "ConnectPeer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connect-peer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connections-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-connections-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (connection-ids :initarg :connection-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-id-list common-lisp:null)
                         :accessor
                         struct-shape-get-connections-request-connection-ids
                         :shape "ConnectionIdList" :location "querystring"
                         :location-name "connectionIds")
                        (device-id :initarg :device-id :initform
                         common-lisp:nil :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-get-connections-request-device-id :shape
                         "DeviceId" :location "querystring" :location-name
                         "deviceId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-connections-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-connections-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connections-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connections-request 'make-get-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-connections-response common-lisp:nil
                       ((connections :initarg :connections :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-list common-lisp:null)
                         :accessor
                         struct-shape-get-connections-response-connections
                         :shape "ConnectionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-connections-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-connections-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-connections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-connections-response 'make-get-connections-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-core-network-change-events-request common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-core-network-change-events-request-core-network-id
                         :shape "CoreNetworkId" :location "uri" :location-name
                         "coreNetworkId")
                        (policy-version-id :initarg :policy-version-id
                         :initform
                         (common-lisp:error ":policy-version-id is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-get-core-network-change-events-request-policy-version-id
                         :shape "Integer" :location "uri" :location-name
                         "policyVersionId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-core-network-change-events-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-core-network-change-events-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-core-network-change-events-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-core-network-change-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-core-network-change-events-request
                    'make-get-core-network-change-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-change-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-change-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-change-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-core-network-change-events-response common-lisp:nil
                       ((core-network-change-events :initarg
                         :core-network-change-events :initform common-lisp:nil
                         :type
                         (common-lisp:or core-network-change-event-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-core-network-change-events-response-core-network-change-events
                         :shape "CoreNetworkChangeEventList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-core-network-change-events-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-core-network-change-events-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-core-network-change-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-core-network-change-events-response
                    'make-get-core-network-change-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-change-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-change-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'core-network-change-events))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkChangeEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-change-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-core-network-change-set-request common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-core-network-change-set-request-core-network-id
                         :shape "CoreNetworkId" :location "uri" :location-name
                         "coreNetworkId")
                        (policy-version-id :initarg :policy-version-id
                         :initform
                         (common-lisp:error ":policy-version-id is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-get-core-network-change-set-request-policy-version-id
                         :shape "Integer" :location "uri" :location-name
                         "policyVersionId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-core-network-change-set-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-core-network-change-set-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-core-network-change-set-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-core-network-change-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-core-network-change-set-request
                    'make-get-core-network-change-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-change-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-core-network-change-set-response common-lisp:nil
                       ((core-network-changes :initarg :core-network-changes
                         :initform common-lisp:nil :type
                         (common-lisp:or core-network-change-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-core-network-change-set-response-core-network-changes
                         :shape "CoreNetworkChangeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-core-network-change-set-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-core-network-change-set-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-core-network-change-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-core-network-change-set-response
                    'make-get-core-network-change-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-change-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-change-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'core-network-changes))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkChanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-change-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-core-network-policy-request common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-core-network-policy-request-core-network-id
                         :shape "CoreNetworkId" :location "uri" :location-name
                         "coreNetworkId")
                        (policy-version-id :initarg :policy-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-core-network-policy-request-policy-version-id
                         :shape "Integer" :location "querystring"
                         :location-name "policyVersionId")
                        (alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or core-network-policy-alias
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-core-network-policy-request-alias
                         :shape "CoreNetworkPolicyAlias" :location
                         "querystring" :location-name "alias"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-core-network-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-core-network-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-core-network-policy-request
                    'make-get-core-network-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-core-network-policy-response common-lisp:nil
                       ((core-network-policy :initarg :core-network-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or core-network-policy common-lisp:null)
                         :accessor
                         struct-shape-get-core-network-policy-response-core-network-policy
                         :shape "CoreNetworkPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-core-network-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-core-network-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-core-network-policy-response
                    'make-get-core-network-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-policy))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-core-network-request common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-core-network-request-core-network-id
                         :shape "CoreNetworkId" :location "uri" :location-name
                         "coreNetworkId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-core-network-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-core-network-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-core-network-request 'make-get-core-network-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-core-network-response common-lisp:nil
                       ((core-network :initarg :core-network :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network common-lisp:null)
                         :accessor
                         struct-shape-get-core-network-response-core-network
                         :shape "CoreNetwork" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-core-network-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-core-network-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-core-network-response
                    'make-get-core-network-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network))
      (common-lisp:list
       (common-lisp:cons "CoreNetwork"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-core-network-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-customer-gateway-associations-request
                       common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-customer-gateway-associations-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (customer-gateway-arns :initarg :customer-gateway-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or customer-gateway-arn-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-customer-gateway-associations-request-customer-gateway-arns
                         :shape "CustomerGatewayArnList" :location
                         "querystring" :location-name "customerGatewayArns")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-customer-gateway-associations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-customer-gateway-associations-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-customer-gateway-associations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-customer-gateway-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-customer-gateway-associations-request
                    'make-get-customer-gateway-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-customer-gateway-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-customer-gateway-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-customer-gateway-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-customer-gateway-associations-response
                       common-lisp:nil
                       ((customer-gateway-associations :initarg
                         :customer-gateway-associations :initform
                         common-lisp:nil :type
                         (common-lisp:or customer-gateway-association-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-customer-gateway-associations-response-customer-gateway-associations
                         :shape "CustomerGatewayAssociationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-customer-gateway-associations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-customer-gateway-associations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-customer-gateway-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-customer-gateway-associations-response
                    'make-get-customer-gateway-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-customer-gateway-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-customer-gateway-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-gateway-associations))
      (common-lisp:list
       (common-lisp:cons "CustomerGatewayAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-customer-gateway-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-devices-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-devices-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (device-ids :initarg :device-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or device-id-list common-lisp:null)
                         :accessor struct-shape-get-devices-request-device-ids
                         :shape "DeviceIdList" :location "querystring"
                         :location-name "deviceIds")
                        (site-id :initarg :site-id :initform common-lisp:nil
                         :type (common-lisp:or site-id common-lisp:null)
                         :accessor struct-shape-get-devices-request-site-id
                         :shape "SiteId" :location "querystring" :location-name
                         "siteId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-get-devices-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-devices-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-devices-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-devices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-devices-request 'make-get-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-devices-response common-lisp:nil
                       ((devices :initarg :devices :initform common-lisp:nil
                         :type (common-lisp:or device-list common-lisp:null)
                         :accessor struct-shape-get-devices-response-devices
                         :shape "DeviceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-devices-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-devices-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-devices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-devices-response 'make-get-devices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "Devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-link-associations-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-link-associations-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (device-id :initarg :device-id :initform
                         common-lisp:nil :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-get-link-associations-request-device-id
                         :shape "DeviceId" :location "querystring"
                         :location-name "deviceId")
                        (link-id :initarg :link-id :initform common-lisp:nil
                         :type (common-lisp:or link-id common-lisp:null)
                         :accessor
                         struct-shape-get-link-associations-request-link-id
                         :shape "LinkId" :location "querystring" :location-name
                         "linkId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-link-associations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-link-associations-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-link-associations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-link-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-link-associations-request
                    'make-get-link-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-link-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-link-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-link-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-link-associations-response common-lisp:nil
                       ((link-associations :initarg :link-associations
                         :initform common-lisp:nil :type
                         (common-lisp:or link-association-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-link-associations-response-link-associations
                         :shape "LinkAssociationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-link-associations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-link-associations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-link-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-link-associations-response
                    'make-get-link-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-link-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-link-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-associations))
      (common-lisp:list
       (common-lisp:cons "LinkAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-link-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-links-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-links-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (link-ids :initarg :link-ids :initform common-lisp:nil
                         :type (common-lisp:or link-id-list common-lisp:null)
                         :accessor struct-shape-get-links-request-link-ids
                         :shape "LinkIdList" :location "querystring"
                         :location-name "linkIds")
                        (site-id :initarg :site-id :initform common-lisp:nil
                         :type (common-lisp:or site-id common-lisp:null)
                         :accessor struct-shape-get-links-request-site-id
                         :shape "SiteId" :location "querystring" :location-name
                         "siteId")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-get-links-request-type :shape
                         "ConstrainedString" :location "querystring"
                         :location-name "type")
                        (provider :initarg :provider :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-get-links-request-provider
                         :shape "ConstrainedString" :location "querystring"
                         :location-name "provider")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-get-links-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-links-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-links-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-links-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-links-request 'make-get-links-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-links-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-links-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-links-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-links-response common-lisp:nil
                       ((links :initarg :links :initform common-lisp:nil :type
                         (common-lisp:or link-list common-lisp:null) :accessor
                         struct-shape-get-links-response-links :shape
                         "LinkList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-links-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-links-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-links-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-links-response 'make-get-links-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-links-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-links-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'links))
      (common-lisp:list
       (common-lisp:cons "Links"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-links-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-resource-counts-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-network-resource-counts-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-get-network-resource-counts-request-resource-type
                         :shape "ConstrainedString" :location "querystring"
                         :location-name "resourceType")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-network-resource-counts-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-network-resource-counts-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-resource-counts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-network-resource-counts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-resource-counts-request
                    'make-get-network-resource-counts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-counts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-counts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-counts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-resource-counts-response common-lisp:nil
                       ((network-resource-counts :initarg
                         :network-resource-counts :initform common-lisp:nil
                         :type
                         (common-lisp:or network-resource-count-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-network-resource-counts-response-network-resource-counts
                         :shape "NetworkResourceCountList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-network-resource-counts-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-resource-counts-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-network-resource-counts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-resource-counts-response
                    'make-get-network-resource-counts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-counts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-counts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-resource-counts))
      (common-lisp:list
       (common-lisp:cons "NetworkResourceCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-counts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-resource-relationships-request
                       common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-network-resource-relationships-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-network-resource-relationships-request-core-network-id
                         :shape "CoreNetworkId" :location "querystring"
                         :location-name "coreNetworkId")
                        (registered-gateway-arn :initarg
                         :registered-gateway-arn :initform common-lisp:nil
                         :type (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-network-resource-relationships-request-registered-gateway-arn
                         :shape "ResourceArn" :location "querystring"
                         :location-name "registeredGatewayArn")
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor
                         struct-shape-get-network-resource-relationships-request-aws-region
                         :shape "ExternalRegionCode" :location "querystring"
                         :location-name "awsRegion")
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor
                         struct-shape-get-network-resource-relationships-request-account-id
                         :shape "AWSAccountId" :location "querystring"
                         :location-name "accountId")
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-get-network-resource-relationships-request-resource-type
                         :shape "ConstrainedString" :location "querystring"
                         :location-name "resourceType")
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-network-resource-relationships-request-resource-arn
                         :shape "ResourceArn" :location "querystring"
                         :location-name "resourceArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-network-resource-relationships-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-network-resource-relationships-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-resource-relationships-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-network-resource-relationships-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-resource-relationships-request
                    'make-get-network-resource-relationships-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-relationships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-relationships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-relationships-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-resource-relationships-response
                       common-lisp:nil
                       ((relationships :initarg :relationships :initform
                         common-lisp:nil :type
                         (common-lisp:or relationship-list common-lisp:null)
                         :accessor
                         struct-shape-get-network-resource-relationships-response-relationships
                         :shape "RelationshipList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-network-resource-relationships-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-resource-relationships-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-network-resource-relationships-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-resource-relationships-response
                    'make-get-network-resource-relationships-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-relationships-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-relationships-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationships))
      (common-lisp:list
       (common-lisp:cons "Relationships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resource-relationships-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-resources-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-network-resources-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-network-resources-request-core-network-id
                         :shape "CoreNetworkId" :location "querystring"
                         :location-name "coreNetworkId")
                        (registered-gateway-arn :initarg
                         :registered-gateway-arn :initform common-lisp:nil
                         :type (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-network-resources-request-registered-gateway-arn
                         :shape "ResourceArn" :location "querystring"
                         :location-name "registeredGatewayArn")
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor
                         struct-shape-get-network-resources-request-aws-region
                         :shape "ExternalRegionCode" :location "querystring"
                         :location-name "awsRegion")
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor
                         struct-shape-get-network-resources-request-account-id
                         :shape "AWSAccountId" :location "querystring"
                         :location-name "accountId")
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-get-network-resources-request-resource-type
                         :shape "ConstrainedString" :location "querystring"
                         :location-name "resourceType")
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-network-resources-request-resource-arn
                         :shape "ResourceArn" :location "querystring"
                         :location-name "resourceArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-network-resources-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-network-resources-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-resources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-network-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-resources-request
                    'make-get-network-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-resources-response common-lisp:nil
                       ((network-resources :initarg :network-resources
                         :initform common-lisp:nil :type
                         (common-lisp:or network-resource-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-network-resources-response-network-resources
                         :shape "NetworkResourceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-network-resources-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-resources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-network-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-resources-response
                    'make-get-network-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-resources))
      (common-lisp:list
       (common-lisp:cons "NetworkResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-routes-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-network-routes-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (route-table-identifier :initarg
                         :route-table-identifier :initform
                         (common-lisp:error
                          ":route-table-identifier is required")
                         :type
                         (common-lisp:or route-table-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-network-routes-request-route-table-identifier
                         :shape "RouteTableIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (exact-cidr-matches :initarg :exact-cidr-matches
                         :initform common-lisp:nil :type
                         (common-lisp:or constrained-string-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-network-routes-request-exact-cidr-matches
                         :shape "ConstrainedStringList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (longest-prefix-matches :initarg
                         :longest-prefix-matches :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-network-routes-request-longest-prefix-matches
                         :shape "ConstrainedStringList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (subnet-of-matches :initarg :subnet-of-matches
                         :initform common-lisp:nil :type
                         (common-lisp:or constrained-string-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-network-routes-request-subnet-of-matches
                         :shape "ConstrainedStringList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (supernet-of-matches :initarg :supernet-of-matches
                         :initform common-lisp:nil :type
                         (common-lisp:or constrained-string-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-network-routes-request-supernet-of-matches
                         :shape "ConstrainedStringList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (prefix-list-ids :initarg :prefix-list-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-network-routes-request-prefix-list-ids
                         :shape "ConstrainedStringList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (states :initarg :states :initform common-lisp:nil
                         :type
                         (common-lisp:or route-state-list common-lisp:null)
                         :accessor
                         struct-shape-get-network-routes-request-states :shape
                         "RouteStateList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (types :initarg :types :initform common-lisp:nil :type
                         (common-lisp:or route-type-list common-lisp:null)
                         :accessor
                         struct-shape-get-network-routes-request-types :shape
                         "RouteTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-filters :initarg :destination-filters
                         :initform common-lisp:nil :type
                         (common-lisp:or filter-map common-lisp:null) :accessor
                         struct-shape-get-network-routes-request-destination-filters
                         :shape "FilterMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-routes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-routes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-routes-request
                    'make-get-network-routes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-routes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-routes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-table-identifier))
      (common-lisp:list
       (common-lisp:cons "RouteTableIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exact-cidr-matches))
      (common-lisp:list
       (common-lisp:cons "ExactCidrMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'longest-prefix-matches))
      (common-lisp:list
       (common-lisp:cons "LongestPrefixMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-of-matches))
      (common-lisp:list
       (common-lisp:cons "SubnetOfMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supernet-of-matches))
      (common-lisp:list
       (common-lisp:cons "SupernetOfMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-ids))
      (common-lisp:list
       (common-lisp:cons "PrefixListIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'states))
      (common-lisp:list
       (common-lisp:cons "States"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "Types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-filters))
      (common-lisp:list
       (common-lisp:cons "DestinationFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-routes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-routes-response common-lisp:nil
                       ((route-table-arn :initarg :route-table-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-network-routes-response-route-table-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (core-network-segment-edge :initarg
                         :core-network-segment-edge :initform common-lisp:nil
                         :type
                         (common-lisp:or core-network-segment-edge-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-network-routes-response-core-network-segment-edge
                         :shape "CoreNetworkSegmentEdgeIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (route-table-type :initarg :route-table-type :initform
                         common-lisp:nil :type
                         (common-lisp:or route-table-type common-lisp:null)
                         :accessor
                         struct-shape-get-network-routes-response-route-table-type
                         :shape "RouteTableType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (route-table-timestamp :initarg :route-table-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-get-network-routes-response-route-table-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (network-routes :initarg :network-routes :initform
                         common-lisp:nil :type
                         (common-lisp:or network-route-list common-lisp:null)
                         :accessor
                         struct-shape-get-network-routes-response-network-routes
                         :shape "NetworkRouteList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-routes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-network-routes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-routes-response
                    'make-get-network-routes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-routes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-routes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-arn))
      (common-lisp:list
       (common-lisp:cons "RouteTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'core-network-segment-edge))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkSegmentEdge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-table-type))
      (common-lisp:list
       (common-lisp:cons "RouteTableType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'route-table-timestamp))
      (common-lisp:list
       (common-lisp:cons "RouteTableTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-routes))
      (common-lisp:list
       (common-lisp:cons "NetworkRoutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-routes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-telemetry-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-network-telemetry-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-network-telemetry-request-core-network-id
                         :shape "CoreNetworkId" :location "querystring"
                         :location-name "coreNetworkId")
                        (registered-gateway-arn :initarg
                         :registered-gateway-arn :initform common-lisp:nil
                         :type (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-network-telemetry-request-registered-gateway-arn
                         :shape "ResourceArn" :location "querystring"
                         :location-name "registeredGatewayArn")
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor
                         struct-shape-get-network-telemetry-request-aws-region
                         :shape "ExternalRegionCode" :location "querystring"
                         :location-name "awsRegion")
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor
                         struct-shape-get-network-telemetry-request-account-id
                         :shape "AWSAccountId" :location "querystring"
                         :location-name "accountId")
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-get-network-telemetry-request-resource-type
                         :shape "ConstrainedString" :location "querystring"
                         :location-name "resourceType")
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-network-telemetry-request-resource-arn
                         :shape "ResourceArn" :location "querystring"
                         :location-name "resourceArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-network-telemetry-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-network-telemetry-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-telemetry-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-network-telemetry-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-telemetry-request
                    'make-get-network-telemetry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-telemetry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-telemetry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-telemetry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-telemetry-response common-lisp:nil
                       ((network-telemetry :initarg :network-telemetry
                         :initform common-lisp:nil :type
                         (common-lisp:or network-telemetry-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-network-telemetry-response-network-telemetry
                         :shape "NetworkTelemetryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-network-telemetry-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-network-telemetry-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-network-telemetry-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-network-telemetry-response
                    'make-get-network-telemetry-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-telemetry-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-telemetry-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-telemetry))
      (common-lisp:list
       (common-lisp:cons "NetworkTelemetry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-telemetry-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policy-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-resource-policy-request-resource-arn
                         :shape "ResourceArn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-request
                    'make-get-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policy-response common-lisp:nil
                       ((policy-document :initarg :policy-document :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-policy-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-resource-policy-response-policy-document
                         :shape "ResourcePolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-response
                    'make-get-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-route-analysis-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-route-analysis-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (route-analysis-id :initarg :route-analysis-id
                         :initform
                         (common-lisp:error ":route-analysis-id is required")
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-get-route-analysis-request-route-analysis-id
                         :shape "ConstrainedString" :location "uri"
                         :location-name "routeAnalysisId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-route-analysis-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-route-analysis-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-route-analysis-request
                    'make-get-route-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-route-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-route-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-route-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-route-analysis-response common-lisp:nil
                       ((route-analysis :initarg :route-analysis :initform
                         common-lisp:nil :type
                         (common-lisp:or route-analysis common-lisp:null)
                         :accessor
                         struct-shape-get-route-analysis-response-route-analysis
                         :shape "RouteAnalysis" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-route-analysis-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-route-analysis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-route-analysis-response
                    'make-get-route-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-route-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-route-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-analysis))
      (common-lisp:list
       (common-lisp:cons "RouteAnalysis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-route-analysis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-site-to-site-vpn-attachment-request common-lisp:nil
                       ((attachment-id :initarg :attachment-id :initform
                         (common-lisp:error ":attachment-id is required") :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-get-site-to-site-vpn-attachment-request-attachment-id
                         :shape "AttachmentId" :location "uri" :location-name
                         "attachmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-site-to-site-vpn-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-site-to-site-vpn-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-site-to-site-vpn-attachment-request
                    'make-get-site-to-site-vpn-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-site-to-site-vpn-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-site-to-site-vpn-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-site-to-site-vpn-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-site-to-site-vpn-attachment-response common-lisp:nil
                       ((site-to-site-vpn-attachment :initarg
                         :site-to-site-vpn-attachment :initform common-lisp:nil
                         :type
                         (common-lisp:or site-to-site-vpn-attachment
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-site-to-site-vpn-attachment-response-site-to-site-vpn-attachment
                         :shape "SiteToSiteVpnAttachment" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-site-to-site-vpn-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-site-to-site-vpn-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-site-to-site-vpn-attachment-response
                    'make-get-site-to-site-vpn-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-site-to-site-vpn-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-site-to-site-vpn-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'site-to-site-vpn-attachment))
      (common-lisp:list
       (common-lisp:cons "SiteToSiteVpnAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-site-to-site-vpn-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sites-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-sites-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (site-ids :initarg :site-ids :initform common-lisp:nil
                         :type (common-lisp:or site-id-list common-lisp:null)
                         :accessor struct-shape-get-sites-request-site-ids
                         :shape "SiteIdList" :location "querystring"
                         :location-name "siteIds")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor struct-shape-get-sites-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-sites-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sites-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sites-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sites-request 'make-get-sites-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-sites-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-sites-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-sites-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-sites-response common-lisp:nil
                       ((sites :initarg :sites :initform common-lisp:nil :type
                         (common-lisp:or site-list common-lisp:null) :accessor
                         struct-shape-get-sites-response-sites :shape
                         "SiteList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-sites-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-sites-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-sites-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-sites-response 'make-get-sites-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-sites-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-sites-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sites))
      (common-lisp:list
       (common-lisp:cons "Sites"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-sites-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-transit-gateway-connect-peer-associations-request
                       common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-transit-gateway-connect-peer-associations-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (transit-gateway-connect-peer-arns :initarg
                         :transit-gateway-connect-peer-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-connect-peer-arn-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-transit-gateway-connect-peer-associations-request-transit-gateway-connect-peer-arns
                         :shape "TransitGatewayConnectPeerArnList" :location
                         "querystring" :location-name
                         "transitGatewayConnectPeerArns")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-transit-gateway-connect-peer-associations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-transit-gateway-connect-peer-associations-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-transit-gateway-connect-peer-associations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-transit-gateway-connect-peer-associations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-transit-gateway-connect-peer-associations-request
                    'make-get-transit-gateway-connect-peer-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-connect-peer-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-connect-peer-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-connect-peer-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-transit-gateway-connect-peer-associations-response
                       common-lisp:nil
                       ((transit-gateway-connect-peer-associations :initarg
                         :transit-gateway-connect-peer-associations :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          transit-gateway-connect-peer-association-list
                          common-lisp:null)
                         :accessor
                         struct-shape-get-transit-gateway-connect-peer-associations-response-transit-gateway-connect-peer-associations
                         :shape "TransitGatewayConnectPeerAssociationList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-transit-gateway-connect-peer-associations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-transit-gateway-connect-peer-associations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-transit-gateway-connect-peer-associations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-transit-gateway-connect-peer-associations-response
                    'make-get-transit-gateway-connect-peer-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-connect-peer-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-connect-peer-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-connect-peer-associations))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayConnectPeerAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-connect-peer-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-transit-gateway-peering-request common-lisp:nil
                       ((peering-id :initarg :peering-id :initform
                         (common-lisp:error ":peering-id is required") :type
                         (common-lisp:or peering-id common-lisp:null) :accessor
                         struct-shape-get-transit-gateway-peering-request-peering-id
                         :shape "PeeringId" :location "uri" :location-name
                         "peeringId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-transit-gateway-peering-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-transit-gateway-peering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-transit-gateway-peering-request
                    'make-get-transit-gateway-peering-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-peering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-peering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-peering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-transit-gateway-peering-response common-lisp:nil
                       ((transit-gateway-peering :initarg
                         :transit-gateway-peering :initform common-lisp:nil
                         :type
                         (common-lisp:or transit-gateway-peering
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-transit-gateway-peering-response-transit-gateway-peering
                         :shape "TransitGatewayPeering" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-transit-gateway-peering-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-transit-gateway-peering-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-transit-gateway-peering-response
                    'make-get-transit-gateway-peering-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-peering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-peering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-peering))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayPeering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-peering-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-transit-gateway-registrations-request
                       common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-get-transit-gateway-registrations-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (transit-gateway-arns :initarg :transit-gateway-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or transit-gateway-arn-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-transit-gateway-registrations-request-transit-gateway-arns
                         :shape "TransitGatewayArnList" :location "querystring"
                         :location-name "transitGatewayArns")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-transit-gateway-registrations-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-transit-gateway-registrations-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-transit-gateway-registrations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-transit-gateway-registrations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-transit-gateway-registrations-request
                    'make-get-transit-gateway-registrations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-registrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-registrations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-registrations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-transit-gateway-registrations-response
                       common-lisp:nil
                       ((transit-gateway-registrations :initarg
                         :transit-gateway-registrations :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-registration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-transit-gateway-registrations-response-transit-gateway-registrations
                         :shape "TransitGatewayRegistrationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-transit-gateway-registrations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-transit-gateway-registrations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-transit-gateway-registrations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-transit-gateway-registrations-response
                    'make-get-transit-gateway-registrations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-registrations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-registrations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-registrations))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayRegistrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-registrations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-transit-gateway-route-table-attachment-request
                       common-lisp:nil
                       ((attachment-id :initarg :attachment-id :initform
                         (common-lisp:error ":attachment-id is required") :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-get-transit-gateway-route-table-attachment-request-attachment-id
                         :shape "AttachmentId" :location "uri" :location-name
                         "attachmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-transit-gateway-route-table-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-transit-gateway-route-table-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-transit-gateway-route-table-attachment-request
                    'make-get-transit-gateway-route-table-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-route-table-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-route-table-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-route-table-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-transit-gateway-route-table-attachment-response
                       common-lisp:nil
                       ((transit-gateway-route-table-attachment :initarg
                         :transit-gateway-route-table-attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-route-table-attachment
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-transit-gateway-route-table-attachment-response-transit-gateway-route-table-attachment
                         :shape "TransitGatewayRouteTableAttachment" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-transit-gateway-route-table-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-transit-gateway-route-table-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-transit-gateway-route-table-attachment-response
                    'make-get-transit-gateway-route-table-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-route-table-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-route-table-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-route-table-attachment))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayRouteTableAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transit-gateway-route-table-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vpc-attachment-request common-lisp:nil
                       ((attachment-id :initarg :attachment-id :initform
                         (common-lisp:error ":attachment-id is required") :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-get-vpc-attachment-request-attachment-id
                         :shape "AttachmentId" :location "uri" :location-name
                         "attachmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-vpc-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-vpc-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-vpc-attachment-request
                    'make-get-vpc-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vpc-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vpc-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vpc-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-vpc-attachment-response common-lisp:nil
                       ((vpc-attachment :initarg :vpc-attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-attachment common-lisp:null)
                         :accessor
                         struct-shape-get-vpc-attachment-response-vpc-attachment
                         :shape "VpcAttachment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-vpc-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-vpc-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-vpc-attachment-response
                    'make-get-vpc-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vpc-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vpc-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vpc-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass global-network common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-global-network-global-network-id :shape
                         "GlobalNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (global-network-arn :initarg :global-network-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-arn common-lisp:null)
                         :accessor
                         struct-shape-global-network-global-network-arn :shape
                         "GlobalNetworkArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-global-network-description
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-global-network-created-at :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or global-network-state common-lisp:null)
                         :accessor struct-shape-global-network-state :shape
                         "GlobalNetworkState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-global-network-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-global-network
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'global-network
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'global-network 'make-global-network))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input global-network))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input global-network))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-arn))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input global-network))
   common-lisp:nil))
(common-lisp:deftype global-network-arn () 'common-lisp:string)
(common-lisp:deftype global-network-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype global-network-id-list ()
   '(trivial-types:proper-list global-network-id))
 (common-lisp:defun make-global-network-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list global-network-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype global-network-list ()
   '(trivial-types:proper-list global-network))
 (common-lisp:defun make-global-network-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list global-network))
   aws-sdk/generator/shape::members))
(common-lisp:deftype global-network-state () 'common-lisp:string)
(common-lisp:deftype ipaddress () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (networkmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defclass link common-lisp:nil
                       ((link-id :initarg :link-id :initform common-lisp:nil
                         :type (common-lisp:or link-id common-lisp:null)
                         :accessor struct-shape-link-link-id :shape "LinkId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (link-arn :initarg :link-arn :initform common-lisp:nil
                         :type (common-lisp:or link-arn common-lisp:null)
                         :accessor struct-shape-link-link-arn :shape "LinkArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (global-network-id :initarg :global-network-id
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor struct-shape-link-global-network-id :shape
                         "GlobalNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (site-id :initarg :site-id :initform common-lisp:nil
                         :type (common-lisp:or site-id common-lisp:null)
                         :accessor struct-shape-link-site-id :shape "SiteId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-link-description :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-link-type :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bandwidth :initarg :bandwidth :initform
                         common-lisp:nil :type
                         (common-lisp:or bandwidth common-lisp:null) :accessor
                         struct-shape-link-bandwidth :shape "Bandwidth"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider :initarg :provider :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-link-provider :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-link-created-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or link-state common-lisp:null) :accessor
                         struct-shape-link-state :shape "LinkState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-link-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-link (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'link
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'link 'make-link))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input link))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input link))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-id))
      (common-lisp:list
       (common-lisp:cons "LinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-arn))
      (common-lisp:list
       (common-lisp:cons "LinkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-id))
      (common-lisp:list
       (common-lisp:cons "SiteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "Bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input link))
   common-lisp:nil))
(common-lisp:deftype link-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass link-association common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-link-association-global-network-id :shape
                         "GlobalNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-id :initarg :device-id :initform
                         common-lisp:nil :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-link-association-device-id :shape
                         "DeviceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (link-id :initarg :link-id :initform common-lisp:nil
                         :type (common-lisp:or link-id common-lisp:null)
                         :accessor struct-shape-link-association-link-id :shape
                         "LinkId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (link-association-state :initarg
                         :link-association-state :initform common-lisp:nil
                         :type
                         (common-lisp:or link-association-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-link-association-link-association-state
                         :shape "LinkAssociationState" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-link-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'link-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'link-association 'make-link-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input link-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input link-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-id))
      (common-lisp:list
       (common-lisp:cons "LinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'link-association-state))
      (common-lisp:list
       (common-lisp:cons "LinkAssociationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input link-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype link-association-list ()
   '(trivial-types:proper-list link-association))
 (common-lisp:defun make-link-association-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list link-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype link-association-state () 'common-lisp:string)
(common-lisp:deftype link-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype link-id-list () '(trivial-types:proper-list link-id))
 (common-lisp:defun make-link-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list link-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype link-list () '(trivial-types:proper-list link))
 (common-lisp:defun make-link-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list link))
   aws-sdk/generator/shape::members))
(common-lisp:deftype link-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-attachments-request common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-list-attachments-request-core-network-id
                         :shape "CoreNetworkId" :location "querystring"
                         :location-name "coreNetworkId")
                        (attachment-type :initarg :attachment-type :initform
                         common-lisp:nil :type
                         (common-lisp:or attachment-type common-lisp:null)
                         :accessor
                         struct-shape-list-attachments-request-attachment-type
                         :shape "AttachmentType" :location "querystring"
                         :location-name "attachmentType")
                        (edge-location :initarg :edge-location :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor
                         struct-shape-list-attachments-request-edge-location
                         :shape "ExternalRegionCode" :location "querystring"
                         :location-name "edgeLocation")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or attachment-state common-lisp:null)
                         :accessor struct-shape-list-attachments-request-state
                         :shape "AttachmentState" :location "querystring"
                         :location-name "state")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-attachments-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-attachments-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-attachments-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-attachments-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-attachments-request 'make-list-attachments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attachments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attachments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attachments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-attachments-response common-lisp:nil
                       ((attachments :initarg :attachments :initform
                         common-lisp:nil :type
                         (common-lisp:or attachment-list common-lisp:null)
                         :accessor
                         struct-shape-list-attachments-response-attachments
                         :shape "AttachmentList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-attachments-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-attachments-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-attachments-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-attachments-response
                    'make-list-attachments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attachments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attachments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "Attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attachments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-connect-peers-request common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-list-connect-peers-request-core-network-id
                         :shape "CoreNetworkId" :location "querystring"
                         :location-name "coreNetworkId")
                        (connect-attachment-id :initarg :connect-attachment-id
                         :initform common-lisp:nil :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-list-connect-peers-request-connect-attachment-id
                         :shape "AttachmentId" :location "querystring"
                         :location-name "connectAttachmentId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-connect-peers-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-connect-peers-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-connect-peers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-connect-peers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-connect-peers-request
                    'make-list-connect-peers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connect-peers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connect-peers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connect-peers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-connect-peers-response common-lisp:nil
                       ((connect-peers :initarg :connect-peers :initform
                         common-lisp:nil :type
                         (common-lisp:or connect-peer-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-connect-peers-response-connect-peers
                         :shape "ConnectPeerSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-connect-peers-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-connect-peers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-connect-peers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-connect-peers-response
                    'make-list-connect-peers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connect-peers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connect-peers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connect-peers))
      (common-lisp:list
       (common-lisp:cons "ConnectPeers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connect-peers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-core-network-policy-versions-request
                       common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-list-core-network-policy-versions-request-core-network-id
                         :shape "CoreNetworkId" :location "uri" :location-name
                         "coreNetworkId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-core-network-policy-versions-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-core-network-policy-versions-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-core-network-policy-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-core-network-policy-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-core-network-policy-versions-request
                    'make-list-core-network-policy-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-core-network-policy-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-core-network-policy-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-core-network-policy-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-core-network-policy-versions-response
                       common-lisp:nil
                       ((core-network-policy-versions :initarg
                         :core-network-policy-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-policy-version-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-core-network-policy-versions-response-core-network-policy-versions
                         :shape "CoreNetworkPolicyVersionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-core-network-policy-versions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-core-network-policy-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-core-network-policy-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-core-network-policy-versions-response
                    'make-list-core-network-policy-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-core-network-policy-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-core-network-policy-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'core-network-policy-versions))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkPolicyVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-core-network-policy-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-core-networks-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-core-networks-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-core-networks-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-core-networks-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-core-networks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-core-networks-request
                    'make-list-core-networks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-core-networks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-core-networks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-core-networks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-core-networks-response common-lisp:nil
                       ((core-networks :initarg :core-networks :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-core-networks-response-core-networks
                         :shape "CoreNetworkSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-core-networks-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-core-networks-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-core-networks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-core-networks-response
                    'make-list-core-networks-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-core-networks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-core-networks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-networks))
      (common-lisp:list
       (common-lisp:cons "CoreNetworks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-core-networks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organization-service-access-status-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-organization-service-access-status-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-organization-service-access-status-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-organization-service-access-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-organization-service-access-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-organization-service-access-status-request
                    'make-list-organization-service-access-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-service-access-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-service-access-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-service-access-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-organization-service-access-status-response
                       common-lisp:nil
                       ((organization-status :initarg :organization-status
                         :initform common-lisp:nil :type
                         (common-lisp:or organization-status common-lisp:null)
                         :accessor
                         struct-shape-list-organization-service-access-status-response-organization-status
                         :shape "OrganizationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-organization-service-access-status-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-organization-service-access-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-organization-service-access-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-organization-service-access-status-response
                    'make-list-organization-service-access-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-service-access-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-service-access-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-status))
      (common-lisp:list
       (common-lisp:cons "OrganizationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-organization-service-access-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-peerings-request common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-list-peerings-request-core-network-id
                         :shape "CoreNetworkId" :location "querystring"
                         :location-name "coreNetworkId")
                        (peering-type :initarg :peering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or peering-type common-lisp:null)
                         :accessor
                         struct-shape-list-peerings-request-peering-type :shape
                         "PeeringType" :location "querystring" :location-name
                         "peeringType")
                        (edge-location :initarg :edge-location :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor
                         struct-shape-list-peerings-request-edge-location
                         :shape "ExternalRegionCode" :location "querystring"
                         :location-name "edgeLocation")
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or peering-state common-lisp:null)
                         :accessor struct-shape-list-peerings-request-state
                         :shape "PeeringState" :location "querystring"
                         :location-name "state")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-peerings-request-max-results :shape
                         "MaxResults" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-peerings-request-next-token :shape
                         "NextToken" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-peerings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-peerings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-peerings-request 'make-list-peerings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-peerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-peerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-peerings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-peerings-response common-lisp:nil
                       ((peerings :initarg :peerings :initform common-lisp:nil
                         :type (common-lisp:or peering-list common-lisp:null)
                         :accessor struct-shape-list-peerings-response-peerings
                         :shape "PeeringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-peerings-response-next-token :shape
                         "NextToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-peerings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-peerings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-peerings-response 'make-list-peerings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-peerings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-peerings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peerings))
      (common-lisp:list
       (common-lisp:cons "Peerings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-peerings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "ResourceArn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-response-tag-list
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass location common-lisp:nil
                       ((address :initarg :address :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-location-address :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latitude :initarg :latitude :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-location-latitude :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (longitude :initarg :longitude :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-location-longitude :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'location 'make-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latitude))
      (common-lisp:list
       (common-lisp:cons "Latitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'longitude))
      (common-lisp:list
       (common-lisp:cons "Longitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass network-resource common-lisp:nil
                       ((registered-gateway-arn :initarg
                         :registered-gateway-arn :initform common-lisp:nil
                         :type (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-network-resource-registered-gateway-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-network-resource-core-network-id :shape
                         "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor struct-shape-network-resource-aws-region
                         :shape "ExternalRegionCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor struct-shape-network-resource-account-id
                         :shape "AWSAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-network-resource-resource-type
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-network-resource-resource-id
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor struct-shape-network-resource-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (definition :initarg :definition :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-network-resource-definition
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (definition-timestamp :initarg :definition-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-network-resource-definition-timestamp
                         :shape "DateTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-network-resource-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or network-resource-metadata-map
                                         common-lisp:null)
                         :accessor struct-shape-network-resource-metadata
                         :shape "NetworkResourceMetadataMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-resource 'make-network-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-gateway-arn))
      (common-lisp:list
       (common-lisp:cons "RegisteredGatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "AwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'definition-timestamp))
      (common-lisp:list
       (common-lisp:cons "DefinitionTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-resource-count common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-network-resource-count-resource-type
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-network-resource-count-count :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-resource-count
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-resource-count
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-resource-count 'make-network-resource-count))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-count))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-resource-count-list ()
   '(trivial-types:proper-list network-resource-count))
 (common-lisp:defun make-network-resource-count-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-resource-count))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype network-resource-list ()
   '(trivial-types:proper-list network-resource))
 (common-lisp:defun make-network-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype network-resource-metadata-map () 'common-lisp:hash-table)
 (common-lisp:defun make-network-resource-metadata-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass network-resource-summary common-lisp:nil
                       ((registered-gateway-arn :initarg
                         :registered-gateway-arn :initform common-lisp:nil
                         :type (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-network-resource-summary-registered-gateway-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-network-resource-summary-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-network-resource-summary-resource-type
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (definition :initarg :definition :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-network-resource-summary-definition
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name-tag :initarg :name-tag :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-network-resource-summary-name-tag :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-middlebox :initarg :is-middlebox :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-network-resource-summary-is-middlebox
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-resource-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-resource-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-resource-summary 'make-network-resource-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-gateway-arn))
      (common-lisp:list
       (common-lisp:cons "RegisteredGatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition))
      (common-lisp:list
       (common-lisp:cons "Definition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-tag))
      (common-lisp:list
       (common-lisp:cons "NameTag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-middlebox))
      (common-lisp:list
       (common-lisp:cons "IsMiddlebox"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-resource-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-route common-lisp:nil
                       ((destination-cidr-block :initarg
                         :destination-cidr-block :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-network-route-destination-cidr-block
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destinations :initarg :destinations :initform
                         common-lisp:nil :type
                         (common-lisp:or network-route-destination-list
                                         common-lisp:null)
                         :accessor struct-shape-network-route-destinations
                         :shape "NetworkRouteDestinationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (prefix-list-id :initarg :prefix-list-id :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-network-route-prefix-list-id
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or route-state common-lisp:null)
                         :accessor struct-shape-network-route-state :shape
                         "RouteState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or route-type common-lisp:null) :accessor
                         struct-shape-network-route-type :shape "RouteType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-route
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-route
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'network-route 'make-network-route))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-route))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-route))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix-list-id))
      (common-lisp:list
       (common-lisp:cons "PrefixListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-route))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass network-route-destination common-lisp:nil
                       ((core-network-attachment-id :initarg
                         :core-network-attachment-id :initform common-lisp:nil
                         :type (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-network-route-destination-core-network-attachment-id
                         :shape "AttachmentId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-gateway-attachment-id :initarg
                         :transit-gateway-attachment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-attachment-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-network-route-destination-transit-gateway-attachment-id
                         :shape "TransitGatewayAttachmentId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (segment-name :initarg :segment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-network-route-destination-segment-name
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edge-location :initarg :edge-location :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor
                         struct-shape-network-route-destination-edge-location
                         :shape "ExternalRegionCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-network-route-destination-resource-type
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-network-route-destination-resource-id
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-route-destination
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-route-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-route-destination
                    'make-network-route-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-route-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-route-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'core-network-attachment-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-attachment-id))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-name))
      (common-lisp:list
       (common-lisp:cons "SegmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-location))
      (common-lisp:list
       (common-lisp:cons "EdgeLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-route-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-route-destination-list ()
   '(trivial-types:proper-list network-route-destination))
 (common-lisp:defun make-network-route-destination-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            network-route-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype network-route-list ()
   '(trivial-types:proper-list network-route))
 (common-lisp:defun make-network-route-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-route))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass network-telemetry common-lisp:nil
                       ((registered-gateway-arn :initarg
                         :registered-gateway-arn :initform common-lisp:nil
                         :type (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-network-telemetry-registered-gateway-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-network-telemetry-core-network-id :shape
                         "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor struct-shape-network-telemetry-aws-region
                         :shape "ExternalRegionCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor struct-shape-network-telemetry-account-id
                         :shape "AWSAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-network-telemetry-resource-type
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-network-telemetry-resource-id
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor struct-shape-network-telemetry-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (address :initarg :address :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-network-telemetry-address
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (health :initarg :health :initform common-lisp:nil
                         :type
                         (common-lisp:or connection-health common-lisp:null)
                         :accessor struct-shape-network-telemetry-health :shape
                         "ConnectionHealth" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-telemetry
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-telemetry
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-telemetry 'make-network-telemetry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-telemetry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-telemetry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-gateway-arn))
      (common-lisp:list
       (common-lisp:cons "RegisteredGatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "AwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health))
      (common-lisp:list
       (common-lisp:cons "Health"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-telemetry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-telemetry-list ()
   '(trivial-types:proper-list network-telemetry))
 (common-lisp:defun make-network-telemetry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-telemetry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype organization-aws-service-access-status ()
  'common-lisp:string)
(common-lisp:deftype organization-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass organization-status common-lisp:nil
                       ((organization-id :initarg :organization-id :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-id common-lisp:null)
                         :accessor
                         struct-shape-organization-status-organization-id
                         :shape "OrganizationId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (organization-aws-service-access-status :initarg
                         :organization-aws-service-access-status :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-aws-service-access-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-status-organization-aws-service-access-status
                         :shape "OrganizationAwsServiceAccessStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (slrdeployment-status :initarg :slrdeployment-status
                         :initform common-lisp:nil :type
                         (common-lisp:or slrdeployment-status common-lisp:null)
                         :accessor
                         struct-shape-organization-status-slrdeployment-status
                         :shape "SLRDeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-status-list :initarg :account-status-list
                         :initform common-lisp:nil :type
                         (common-lisp:or account-status-list common-lisp:null)
                         :accessor
                         struct-shape-organization-status-account-status-list
                         :shape "AccountStatusList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'organization-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-status 'make-organization-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input organization-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input organization-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-aws-service-access-status))
      (common-lisp:list
       (common-lisp:cons "OrganizationAwsServiceAccessStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slrdeployment-status))
      (common-lisp:list
       (common-lisp:cons "SLRDeploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-status-list))
      (common-lisp:list
       (common-lisp:cons "AccountStatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input organization-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass path-component common-lisp:nil
                       ((sequence :initarg :sequence :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor struct-shape-path-component-sequence :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource :initarg :resource :initform common-lisp:nil
                         :type
                         (common-lisp:or network-resource-summary
                                         common-lisp:null)
                         :accessor struct-shape-path-component-resource :shape
                         "NetworkResourceSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-cidr-block :initarg
                         :destination-cidr-block :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-path-component-destination-cidr-block
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-path-component
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'path-component
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'path-component 'make-path-component))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input path-component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input path-component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sequence))
      (common-lisp:list
       (common-lisp:cons "Sequence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-cidr-block))
      (common-lisp:list
       (common-lisp:cons "DestinationCidrBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input path-component))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype path-component-list ()
   '(trivial-types:proper-list path-component))
 (common-lisp:defun make-path-component-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list path-component))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass peering common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor struct-shape-peering-core-network-id :shape
                         "CoreNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (core-network-arn :initarg :core-network-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network-arn common-lisp:null)
                         :accessor struct-shape-peering-core-network-arn :shape
                         "CoreNetworkArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (peering-id :initarg :peering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or peering-id common-lisp:null) :accessor
                         struct-shape-peering-peering-id :shape "PeeringId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (owner-account-id :initarg :owner-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor struct-shape-peering-owner-account-id :shape
                         "AWSAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (peering-type :initarg :peering-type :initform
                         common-lisp:nil :type
                         (common-lisp:or peering-type common-lisp:null)
                         :accessor struct-shape-peering-peering-type :shape
                         "PeeringType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or peering-state common-lisp:null)
                         :accessor struct-shape-peering-state :shape
                         "PeeringState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (edge-location :initarg :edge-location :initform
                         common-lisp:nil :type
                         (common-lisp:or external-region-code common-lisp:null)
                         :accessor struct-shape-peering-edge-location :shape
                         "ExternalRegionCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor struct-shape-peering-resource-arn :shape
                         "ResourceArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-peering-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-peering-created-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-peering
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'peering
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'peering 'make-peering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input peering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input peering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-id))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-arn))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peering-id))
      (common-lisp:list
       (common-lisp:cons "PeeringId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peering-type))
      (common-lisp:list
       (common-lisp:cons "PeeringType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edge-location))
      (common-lisp:list
       (common-lisp:cons "EdgeLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input peering))
   common-lisp:nil))
(common-lisp:deftype peering-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype peering-list () '(trivial-types:proper-list peering))
 (common-lisp:defun make-peering-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list peering))
   aws-sdk/generator/shape::members))
(common-lisp:deftype peering-state () 'common-lisp:string)
(common-lisp:deftype peering-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass proposed-segment-change common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-proposed-segment-change-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (attachment-policy-rule-number :initarg
                         :attachment-policy-rule-number :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-proposed-segment-change-attachment-policy-rule-number
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (segment-name :initarg :segment-name :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-proposed-segment-change-segment-name
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-proposed-segment-change
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'proposed-segment-change
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'proposed-segment-change 'make-proposed-segment-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          proposed-segment-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          proposed-segment-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attachment-policy-rule-number))
      (common-lisp:list
       (common-lisp:cons "AttachmentPolicyRuleNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-name))
      (common-lisp:list
       (common-lisp:cons "SegmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          proposed-segment-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-core-network-policy-request common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-put-core-network-policy-request-core-network-id
                         :shape "CoreNetworkId" :location "uri" :location-name
                         "coreNetworkId")
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policy-document is required")
                         :type
                         (common-lisp:or core-network-policy-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-core-network-policy-request-policy-document
                         :shape "CoreNetworkPolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-put-core-network-policy-request-description
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (latest-version-id :initarg :latest-version-id
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-put-core-network-policy-request-latest-version-id
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-put-core-network-policy-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-core-network-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-core-network-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-core-network-policy-request
                    'make-put-core-network-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-core-network-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-core-network-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-version-id))
      (common-lisp:list
       (common-lisp:cons "LatestVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-core-network-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-core-network-policy-response common-lisp:nil
                       ((core-network-policy :initarg :core-network-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or core-network-policy common-lisp:null)
                         :accessor
                         struct-shape-put-core-network-policy-response-core-network-policy
                         :shape "CoreNetworkPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-core-network-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-core-network-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-core-network-policy-response
                    'make-put-core-network-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-core-network-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-core-network-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-policy))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-core-network-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-request common-lisp:nil
                       ((policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policy-document is required")
                         :type
                         (common-lisp:or resource-policy-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-policy-document
                         :shape "ResourcePolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-put-resource-policy-request-resource-arn
                         :shape "ResourceArn" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-request
                    'make-put-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-response
                    'make-put-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   common-lisp:nil))
(common-lisp:deftype reason-context-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reason-context-map () 'common-lisp:hash-table)
 (common-lisp:defun make-reason-context-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype reason-context-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-transit-gateway-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-register-transit-gateway-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (transit-gateway-arn :initarg :transit-gateway-arn
                         :initform
                         (common-lisp:error ":transit-gateway-arn is required")
                         :type
                         (common-lisp:or transit-gateway-arn common-lisp:null)
                         :accessor
                         struct-shape-register-transit-gateway-request-transit-gateway-arn
                         :shape "TransitGatewayArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-transit-gateway-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-transit-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-transit-gateway-request
                    'make-register-transit-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-transit-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-transit-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transit-gateway-arn))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-transit-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-transit-gateway-response common-lisp:nil
                       ((transit-gateway-registration :initarg
                         :transit-gateway-registration :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-registration
                                         common-lisp:null)
                         :accessor
                         struct-shape-register-transit-gateway-response-transit-gateway-registration
                         :shape "TransitGatewayRegistration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-register-transit-gateway-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-transit-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'register-transit-gateway-response
                    'make-register-transit-gateway-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-transit-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-transit-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-registration))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayRegistration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-transit-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-attachment-request common-lisp:nil
                       ((attachment-id :initarg :attachment-id :initform
                         (common-lisp:error ":attachment-id is required") :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-reject-attachment-request-attachment-id
                         :shape "AttachmentId" :location "uri" :location-name
                         "attachmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reject-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-attachment-request
                    'make-reject-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-attachment-response common-lisp:nil
                       ((attachment :initarg :attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or attachment common-lisp:null) :accessor
                         struct-shape-reject-attachment-response-attachment
                         :shape "Attachment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reject-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-attachment-response
                    'make-reject-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "Attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass relationship common-lisp:nil
                       ((from :initarg :from :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-relationship-from :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (to :initarg :to :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-relationship-to :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relationship
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'relationship
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'relationship 'make-relationship))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relationship))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relationship))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from))
      (common-lisp:list
       (common-lisp:cons "From"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to))
      (common-lisp:list
       (common-lisp:cons "To"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relationship))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relationship-list ()
   '(trivial-types:proper-list relationship))
 (common-lisp:defun make-relationship-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list relationship))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (networkmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)
      (context :initarg :context :initform common-lisp:nil :reader
       resource-not-found-exception-context)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type
                    'resource-not-found-exception-context)))
(common-lisp:deftype resource-policy-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass restore-core-network-policy-version-request
                       common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-restore-core-network-policy-version-request-core-network-id
                         :shape "CoreNetworkId" :location "uri" :location-name
                         "coreNetworkId")
                        (policy-version-id :initarg :policy-version-id
                         :initform
                         (common-lisp:error ":policy-version-id is required")
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-restore-core-network-policy-version-request-policy-version-id
                         :shape "Integer" :location "uri" :location-name
                         "policyVersionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-core-network-policy-version-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-core-network-policy-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-core-network-policy-version-request
                    'make-restore-core-network-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-core-network-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-core-network-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-core-network-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass restore-core-network-policy-version-response
                       common-lisp:nil
                       ((core-network-policy :initarg :core-network-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or core-network-policy common-lisp:null)
                         :accessor
                         struct-shape-restore-core-network-policy-version-response-core-network-policy
                         :shape "CoreNetworkPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-restore-core-network-policy-version-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'restore-core-network-policy-version-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'restore-core-network-policy-version-response
                    'make-restore-core-network-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-core-network-policy-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-core-network-policy-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network-policy))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-core-network-policy-version-response))
   common-lisp:nil))
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass route-analysis common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-route-analysis-global-network-id :shape
                         "GlobalNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-account-id :initarg :owner-account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or awsaccount-id common-lisp:null)
                         :accessor struct-shape-route-analysis-owner-account-id
                         :shape "AWSAccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (route-analysis-id :initarg :route-analysis-id
                         :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-route-analysis-route-analysis-id :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-timestamp :initarg :start-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-route-analysis-start-timestamp :shape
                         "DateTime" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or route-analysis-status
                                         common-lisp:null)
                         :accessor struct-shape-route-analysis-status :shape
                         "RouteAnalysisStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type
                         (common-lisp:or route-analysis-endpoint-options
                                         common-lisp:null)
                         :accessor struct-shape-route-analysis-source :shape
                         "RouteAnalysisEndpointOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (destination :initarg :destination :initform
                         common-lisp:nil :type
                         (common-lisp:or route-analysis-endpoint-options
                                         common-lisp:null)
                         :accessor struct-shape-route-analysis-destination
                         :shape "RouteAnalysisEndpointOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (include-return-path :initarg :include-return-path
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-route-analysis-include-return-path :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (use-middleboxes :initarg :use-middleboxes :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-route-analysis-use-middleboxes :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (forward-path :initarg :forward-path :initform
                         common-lisp:nil :type
                         (common-lisp:or route-analysis-path common-lisp:null)
                         :accessor struct-shape-route-analysis-forward-path
                         :shape "RouteAnalysisPath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (return-path :initarg :return-path :initform
                         common-lisp:nil :type
                         (common-lisp:or route-analysis-path common-lisp:null)
                         :accessor struct-shape-route-analysis-return-path
                         :shape "RouteAnalysisPath" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-route-analysis
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'route-analysis
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'route-analysis 'make-route-analysis))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-analysis))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-analysis))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-account-id))
      (common-lisp:list
       (common-lisp:cons "OwnerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-analysis-id))
      (common-lisp:list
       (common-lisp:cons "RouteAnalysisId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-return-path))
      (common-lisp:list
       (common-lisp:cons "IncludeReturnPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-middleboxes))
      (common-lisp:list
       (common-lisp:cons "UseMiddleboxes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forward-path))
      (common-lisp:list
       (common-lisp:cons "ForwardPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-path))
      (common-lisp:list
       (common-lisp:cons "ReturnPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-analysis))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass route-analysis-completion common-lisp:nil
                       ((result-code :initarg :result-code :initform
                         common-lisp:nil :type
                         (common-lisp:or route-analysis-completion-result-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-route-analysis-completion-result-code
                         :shape "RouteAnalysisCompletionResultCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reason-code :initarg :reason-code :initform
                         common-lisp:nil :type
                         (common-lisp:or route-analysis-completion-reason-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-route-analysis-completion-reason-code
                         :shape "RouteAnalysisCompletionReasonCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (reason-context :initarg :reason-context :initform
                         common-lisp:nil :type
                         (common-lisp:or reason-context-map common-lisp:null)
                         :accessor
                         struct-shape-route-analysis-completion-reason-context
                         :shape "ReasonContextMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-route-analysis-completion
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'route-analysis-completion
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'route-analysis-completion
                    'make-route-analysis-completion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          route-analysis-completion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          route-analysis-completion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-code))
      (common-lisp:list
       (common-lisp:cons "ResultCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason-code))
      (common-lisp:list
       (common-lisp:cons "ReasonCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason-context))
      (common-lisp:list
       (common-lisp:cons "ReasonContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          route-analysis-completion))
   common-lisp:nil))
(common-lisp:deftype route-analysis-completion-reason-code ()
  'common-lisp:string)
(common-lisp:deftype route-analysis-completion-result-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass route-analysis-endpoint-options common-lisp:nil
                       ((transit-gateway-attachment-arn :initarg
                         :transit-gateway-attachment-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-attachment-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-route-analysis-endpoint-options-transit-gateway-attachment-arn
                         :shape "TransitGatewayAttachmentArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (transit-gateway-arn :initarg :transit-gateway-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or transit-gateway-arn common-lisp:null)
                         :accessor
                         struct-shape-route-analysis-endpoint-options-transit-gateway-arn
                         :shape "TransitGatewayArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or ipaddress common-lisp:null) :accessor
                         struct-shape-route-analysis-endpoint-options-ip-address
                         :shape "IPAddress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-route-analysis-endpoint-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'route-analysis-endpoint-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'route-analysis-endpoint-options
                    'make-route-analysis-endpoint-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          route-analysis-endpoint-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          route-analysis-endpoint-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-attachment-arn))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayAttachmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transit-gateway-arn))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          route-analysis-endpoint-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass route-analysis-endpoint-options-specification
                       common-lisp:nil
                       ((transit-gateway-attachment-arn :initarg
                         :transit-gateway-attachment-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-attachment-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-route-analysis-endpoint-options-specification-transit-gateway-attachment-arn
                         :shape "TransitGatewayAttachmentArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ip-address :initarg :ip-address :initform
                         common-lisp:nil :type
                         (common-lisp:or ipaddress common-lisp:null) :accessor
                         struct-shape-route-analysis-endpoint-options-specification-ip-address
                         :shape "IPAddress" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-route-analysis-endpoint-options-specification
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'route-analysis-endpoint-options-specification
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'route-analysis-endpoint-options-specification
                    'make-route-analysis-endpoint-options-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          route-analysis-endpoint-options-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          route-analysis-endpoint-options-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-attachment-arn))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayAttachmentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          route-analysis-endpoint-options-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass route-analysis-path common-lisp:nil
                       ((completion-status :initarg :completion-status
                         :initform common-lisp:nil :type
                         (common-lisp:or route-analysis-completion
                                         common-lisp:null)
                         :accessor
                         struct-shape-route-analysis-path-completion-status
                         :shape "RouteAnalysisCompletion" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (path :initarg :path :initform common-lisp:nil :type
                         (common-lisp:or path-component-list common-lisp:null)
                         :accessor struct-shape-route-analysis-path-path :shape
                         "PathComponentList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-route-analysis-path
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'route-analysis-path
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'route-analysis-path 'make-route-analysis-path))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input route-analysis-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input route-analysis-path))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-status))
      (common-lisp:list
       (common-lisp:cons "CompletionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input route-analysis-path))
   common-lisp:nil))
(common-lisp:deftype route-analysis-status () 'common-lisp:string)
(common-lisp:deftype route-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype route-state-list ()
   '(trivial-types:proper-list route-state))
 (common-lisp:defun make-route-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass route-table-identifier common-lisp:nil
                       ((transit-gateway-route-table-arn :initarg
                         :transit-gateway-route-table-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-route-table-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-route-table-identifier-transit-gateway-route-table-arn
                         :shape "TransitGatewayRouteTableArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (core-network-segment-edge :initarg
                         :core-network-segment-edge :initform common-lisp:nil
                         :type
                         (common-lisp:or core-network-segment-edge-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-route-table-identifier-core-network-segment-edge
                         :shape "CoreNetworkSegmentEdgeIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-route-table-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'route-table-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'route-table-identifier 'make-route-table-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          route-table-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          route-table-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-route-table-arn))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayRouteTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'core-network-segment-edge))
      (common-lisp:list
       (common-lisp:cons "CoreNetworkSegmentEdge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          route-table-identifier))
   common-lisp:nil))
(common-lisp:deftype route-table-type () 'common-lisp:string)
(common-lisp:deftype route-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype route-type-list ()
   '(trivial-types:proper-list route-type))
 (common-lisp:defun make-route-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype slrdeployment-status () 'common-lisp:string)
(common-lisp:deftype server-side-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (networkmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (limit-code :initarg :limit-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-limit-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-limit-code
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:progn
 (common-lisp:defclass site common-lisp:nil
                       ((site-id :initarg :site-id :initform common-lisp:nil
                         :type (common-lisp:or site-id common-lisp:null)
                         :accessor struct-shape-site-site-id :shape "SiteId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (site-arn :initarg :site-arn :initform common-lisp:nil
                         :type (common-lisp:or site-arn common-lisp:null)
                         :accessor struct-shape-site-site-arn :shape "SiteArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (global-network-id :initarg :global-network-id
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor struct-shape-site-global-network-id :shape
                         "GlobalNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-site-description :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor struct-shape-site-location :shape "Location"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or date-time common-lisp:null) :accessor
                         struct-shape-site-created-at :shape "DateTime"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or site-state common-lisp:null) :accessor
                         struct-shape-site-state :shape "SiteState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-site-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-site (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'site
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'site 'make-site))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input site))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input site))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-id))
      (common-lisp:list
       (common-lisp:cons "SiteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-arn))
      (common-lisp:list
       (common-lisp:cons "SiteArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input site))
   common-lisp:nil))
(common-lisp:deftype site-arn () 'common-lisp:string)
(common-lisp:deftype site-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype site-id-list () '(trivial-types:proper-list site-id))
 (common-lisp:defun make-site-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list site-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype site-list () '(trivial-types:proper-list site))
 (common-lisp:defun make-site-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list site))
   aws-sdk/generator/shape::members))
(common-lisp:deftype site-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass site-to-site-vpn-attachment common-lisp:nil
                       ((attachment :initarg :attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or attachment common-lisp:null) :accessor
                         struct-shape-site-to-site-vpn-attachment-attachment
                         :shape "Attachment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpn-connection-arn :initarg :vpn-connection-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or vpn-connection-arn common-lisp:null)
                         :accessor
                         struct-shape-site-to-site-vpn-attachment-vpn-connection-arn
                         :shape "VpnConnectionArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-site-to-site-vpn-attachment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'site-to-site-vpn-attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'site-to-site-vpn-attachment
                    'make-site-to-site-vpn-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          site-to-site-vpn-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          site-to-site-vpn-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "Attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpn-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpnConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          site-to-site-vpn-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-organization-service-access-update-request
                       common-lisp:nil
                       ((action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or action common-lisp:null) :accessor
                         struct-shape-start-organization-service-access-update-request-action
                         :shape "Action" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-organization-service-access-update-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-organization-service-access-update-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-organization-service-access-update-request
                    'make-start-organization-service-access-update-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-organization-service-access-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-organization-service-access-update-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-organization-service-access-update-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-organization-service-access-update-response
                       common-lisp:nil
                       ((organization-status :initarg :organization-status
                         :initform common-lisp:nil :type
                         (common-lisp:or organization-status common-lisp:null)
                         :accessor
                         struct-shape-start-organization-service-access-update-response-organization-status
                         :shape "OrganizationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-organization-service-access-update-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-organization-service-access-update-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-organization-service-access-update-response
                    'make-start-organization-service-access-update-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-organization-service-access-update-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-organization-service-access-update-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'organization-status))
      (common-lisp:list
       (common-lisp:cons "OrganizationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-organization-service-access-update-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-route-analysis-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-start-route-analysis-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or
                          route-analysis-endpoint-options-specification
                          common-lisp:null)
                         :accessor
                         struct-shape-start-route-analysis-request-source
                         :shape "RouteAnalysisEndpointOptionsSpecification"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (destination :initarg :destination :initform
                         (common-lisp:error ":destination is required") :type
                         (common-lisp:or
                          route-analysis-endpoint-options-specification
                          common-lisp:null)
                         :accessor
                         struct-shape-start-route-analysis-request-destination
                         :shape "RouteAnalysisEndpointOptionsSpecification"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (include-return-path :initarg :include-return-path
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-route-analysis-request-include-return-path
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (use-middleboxes :initarg :use-middleboxes :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-start-route-analysis-request-use-middleboxes
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-route-analysis-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-route-analysis-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-route-analysis-request
                    'make-start-route-analysis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-route-analysis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-route-analysis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-return-path))
      (common-lisp:list
       (common-lisp:cons "IncludeReturnPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-middleboxes))
      (common-lisp:list
       (common-lisp:cons "UseMiddleboxes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-route-analysis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-route-analysis-response common-lisp:nil
                       ((route-analysis :initarg :route-analysis :initform
                         common-lisp:nil :type
                         (common-lisp:or route-analysis common-lisp:null)
                         :accessor
                         struct-shape-start-route-analysis-response-route-analysis
                         :shape "RouteAnalysis" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-route-analysis-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-route-analysis-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-route-analysis-response
                    'make-start-route-analysis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-route-analysis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-route-analysis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'route-analysis))
      (common-lisp:list
       (common-lisp:cons "RouteAnalysis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-route-analysis-response))
   common-lisp:nil))
(common-lisp:deftype subnet-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-arn-list ()
   '(trivial-types:proper-list subnet-arn))
 (common-lisp:defun make-subnet-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "ResourceArn" :location "uri" :location-name
                         "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (networkmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-retry-after-seconds)))
(common-lisp:deftype transit-gateway-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype transit-gateway-arn-list ()
   '(trivial-types:proper-list transit-gateway-arn))
 (common-lisp:defun make-transit-gateway-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transit-gateway-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transit-gateway-attachment-arn () 'common-lisp:string)
(common-lisp:deftype transit-gateway-attachment-id () 'common-lisp:string)
(common-lisp:deftype transit-gateway-connect-peer-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype transit-gateway-connect-peer-arn-list ()
   '(trivial-types:proper-list transit-gateway-connect-peer-arn))
 (common-lisp:defun make-transit-gateway-connect-peer-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            transit-gateway-connect-peer-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass transit-gateway-connect-peer-association common-lisp:nil
                       ((transit-gateway-connect-peer-arn :initarg
                         :transit-gateway-connect-peer-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-connect-peer-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-connect-peer-association-transit-gateway-connect-peer-arn
                         :shape "TransitGatewayConnectPeerArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (global-network-id :initarg :global-network-id
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-connect-peer-association-global-network-id
                         :shape "GlobalNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (device-id :initarg :device-id :initform
                         common-lisp:nil :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-transit-gateway-connect-peer-association-device-id
                         :shape "DeviceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (link-id :initarg :link-id :initform common-lisp:nil
                         :type (common-lisp:or link-id common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-connect-peer-association-link-id
                         :shape "LinkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or
                          transit-gateway-connect-peer-association-state
                          common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-connect-peer-association-state
                         :shape "TransitGatewayConnectPeerAssociationState"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transit-gateway-connect-peer-association
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'transit-gateway-connect-peer-association
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transit-gateway-connect-peer-association
                    'make-transit-gateway-connect-peer-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-connect-peer-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-connect-peer-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-connect-peer-arn))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayConnectPeerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-id))
      (common-lisp:list
       (common-lisp:cons "LinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-connect-peer-association))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transit-gateway-connect-peer-association-list ()
   '(trivial-types:proper-list transit-gateway-connect-peer-association))
 (common-lisp:defun make-transit-gateway-connect-peer-association-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            transit-gateway-connect-peer-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transit-gateway-connect-peer-association-state ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transit-gateway-peering common-lisp:nil
                       ((peering :initarg :peering :initform common-lisp:nil
                         :type (common-lisp:or peering common-lisp:null)
                         :accessor struct-shape-transit-gateway-peering-peering
                         :shape "Peering" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-gateway-arn :initarg :transit-gateway-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or transit-gateway-arn common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-peering-transit-gateway-arn
                         :shape "TransitGatewayArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-gateway-peering-attachment-id :initarg
                         :transit-gateway-peering-attachment-id :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-peering-attachment-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-peering-transit-gateway-peering-attachment-id
                         :shape "TransitGatewayPeeringAttachmentId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transit-gateway-peering
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transit-gateway-peering
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transit-gateway-peering 'make-transit-gateway-peering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-peering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-peering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peering))
      (common-lisp:list
       (common-lisp:cons "Peering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transit-gateway-arn))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-peering-attachment-id))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayPeeringAttachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-peering))
   common-lisp:nil))
(common-lisp:deftype transit-gateway-peering-attachment-id ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transit-gateway-registration common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform common-lisp:nil :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-registration-global-network-id
                         :shape "GlobalNetworkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-gateway-arn :initarg :transit-gateway-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or transit-gateway-arn common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-registration-transit-gateway-arn
                         :shape "TransitGatewayArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or
                          transit-gateway-registration-state-reason
                          common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-registration-state :shape
                         "TransitGatewayRegistrationStateReason" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transit-gateway-registration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'transit-gateway-registration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transit-gateway-registration
                    'make-transit-gateway-registration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-registration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-registration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network-id))
      (common-lisp:list
       (common-lisp:cons "GlobalNetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transit-gateway-arn))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-registration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transit-gateway-registration-list ()
   '(trivial-types:proper-list transit-gateway-registration))
 (common-lisp:defun make-transit-gateway-registration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            transit-gateway-registration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype transit-gateway-registration-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transit-gateway-registration-state-reason
                       common-lisp:nil
                       ((code :initarg :code :initform common-lisp:nil :type
                         (common-lisp:or transit-gateway-registration-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-registration-state-reason-code
                         :shape "TransitGatewayRegistrationState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-registration-state-reason-message
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transit-gateway-registration-state-reason
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'transit-gateway-registration-state-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transit-gateway-registration-state-reason
                    'make-transit-gateway-registration-state-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-registration-state-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-registration-state-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-registration-state-reason))
   common-lisp:nil))
(common-lisp:deftype transit-gateway-route-table-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass transit-gateway-route-table-attachment common-lisp:nil
                       ((attachment :initarg :attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or attachment common-lisp:null) :accessor
                         struct-shape-transit-gateway-route-table-attachment-attachment
                         :shape "Attachment" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (peering-id :initarg :peering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or peering-id common-lisp:null) :accessor
                         struct-shape-transit-gateway-route-table-attachment-peering-id
                         :shape "PeeringId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (transit-gateway-route-table-arn :initarg
                         :transit-gateway-route-table-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or transit-gateway-route-table-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-transit-gateway-route-table-attachment-transit-gateway-route-table-arn
                         :shape "TransitGatewayRouteTableArn" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-transit-gateway-route-table-attachment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'transit-gateway-route-table-attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'transit-gateway-route-table-attachment
                    'make-transit-gateway-route-table-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-route-table-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-route-table-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "Attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'peering-id))
      (common-lisp:list
       (common-lisp:cons "PeeringId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transit-gateway-route-table-arn))
      (common-lisp:list
       (common-lisp:cons "TransitGatewayRouteTableArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transit-gateway-route-table-attachment))
   common-lisp:nil))
(common-lisp:deftype tunnel-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "ResourceArn" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connection-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-update-connection-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (connection-id :initarg :connection-id :initform
                         (common-lisp:error ":connection-id is required") :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         struct-shape-update-connection-request-connection-id
                         :shape "ConnectionId" :location "uri" :location-name
                         "connectionId")
                        (link-id :initarg :link-id :initform common-lisp:nil
                         :type (common-lisp:or link-id common-lisp:null)
                         :accessor
                         struct-shape-update-connection-request-link-id :shape
                         "LinkId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (connected-link-id :initarg :connected-link-id
                         :initform common-lisp:nil :type
                         (common-lisp:or link-id common-lisp:null) :accessor
                         struct-shape-update-connection-request-connected-link-id
                         :shape "LinkId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-update-connection-request-description
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-connection-request
                    'make-update-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-id))
      (common-lisp:list
       (common-lisp:cons "LinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connected-link-id))
      (common-lisp:list
       (common-lisp:cons "ConnectedLinkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connection-response common-lisp:nil
                       ((connection :initarg :connection :initform
                         common-lisp:nil :type
                         (common-lisp:or connection common-lisp:null) :accessor
                         struct-shape-update-connection-response-connection
                         :shape "Connection" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-connection-response
                    'make-update-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-core-network-request common-lisp:nil
                       ((core-network-id :initarg :core-network-id :initform
                         (common-lisp:error ":core-network-id is required")
                         :type
                         (common-lisp:or core-network-id common-lisp:null)
                         :accessor
                         struct-shape-update-core-network-request-core-network-id
                         :shape "CoreNetworkId" :location "uri" :location-name
                         "coreNetworkId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-update-core-network-request-description
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-core-network-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-core-network-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-core-network-request
                    'make-update-core-network-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-core-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-core-network-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-core-network-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-core-network-response common-lisp:nil
                       ((core-network :initarg :core-network :initform
                         common-lisp:nil :type
                         (common-lisp:or core-network common-lisp:null)
                         :accessor
                         struct-shape-update-core-network-response-core-network
                         :shape "CoreNetwork" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-core-network-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-core-network-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-core-network-response
                    'make-update-core-network-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-core-network-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-core-network-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-network))
      (common-lisp:list
       (common-lisp:cons "CoreNetwork"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-core-network-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-device-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-update-device-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (device-id :initarg :device-id :initform
                         (common-lisp:error ":device-id is required") :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         struct-shape-update-device-request-device-id :shape
                         "DeviceId" :location "uri" :location-name "deviceId")
                        (awslocation :initarg :awslocation :initform
                         common-lisp:nil :type
                         (common-lisp:or awslocation common-lisp:null)
                         :accessor
                         struct-shape-update-device-request-awslocation :shape
                         "AWSLocation" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-update-device-request-description :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-update-device-request-type
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vendor :initarg :vendor :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-update-device-request-vendor
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (model :initarg :model :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-update-device-request-model
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (serial-number :initarg :serial-number :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-update-device-request-serial-number
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor struct-shape-update-device-request-location
                         :shape "Location" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (site-id :initarg :site-id :initform common-lisp:nil
                         :type (common-lisp:or site-id common-lisp:null)
                         :accessor struct-shape-update-device-request-site-id
                         :shape "SiteId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-device-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-device-request 'make-update-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'awslocation))
      (common-lisp:list
       (common-lisp:cons "AWSLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor))
      (common-lisp:list
       (common-lisp:cons "Vendor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "Model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site-id))
      (common-lisp:list
       (common-lisp:cons "SiteId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-device-response common-lisp:nil
                       ((device :initarg :device :initform common-lisp:nil
                         :type (common-lisp:or device common-lisp:null)
                         :accessor struct-shape-update-device-response-device
                         :shape "Device" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-device-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-device-response 'make-update-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device))
      (common-lisp:list
       (common-lisp:cons "Device"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-global-network-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-update-global-network-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor
                         struct-shape-update-global-network-request-description
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-global-network-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-global-network-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-global-network-request
                    'make-update-global-network-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-global-network-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-global-network-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-global-network-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-global-network-response common-lisp:nil
                       ((global-network :initarg :global-network :initform
                         common-lisp:nil :type
                         (common-lisp:or global-network common-lisp:null)
                         :accessor
                         struct-shape-update-global-network-response-global-network
                         :shape "GlobalNetwork" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-global-network-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-global-network-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-global-network-response
                    'make-update-global-network-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-global-network-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-global-network-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-network))
      (common-lisp:list
       (common-lisp:cons "GlobalNetwork"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-global-network-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-link-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-update-link-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (link-id :initarg :link-id :initform
                         (common-lisp:error ":link-id is required") :type
                         (common-lisp:or link-id common-lisp:null) :accessor
                         struct-shape-update-link-request-link-id :shape
                         "LinkId" :location "uri" :location-name "linkId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-update-link-request-description
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-update-link-request-type :shape
                         "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bandwidth :initarg :bandwidth :initform
                         common-lisp:nil :type
                         (common-lisp:or bandwidth common-lisp:null) :accessor
                         struct-shape-update-link-request-bandwidth :shape
                         "Bandwidth" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (provider :initarg :provider :initform common-lisp:nil
                         :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-update-link-request-provider
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-link-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-link-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-link-request 'make-update-link-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-link-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-link-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "Bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-link-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-link-response common-lisp:nil
                       ((link :initarg :link :initform common-lisp:nil :type
                         (common-lisp:or link common-lisp:null) :accessor
                         struct-shape-update-link-response-link :shape "Link"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-link-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-link-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-link-response 'make-update-link-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-link-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-link-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link))
      (common-lisp:list
       (common-lisp:cons "Link"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-link-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-resource-metadata-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-update-network-resource-metadata-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-update-network-resource-metadata-request-resource-arn
                         :shape "ResourceArn" :location "uri" :location-name
                         "resourceArn")
                        (metadata :initarg :metadata :initform
                         (common-lisp:error ":metadata is required") :type
                         (common-lisp:or network-resource-metadata-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-network-resource-metadata-request-metadata
                         :shape "NetworkResourceMetadataMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-network-resource-metadata-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-network-resource-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-network-resource-metadata-request
                    'make-update-network-resource-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-resource-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-resource-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-resource-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-resource-metadata-response
                       common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-update-network-resource-metadata-response-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (metadata :initarg :metadata :initform common-lisp:nil
                         :type
                         (common-lisp:or network-resource-metadata-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-network-resource-metadata-response-metadata
                         :shape "NetworkResourceMetadataMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-network-resource-metadata-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-network-resource-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-network-resource-metadata-response
                    'make-update-network-resource-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-resource-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-resource-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-resource-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-site-request common-lisp:nil
                       ((global-network-id :initarg :global-network-id
                         :initform
                         (common-lisp:error ":global-network-id is required")
                         :type
                         (common-lisp:or global-network-id common-lisp:null)
                         :accessor
                         struct-shape-update-site-request-global-network-id
                         :shape "GlobalNetworkId" :location "uri"
                         :location-name "globalNetworkId")
                        (site-id :initarg :site-id :initform
                         (common-lisp:error ":site-id is required") :type
                         (common-lisp:or site-id common-lisp:null) :accessor
                         struct-shape-update-site-request-site-id :shape
                         "SiteId" :location "uri" :location-name "siteId")
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or constrained-string common-lisp:null)
                         :accessor struct-shape-update-site-request-description
                         :shape "ConstrainedString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (location :initarg :location :initform common-lisp:nil
                         :type (common-lisp:or location common-lisp:null)
                         :accessor struct-shape-update-site-request-location
                         :shape "Location" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-site-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-site-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-site-request 'make-update-site-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-site-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-site-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-site-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-site-response common-lisp:nil
                       ((site :initarg :site :initform common-lisp:nil :type
                         (common-lisp:or site common-lisp:null) :accessor
                         struct-shape-update-site-response-site :shape "Site"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-site-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-site-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-site-response 'make-update-site-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-site-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-site-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'site))
      (common-lisp:list
       (common-lisp:cons "Site"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-site-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vpc-attachment-request common-lisp:nil
                       ((attachment-id :initarg :attachment-id :initform
                         (common-lisp:error ":attachment-id is required") :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor
                         struct-shape-update-vpc-attachment-request-attachment-id
                         :shape "AttachmentId" :location "uri" :location-name
                         "attachmentId")
                        (add-subnet-arns :initarg :add-subnet-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-arn-list common-lisp:null)
                         :accessor
                         struct-shape-update-vpc-attachment-request-add-subnet-arns
                         :shape "SubnetArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (remove-subnet-arns :initarg :remove-subnet-arns
                         :initform common-lisp:nil :type
                         (common-lisp:or subnet-arn-list common-lisp:null)
                         :accessor
                         struct-shape-update-vpc-attachment-request-remove-subnet-arns
                         :shape "SubnetArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (options :initarg :options :initform common-lisp:nil
                         :type (common-lisp:or vpc-options common-lisp:null)
                         :accessor
                         struct-shape-update-vpc-attachment-request-options
                         :shape "VpcOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vpc-attachment-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-vpc-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vpc-attachment-request
                    'make-update-vpc-attachment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-subnet-arns))
      (common-lisp:list
       (common-lisp:cons "AddSubnetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-subnet-arns))
      (common-lisp:list
       (common-lisp:cons "RemoveSubnetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vpc-attachment-response common-lisp:nil
                       ((vpc-attachment :initarg :vpc-attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-attachment common-lisp:null)
                         :accessor
                         struct-shape-update-vpc-attachment-response-vpc-attachment
                         :shape "VpcAttachment" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vpc-attachment-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-vpc-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vpc-attachment-response
                    'make-update-vpc-attachment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-attachment))
      (common-lisp:list
       (common-lisp:cons "VpcAttachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (networkmanager-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason 'validation-exception-fields)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or server-side-string common-lisp:null)
                         :accessor struct-shape-validation-exception-field-name
                         :shape "ServerSideString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or server-side-string common-lisp:null)
                         :accessor
                         struct-shape-validation-exception-field-message :shape
                         "ServerSideString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-exception-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype vpc-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-attachment common-lisp:nil
                       ((attachment :initarg :attachment :initform
                         common-lisp:nil :type
                         (common-lisp:or attachment common-lisp:null) :accessor
                         struct-shape-vpc-attachment-attachment :shape
                         "Attachment" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-arns :initarg :subnet-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or subnet-arn-list common-lisp:null)
                         :accessor struct-shape-vpc-attachment-subnet-arns
                         :shape "SubnetArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (options :initarg :options :initform common-lisp:nil
                         :type (common-lisp:or vpc-options common-lisp:null)
                         :accessor struct-shape-vpc-attachment-options :shape
                         "VpcOptions" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-attachment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vpc-attachment 'make-vpc-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "Attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-arns))
      (common-lisp:list
       (common-lisp:cons "SubnetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-options common-lisp:nil
                       ((ipv6support :initarg :ipv6support :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-vpc-options-ipv6support :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (appliance-mode-support :initarg
                         :appliance-mode-support :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-vpc-options-appliance-mode-support :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vpc-options 'make-vpc-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6support))
      (common-lisp:list
       (common-lisp:cons "Ipv6Support"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'appliance-mode-support))
      (common-lisp:list
       (common-lisp:cons "ApplianceModeSupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-options))
   common-lisp:nil))
(common-lisp:deftype vpn-connection-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-id)
   (common-lisp:declare (common-lisp:ignorable attachment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-accept-attachment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/attachments/~A/accept"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'attachment-id))))
                                                        "AcceptAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'accept-attachment))
(common-lisp:progn
 (common-lisp:defun associate-connect-peer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id connect-peer-id
                     device-id link-id)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id connect-peer-id device-id
     link-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-connect-peer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/connect-peer-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "AssociateConnectPeer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-connect-peer))
(common-lisp:progn
 (common-lisp:defun associate-customer-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key customer-gateway-arn global-network-id
                     device-id link-id)
   (common-lisp:declare
    (common-lisp:ignorable customer-gateway-arn global-network-id device-id
     link-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-customer-gateway-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/customer-gateway-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "AssociateCustomerGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-customer-gateway))
(common-lisp:progn
 (common-lisp:defun associate-link
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id device-id link-id)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id device-id link-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-link-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/link-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "AssociateLink"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-link))
(common-lisp:progn
 (common-lisp:defun associate-transit-gateway-connect-peer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id
                     transit-gateway-connect-peer-arn device-id link-id)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id transit-gateway-connect-peer-arn
     device-id link-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-transit-gateway-connect-peer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/transit-gateway-connect-peer-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "AssociateTransitGatewayConnectPeer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-transit-gateway-connect-peer))
(common-lisp:progn
 (common-lisp:defun create-connect-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id edge-location
                     transport-attachment-id options tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id edge-location
     transport-attachment-id options tags client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-connect-attachment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/connect-attachments"
                                                        "CreateConnectAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-connect-attachment))
(common-lisp:progn
 (common-lisp:defun create-connect-peer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connect-attachment-id
                     core-network-address peer-address bgp-options
                     inside-cidr-blocks tags client-token subnet-arn)
   (common-lisp:declare
    (common-lisp:ignorable connect-attachment-id core-network-address
     peer-address bgp-options inside-cidr-blocks tags client-token subnet-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connect-peer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/connect-peers"
                                                        "CreateConnectPeer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-connect-peer))
(common-lisp:progn
 (common-lisp:defun create-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id device-id
                     connected-device-id link-id connected-link-id description
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id device-id connected-device-id
     link-id connected-link-id description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/connections"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "CreateConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-connection))
(common-lisp:progn
 (common-lisp:defun create-core-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id description tags
                     policy-document client-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id description tags policy-document
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-core-network-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/core-networks"
                                                        "CreateCoreNetwork"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-core-network))
(common-lisp:progn
 (common-lisp:defun create-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id awslocation description
                     type vendor model serial-number location site-id tags)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id awslocation description type
     vendor model serial-number location site-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/devices"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "CreateDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-device))
(common-lisp:progn
 (common-lisp:defun create-global-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description tags)
   (common-lisp:declare (common-lisp:ignorable description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-global-network-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/global-networks"
                                                        "CreateGlobalNetwork"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-global-network))
(common-lisp:progn
 (common-lisp:defun create-link
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id description type
                     bandwidth provider site-id tags)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id description type bandwidth
     provider site-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-link-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/links"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "CreateLink"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-link))
(common-lisp:progn
 (common-lisp:defun create-site
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id description location
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id description location tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-site-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/sites"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "CreateSite"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-site))
(common-lisp:progn
 (common-lisp:defun create-site-to-site-vpn-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id vpn-connection-arn tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id vpn-connection-arn tags
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-site-to-site-vpn-attachment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/site-to-site-vpn-attachments"
                                                        "CreateSiteToSiteVpnAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-site-to-site-vpn-attachment))
(common-lisp:progn
 (common-lisp:defun create-transit-gateway-peering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id transit-gateway-arn tags
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id transit-gateway-arn tags
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-transit-gateway-peering-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/transit-gateway-peerings"
                                                        "CreateTransitGatewayPeering"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-transit-gateway-peering))
(common-lisp:progn
 (common-lisp:defun create-transit-gateway-route-table-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key peering-id
                     transit-gateway-route-table-arn tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable peering-id transit-gateway-route-table-arn tags
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-transit-gateway-route-table-attachment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/transit-gateway-route-table-attachments"
                                                        "CreateTransitGatewayRouteTableAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-transit-gateway-route-table-attachment))
(common-lisp:progn
 (common-lisp:defun create-vpc-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id vpc-arn subnet-arns
                     options tags client-token)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id vpc-arn subnet-arns options tags
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vpc-attachment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/vpc-attachments"
                                                        "CreateVpcAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-vpc-attachment))
(common-lisp:progn
 (common-lisp:defun delete-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-id)
   (common-lisp:declare (common-lisp:ignorable attachment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-attachment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/attachments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'attachment-id))))
                                                        "DeleteAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-attachment))
(common-lisp:progn
 (common-lisp:defun delete-connect-peer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connect-peer-id)
   (common-lisp:declare (common-lisp:ignorable connect-peer-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connect-peer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/connect-peers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connect-peer-id))))
                                                        "DeleteConnectPeer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-connect-peer))
(common-lisp:progn
 (common-lisp:defun delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id connection-id)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/connections/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connection-id))))
                                                        "DeleteConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-connection))
(common-lisp:progn
 (common-lisp:defun delete-core-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id)
   (common-lisp:declare (common-lisp:ignorable core-network-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-core-network-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/core-networks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'core-network-id))))
                                                        "DeleteCoreNetwork"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-core-network))
(common-lisp:progn
 (common-lisp:defun delete-core-network-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id policy-version-id)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-core-network-policy-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/core-networks/~A/core-network-policy-versions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'core-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-version-id))))
                                                        "DeleteCoreNetworkPolicyVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-core-network-policy-version))
(common-lisp:progn
 (common-lisp:defun delete-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id device-id)
   (common-lisp:declare (common-lisp:ignorable global-network-id device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/devices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-id))))
                                                        "DeleteDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-device))
(common-lisp:progn
 (common-lisp:defun delete-global-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id)
   (common-lisp:declare (common-lisp:ignorable global-network-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-global-network-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "DeleteGlobalNetwork"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-global-network))
(common-lisp:progn
 (common-lisp:defun delete-link
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id link-id)
   (common-lisp:declare (common-lisp:ignorable global-network-id link-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-link-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/links/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'link-id))))
                                                        "DeleteLink"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-link))
(common-lisp:progn
 (common-lisp:defun delete-peering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key peering-id)
   (common-lisp:declare (common-lisp:ignorable peering-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-peering-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/peerings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'peering-id))))
                                                        "DeletePeering"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-peering))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/resource-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "DeleteResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun delete-site
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id site-id)
   (common-lisp:declare (common-lisp:ignorable global-network-id site-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-site-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/sites/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'site-id))))
                                                        "DeleteSite"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-site))
(common-lisp:progn
 (common-lisp:defun deregister-transit-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id transit-gateway-arn)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id transit-gateway-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-transit-gateway-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/transit-gateway-registrations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'transit-gateway-arn))))
                                                        "DeregisterTransitGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deregister-transit-gateway))
(common-lisp:progn
 (common-lisp:defun describe-global-networks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-ids max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-global-networks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/global-networks"
                                                        "DescribeGlobalNetworks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-global-networks))
(common-lisp:progn
 (common-lisp:defun disassociate-connect-peer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id connect-peer-id)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id connect-peer-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-connect-peer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/connect-peer-associations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connect-peer-id))))
                                                        "DisassociateConnectPeer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-connect-peer))
(common-lisp:progn
 (common-lisp:defun disassociate-customer-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id customer-gateway-arn)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id customer-gateway-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-customer-gateway-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/customer-gateway-associations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'customer-gateway-arn))))
                                                        "DisassociateCustomerGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-customer-gateway))
(common-lisp:progn
 (common-lisp:defun disassociate-link
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id device-id link-id)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id device-id link-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-link-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/link-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "DisassociateLink"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-link))
(common-lisp:progn
 (common-lisp:defun disassociate-transit-gateway-connect-peer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id
                     transit-gateway-connect-peer-arn)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id transit-gateway-connect-peer-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-transit-gateway-connect-peer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/transit-gateway-connect-peer-associations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'transit-gateway-connect-peer-arn))))
                                                        "DisassociateTransitGatewayConnectPeer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-transit-gateway-connect-peer))
(common-lisp:progn
 (common-lisp:defun execute-core-network-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id policy-version-id)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-execute-core-network-change-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/core-networks/~A/core-network-change-sets/~A/execute"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'core-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-version-id))))
                                                        "ExecuteCoreNetworkChangeSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'execute-core-network-change-set))
(common-lisp:progn
 (common-lisp:defun get-connect-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-id)
   (common-lisp:declare (common-lisp:ignorable attachment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connect-attachment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/connect-attachments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'attachment-id))))
                                                        "GetConnectAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-connect-attachment))
(common-lisp:progn
 (common-lisp:defun get-connect-peer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connect-peer-id)
   (common-lisp:declare (common-lisp:ignorable connect-peer-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connect-peer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/connect-peers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connect-peer-id))))
                                                        "GetConnectPeer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-connect-peer))
(common-lisp:progn
 (common-lisp:defun get-connect-peer-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id connect-peer-ids
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id connect-peer-ids max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-connect-peer-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/connect-peer-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "GetConnectPeerAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-connect-peer-associations))
(common-lisp:progn
 (common-lisp:defun get-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id connection-ids
                     device-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id connection-ids device-id
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/connections"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "GetConnections"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-connections))
(common-lisp:progn
 (common-lisp:defun get-core-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id)
   (common-lisp:declare (common-lisp:ignorable core-network-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-core-network-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/core-networks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'core-network-id))))
                                                        "GetCoreNetwork"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-core-network))
(common-lisp:progn
 (common-lisp:defun get-core-network-change-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id policy-version-id
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id policy-version-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-core-network-change-events-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/core-networks/~A/core-network-change-events/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'core-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-version-id))))
                                                        "GetCoreNetworkChangeEvents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-core-network-change-events))
(common-lisp:progn
 (common-lisp:defun get-core-network-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id policy-version-id
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id policy-version-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-core-network-change-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/core-networks/~A/core-network-change-sets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'core-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-version-id))))
                                                        "GetCoreNetworkChangeSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-core-network-change-set))
(common-lisp:progn
 (common-lisp:defun get-core-network-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id policy-version-id alias)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id policy-version-id alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-core-network-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/core-networks/~A/core-network-policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'core-network-id))))
                                                        "GetCoreNetworkPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-core-network-policy))
(common-lisp:progn
 (common-lisp:defun get-customer-gateway-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id customer-gateway-arns
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id customer-gateway-arns max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-customer-gateway-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/customer-gateway-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "GetCustomerGatewayAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-customer-gateway-associations))
(common-lisp:progn
 (common-lisp:defun get-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id device-ids site-id
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id device-ids site-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/devices"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "GetDevices"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-devices))
(common-lisp:progn
 (common-lisp:defun get-link-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id device-id link-id
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id device-id link-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-link-associations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/link-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "GetLinkAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-link-associations))
(common-lisp:progn
 (common-lisp:defun get-links
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id link-ids site-id type
                     provider max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id link-ids site-id type provider
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-links-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/links"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "GetLinks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-links))
(common-lisp:progn
 (common-lisp:defun get-network-resource-counts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id resource-type
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id resource-type max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-network-resource-counts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/network-resource-count"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "GetNetworkResourceCounts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-network-resource-counts))
(common-lisp:progn
 (common-lisp:defun get-network-resource-relationships
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id core-network-id
                     registered-gateway-arn aws-region account-id resource-type
                     resource-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id core-network-id
     registered-gateway-arn aws-region account-id resource-type resource-arn
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-network-resource-relationships-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/network-resource-relationships"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "GetNetworkResourceRelationships"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-network-resource-relationships))
(common-lisp:progn
 (common-lisp:defun get-network-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id core-network-id
                     registered-gateway-arn aws-region account-id resource-type
                     resource-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id core-network-id
     registered-gateway-arn aws-region account-id resource-type resource-arn
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-network-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/network-resources"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "GetNetworkResources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-network-resources))
(common-lisp:progn
 (common-lisp:defun get-network-routes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id route-table-identifier
                     exact-cidr-matches longest-prefix-matches
                     subnet-of-matches supernet-of-matches prefix-list-ids
                     states types destination-filters)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id route-table-identifier
     exact-cidr-matches longest-prefix-matches subnet-of-matches
     supernet-of-matches prefix-list-ids states types destination-filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-network-routes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/network-routes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "GetNetworkRoutes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-network-routes))
(common-lisp:progn
 (common-lisp:defun get-network-telemetry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id core-network-id
                     registered-gateway-arn aws-region account-id resource-type
                     resource-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id core-network-id
     registered-gateway-arn aws-region account-id resource-type resource-arn
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-network-telemetry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/network-telemetry"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "GetNetworkTelemetry"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-network-telemetry))
(common-lisp:progn
 (common-lisp:defun get-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/resource-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "GetResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resource-policy))
(common-lisp:progn
 (common-lisp:defun get-route-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id route-analysis-id)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id route-analysis-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-route-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/route-analyses/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'route-analysis-id))))
                                                        "GetRouteAnalysis"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-route-analysis))
(common-lisp:progn
 (common-lisp:defun get-site-to-site-vpn-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-id)
   (common-lisp:declare (common-lisp:ignorable attachment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-site-to-site-vpn-attachment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/site-to-site-vpn-attachments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'attachment-id))))
                                                        "GetSiteToSiteVpnAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-site-to-site-vpn-attachment))
(common-lisp:progn
 (common-lisp:defun get-sites
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id site-ids max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id site-ids max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sites-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/sites"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "GetSites"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-sites))
(common-lisp:progn
 (common-lisp:defun get-transit-gateway-connect-peer-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id
                     transit-gateway-connect-peer-arns max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id transit-gateway-connect-peer-arns
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-transit-gateway-connect-peer-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/transit-gateway-connect-peer-associations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "GetTransitGatewayConnectPeerAssociations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-transit-gateway-connect-peer-associations))
(common-lisp:progn
 (common-lisp:defun get-transit-gateway-peering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key peering-id)
   (common-lisp:declare (common-lisp:ignorable peering-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-transit-gateway-peering-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/transit-gateway-peerings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'peering-id))))
                                                        "GetTransitGatewayPeering"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-transit-gateway-peering))
(common-lisp:progn
 (common-lisp:defun get-transit-gateway-registrations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id transit-gateway-arns
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id transit-gateway-arns max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-transit-gateway-registrations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/transit-gateway-registrations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "GetTransitGatewayRegistrations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-transit-gateway-registrations))
(common-lisp:progn
 (common-lisp:defun get-transit-gateway-route-table-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-id)
   (common-lisp:declare (common-lisp:ignorable attachment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-transit-gateway-route-table-attachment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/transit-gateway-route-table-attachments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'attachment-id))))
                                                        "GetTransitGatewayRouteTableAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-transit-gateway-route-table-attachment))
(common-lisp:progn
 (common-lisp:defun get-vpc-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-id)
   (common-lisp:declare (common-lisp:ignorable attachment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-vpc-attachment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/vpc-attachments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'attachment-id))))
                                                        "GetVpcAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-vpc-attachment))
(common-lisp:progn
 (common-lisp:defun list-attachments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id attachment-type
                     edge-location state max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id attachment-type edge-location state
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-attachments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/attachments"
                                                        "ListAttachments"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-attachments))
(common-lisp:progn
 (common-lisp:defun list-connect-peers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id connect-attachment-id
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id connect-attachment-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-connect-peers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/connect-peers"
                                                        "ListConnectPeers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-connect-peers))
(common-lisp:progn
 (common-lisp:defun list-core-network-policy-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-core-network-policy-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/core-networks/~A/core-network-policy-versions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'core-network-id))))
                                                        "ListCoreNetworkPolicyVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-core-network-policy-versions))
(common-lisp:progn
 (common-lisp:defun list-core-networks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-core-networks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/core-networks"
                                                        "ListCoreNetworks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-core-networks))
(common-lisp:progn
 (common-lisp:defun list-organization-service-access-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-organization-service-access-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/organizations/service-access"
                                                        "ListOrganizationServiceAccessStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-organization-service-access-status))
(common-lisp:progn
 (common-lisp:defun list-peerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id peering-type
                     edge-location state max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id peering-type edge-location state
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-peerings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/peerings"
                                                        "ListPeerings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-peerings))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-core-network-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id policy-document
                     description latest-version-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id policy-document description
     latest-version-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-core-network-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/core-networks/~A/core-network-policy"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'core-network-id))))
                                                        "PutCoreNetworkPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-core-network-policy))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-document resource-arn)
   (common-lisp:declare (common-lisp:ignorable policy-document resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/resource-policy/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "PutResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun register-transit-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id transit-gateway-arn)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id transit-gateway-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-transit-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/transit-gateway-registrations"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "RegisterTransitGateway"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'register-transit-gateway))
(common-lisp:progn
 (common-lisp:defun reject-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-id)
   (common-lisp:declare (common-lisp:ignorable attachment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reject-attachment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/attachments/~A/reject"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'attachment-id))))
                                                        "RejectAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reject-attachment))
(common-lisp:progn
 (common-lisp:defun restore-core-network-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id policy-version-id)
   (common-lisp:declare
    (common-lisp:ignorable core-network-id policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-restore-core-network-policy-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/core-networks/~A/core-network-policy-versions/~A/restore"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'core-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'policy-version-id))))
                                                        "RestoreCoreNetworkPolicyVersion"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'restore-core-network-policy-version))
(common-lisp:progn
 (common-lisp:defun start-organization-service-access-update
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action)
   (common-lisp:declare (common-lisp:ignorable action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-organization-service-access-update-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/organizations/service-access"
                                                        "StartOrganizationServiceAccessUpdate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-organization-service-access-update))
(common-lisp:progn
 (common-lisp:defun start-route-analysis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id source destination
                     include-return-path use-middleboxes)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id source destination
     include-return-path use-middleboxes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-route-analysis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/route-analyses"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "StartRouteAnalysis"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-route-analysis))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id connection-id link-id
                     connected-link-id description)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id connection-id link-id
     connected-link-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/connections/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connection-id))))
                                                        "UpdateConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-connection))
(common-lisp:progn
 (common-lisp:defun update-core-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key core-network-id description)
   (common-lisp:declare (common-lisp:ignorable core-network-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-core-network-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/core-networks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'core-network-id))))
                                                        "UpdateCoreNetwork"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-core-network))
(common-lisp:progn
 (common-lisp:defun update-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id device-id awslocation
                     description type vendor model serial-number location
                     site-id)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id device-id awslocation description
     type vendor model serial-number location site-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/devices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-id))))
                                                        "UpdateDevice"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-device))
(common-lisp:progn
 (common-lisp:defun update-global-network
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id description)
   (common-lisp:declare (common-lisp:ignorable global-network-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-global-network-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))))
                                                        "UpdateGlobalNetwork"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-global-network))
(common-lisp:progn
 (common-lisp:defun update-link
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id link-id description
                     type bandwidth provider)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id link-id description type bandwidth
     provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-link-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/links/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'link-id))))
                                                        "UpdateLink"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-link))
(common-lisp:progn
 (common-lisp:defun update-network-resource-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id resource-arn metadata)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id resource-arn metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-network-resource-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/network-resources/~A/metadata"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UpdateNetworkResourceMetadata"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-network-resource-metadata))
(common-lisp:progn
 (common-lisp:defun update-site
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-network-id site-id description
                     location)
   (common-lisp:declare
    (common-lisp:ignorable global-network-id site-id description location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-site-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/global-networks/~A/sites/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'global-network-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'site-id))))
                                                        "UpdateSite"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-site))
(common-lisp:progn
 (common-lisp:defun update-vpc-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-id add-subnet-arns
                     remove-subnet-arns options)
   (common-lisp:declare
    (common-lisp:ignorable attachment-id add-subnet-arns remove-subnet-arns
     options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-vpc-attachment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'networkmanager-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/vpc-attachments/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'attachment-id))))
                                                        "UpdateVpcAttachment"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-vpc-attachment))
