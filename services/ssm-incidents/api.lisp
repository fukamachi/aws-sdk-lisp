;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/ssm-incidents/api
  (:use)
  (:nicknames #:aws/ssm-incidents)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/ssm-incidents/api)
(common-lisp:progn
 (common-lisp:define-condition ssm-incidents-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'ssm-incidents-error))
(common-lisp:progn
 (common-lisp:defclass ssm-incidents-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "ssm-incidents" :api-version
                        "2018-05-10" :host-prefix "ssm-incidents" :signing-name
                        "ssm-incidents" :global-host common-lisp:nil))
 (common-lisp:export 'ssm-incidents-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (ssm-incidents-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass action common-lisp:nil
                       ((ssm-automation :initarg :ssm-automation :initform
                         common-lisp:nil :type
                         (common-lisp:or ssm-automation common-lisp:null)
                         :accessor struct-shape-action-ssm-automation :shape
                         "SsmAutomation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-automation))
      (common-lisp:list
       (common-lisp:cons "ssmAutomation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype actions-list () '(trivial-types:proper-list action))
 (common-lisp:defun make-actions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass add-region-action common-lisp:nil
                       ((region-name :initarg :region-name :initform
                         (common-lisp:error ":regionname is required") :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor struct-shape-add-region-action-region-name
                         :shape "RegionName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sse-kms-key-id :initarg :sse-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or sse-kms-key common-lisp:null)
                         :accessor
                         struct-shape-add-region-action-sse-kms-key-id :shape
                         "SseKmsKey" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-region-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-region-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-region-action 'make-add-region-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-region-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-region-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "regionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "sseKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-region-action))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attribute-value-list common-lisp:nil
                       ((integer-values :initarg :integer-values :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-list common-lisp:null)
                         :accessor
                         struct-shape-attribute-value-list-integer-values
                         :shape "IntegerList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (string-values :initarg :string-values :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-attribute-value-list-string-values :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-attribute-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'attribute-value-list
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'attribute-value-list 'make-attribute-value-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-value-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-value-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-values))
      (common-lisp:list
       (common-lisp:cons "integerValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-values))
      (common-lisp:list
       (common-lisp:cons "stringValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-value-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass automation-execution common-lisp:nil
                       ((ssm-execution-arn :initarg :ssm-execution-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-automation-execution-ssm-execution-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-automation-execution
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'automation-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'automation-execution 'make-automation-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input automation-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input automation-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-execution-arn))
      (common-lisp:list
       (common-lisp:cons "ssmExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input automation-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype automation-execution-set ()
   '(trivial-types:proper-list automation-execution))
 (common-lisp:defun make-automation-execution-set
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list automation-execution))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-incident-findings-error common-lisp:nil
                       ((code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-batch-get-incident-findings-error-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (finding-id :initarg :finding-id :initform
                         (common-lisp:error ":findingid is required") :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-batch-get-incident-findings-error-finding-id
                         :shape "FindingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-batch-get-incident-findings-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-incident-findings-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-incident-findings-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-incident-findings-error
                    'make-batch-get-incident-findings-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-incident-findings-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-incident-findings-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-id))
      (common-lisp:list
       (common-lisp:cons "findingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-incident-findings-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-incident-findings-error-list ()
   '(trivial-types:proper-list batch-get-incident-findings-error))
 (common-lisp:defun make-batch-get-incident-findings-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-incident-findings-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-incident-findings-input common-lisp:nil
                       ((finding-ids :initarg :finding-ids :initform
                         (common-lisp:error ":findingids is required") :type
                         (common-lisp:or finding-id-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-incident-findings-input-finding-ids
                         :shape "FindingIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (incident-record-arn :initarg :incident-record-arn
                         :initform
                         (common-lisp:error ":incidentrecordarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-batch-get-incident-findings-input-incident-record-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-incident-findings-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-incident-findings-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-incident-findings-input
                    'make-batch-get-incident-findings-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-incident-findings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-incident-findings-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-ids))
      (common-lisp:list
       (common-lisp:cons "findingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-record-arn))
      (common-lisp:list
       (common-lisp:cons "incidentRecordArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-incident-findings-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-incident-findings-output common-lisp:nil
                       ((errors :initarg :errors :initform
                         (common-lisp:error ":errors is required") :type
                         (common-lisp:or batch-get-incident-findings-error-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-incident-findings-output-errors
                         :shape "BatchGetIncidentFindingsErrorList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (findings :initarg :findings :initform
                         (common-lisp:error ":findings is required") :type
                         (common-lisp:or finding-list common-lisp:null)
                         :accessor
                         struct-shape-batch-get-incident-findings-output-findings
                         :shape "FindingList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-incident-findings-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-incident-findings-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-incident-findings-output
                    'make-batch-get-incident-findings-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-incident-findings-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-incident-findings-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-incident-findings-output))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass chat-channel common-lisp:nil
                       ((chatbot-sns :initarg :chatbot-sns :initform
                         common-lisp:nil :type
                         (common-lisp:or chatbot-sns-configuration-set
                                         common-lisp:null)
                         :accessor struct-shape-chat-channel-chatbot-sns :shape
                         "ChatbotSnsConfigurationSet" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (empty :initarg :empty :initform common-lisp:nil :type
                         (common-lisp:or empty-chat-channel common-lisp:null)
                         :accessor struct-shape-chat-channel-empty :shape
                         "EmptyChatChannel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-chat-channel
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'chat-channel
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'chat-channel 'make-chat-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input chat-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input chat-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chatbot-sns))
      (common-lisp:list
       (common-lisp:cons "chatbotSns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'empty))
      (common-lisp:list
       (common-lisp:cons "empty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input chat-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype chatbot-sns-configuration-set ()
   '(trivial-types:proper-list sns-arn))
 (common-lisp:defun make-chatbot-sns-configuration-set
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sns-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-formation-stack-update common-lisp:nil
                       ((end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-cloud-formation-stack-update-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (stack-arn :initarg :stack-arn :initform
                         (common-lisp:error ":stackarn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-cloud-formation-stack-update-stack-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-cloud-formation-stack-update-start-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-formation-stack-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-formation-stack-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-formation-stack-update
                    'make-cloud-formation-stack-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-arn))
      (common-lisp:list
       (common-lisp:cons "stackArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass code-deploy-deployment common-lisp:nil
                       ((deployment-group-arn :initarg :deployment-group-arn
                         :initform
                         (common-lisp:error ":deploymentgrouparn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-code-deploy-deployment-deployment-group-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deployment-id :initarg :deployment-id :initform
                         (common-lisp:error ":deploymentid is required") :type
                         (common-lisp:or
                          code-deploy-deployment-deployment-id-string
                          common-lisp:null)
                         :accessor
                         struct-shape-code-deploy-deployment-deployment-id
                         :shape "CodeDeployDeploymentDeploymentIdString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-code-deploy-deployment-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-code-deploy-deployment-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-code-deploy-deployment
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'code-deploy-deployment
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'code-deploy-deployment 'make-code-deploy-deployment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-deploy-deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-deploy-deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-group-arn))
      (common-lisp:list
       (common-lisp:cons "deploymentGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-id))
      (common-lisp:list
       (common-lisp:cons "deploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-deploy-deployment))
   common-lisp:nil))
(common-lisp:deftype code-deploy-deployment-deployment-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass condition common-lisp:nil
                       ((after :initarg :after :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-condition-after :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (before :initarg :before :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-condition-before :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (equals :initarg :equals :initform common-lisp:nil
                         :type
                         (common-lisp:or attribute-value-list common-lisp:null)
                         :accessor struct-shape-condition-equals :shape
                         "AttributeValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-condition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'condition
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after))
      (common-lisp:list
       (common-lisp:cons "after"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before))
      (common-lisp:list
       (common-lisp:cons "before"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equals))
      (common-lisp:list
       (common-lisp:cons "equals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (ssm-incidents-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-identifier :initarg :resource-identifier :initform
       common-lisp:nil :reader conflict-exception-resource-identifier)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)
      (retry-after :initarg :retry-after :initform common-lisp:nil :reader
       conflict-exception-retry-after)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-identifier
                    'conflict-exception-resource-type
                    'conflict-exception-retry-after)))
(common-lisp:progn
 (common-lisp:defclass create-replication-set-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-replication-set-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regions :initarg :regions :initform
                         (common-lisp:error ":regions is required") :type
                         (common-lisp:or region-map-input common-lisp:null)
                         :accessor
                         struct-shape-create-replication-set-input-regions
                         :shape "RegionMapInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-replication-set-input-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replication-set-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-replication-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replication-set-input
                    'make-create-replication-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-replication-set-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-replication-set-output-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-replication-set-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-replication-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-replication-set-output
                    'make-create-replication-set-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-replication-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-response-plan-input common-lisp:nil
                       ((actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or actions-list common-lisp:null)
                         :accessor
                         struct-shape-create-response-plan-input-actions :shape
                         "ActionsList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (chat-channel :initarg :chat-channel :initform
                         common-lisp:nil :type
                         (common-lisp:or chat-channel common-lisp:null)
                         :accessor
                         struct-shape-create-response-plan-input-chat-channel
                         :shape "ChatChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-response-plan-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or response-plan-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-response-plan-input-display-name
                         :shape "ResponsePlanDisplayName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (engagements :initarg :engagements :initform
                         common-lisp:nil :type
                         (common-lisp:or engagement-set common-lisp:null)
                         :accessor
                         struct-shape-create-response-plan-input-engagements
                         :shape "EngagementSet" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (incident-template :initarg :incident-template
                         :initform
                         (common-lisp:error ":incidenttemplate is required")
                         :type
                         (common-lisp:or incident-template common-lisp:null)
                         :accessor
                         struct-shape-create-response-plan-input-incident-template
                         :shape "IncidentTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (integrations :initarg :integrations :initform
                         common-lisp:nil :type
                         (common-lisp:or integrations common-lisp:null)
                         :accessor
                         struct-shape-create-response-plan-input-integrations
                         :shape "Integrations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or response-plan-name common-lisp:null)
                         :accessor struct-shape-create-response-plan-input-name
                         :shape "ResponsePlanName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-create-response-plan-input-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-response-plan-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-response-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-response-plan-input
                    'make-create-response-plan-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-response-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-response-plan-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chat-channel))
      (common-lisp:list
       (common-lisp:cons "chatChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagements))
      (common-lisp:list
       (common-lisp:cons "engagements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-template))
      (common-lisp:list
       (common-lisp:cons "incidentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integrations))
      (common-lisp:list
       (common-lisp:cons "integrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-response-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-response-plan-output common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-response-plan-output-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-response-plan-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-response-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-response-plan-output
                    'make-create-response-plan-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-response-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-response-plan-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-response-plan-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-timeline-event-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-timeline-event-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-data :initarg :event-data :initform
                         (common-lisp:error ":eventdata is required") :type
                         (common-lisp:or event-data common-lisp:null) :accessor
                         struct-shape-create-timeline-event-input-event-data
                         :shape "EventData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-references :initarg :event-references :initform
                         common-lisp:nil :type
                         (common-lisp:or event-reference-list common-lisp:null)
                         :accessor
                         struct-shape-create-timeline-event-input-event-references
                         :shape "EventReferenceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-time :initarg :event-time :initform
                         (common-lisp:error ":eventtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-create-timeline-event-input-event-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-type :initarg :event-type :initform
                         (common-lisp:error ":eventtype is required") :type
                         (common-lisp:or timeline-event-type common-lisp:null)
                         :accessor
                         struct-shape-create-timeline-event-input-event-type
                         :shape "TimelineEventType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (incident-record-arn :initarg :incident-record-arn
                         :initform
                         (common-lisp:error ":incidentrecordarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-timeline-event-input-incident-record-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-timeline-event-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-timeline-event-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-timeline-event-input
                    'make-create-timeline-event-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-timeline-event-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-timeline-event-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-data))
      (common-lisp:list
       (common-lisp:cons "eventData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-references))
      (common-lisp:list
       (common-lisp:cons "eventReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time))
      (common-lisp:list
       (common-lisp:cons "eventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "eventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-record-arn))
      (common-lisp:list
       (common-lisp:cons "incidentRecordArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-timeline-event-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-timeline-event-output common-lisp:nil
                       ((event-id :initarg :event-id :initform
                         (common-lisp:error ":eventid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-create-timeline-event-output-event-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (incident-record-arn :initarg :incident-record-arn
                         :initform
                         (common-lisp:error ":incidentrecordarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-create-timeline-event-output-incident-record-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-timeline-event-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-timeline-event-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-timeline-event-output
                    'make-create-timeline-event-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-timeline-event-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-timeline-event-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-record-arn))
      (common-lisp:list
       (common-lisp:cons "incidentRecordArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-timeline-event-output))
   common-lisp:nil))
(common-lisp:deftype dedupe-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-incident-record-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-incident-record-input-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-incident-record-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-incident-record-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-incident-record-input
                    'make-delete-incident-record-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-incident-record-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-incident-record-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-incident-record-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-incident-record-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-incident-record-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-incident-record-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-incident-record-output
                    'make-delete-incident-record-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-incident-record-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-incident-record-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-incident-record-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-region-action common-lisp:nil
                       ((region-name :initarg :region-name :initform
                         (common-lisp:error ":regionname is required") :type
                         (common-lisp:or region-name common-lisp:null)
                         :accessor
                         struct-shape-delete-region-action-region-name :shape
                         "RegionName" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-region-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-region-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-region-action 'make-delete-region-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-region-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-region-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "regionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-region-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-set-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-replication-set-input-arn :shape
                         "Arn" :location "querystring" :location-name "arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-set-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-replication-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-set-input
                    'make-delete-replication-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-replication-set-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-replication-set-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-replication-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-replication-set-output
                    'make-delete-replication-set-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-replication-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-input common-lisp:nil
                       ((policy-id :initarg :policy-id :initform
                         (common-lisp:error ":policyid is required") :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         struct-shape-delete-resource-policy-input-policy-id
                         :shape "PolicyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-resource-policy-input-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-resource-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-input
                    'make-delete-resource-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "policyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-policy-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-output
                    'make-delete-resource-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-response-plan-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-response-plan-input-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-response-plan-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-response-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-response-plan-input
                    'make-delete-response-plan-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-response-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-response-plan-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-response-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-response-plan-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-response-plan-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-response-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-response-plan-output
                    'make-delete-response-plan-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-response-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-response-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-response-plan-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-timeline-event-input common-lisp:nil
                       ((event-id :initarg :event-id :initform
                         (common-lisp:error ":eventid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-delete-timeline-event-input-event-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (incident-record-arn :initarg :incident-record-arn
                         :initform
                         (common-lisp:error ":incidentrecordarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-delete-timeline-event-input-incident-record-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-timeline-event-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-timeline-event-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-timeline-event-input
                    'make-delete-timeline-event-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-timeline-event-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-timeline-event-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-record-arn))
      (common-lisp:list
       (common-lisp:cons "incidentRecordArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-timeline-event-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-timeline-event-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-timeline-event-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-timeline-event-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-timeline-event-output
                    'make-delete-timeline-event-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-timeline-event-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-timeline-event-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-timeline-event-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dynamic-ssm-parameter-value common-lisp:nil
                       ((variable :initarg :variable :initform common-lisp:nil
                         :type (common-lisp:or variable-type common-lisp:null)
                         :accessor
                         struct-shape-dynamic-ssm-parameter-value-variable
                         :shape "VariableType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dynamic-ssm-parameter-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dynamic-ssm-parameter-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dynamic-ssm-parameter-value
                    'make-dynamic-ssm-parameter-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-ssm-parameter-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-ssm-parameter-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variable))
      (common-lisp:list
       (common-lisp:cons "variable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-ssm-parameter-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dynamic-ssm-parameters () 'common-lisp:hash-table)
 (common-lisp:defun make-dynamic-ssm-parameters
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype dynamic-ssm-parameters-key-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass empty-chat-channel common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-empty-chat-channel
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'empty-chat-channel
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'empty-chat-channel 'make-empty-chat-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input empty-chat-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input empty-chat-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input empty-chat-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype engagement-set ()
   '(trivial-types:proper-list ssm-contacts-arn))
 (common-lisp:defun make-engagement-set
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssm-contacts-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-reference common-lisp:nil
                       ((related-item-id :initarg :related-item-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generated-id common-lisp:null)
                         :accessor struct-shape-event-reference-related-item-id
                         :shape "GeneratedId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource :initarg :resource :initform common-lisp:nil
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-event-reference-resource :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-reference
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-reference
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'event-reference 'make-event-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-item-id))
      (common-lisp:list
       (common-lisp:cons "relatedItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-reference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-reference-list ()
   '(trivial-types:proper-list event-reference))
 (common-lisp:defun make-event-reference-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-reference))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-summary common-lisp:nil
                       ((event-id :initarg :event-id :initform
                         (common-lisp:error ":eventid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-event-summary-event-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-references :initarg :event-references :initform
                         common-lisp:nil :type
                         (common-lisp:or event-reference-list common-lisp:null)
                         :accessor struct-shape-event-summary-event-references
                         :shape "EventReferenceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-time :initarg :event-time :initform
                         (common-lisp:error ":eventtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-event-summary-event-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-type :initarg :event-type :initform
                         (common-lisp:error ":eventtype is required") :type
                         (common-lisp:or timeline-event-type common-lisp:null)
                         :accessor struct-shape-event-summary-event-type :shape
                         "TimelineEventType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-updated-time :initarg :event-updated-time
                         :initform
                         (common-lisp:error ":eventupdatedtime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-event-summary-event-updated-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (incident-record-arn :initarg :incident-record-arn
                         :initform
                         (common-lisp:error ":incidentrecordarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-event-summary-incident-record-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-event-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'event-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'event-summary 'make-event-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-references))
      (common-lisp:list
       (common-lisp:cons "eventReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time))
      (common-lisp:list
       (common-lisp:cons "eventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "eventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-updated-time))
      (common-lisp:list
       (common-lisp:cons "eventUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-record-arn))
      (common-lisp:list
       (common-lisp:cons "incidentRecordArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-summary-list ()
   '(trivial-types:proper-list event-summary))
 (common-lisp:defun make-event-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((condition :initarg :condition :initform
                         (common-lisp:error ":condition is required") :type
                         (common-lisp:or condition common-lisp:null) :accessor
                         struct-shape-filter-condition :shape "Condition"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or filter-key-string common-lisp:null)
                         :accessor struct-shape-filter-key :shape
                         "FilterKeyString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-key-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass finding common-lisp:nil
                       ((creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creationtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-finding-creation-time :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (details :initarg :details :initform common-lisp:nil
                         :type
                         (common-lisp:or finding-details common-lisp:null)
                         :accessor struct-shape-finding-details :shape
                         "FindingDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-finding-id :shape "FindingId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform
                         (common-lisp:error ":lastmodifiedtime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-finding-last-modified-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-finding
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'finding
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'finding 'make-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass finding-details common-lisp:nil
                       ((cloud-formation-stack-update :initarg
                         :cloud-formation-stack-update :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-formation-stack-update
                                         common-lisp:null)
                         :accessor
                         struct-shape-finding-details-cloud-formation-stack-update
                         :shape "CloudFormationStackUpdate" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (code-deploy-deployment :initarg
                         :code-deploy-deployment :initform common-lisp:nil
                         :type
                         (common-lisp:or code-deploy-deployment
                                         common-lisp:null)
                         :accessor
                         struct-shape-finding-details-code-deploy-deployment
                         :shape "CodeDeployDeployment" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-finding-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'finding-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'finding-details 'make-finding-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-formation-stack-update))
      (common-lisp:list
       (common-lisp:cons "cloudFormationStackUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-deploy-deployment))
      (common-lisp:list
       (common-lisp:cons "codeDeployDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-details))
   common-lisp:nil))
(common-lisp:deftype finding-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-id-list ()
   '(trivial-types:proper-list finding-id))
 (common-lisp:defun make-finding-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype finding-list () '(trivial-types:proper-list finding))
 (common-lisp:defun make-finding-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass finding-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-finding-summary-id :shape "FindingId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform
                         (common-lisp:error ":lastmodifiedtime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-finding-summary-last-modified-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-finding-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'finding-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'finding-summary 'make-finding-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype finding-summary-list ()
   '(trivial-types:proper-list finding-summary))
 (common-lisp:defun make-finding-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype generated-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-incident-record-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-incident-record-input-arn :shape
                         "Arn" :location "querystring" :location-name "arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-incident-record-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-incident-record-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-incident-record-input
                    'make-get-incident-record-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-incident-record-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-incident-record-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-incident-record-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-incident-record-output common-lisp:nil
                       ((incident-record :initarg :incident-record :initform
                         (common-lisp:error ":incidentrecord is required")
                         :type
                         (common-lisp:or incident-record common-lisp:null)
                         :accessor
                         struct-shape-get-incident-record-output-incident-record
                         :shape "IncidentRecord" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-incident-record-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-incident-record-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-incident-record-output
                    'make-get-incident-record-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-incident-record-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-incident-record-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-record))
      (common-lisp:list
       (common-lisp:cons "incidentRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-incident-record-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-replication-set-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-replication-set-input-arn :shape
                         "Arn" :location "querystring" :location-name "arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-replication-set-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-replication-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-replication-set-input
                    'make-get-replication-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-replication-set-output common-lisp:nil
                       ((replication-set :initarg :replication-set :initform
                         (common-lisp:error ":replicationset is required")
                         :type
                         (common-lisp:or replication-set common-lisp:null)
                         :accessor
                         struct-shape-get-replication-set-output-replication-set
                         :shape "ReplicationSet" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-replication-set-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-replication-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-replication-set-output
                    'make-get-replication-set-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replication-set))
      (common-lisp:list
       (common-lisp:cons "replicationSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-replication-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policies-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-resource-policies-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-resource-policies-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-resource-policies-input-resource-arn
                         :shape "Arn" :location "querystring" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-policies-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policies-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-policies-input
                    'make-get-resource-policies-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policies-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-resource-policies-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-policies :initarg :resource-policies
                         :initform
                         (common-lisp:error ":resourcepolicies is required")
                         :type
                         (common-lisp:or resource-policy-list common-lisp:null)
                         :accessor
                         struct-shape-get-resource-policies-output-resource-policies
                         :shape "ResourcePolicyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-policies-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policies-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-policies-output
                    'make-get-resource-policies-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policies))
      (common-lisp:list
       (common-lisp:cons "resourcePolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policies-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-response-plan-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-response-plan-input-arn :shape "Arn"
                         :location "querystring" :location-name "arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-response-plan-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-response-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-response-plan-input 'make-get-response-plan-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-response-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-response-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-response-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-response-plan-output common-lisp:nil
                       ((actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or actions-list common-lisp:null)
                         :accessor
                         struct-shape-get-response-plan-output-actions :shape
                         "ActionsList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-response-plan-output-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (chat-channel :initarg :chat-channel :initform
                         common-lisp:nil :type
                         (common-lisp:or chat-channel common-lisp:null)
                         :accessor
                         struct-shape-get-response-plan-output-chat-channel
                         :shape "ChatChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or response-plan-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-response-plan-output-display-name
                         :shape "ResponsePlanDisplayName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (engagements :initarg :engagements :initform
                         common-lisp:nil :type
                         (common-lisp:or engagement-set common-lisp:null)
                         :accessor
                         struct-shape-get-response-plan-output-engagements
                         :shape "EngagementSet" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (incident-template :initarg :incident-template
                         :initform
                         (common-lisp:error ":incidenttemplate is required")
                         :type
                         (common-lisp:or incident-template common-lisp:null)
                         :accessor
                         struct-shape-get-response-plan-output-incident-template
                         :shape "IncidentTemplate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (integrations :initarg :integrations :initform
                         common-lisp:nil :type
                         (common-lisp:or integrations common-lisp:null)
                         :accessor
                         struct-shape-get-response-plan-output-integrations
                         :shape "Integrations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or response-plan-name common-lisp:null)
                         :accessor struct-shape-get-response-plan-output-name
                         :shape "ResponsePlanName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-response-plan-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-response-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-response-plan-output 'make-get-response-plan-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-response-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-response-plan-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chat-channel))
      (common-lisp:list
       (common-lisp:cons "chatChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagements))
      (common-lisp:list
       (common-lisp:cons "engagements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-template))
      (common-lisp:list
       (common-lisp:cons "incidentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integrations))
      (common-lisp:list
       (common-lisp:cons "integrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-response-plan-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-timeline-event-input common-lisp:nil
                       ((event-id :initarg :event-id :initform
                         (common-lisp:error ":eventid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-get-timeline-event-input-event-id :shape
                         "UUID" :location "querystring" :location-name
                         "eventId")
                        (incident-record-arn :initarg :incident-record-arn
                         :initform
                         (common-lisp:error ":incidentrecordarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-get-timeline-event-input-incident-record-arn
                         :shape "Arn" :location "querystring" :location-name
                         "incidentRecordArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-timeline-event-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-timeline-event-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-timeline-event-input 'make-get-timeline-event-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-timeline-event-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-timeline-event-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-timeline-event-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-timeline-event-output common-lisp:nil
                       ((event :initarg :event :initform
                         (common-lisp:error ":event is required") :type
                         (common-lisp:or timeline-event common-lisp:null)
                         :accessor struct-shape-get-timeline-event-output-event
                         :shape "TimelineEvent" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-timeline-event-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-timeline-event-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-timeline-event-output
                    'make-get-timeline-event-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-timeline-event-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-timeline-event-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-timeline-event-output))
   common-lisp:nil))
(common-lisp:deftype impact () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass incident-record common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-incident-record-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (automation-executions :initarg :automation-executions
                         :initform common-lisp:nil :type
                         (common-lisp:or automation-execution-set
                                         common-lisp:null)
                         :accessor
                         struct-shape-incident-record-automation-executions
                         :shape "AutomationExecutionSet" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (chat-channel :initarg :chat-channel :initform
                         common-lisp:nil :type
                         (common-lisp:or chat-channel common-lisp:null)
                         :accessor struct-shape-incident-record-chat-channel
                         :shape "ChatChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creationtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-incident-record-creation-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dedupe-string :initarg :dedupe-string :initform
                         (common-lisp:error ":dedupestring is required") :type
                         (common-lisp:or dedupe-string common-lisp:null)
                         :accessor struct-shape-incident-record-dedupe-string
                         :shape "DedupeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impact :initarg :impact :initform
                         (common-lisp:error ":impact is required") :type
                         (common-lisp:or impact common-lisp:null) :accessor
                         struct-shape-incident-record-impact :shape "Impact"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (incident-record-source :initarg
                         :incident-record-source :initform
                         (common-lisp:error
                          ":incidentrecordsource is required")
                         :type
                         (common-lisp:or incident-record-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-incident-record-incident-record-source
                         :shape "IncidentRecordSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-modified-by :initarg :last-modified-by :initform
                         (common-lisp:error ":lastmodifiedby is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-incident-record-last-modified-by :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform
                         (common-lisp:error ":lastmodifiedtime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-incident-record-last-modified-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (notification-targets :initarg :notification-targets
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-target-set
                                         common-lisp:null)
                         :accessor
                         struct-shape-incident-record-notification-targets
                         :shape "NotificationTargetSet" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resolved-time :initarg :resolved-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-incident-record-resolved-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or incident-record-status
                                         common-lisp:null)
                         :accessor struct-shape-incident-record-status :shape
                         "IncidentRecordStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (summary :initarg :summary :initform common-lisp:nil
                         :type
                         (common-lisp:or incident-summary common-lisp:null)
                         :accessor struct-shape-incident-record-summary :shape
                         "IncidentSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (title :initarg :title :initform
                         (common-lisp:error ":title is required") :type
                         (common-lisp:or incident-title common-lisp:null)
                         :accessor struct-shape-incident-record-title :shape
                         "IncidentTitle" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-incident-record
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'incident-record
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'incident-record 'make-incident-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input incident-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input incident-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automation-executions))
      (common-lisp:list
       (common-lisp:cons "automationExecutions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chat-channel))
      (common-lisp:list
       (common-lisp:cons "chatChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dedupe-string))
      (common-lisp:list
       (common-lisp:cons "dedupeString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact))
      (common-lisp:list
       (common-lisp:cons "impact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incident-record-source))
      (common-lisp:list
       (common-lisp:cons "incidentRecordSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "lastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-targets))
      (common-lisp:list
       (common-lisp:cons "notificationTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-time))
      (common-lisp:list
       (common-lisp:cons "resolvedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input incident-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass incident-record-source common-lisp:nil
                       ((created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-incident-record-source-created-by :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (invoked-by :initarg :invoked-by :initform
                         common-lisp:nil :type
                         (common-lisp:or service-principal common-lisp:null)
                         :accessor
                         struct-shape-incident-record-source-invoked-by :shape
                         "ServicePrincipal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-incident-record-source-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or incident-source common-lisp:null)
                         :accessor struct-shape-incident-record-source-source
                         :shape "IncidentSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-incident-record-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'incident-record-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'incident-record-source 'make-incident-record-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          incident-record-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          incident-record-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invoked-by))
      (common-lisp:list
       (common-lisp:cons "invokedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          incident-record-source))
   common-lisp:nil))
(common-lisp:deftype incident-record-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass incident-record-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-incident-record-summary-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         (common-lisp:error ":creationtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-incident-record-summary-creation-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impact :initarg :impact :initform
                         (common-lisp:error ":impact is required") :type
                         (common-lisp:or impact common-lisp:null) :accessor
                         struct-shape-incident-record-summary-impact :shape
                         "Impact" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (incident-record-source :initarg
                         :incident-record-source :initform
                         (common-lisp:error
                          ":incidentrecordsource is required")
                         :type
                         (common-lisp:or incident-record-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-incident-record-summary-incident-record-source
                         :shape "IncidentRecordSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resolved-time :initarg :resolved-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-incident-record-summary-resolved-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or incident-record-status
                                         common-lisp:null)
                         :accessor struct-shape-incident-record-summary-status
                         :shape "IncidentRecordStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (title :initarg :title :initform
                         (common-lisp:error ":title is required") :type
                         (common-lisp:or incident-title common-lisp:null)
                         :accessor struct-shape-incident-record-summary-title
                         :shape "IncidentTitle" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-incident-record-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'incident-record-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'incident-record-summary 'make-incident-record-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          incident-record-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          incident-record-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "creationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact))
      (common-lisp:list
       (common-lisp:cons "impact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incident-record-source))
      (common-lisp:list
       (common-lisp:cons "incidentRecordSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-time))
      (common-lisp:list
       (common-lisp:cons "resolvedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          incident-record-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype incident-record-summary-list ()
   '(trivial-types:proper-list incident-record-summary))
 (common-lisp:defun make-incident-record-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list incident-record-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype incident-source () 'common-lisp:string)
(common-lisp:deftype incident-summary () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass incident-template common-lisp:nil
                       ((dedupe-string :initarg :dedupe-string :initform
                         common-lisp:nil :type
                         (common-lisp:or dedupe-string common-lisp:null)
                         :accessor struct-shape-incident-template-dedupe-string
                         :shape "DedupeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impact :initarg :impact :initform
                         (common-lisp:error ":impact is required") :type
                         (common-lisp:or impact common-lisp:null) :accessor
                         struct-shape-incident-template-impact :shape "Impact"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (incident-tags :initarg :incident-tags :initform
                         common-lisp:nil :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-incident-template-incident-tags :shape
                         "TagMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (notification-targets :initarg :notification-targets
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-target-set
                                         common-lisp:null)
                         :accessor
                         struct-shape-incident-template-notification-targets
                         :shape "NotificationTargetSet" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (summary :initarg :summary :initform common-lisp:nil
                         :type
                         (common-lisp:or incident-summary common-lisp:null)
                         :accessor struct-shape-incident-template-summary
                         :shape "IncidentSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (title :initarg :title :initform
                         (common-lisp:error ":title is required") :type
                         (common-lisp:or incident-title common-lisp:null)
                         :accessor struct-shape-incident-template-title :shape
                         "IncidentTitle" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-incident-template
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'incident-template
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'incident-template 'make-incident-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input incident-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input incident-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dedupe-string))
      (common-lisp:list
       (common-lisp:cons "dedupeString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact))
      (common-lisp:list
       (common-lisp:cons "impact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-tags))
      (common-lisp:list
       (common-lisp:cons "incidentTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-targets))
      (common-lisp:list
       (common-lisp:cons "notificationTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input incident-template))
   common-lisp:nil))
(common-lisp:deftype incident-title () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype integer-list () '(trivial-types:proper-list integer))
 (common-lisp:defun make-integer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass integration common-lisp:nil
                       ((pager-duty-configuration :initarg
                         :pager-duty-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or pager-duty-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-integration-pager-duty-configuration
                         :shape "PagerDutyConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-integration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'integration
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'integration 'make-integration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input integration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input integration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pager-duty-configuration))
      (common-lisp:list
       (common-lisp:cons "pagerDutyConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input integration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype integrations () '(trivial-types:proper-list integration))
 (common-lisp:defun make-integrations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (ssm-incidents-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass item-identifier common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or item-type common-lisp:null) :accessor
                         struct-shape-item-identifier-type :shape "ItemType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or item-value common-lisp:null) :accessor
                         struct-shape-item-identifier-value :shape "ItemValue"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-item-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'item-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'item-identifier 'make-item-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input item-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input item-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input item-identifier))
   common-lisp:nil))
(common-lisp:deftype item-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass item-value common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-item-value-arn :shape "Arn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (metric-definition :initarg :metric-definition
                         :initform common-lisp:nil :type
                         (common-lisp:or metric-definition common-lisp:null)
                         :accessor struct-shape-item-value-metric-definition
                         :shape "MetricDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pager-duty-incident-detail :initarg
                         :pager-duty-incident-detail :initform common-lisp:nil
                         :type
                         (common-lisp:or pager-duty-incident-detail
                                         common-lisp:null)
                         :accessor
                         struct-shape-item-value-pager-duty-incident-detail
                         :shape "PagerDutyIncidentDetail" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (url :initarg :url :initform common-lisp:nil :type
                         (common-lisp:or url common-lisp:null) :accessor
                         struct-shape-item-value-url :shape "Url" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-item-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'item-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'item-value 'make-item-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input item-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input item-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-definition))
      (common-lisp:list
       (common-lisp:cons "metricDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pager-duty-incident-detail))
      (common-lisp:list
       (common-lisp:cons "pagerDutyIncidentDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input item-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-incident-findings-input common-lisp:nil
                       ((incident-record-arn :initarg :incident-record-arn
                         :initform
                         (common-lisp:error ":incidentrecordarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-incident-findings-input-incident-record-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-incident-findings-input-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-incident-findings-input-max-results
                         :shape "ListIncidentFindingsInputMaxResultsInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-incident-findings-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-incident-findings-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-incident-findings-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-incident-findings-input
                    'make-list-incident-findings-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-incident-findings-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-incident-findings-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-record-arn))
      (common-lisp:list
       (common-lisp:cons "incidentRecordArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-incident-findings-input))
   common-lisp:nil))
(common-lisp:deftype list-incident-findings-input-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-incident-findings-output common-lisp:nil
                       ((findings :initarg :findings :initform
                         (common-lisp:error ":findings is required") :type
                         (common-lisp:or finding-summary-list common-lisp:null)
                         :accessor
                         struct-shape-list-incident-findings-output-findings
                         :shape "FindingSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-incident-findings-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-incident-findings-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-incident-findings-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-incident-findings-output
                    'make-list-incident-findings-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-incident-findings-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-incident-findings-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-incident-findings-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-incident-records-input common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-list-incident-records-input-filters
                         :shape "FilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-incident-records-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-incident-records-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-incident-records-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-incident-records-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-incident-records-input
                    'make-list-incident-records-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-incident-records-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-incident-records-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-incident-records-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-incident-records-output common-lisp:nil
                       ((incident-record-summaries :initarg
                         :incident-record-summaries :initform
                         (common-lisp:error
                          ":incidentrecordsummaries is required")
                         :type
                         (common-lisp:or incident-record-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-incident-records-output-incident-record-summaries
                         :shape "IncidentRecordSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-incident-records-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-incident-records-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-incident-records-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-incident-records-output
                    'make-list-incident-records-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-incident-records-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-incident-records-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incident-record-summaries))
      (common-lisp:list
       (common-lisp:cons "incidentRecordSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-incident-records-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-related-items-input common-lisp:nil
                       ((incident-record-arn :initarg :incident-record-arn
                         :initform
                         (common-lisp:error ":incidentrecordarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-related-items-input-incident-record-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-related-items-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-related-items-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-related-items-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-related-items-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-related-items-input 'make-list-related-items-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-related-items-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-related-items-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-record-arn))
      (common-lisp:list
       (common-lisp:cons "incidentRecordArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-related-items-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-related-items-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-related-items-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (related-items :initarg :related-items :initform
                         (common-lisp:error ":relateditems is required") :type
                         (common-lisp:or related-item-list common-lisp:null)
                         :accessor
                         struct-shape-list-related-items-output-related-items
                         :shape "RelatedItemList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-related-items-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-related-items-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-related-items-output
                    'make-list-related-items-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-related-items-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-related-items-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-items))
      (common-lisp:list
       (common-lisp:cons "relatedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-related-items-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-replication-sets-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-replication-sets-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-replication-sets-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-replication-sets-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-replication-sets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-replication-sets-input
                    'make-list-replication-sets-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-replication-sets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-replication-sets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-replication-sets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-replication-sets-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-replication-sets-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (replication-set-arns :initarg :replication-set-arns
                         :initform
                         (common-lisp:error ":replicationsetarns is required")
                         :type
                         (common-lisp:or replication-set-arn-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-replication-sets-output-replication-set-arns
                         :shape "ReplicationSetArnList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-replication-sets-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-replication-sets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-replication-sets-output
                    'make-list-replication-sets-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-replication-sets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-replication-sets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'replication-set-arns))
      (common-lisp:list
       (common-lisp:cons "replicationSetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-replication-sets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-response-plans-input common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-response-plans-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-response-plans-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-response-plans-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-response-plans-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-response-plans-input
                    'make-list-response-plans-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-response-plans-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-response-plans-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-response-plans-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-response-plans-output common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-response-plans-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-plan-summaries :initarg
                         :response-plan-summaries :initform
                         (common-lisp:error
                          ":responseplansummaries is required")
                         :type
                         (common-lisp:or response-plan-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-response-plans-output-response-plan-summaries
                         :shape "ResponsePlanSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-response-plans-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-response-plans-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-response-plans-output
                    'make-list-response-plans-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-response-plans-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-response-plans-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-plan-summaries))
      (common-lisp:list
       (common-lisp:cons "responsePlanSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-response-plans-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-timeline-events-input common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         struct-shape-list-timeline-events-input-filters :shape
                         "FilterList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (incident-record-arn :initarg :incident-record-arn
                         :initform
                         (common-lisp:error ":incidentrecordarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-timeline-events-input-incident-record-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-timeline-events-input-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-timeline-events-input-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type
                         (common-lisp:or timeline-event-sort common-lisp:null)
                         :accessor
                         struct-shape-list-timeline-events-input-sort-by :shape
                         "TimelineEventSort" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-list-timeline-events-input-sort-order
                         :shape "SortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-timeline-events-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-timeline-events-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-timeline-events-input
                    'make-list-timeline-events-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-timeline-events-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-timeline-events-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-record-arn))
      (common-lisp:list
       (common-lisp:cons "incidentRecordArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "sortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "sortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-timeline-events-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-timeline-events-output common-lisp:nil
                       ((event-summaries :initarg :event-summaries :initform
                         (common-lisp:error ":eventsummaries is required")
                         :type
                         (common-lisp:or event-summary-list common-lisp:null)
                         :accessor
                         struct-shape-list-timeline-events-output-event-summaries
                         :shape "EventSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-timeline-events-output-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-timeline-events-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-timeline-events-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-timeline-events-output
                    'make-list-timeline-events-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-timeline-events-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-timeline-events-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-summaries))
      (common-lisp:list
       (common-lisp:cons "eventSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-timeline-events-output))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype metric-definition () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notification-target-item common-lisp:nil
                       ((sns-topic-arn :initarg :sns-topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-notification-target-item-sns-topic-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-notification-target-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'notification-target-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'notification-target-item 'make-notification-target-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-target-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-target-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "snsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-target-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notification-target-set ()
   '(trivial-types:proper-list notification-target-item))
 (common-lisp:defun make-notification-target-set
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notification-target-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass pager-duty-configuration common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or pager-duty-configuration-name-string
                                         common-lisp:null)
                         :accessor struct-shape-pager-duty-configuration-name
                         :shape "PagerDutyConfigurationNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (pager-duty-incident-configuration :initarg
                         :pager-duty-incident-configuration :initform
                         (common-lisp:error
                          ":pagerdutyincidentconfiguration is required")
                         :type
                         (common-lisp:or pager-duty-incident-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-pager-duty-configuration-pager-duty-incident-configuration
                         :shape "PagerDutyIncidentConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (secret-id :initarg :secret-id :initform
                         (common-lisp:error ":secretid is required") :type
                         (common-lisp:or
                          pager-duty-configuration-secret-id-string
                          common-lisp:null)
                         :accessor
                         struct-shape-pager-duty-configuration-secret-id :shape
                         "PagerDutyConfigurationSecretIdString" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pager-duty-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pager-duty-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pager-duty-configuration 'make-pager-duty-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pager-duty-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pager-duty-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pager-duty-incident-configuration))
      (common-lisp:list
       (common-lisp:cons "pagerDutyIncidentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "secretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pager-duty-configuration))
   common-lisp:nil))
(common-lisp:deftype pager-duty-configuration-name-string ()
  'common-lisp:string)
(common-lisp:deftype pager-duty-configuration-secret-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pager-duty-incident-configuration common-lisp:nil
                       ((service-id :initarg :service-id :initform
                         (common-lisp:error ":serviceid is required") :type
                         (common-lisp:or
                          pager-duty-incident-configuration-service-id-string
                          common-lisp:null)
                         :accessor
                         struct-shape-pager-duty-incident-configuration-service-id
                         :shape "PagerDutyIncidentConfigurationServiceIdString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pager-duty-incident-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'pager-duty-incident-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pager-duty-incident-configuration
                    'make-pager-duty-incident-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pager-duty-incident-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pager-duty-incident-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-id))
      (common-lisp:list
       (common-lisp:cons "serviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pager-duty-incident-configuration))
   common-lisp:nil))
(common-lisp:deftype pager-duty-incident-configuration-service-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pager-duty-incident-detail common-lisp:nil
                       ((auto-resolve :initarg :auto-resolve :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-pager-duty-incident-detail-auto-resolve
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or pager-duty-incident-detail-id-string
                                         common-lisp:null)
                         :accessor struct-shape-pager-duty-incident-detail-id
                         :shape "PagerDutyIncidentDetailIdString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (secret-id :initarg :secret-id :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          pager-duty-incident-detail-secret-id-string
                          common-lisp:null)
                         :accessor
                         struct-shape-pager-duty-incident-detail-secret-id
                         :shape "PagerDutyIncidentDetailSecretIdString"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pager-duty-incident-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pager-duty-incident-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pager-duty-incident-detail
                    'make-pager-duty-incident-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pager-duty-incident-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pager-duty-incident-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-resolve))
      (common-lisp:list
       (common-lisp:cons "autoResolve"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-id))
      (common-lisp:list
       (common-lisp:cons "secretId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pager-duty-incident-detail))
   common-lisp:nil))
(common-lisp:deftype pager-duty-incident-detail-id-string ()
  'common-lisp:string)
(common-lisp:deftype pager-duty-incident-detail-secret-id-string ()
  'common-lisp:string)
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:deftype policy-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-input common-lisp:nil
                       ((policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         struct-shape-put-resource-policy-input-policy :shape
                         "Policy" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-put-resource-policy-input-resource-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-input
                    'make-put-resource-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-output common-lisp:nil
                       ((policy-id :initarg :policy-id :initform
                         (common-lisp:error ":policyid is required") :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         struct-shape-put-resource-policy-output-policy-id
                         :shape "PolicyId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-policy-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-output
                    'make-put-resource-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "policyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-output))
   common-lisp:nil))
(common-lisp:deftype raw-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass region-info common-lisp:nil
                       ((sse-kms-key-id :initarg :sse-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or sse-kms-key common-lisp:null)
                         :accessor struct-shape-region-info-sse-kms-key-id
                         :shape "SseKmsKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or region-status common-lisp:null)
                         :accessor struct-shape-region-info-status :shape
                         "RegionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-message :initarg :status-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-region-info-status-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status-update-date-time :initarg
                         :status-update-date-time :initform
                         (common-lisp:error
                          ":statusupdatedatetime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-region-info-status-update-date-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-region-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'region-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'region-info 'make-region-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input region-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input region-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "sseKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "statusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'status-update-date-time))
      (common-lisp:list
       (common-lisp:cons "statusUpdateDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input region-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype region-info-map () 'common-lisp:hash-table)
 (common-lisp:defun make-region-info-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype region-map-input () 'common-lisp:hash-table)
 (common-lisp:defun make-region-map-input (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass region-map-input-value common-lisp:nil
                       ((sse-kms-key-id :initarg :sse-kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or sse-kms-key common-lisp:null)
                         :accessor
                         struct-shape-region-map-input-value-sse-kms-key-id
                         :shape "SseKmsKey" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-region-map-input-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'region-map-input-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'region-map-input-value 'make-region-map-input-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          region-map-input-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          region-map-input-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sse-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "sseKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          region-map-input-value))
   common-lisp:nil))
(common-lisp:deftype region-name () 'common-lisp:string)
(common-lisp:deftype region-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass related-item common-lisp:nil
                       ((generated-id :initarg :generated-id :initform
                         common-lisp:nil :type
                         (common-lisp:or generated-id common-lisp:null)
                         :accessor struct-shape-related-item-generated-id
                         :shape "GeneratedId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identifier :initarg :identifier :initform
                         (common-lisp:error ":identifier is required") :type
                         (common-lisp:or item-identifier common-lisp:null)
                         :accessor struct-shape-related-item-identifier :shape
                         "ItemIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or related-item-title-string
                                         common-lisp:null)
                         :accessor struct-shape-related-item-title :shape
                         "RelatedItemTitleString" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-related-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'related-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'related-item 'make-related-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input related-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input related-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generated-id))
      (common-lisp:list
       (common-lisp:cons "generatedId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input related-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype related-item-list ()
   '(trivial-types:proper-list related-item))
 (common-lisp:defun make-related-item-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list related-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype related-item-title-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass related-items-update common-lisp:nil
                       ((item-to-add :initarg :item-to-add :initform
                         common-lisp:nil :type
                         (common-lisp:or related-item common-lisp:null)
                         :accessor
                         struct-shape-related-items-update-item-to-add :shape
                         "RelatedItem" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (item-to-remove :initarg :item-to-remove :initform
                         common-lisp:nil :type
                         (common-lisp:or item-identifier common-lisp:null)
                         :accessor
                         struct-shape-related-items-update-item-to-remove
                         :shape "ItemIdentifier" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-related-items-update
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'related-items-update
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'related-items-update 'make-related-items-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input related-items-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input related-items-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-to-add))
      (common-lisp:list
       (common-lisp:cons "itemToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'item-to-remove))
      (common-lisp:list
       (common-lisp:cons "itemToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input related-items-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass replication-set common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-replication-set-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         (common-lisp:error ":createdby is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-replication-set-created-by :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-time :initarg :created-time :initform
                         (common-lisp:error ":createdtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-replication-set-created-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (deletion-protected :initarg :deletion-protected
                         :initform
                         (common-lisp:error ":deletionprotected is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-replication-set-deletion-protected :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-by :initarg :last-modified-by :initform
                         (common-lisp:error ":lastmodifiedby is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-replication-set-last-modified-by :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform
                         (common-lisp:error ":lastmodifiedtime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-replication-set-last-modified-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region-map :initarg :region-map :initform
                         (common-lisp:error ":regionmap is required") :type
                         (common-lisp:or region-info-map common-lisp:null)
                         :accessor struct-shape-replication-set-region-map
                         :shape "RegionInfoMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or replication-set-status
                                         common-lisp:null)
                         :accessor struct-shape-replication-set-status :shape
                         "ReplicationSetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-replication-set
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'replication-set
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'replication-set 'make-replication-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input replication-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input replication-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "createdBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protected))
      (common-lisp:list
       (common-lisp:cons "deletionProtected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "lastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-map))
      (common-lisp:list
       (common-lisp:cons "regionMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input replication-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype replication-set-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun make-replication-set-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype replication-set-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (ssm-incidents-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-identifier :initarg :resource-identifier :initform
       common-lisp:nil :reader
       resource-not-found-exception-resource-identifier)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-identifier
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass resource-policy common-lisp:nil
                       ((policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policydocument is required")
                         :type (common-lisp:or policy common-lisp:null)
                         :accessor struct-shape-resource-policy-policy-document
                         :shape "Policy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-id :initarg :policy-id :initform
                         (common-lisp:error ":policyid is required") :type
                         (common-lisp:or policy-id common-lisp:null) :accessor
                         struct-shape-resource-policy-policy-id :shape
                         "PolicyId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ram-resource-share-region :initarg
                         :ram-resource-share-region :initform
                         (common-lisp:error
                          ":ramresourceshareregion is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-resource-policy-ram-resource-share-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource-policy 'make-resource-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "policyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ram-resource-share-region))
      (common-lisp:list
       (common-lisp:cons "ramResourceShareRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-policy-list ()
   '(trivial-types:proper-list resource-policy))
 (common-lisp:defun make-resource-policy-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-policy))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype response-plan-display-name () 'common-lisp:string)
(common-lisp:deftype response-plan-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass response-plan-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-response-plan-summary-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or response-plan-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-response-plan-summary-display-name :shape
                         "ResponsePlanDisplayName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or response-plan-name common-lisp:null)
                         :accessor struct-shape-response-plan-summary-name
                         :shape "ResponsePlanName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-response-plan-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'response-plan-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'response-plan-summary 'make-response-plan-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          response-plan-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          response-plan-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          response-plan-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype response-plan-summary-list ()
   '(trivial-types:proper-list response-plan-summary))
 (common-lisp:defun make-response-plan-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list response-plan-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype service-code () 'common-lisp:string)
(common-lisp:deftype service-principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (ssm-incidents-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-quota-code)
      (resource-identifier :initarg :resource-identifier :initform
       common-lisp:nil :reader
       service-quota-exceeded-exception-resource-identifier)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       service-quota-exceeded-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-quota-code
                    'service-quota-exceeded-exception-resource-identifier
                    'service-quota-exceeded-exception-resource-type
                    'service-quota-exceeded-exception-service-code)))
(common-lisp:deftype sns-arn () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype sse-kms-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ssm-automation common-lisp:nil
                       ((document-name :initarg :document-name :initform
                         (common-lisp:error ":documentname is required") :type
                         (common-lisp:or ssm-automation-document-name-string
                                         common-lisp:null)
                         :accessor struct-shape-ssm-automation-document-name
                         :shape "SsmAutomationDocumentNameString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (document-version :initarg :document-version :initform
                         common-lisp:nil :type
                         (common-lisp:or ssm-automation-document-version-string
                                         common-lisp:null)
                         :accessor struct-shape-ssm-automation-document-version
                         :shape "SsmAutomationDocumentVersionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dynamic-parameters :initarg :dynamic-parameters
                         :initform common-lisp:nil :type
                         (common-lisp:or dynamic-ssm-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-ssm-automation-dynamic-parameters :shape
                         "DynamicSsmParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or ssm-parameters common-lisp:null)
                         :accessor struct-shape-ssm-automation-parameters
                         :shape "SsmParameters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform
                         (common-lisp:error ":rolearn is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-ssm-automation-role-arn :shape "RoleArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (target-account :initarg :target-account :initform
                         common-lisp:nil :type
                         (common-lisp:or ssm-target-account common-lisp:null)
                         :accessor struct-shape-ssm-automation-target-account
                         :shape "SsmTargetAccount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ssm-automation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ssm-automation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ssm-automation 'make-ssm-automation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssm-automation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssm-automation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-name))
      (common-lisp:list
       (common-lisp:cons "documentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "documentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dynamic-parameters))
      (common-lisp:list
       (common-lisp:cons "dynamicParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-account))
      (common-lisp:list
       (common-lisp:cons "targetAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssm-automation))
   common-lisp:nil))
(common-lisp:deftype ssm-automation-document-name-string () 'common-lisp:string)
(common-lisp:deftype ssm-automation-document-version-string ()
  'common-lisp:string)
(common-lisp:deftype ssm-contacts-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ssm-parameter-values ()
   '(trivial-types:proper-list ssm-parameter-values-member-string))
 (common-lisp:defun make-ssm-parameter-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ssm-parameter-values-member-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ssm-parameter-values-member-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ssm-parameters () 'common-lisp:hash-table)
 (common-lisp:defun make-ssm-parameters (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype ssm-parameters-key-string () 'common-lisp:string)
(common-lisp:deftype ssm-target-account () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-incident-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-start-incident-input-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (impact :initarg :impact :initform common-lisp:nil
                         :type (common-lisp:or impact common-lisp:null)
                         :accessor struct-shape-start-incident-input-impact
                         :shape "Impact" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (related-items :initarg :related-items :initform
                         common-lisp:nil :type
                         (common-lisp:or related-item-list common-lisp:null)
                         :accessor
                         struct-shape-start-incident-input-related-items :shape
                         "RelatedItemList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (response-plan-arn :initarg :response-plan-arn
                         :initform
                         (common-lisp:error ":responseplanarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-start-incident-input-response-plan-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or incident-title common-lisp:null)
                         :accessor struct-shape-start-incident-input-title
                         :shape "IncidentTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (trigger-details :initarg :trigger-details :initform
                         common-lisp:nil :type
                         (common-lisp:or trigger-details common-lisp:null)
                         :accessor
                         struct-shape-start-incident-input-trigger-details
                         :shape "TriggerDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-incident-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-incident-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-incident-input 'make-start-incident-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-incident-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-incident-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact))
      (common-lisp:list
       (common-lisp:cons "impact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-items))
      (common-lisp:list
       (common-lisp:cons "relatedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response-plan-arn))
      (common-lisp:list
       (common-lisp:cons "responsePlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-details))
      (common-lisp:list
       (common-lisp:cons "triggerDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-incident-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-incident-output common-lisp:nil
                       ((incident-record-arn :initarg :incident-record-arn
                         :initform
                         (common-lisp:error ":incidentrecordarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-start-incident-output-incident-record-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-incident-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-incident-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-incident-output 'make-start-incident-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-incident-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-incident-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-record-arn))
      (common-lisp:list
       (common-lisp:cons "incidentRecordArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-incident-output))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list string-list-member-string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            string-list-member-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string-list-member-string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype tag-map-update () 'common-lisp:hash-table)
 (common-lisp:defun make-tag-map-update (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "String" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape "TagMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (ssm-incidents-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :quota-code :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (service-code :initarg :service-code :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-service-code)))
(common-lisp:progn
 (common-lisp:defclass timeline-event common-lisp:nil
                       ((event-data :initarg :event-data :initform
                         (common-lisp:error ":eventdata is required") :type
                         (common-lisp:or event-data common-lisp:null) :accessor
                         struct-shape-timeline-event-event-data :shape
                         "EventData" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-id :initarg :event-id :initform
                         (common-lisp:error ":eventid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-timeline-event-event-id :shape "UUID"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-references :initarg :event-references :initform
                         common-lisp:nil :type
                         (common-lisp:or event-reference-list common-lisp:null)
                         :accessor struct-shape-timeline-event-event-references
                         :shape "EventReferenceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-time :initarg :event-time :initform
                         (common-lisp:error ":eventtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-timeline-event-event-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-type :initarg :event-type :initform
                         (common-lisp:error ":eventtype is required") :type
                         (common-lisp:or timeline-event-type common-lisp:null)
                         :accessor struct-shape-timeline-event-event-type
                         :shape "TimelineEventType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-updated-time :initarg :event-updated-time
                         :initform
                         (common-lisp:error ":eventupdatedtime is required")
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-timeline-event-event-updated-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (incident-record-arn :initarg :incident-record-arn
                         :initform
                         (common-lisp:error ":incidentrecordarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-timeline-event-incident-record-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-timeline-event
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'timeline-event
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'timeline-event 'make-timeline-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timeline-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timeline-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-data))
      (common-lisp:list
       (common-lisp:cons "eventData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-references))
      (common-lisp:list
       (common-lisp:cons "eventReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time))
      (common-lisp:list
       (common-lisp:cons "eventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "eventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-updated-time))
      (common-lisp:list
       (common-lisp:cons "eventUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-record-arn))
      (common-lisp:list
       (common-lisp:cons "incidentRecordArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timeline-event))
   common-lisp:nil))
(common-lisp:deftype timeline-event-sort () 'common-lisp:string)
(common-lisp:deftype timeline-event-type () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass trigger-details common-lisp:nil
                       ((raw-data :initarg :raw-data :initform common-lisp:nil
                         :type (common-lisp:or raw-data common-lisp:null)
                         :accessor struct-shape-trigger-details-raw-data :shape
                         "RawData" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or incident-source common-lisp:null)
                         :accessor struct-shape-trigger-details-source :shape
                         "IncidentSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (timestamp :initarg :timestamp :initform
                         (common-lisp:error ":string is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-trigger-details-timestamp :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (trigger-arn :initarg :trigger-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-trigger-details-trigger-arn :shape "Arn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trigger-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trigger-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trigger-details 'make-trigger-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trigger-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trigger-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-data))
      (common-lisp:list
       (common-lisp:cons "rawData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trigger-arn))
      (common-lisp:list
       (common-lisp:cons "triggerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trigger-details))
   common-lisp:nil))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location "querystring"
                         :location-name "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-deletion-protection-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-deletion-protection-input-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-deletion-protection-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deletion-protected :initarg :deletion-protected
                         :initform
                         (common-lisp:error ":deletionprotected is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-deletion-protection-input-deletion-protected
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-deletion-protection-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-deletion-protection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-deletion-protection-input
                    'make-update-deletion-protection-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-deletion-protection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-deletion-protection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protected))
      (common-lisp:list
       (common-lisp:cons "deletionProtected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-deletion-protection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-deletion-protection-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-deletion-protection-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-deletion-protection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-deletion-protection-output
                    'make-update-deletion-protection-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-deletion-protection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-deletion-protection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-deletion-protection-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-incident-record-input common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-incident-record-input-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (chat-channel :initarg :chat-channel :initform
                         common-lisp:nil :type
                         (common-lisp:or chat-channel common-lisp:null)
                         :accessor
                         struct-shape-update-incident-record-input-chat-channel
                         :shape "ChatChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-incident-record-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (impact :initarg :impact :initform common-lisp:nil
                         :type (common-lisp:or impact common-lisp:null)
                         :accessor
                         struct-shape-update-incident-record-input-impact
                         :shape "Impact" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (notification-targets :initarg :notification-targets
                         :initform common-lisp:nil :type
                         (common-lisp:or notification-target-set
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-incident-record-input-notification-targets
                         :shape "NotificationTargetSet" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or incident-record-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-incident-record-input-status
                         :shape "IncidentRecordStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (summary :initarg :summary :initform common-lisp:nil
                         :type
                         (common-lisp:or incident-summary common-lisp:null)
                         :accessor
                         struct-shape-update-incident-record-input-summary
                         :shape "IncidentSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (title :initarg :title :initform common-lisp:nil :type
                         (common-lisp:or incident-title common-lisp:null)
                         :accessor
                         struct-shape-update-incident-record-input-title :shape
                         "IncidentTitle" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-incident-record-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-incident-record-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-incident-record-input
                    'make-update-incident-record-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-incident-record-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-incident-record-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chat-channel))
      (common-lisp:list
       (common-lisp:cons "chatChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'impact))
      (common-lisp:list
       (common-lisp:cons "impact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-targets))
      (common-lisp:list
       (common-lisp:cons "notificationTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-incident-record-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-incident-record-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-incident-record-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-incident-record-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-incident-record-output
                    'make-update-incident-record-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-incident-record-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-incident-record-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-incident-record-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-related-items-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-related-items-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (incident-record-arn :initarg :incident-record-arn
                         :initform
                         (common-lisp:error ":incidentrecordarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-related-items-input-incident-record-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (related-items-update :initarg :related-items-update
                         :initform
                         (common-lisp:error ":relateditemsupdate is required")
                         :type
                         (common-lisp:or related-items-update common-lisp:null)
                         :accessor
                         struct-shape-update-related-items-input-related-items-update
                         :shape "RelatedItemsUpdate" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-related-items-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-related-items-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-related-items-input
                    'make-update-related-items-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-related-items-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-related-items-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-record-arn))
      (common-lisp:list
       (common-lisp:cons "incidentRecordArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-items-update))
      (common-lisp:list
       (common-lisp:cons "relatedItemsUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-related-items-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-related-items-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-related-items-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-related-items-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-related-items-output
                    'make-update-related-items-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-related-items-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-related-items-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-related-items-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-replication-set-action common-lisp:nil
                       ((add-region-action :initarg :add-region-action
                         :initform common-lisp:nil :type
                         (common-lisp:or add-region-action common-lisp:null)
                         :accessor
                         struct-shape-update-replication-set-action-add-region-action
                         :shape "AddRegionAction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delete-region-action :initarg :delete-region-action
                         :initform common-lisp:nil :type
                         (common-lisp:or delete-region-action common-lisp:null)
                         :accessor
                         struct-shape-update-replication-set-action-delete-region-action
                         :shape "DeleteRegionAction" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-replication-set-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-replication-set-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-replication-set-action
                    'make-update-replication-set-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-set-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-set-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-region-action))
      (common-lisp:list
       (common-lisp:cons "addRegionAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delete-region-action))
      (common-lisp:list
       (common-lisp:cons "deleteRegionAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-set-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-replication-set-input common-lisp:nil
                       ((actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or
                          update-replication-set-input-actions-list
                          common-lisp:null)
                         :accessor
                         struct-shape-update-replication-set-input-actions
                         :shape "UpdateReplicationSetInputActionsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-replication-set-input-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-replication-set-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-replication-set-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-replication-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-replication-set-input
                    'make-update-replication-set-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-replication-set-input-actions-list ()
   '(trivial-types:proper-list update-replication-set-action))
 (common-lisp:defun make-update-replication-set-input-actions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            update-replication-set-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-replication-set-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-replication-set-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-replication-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-replication-set-output
                    'make-update-replication-set-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-replication-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-response-plan-input common-lisp:nil
                       ((actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or actions-list common-lisp:null)
                         :accessor
                         struct-shape-update-response-plan-input-actions :shape
                         "ActionsList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-response-plan-input-arn :shape
                         "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (chat-channel :initarg :chat-channel :initform
                         common-lisp:nil :type
                         (common-lisp:or chat-channel common-lisp:null)
                         :accessor
                         struct-shape-update-response-plan-input-chat-channel
                         :shape "ChatChannel" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-response-plan-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (display-name :initarg :display-name :initform
                         common-lisp:nil :type
                         (common-lisp:or response-plan-display-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-response-plan-input-display-name
                         :shape "ResponsePlanDisplayName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (engagements :initarg :engagements :initform
                         common-lisp:nil :type
                         (common-lisp:or engagement-set common-lisp:null)
                         :accessor
                         struct-shape-update-response-plan-input-engagements
                         :shape "EngagementSet" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (incident-template-dedupe-string :initarg
                         :incident-template-dedupe-string :initform
                         common-lisp:nil :type
                         (common-lisp:or dedupe-string common-lisp:null)
                         :accessor
                         struct-shape-update-response-plan-input-incident-template-dedupe-string
                         :shape "DedupeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (incident-template-impact :initarg
                         :incident-template-impact :initform common-lisp:nil
                         :type (common-lisp:or impact common-lisp:null)
                         :accessor
                         struct-shape-update-response-plan-input-incident-template-impact
                         :shape "Impact" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (incident-template-notification-targets :initarg
                         :incident-template-notification-targets :initform
                         common-lisp:nil :type
                         (common-lisp:or notification-target-set
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-response-plan-input-incident-template-notification-targets
                         :shape "NotificationTargetSet" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (incident-template-summary :initarg
                         :incident-template-summary :initform common-lisp:nil
                         :type
                         (common-lisp:or incident-summary common-lisp:null)
                         :accessor
                         struct-shape-update-response-plan-input-incident-template-summary
                         :shape "IncidentSummary" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (incident-template-tags :initarg
                         :incident-template-tags :initform common-lisp:nil
                         :type (common-lisp:or tag-map-update common-lisp:null)
                         :accessor
                         struct-shape-update-response-plan-input-incident-template-tags
                         :shape "TagMapUpdate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (incident-template-title :initarg
                         :incident-template-title :initform common-lisp:nil
                         :type (common-lisp:or incident-title common-lisp:null)
                         :accessor
                         struct-shape-update-response-plan-input-incident-template-title
                         :shape "IncidentTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (integrations :initarg :integrations :initform
                         common-lisp:nil :type
                         (common-lisp:or integrations common-lisp:null)
                         :accessor
                         struct-shape-update-response-plan-input-integrations
                         :shape "Integrations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-response-plan-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-response-plan-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-response-plan-input
                    'make-update-response-plan-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-response-plan-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-response-plan-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chat-channel))
      (common-lisp:list
       (common-lisp:cons "chatChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engagements))
      (common-lisp:list
       (common-lisp:cons "engagements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incident-template-dedupe-string))
      (common-lisp:list
       (common-lisp:cons "incidentTemplateDedupeString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incident-template-impact))
      (common-lisp:list
       (common-lisp:cons "incidentTemplateImpact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incident-template-notification-targets))
      (common-lisp:list
       (common-lisp:cons "incidentTemplateNotificationTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incident-template-summary))
      (common-lisp:list
       (common-lisp:cons "incidentTemplateSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incident-template-tags))
      (common-lisp:list
       (common-lisp:cons "incidentTemplateTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incident-template-title))
      (common-lisp:list
       (common-lisp:cons "incidentTemplateTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integrations))
      (common-lisp:list
       (common-lisp:cons "integrations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-response-plan-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-response-plan-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-response-plan-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-response-plan-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-response-plan-output
                    'make-update-response-plan-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-response-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-response-plan-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-response-plan-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-timeline-event-input common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-timeline-event-input-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-data :initarg :event-data :initform
                         common-lisp:nil :type
                         (common-lisp:or event-data common-lisp:null) :accessor
                         struct-shape-update-timeline-event-input-event-data
                         :shape "EventData" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-id :initarg :event-id :initform
                         (common-lisp:error ":eventid is required") :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         struct-shape-update-timeline-event-input-event-id
                         :shape "UUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (event-references :initarg :event-references :initform
                         common-lisp:nil :type
                         (common-lisp:or event-reference-list common-lisp:null)
                         :accessor
                         struct-shape-update-timeline-event-input-event-references
                         :shape "EventReferenceList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-time :initarg :event-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-update-timeline-event-input-event-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (event-type :initarg :event-type :initform
                         common-lisp:nil :type
                         (common-lisp:or timeline-event-type common-lisp:null)
                         :accessor
                         struct-shape-update-timeline-event-input-event-type
                         :shape "TimelineEventType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (incident-record-arn :initarg :incident-record-arn
                         :initform
                         (common-lisp:error ":incidentrecordarn is required")
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-update-timeline-event-input-incident-record-arn
                         :shape "Arn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-timeline-event-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-timeline-event-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-timeline-event-input
                    'make-update-timeline-event-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-timeline-event-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-timeline-event-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-data))
      (common-lisp:list
       (common-lisp:cons "eventData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-references))
      (common-lisp:list
       (common-lisp:cons "eventReferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time))
      (common-lisp:list
       (common-lisp:cons "eventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-type))
      (common-lisp:list
       (common-lisp:cons "eventType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'incident-record-arn))
      (common-lisp:list
       (common-lisp:cons "incidentRecordArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-timeline-event-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-timeline-event-output common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-timeline-event-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-timeline-event-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-timeline-event-output
                    'make-update-timeline-event-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-timeline-event-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-timeline-event-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-timeline-event-output))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (ssm-incidents-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype variable-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-get-incident-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-ids incident-record-arn)
   (common-lisp:declare
    (common-lisp:ignorable finding-ids incident-record-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-incident-findings-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/batchGetIncidentFindings"
                                                        "BatchGetIncidentFindings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-incident-findings))
(common-lisp:progn
 (common-lisp:defun create-replication-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token regions tags)
   (common-lisp:declare (common-lisp:ignorable client-token regions tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-replication-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/createReplicationSet"
                                                        "CreateReplicationSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-replication-set))
(common-lisp:progn
 (common-lisp:defun create-response-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key actions chat-channel client-token
                     display-name engagements incident-template integrations
                     name tags)
   (common-lisp:declare
    (common-lisp:ignorable actions chat-channel client-token display-name
     engagements incident-template integrations name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-response-plan-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/createResponsePlan"
                                                        "CreateResponsePlan"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-response-plan))
(common-lisp:progn
 (common-lisp:defun create-timeline-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token event-data event-references
                     event-time event-type incident-record-arn)
   (common-lisp:declare
    (common-lisp:ignorable client-token event-data event-references event-time
     event-type incident-record-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-timeline-event-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/createTimelineEvent"
                                                        "CreateTimelineEvent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-timeline-event))
(common-lisp:progn
 (common-lisp:defun delete-incident-record
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-incident-record-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/deleteIncidentRecord"
                                                        "DeleteIncidentRecord"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-incident-record))
(common-lisp:progn
 (common-lisp:defun delete-replication-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-replication-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/deleteReplicationSet"
                                                        "DeleteReplicationSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-replication-set))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-id resource-arn)
   (common-lisp:declare (common-lisp:ignorable policy-id resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/deleteResourcePolicy"
                                                        "DeleteResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun delete-response-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-response-plan-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/deleteResponsePlan"
                                                        "DeleteResponsePlan"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-response-plan))
(common-lisp:progn
 (common-lisp:defun delete-timeline-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-id incident-record-arn)
   (common-lisp:declare (common-lisp:ignorable event-id incident-record-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-timeline-event-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/deleteTimelineEvent"
                                                        "DeleteTimelineEvent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-timeline-event))
(common-lisp:progn
 (common-lisp:defun get-incident-record
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-incident-record-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/getIncidentRecord"
                                                        "GetIncidentRecord"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-incident-record))
(common-lisp:progn
 (common-lisp:defun get-replication-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-replication-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/getReplicationSet"
                                                        "GetReplicationSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-replication-set))
(common-lisp:progn
 (common-lisp:defun get-resource-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token resource-arn)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policies-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/getResourcePolicies"
                                                        "GetResourcePolicies"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resource-policies))
(common-lisp:progn
 (common-lisp:defun get-response-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-response-plan-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/getResponsePlan"
                                                        "GetResponsePlan"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-response-plan))
(common-lisp:progn
 (common-lisp:defun get-timeline-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-id incident-record-arn)
   (common-lisp:declare (common-lisp:ignorable event-id incident-record-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-timeline-event-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/getTimelineEvent"
                                                        "GetTimelineEvent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-timeline-event))
(common-lisp:progn
 (common-lisp:defun list-incident-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key incident-record-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable incident-record-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-incident-findings-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/listIncidentFindings"
                                                        "ListIncidentFindings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-incident-findings))
(common-lisp:progn
 (common-lisp:defun list-incident-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-incident-records-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/listIncidentRecords"
                                                        "ListIncidentRecords"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-incident-records))
(common-lisp:progn
 (common-lisp:defun list-related-items
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key incident-record-arn max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable incident-record-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-related-items-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/listRelatedItems"
                                                        "ListRelatedItems"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-related-items))
(common-lisp:progn
 (common-lisp:defun list-replication-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-replication-sets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/listReplicationSets"
                                                        "ListReplicationSets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-replication-sets))
(common-lisp:progn
 (common-lisp:defun list-response-plans
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-response-plans-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/listResponsePlans"
                                                        "ListResponsePlans"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-response-plans))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-timeline-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters incident-record-arn max-results
                     next-token sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable filters incident-record-arn max-results next-token
     sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-timeline-events-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/listTimelineEvents"
                                                        "ListTimelineEvents"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-timeline-events))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy resource-arn)
   (common-lisp:declare (common-lisp:ignorable policy resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/putResourcePolicy"
                                                        "PutResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun start-incident
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token impact related-items
                     response-plan-arn title trigger-details)
   (common-lisp:declare
    (common-lisp:ignorable client-token impact related-items response-plan-arn
     title trigger-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-incident-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/startIncident"
                                                        "StartIncident"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-incident))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-deletion-protection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn client-token deletion-protected)
   (common-lisp:declare
    (common-lisp:ignorable arn client-token deletion-protected))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-deletion-protection-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/updateDeletionProtection"
                                                        "UpdateDeletionProtection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-deletion-protection))
(common-lisp:progn
 (common-lisp:defun update-incident-record
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn chat-channel client-token impact
                     notification-targets status summary title)
   (common-lisp:declare
    (common-lisp:ignorable arn chat-channel client-token impact
     notification-targets status summary title))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-incident-record-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/updateIncidentRecord"
                                                        "UpdateIncidentRecord"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-incident-record))
(common-lisp:progn
 (common-lisp:defun update-related-items
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token incident-record-arn
                     related-items-update)
   (common-lisp:declare
    (common-lisp:ignorable client-token incident-record-arn
     related-items-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-related-items-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/updateRelatedItems"
                                                        "UpdateRelatedItems"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-related-items))
(common-lisp:progn
 (common-lisp:defun update-replication-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key actions arn client-token)
   (common-lisp:declare (common-lisp:ignorable actions arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-replication-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/updateReplicationSet"
                                                        "UpdateReplicationSet"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-replication-set))
(common-lisp:progn
 (common-lisp:defun update-response-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key actions arn chat-channel client-token
                     display-name engagements incident-template-dedupe-string
                     incident-template-impact
                     incident-template-notification-targets
                     incident-template-summary incident-template-tags
                     incident-template-title integrations)
   (common-lisp:declare
    (common-lisp:ignorable actions arn chat-channel client-token display-name
     engagements incident-template-dedupe-string incident-template-impact
     incident-template-notification-targets incident-template-summary
     incident-template-tags incident-template-title integrations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-response-plan-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/updateResponsePlan"
                                                        "UpdateResponsePlan"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-response-plan))
(common-lisp:progn
 (common-lisp:defun update-timeline-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token event-data event-id
                     event-references event-time event-type
                     incident-record-arn)
   (common-lisp:declare
    (common-lisp:ignorable client-token event-data event-id event-references
     event-time event-type incident-record-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-timeline-event-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ssm-incidents-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/updateTimelineEvent"
                                                        "UpdateTimelineEvent"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-timeline-event))
