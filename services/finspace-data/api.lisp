;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/finspace-data/api (:use)
                             (:nicknames #:aws/finspace-data)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/finspace-data/api)
(common-lisp:progn
 (common-lisp:define-condition finspace-data-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'finspace-data-error))
(common-lisp:progn
 (common-lisp:defclass finspace-data-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "finspace-data" :api-version
                        "2020-07-13" :host-prefix "finspace-api" :signing-name
                        "finspace-api" :global-host common-lisp:nil))
 (common-lisp:export 'finspace-data-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (finspace-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype access-key-id () 'common-lisp:string)
(common-lisp:deftype alias-string () 'common-lisp:string)
(common-lisp:deftype api-access () 'common-lisp:string)
(common-lisp:deftype application-permission () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-permission-list ()
   '(trivial-types:proper-list application-permission))
 (common-lisp:defun make-application-permission-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-permission))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associate-user-to-permission-group-request
                       common-lisp:nil
                       ((permission-group-id :initarg :permission-group-id
                         :initform
                         (common-lisp:error ":permissiongroupid is required")
                         :type
                         (common-lisp:or permission-group-id common-lisp:null)
                         :accessor
                         struct-shape-associate-user-to-permission-group-request-permission-group-id
                         :shape "PermissionGroupId" :location "uri"
                         :location-name "permissionGroupId")
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-associate-user-to-permission-group-request-user-id
                         :shape "UserId" :location "uri" :location-name
                         "userId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-associate-user-to-permission-group-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-user-to-permission-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-user-to-permission-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-user-to-permission-group-request
                    'make-associate-user-to-permission-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-to-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-to-permission-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-to-permission-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-user-to-permission-group-response
                       common-lisp:nil
                       ((status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         struct-shape-associate-user-to-permission-group-response-status-code
                         :shape "StatusCode" :location "statusCode"
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-user-to-permission-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-user-to-permission-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-user-to-permission-group-response
                    'make-associate-user-to-permission-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-to-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-to-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-user-to-permission-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aws-credentials common-lisp:nil
                       ((access-key-id :initarg :access-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or access-key-id common-lisp:null)
                         :accessor struct-shape-aws-credentials-access-key-id
                         :shape "AccessKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (secret-access-key :initarg :secret-access-key
                         :initform common-lisp:nil :type
                         (common-lisp:or secret-access-key common-lisp:null)
                         :accessor
                         struct-shape-aws-credentials-secret-access-key :shape
                         "SecretAccessKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (session-token :initarg :session-token :initform
                         common-lisp:nil :type
                         (common-lisp:or session-token common-lisp:null)
                         :accessor struct-shape-aws-credentials-session-token
                         :shape "SessionToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expiration :initarg :expiration :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor struct-shape-aws-credentials-expiration
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aws-credentials
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aws-credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'aws-credentials 'make-aws-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aws-credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aws-credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "secretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "sessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aws-credentials))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype change-type () 'common-lisp:string)
(common-lisp:deftype changeset-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass changeset-error-info common-lisp:nil
                       ((error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-changeset-error-info-error-message :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-category :initarg :error-category :initform
                         common-lisp:nil :type
                         (common-lisp:or error-category common-lisp:null)
                         :accessor
                         struct-shape-changeset-error-info-error-category
                         :shape "ErrorCategory" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-changeset-error-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'changeset-error-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'changeset-error-info 'make-changeset-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input changeset-error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input changeset-error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-category))
      (common-lisp:list
       (common-lisp:cons "errorCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input changeset-error-info))
   common-lisp:nil))
(common-lisp:deftype changeset-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype changeset-list ()
   '(trivial-types:proper-list changeset-summary))
 (common-lisp:defun make-changeset-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list changeset-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass changeset-summary common-lisp:nil
                       ((changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor struct-shape-changeset-summary-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (changeset-arn :initarg :changeset-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-arn common-lisp:null)
                         :accessor struct-shape-changeset-summary-changeset-arn
                         :shape "ChangesetArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-id :initarg :dataset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-changeset-summary-dataset-id :shape
                         "DatasetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (change-type :initarg :change-type :initform
                         common-lisp:nil :type
                         (common-lisp:or change-type common-lisp:null)
                         :accessor struct-shape-changeset-summary-change-type
                         :shape "ChangeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-params :initarg :source-params :initform
                         common-lisp:nil :type
                         (common-lisp:or source-params common-lisp:null)
                         :accessor struct-shape-changeset-summary-source-params
                         :shape "SourceParams" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format-params :initarg :format-params :initform
                         common-lisp:nil :type
                         (common-lisp:or format-params common-lisp:null)
                         :accessor struct-shape-changeset-summary-format-params
                         :shape "FormatParams" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor struct-shape-changeset-summary-create-time
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or ingestion-status common-lisp:null)
                         :accessor struct-shape-changeset-summary-status :shape
                         "IngestionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-info :initarg :error-info :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-error-info common-lisp:null)
                         :accessor struct-shape-changeset-summary-error-info
                         :shape "ChangesetErrorInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (active-until-timestamp :initarg
                         :active-until-timestamp :initform common-lisp:nil
                         :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-changeset-summary-active-until-timestamp
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (active-from-timestamp :initarg :active-from-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-changeset-summary-active-from-timestamp
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updates-changeset-id :initarg :updates-changeset-id
                         :initform common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-changeset-summary-updates-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by-changeset-id :initarg
                         :updated-by-changeset-id :initform common-lisp:nil
                         :type (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-changeset-summary-updated-by-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-changeset-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'changeset-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'changeset-summary 'make-changeset-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input changeset-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input changeset-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-arn))
      (common-lisp:list
       (common-lisp:cons "changesetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "changeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-params))
      (common-lisp:list
       (common-lisp:cons "sourceParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-params))
      (common-lisp:list
       (common-lisp:cons "formatParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-until-timestamp))
      (common-lisp:list
       (common-lisp:cons "activeUntilTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-from-timestamp))
      (common-lisp:list
       (common-lisp:cons "activeFromTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'updates-changeset-id))
      (common-lisp:list
       (common-lisp:cons "updatesChangesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'updated-by-changeset-id))
      (common-lisp:list
       (common-lisp:cons "updatedByChangesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input changeset-summary))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype column-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass column-definition common-lisp:nil
                       ((data-type :initarg :data-type :initform
                         common-lisp:nil :type
                         (common-lisp:or column-data-type common-lisp:null)
                         :accessor struct-shape-column-definition-data-type
                         :shape "ColumnDataType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (column-name :initarg :column-name :initform
                         common-lisp:nil :type
                         (common-lisp:or column-name common-lisp:null)
                         :accessor struct-shape-column-definition-column-name
                         :shape "ColumnName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (column-description :initarg :column-description
                         :initform common-lisp:nil :type
                         (common-lisp:or column-description common-lisp:null)
                         :accessor
                         struct-shape-column-definition-column-description
                         :shape "ColumnDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-column-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'column-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'column-definition 'make-column-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-name))
      (common-lisp:list
       (common-lisp:cons "columnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-description))
      (common-lisp:list
       (common-lisp:cons "columnDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-definition))
   common-lisp:nil))
(common-lisp:deftype column-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype column-list ()
   '(trivial-types:proper-list column-definition))
 (common-lisp:defun make-column-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype column-name-list ()
   '(trivial-types:proper-list column-name))
 (common-lisp:defun make-column-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (finspace-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       conflict-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-reason)))
(common-lisp:progn
 (common-lisp:defclass create-changeset-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-changeset-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-id :initarg :dataset-id :initform
                         (common-lisp:error ":datasetid is required") :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-create-changeset-request-dataset-id
                         :shape "DatasetId" :location "uri" :location-name
                         "datasetId")
                        (change-type :initarg :change-type :initform
                         (common-lisp:error ":changetype is required") :type
                         (common-lisp:or change-type common-lisp:null)
                         :accessor
                         struct-shape-create-changeset-request-change-type
                         :shape "ChangeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-params :initarg :source-params :initform
                         (common-lisp:error ":sourceparams is required") :type
                         (common-lisp:or source-params common-lisp:null)
                         :accessor
                         struct-shape-create-changeset-request-source-params
                         :shape "SourceParams" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format-params :initarg :format-params :initform
                         (common-lisp:error ":formatparams is required") :type
                         (common-lisp:or format-params common-lisp:null)
                         :accessor
                         struct-shape-create-changeset-request-format-params
                         :shape "FormatParams" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-changeset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-changeset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-changeset-request 'make-create-changeset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-changeset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-changeset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "changeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-params))
      (common-lisp:list
       (common-lisp:cons "sourceParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-params))
      (common-lisp:list
       (common-lisp:cons "formatParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-changeset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-changeset-response common-lisp:nil
                       ((dataset-id :initarg :dataset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-create-changeset-response-dataset-id
                         :shape "DatasetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-create-changeset-response-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-changeset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-changeset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-changeset-response
                    'make-create-changeset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-changeset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-changeset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-changeset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-view-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-data-view-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-id :initarg :dataset-id :initform
                         (common-lisp:error ":datasetid is required") :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-create-data-view-request-dataset-id
                         :shape "DatasetId" :location "uri" :location-name
                         "datasetId")
                        (auto-update :initarg :auto-update :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-create-data-view-request-auto-update
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-columns :initarg :sort-columns :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-column-list common-lisp:null)
                         :accessor
                         struct-shape-create-data-view-request-sort-columns
                         :shape "SortColumnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-columns :initarg :partition-columns
                         :initform common-lisp:nil :type
                         (common-lisp:or partition-column-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-view-request-partition-columns
                         :shape "PartitionColumnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (as-of-timestamp :initarg :as-of-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-create-data-view-request-as-of-timestamp
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-type-params :initarg
                         :destination-type-params :initform
                         (common-lisp:error
                          ":destinationtypeparams is required")
                         :type
                         (common-lisp:or data-view-destination-type-params
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-data-view-request-destination-type-params
                         :shape "DataViewDestinationTypeParams" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-view-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-view-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-view-request 'make-create-data-view-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-view-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-view-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "autoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-columns))
      (common-lisp:list
       (common-lisp:cons "sortColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-columns))
      (common-lisp:list
       (common-lisp:cons "partitionColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as-of-timestamp))
      (common-lisp:list
       (common-lisp:cons "asOfTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-type-params))
      (common-lisp:list
       (common-lisp:cons "destinationTypeParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-view-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-data-view-response common-lisp:nil
                       ((dataset-id :initarg :dataset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-create-data-view-response-dataset-id
                         :shape "DatasetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-view-id :initarg :data-view-id :initform
                         common-lisp:nil :type
                         (common-lisp:or data-view-id common-lisp:null)
                         :accessor
                         struct-shape-create-data-view-response-data-view-id
                         :shape "DataViewId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-data-view-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-data-view-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-data-view-response
                    'make-create-data-view-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-view-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-view-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-view-id))
      (common-lisp:list
       (common-lisp:cons "dataViewId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-view-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-title :initarg :dataset-title :initform
                         (common-lisp:error ":datasettitle is required") :type
                         (common-lisp:or dataset-title common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-dataset-title
                         :shape "DatasetTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kind :initarg :kind :initform
                         (common-lisp:error ":kind is required") :type
                         (common-lisp:or dataset-kind common-lisp:null)
                         :accessor struct-shape-create-dataset-request-kind
                         :shape "DatasetKind" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-description :initarg :dataset-description
                         :initform common-lisp:nil :type
                         (common-lisp:or dataset-description common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-dataset-description
                         :shape "DatasetDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-info :initarg :owner-info :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-owner-info common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-owner-info :shape
                         "DatasetOwnerInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (permission-group-params :initarg
                         :permission-group-params :initform
                         (common-lisp:error
                          ":permissiongroupparams is required")
                         :type
                         (common-lisp:or permission-group-params
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-permission-group-params
                         :shape "PermissionGroupParams" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or alias-string common-lisp:null)
                         :accessor struct-shape-create-dataset-request-alias
                         :shape "AliasString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-definition :initarg :schema-definition
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-union common-lisp:null)
                         :accessor
                         struct-shape-create-dataset-request-schema-definition
                         :shape "SchemaUnion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-request 'make-create-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-title))
      (common-lisp:list
       (common-lisp:cons "datasetTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-description))
      (common-lisp:list
       (common-lisp:cons "datasetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-info))
      (common-lisp:list
       (common-lisp:cons "ownerInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permission-group-params))
      (common-lisp:list
       (common-lisp:cons "permissionGroupParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "schemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-dataset-response common-lisp:nil
                       ((dataset-id :initarg :dataset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-create-dataset-response-dataset-id :shape
                         "DatasetId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-dataset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-dataset-response 'make-create-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-permission-group-request common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or permission-group-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-permission-group-request-name
                         :shape "PermissionGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or permission-group-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-permission-group-request-description
                         :shape "PermissionGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (application-permissions :initarg
                         :application-permissions :initform
                         (common-lisp:error
                          ":applicationpermissions is required")
                         :type
                         (common-lisp:or application-permission-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-permission-group-request-application-permissions
                         :shape "ApplicationPermissionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-permission-group-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-permission-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-permission-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-permission-group-request
                    'make-create-permission-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-permissions))
      (common-lisp:list
       (common-lisp:cons "applicationPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-permission-group-response common-lisp:nil
                       ((permission-group-id :initarg :permission-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or permission-group-id common-lisp:null)
                         :accessor
                         struct-shape-create-permission-group-response-permission-group-id
                         :shape "PermissionGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-permission-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-permission-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-permission-group-response
                    'make-create-permission-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-group-id))
      (common-lisp:list
       (common-lisp:cons "permissionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-permission-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-request common-lisp:nil
                       ((email-address :initarg :email-address :initform
                         (common-lisp:error ":emailaddress is required") :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-create-user-request-email-address :shape
                         "Email" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or user-type common-lisp:null) :accessor
                         struct-shape-create-user-request-type :shape
                         "UserType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or first-name common-lisp:null) :accessor
                         struct-shape-create-user-request-first-name :shape
                         "FirstName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or last-name common-lisp:null) :accessor
                         struct-shape-create-user-request-last-name :shape
                         "LastName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (api-access :initarg :api-access :initform
                         common-lisp:nil :type
                         (common-lisp:or api-access common-lisp:null) :accessor
                         struct-shape-create-user-request-api-access :shape
                         "ApiAccess" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (api-access-principal-arn :initarg
                         :api-access-principal-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-create-user-request-api-access-principal-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-user-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "firstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "lastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-access))
      (common-lisp:list
       (common-lisp:cons "apiAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-access-principal-arn))
      (common-lisp:list
       (common-lisp:cons "apiAccessPrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-response common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor struct-shape-create-user-response-user-id
                         :shape "UserId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass credentials common-lisp:nil
                       ((access-key-id :initarg :access-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or |stringValueLength1to255|
                                         common-lisp:null)
                         :accessor struct-shape-credentials-access-key-id
                         :shape "stringValueLength1to255" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (secret-access-key :initarg :secret-access-key
                         :initform common-lisp:nil :type
                         (common-lisp:or |stringValueMaxLength1000|
                                         common-lisp:null)
                         :accessor struct-shape-credentials-secret-access-key
                         :shape "stringValueMaxLength1000" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (session-token :initarg :session-token :initform
                         common-lisp:nil :type
                         (common-lisp:or |stringValueMaxLength1000|
                                         common-lisp:null)
                         :accessor struct-shape-credentials-session-token
                         :shape "stringValueMaxLength1000" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-credentials
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'credentials
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'credentials 'make-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input credentials))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "secretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-token))
      (common-lisp:list
       (common-lisp:cons "sessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input credentials))
   common-lisp:nil))
(common-lisp:deftype data-view-arn () 'common-lisp:string)
(common-lisp:deftype data-view-destination-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-view-destination-type-params common-lisp:nil
                       ((destination-type :initarg :destination-type :initform
                         (common-lisp:error ":destinationtype is required")
                         :type
                         (common-lisp:or data-view-destination-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-view-destination-type-params-destination-type
                         :shape "DataViewDestinationType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3destination-export-file-format :initarg
                         :s3destination-export-file-format :initform
                         common-lisp:nil :type
                         (common-lisp:or export-file-format common-lisp:null)
                         :accessor
                         struct-shape-data-view-destination-type-params-s3destination-export-file-format
                         :shape "ExportFileFormat" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3destination-export-file-format-options :initarg
                         :s3destination-export-file-format-options :initform
                         common-lisp:nil :type
                         (common-lisp:or s3destination-format-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-view-destination-type-params-s3destination-export-file-format-options
                         :shape "S3DestinationFormatOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-view-destination-type-params
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'data-view-destination-type-params
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-view-destination-type-params
                    'make-data-view-destination-type-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-view-destination-type-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-view-destination-type-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "destinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3destination-export-file-format))
      (common-lisp:list
       (common-lisp:cons "s3DestinationExportFileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3destination-export-file-format-options))
      (common-lisp:list
       (common-lisp:cons "s3DestinationExportFileFormatOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-view-destination-type-params))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-view-error-info common-lisp:nil
                       ((error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         struct-shape-data-view-error-info-error-message :shape
                         "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-category :initarg :error-category :initform
                         common-lisp:nil :type
                         (common-lisp:or error-category common-lisp:null)
                         :accessor
                         struct-shape-data-view-error-info-error-category
                         :shape "ErrorCategory" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-view-error-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-view-error-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-view-error-info 'make-data-view-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-view-error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-view-error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-category))
      (common-lisp:list
       (common-lisp:cons "errorCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-view-error-info))
   common-lisp:nil))
(common-lisp:deftype data-view-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype data-view-list ()
   '(trivial-types:proper-list data-view-summary))
 (common-lisp:defun make-data-view-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-view-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-view-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass data-view-summary common-lisp:nil
                       ((data-view-id :initarg :data-view-id :initform
                         common-lisp:nil :type
                         (common-lisp:or data-view-id common-lisp:null)
                         :accessor struct-shape-data-view-summary-data-view-id
                         :shape "DataViewId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-view-arn :initarg :data-view-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or data-view-arn common-lisp:null)
                         :accessor struct-shape-data-view-summary-data-view-arn
                         :shape "DataViewArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-id :initarg :dataset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-data-view-summary-dataset-id :shape
                         "DatasetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (as-of-timestamp :initarg :as-of-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-data-view-summary-as-of-timestamp :shape
                         "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (partition-columns :initarg :partition-columns
                         :initform common-lisp:nil :type
                         (common-lisp:or partition-column-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-view-summary-partition-columns
                         :shape "PartitionColumnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-columns :initarg :sort-columns :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-column-list common-lisp:null)
                         :accessor struct-shape-data-view-summary-sort-columns
                         :shape "SortColumnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-view-status common-lisp:null)
                         :accessor struct-shape-data-view-summary-status :shape
                         "DataViewStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-info :initarg :error-info :initform
                         common-lisp:nil :type
                         (common-lisp:or data-view-error-info common-lisp:null)
                         :accessor struct-shape-data-view-summary-error-info
                         :shape "DataViewErrorInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-type-properties :initarg
                         :destination-type-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or data-view-destination-type-params
                                         common-lisp:null)
                         :accessor
                         struct-shape-data-view-summary-destination-type-properties
                         :shape "DataViewDestinationTypeParams" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-update :initarg :auto-update :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-data-view-summary-auto-update :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor struct-shape-data-view-summary-create-time
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-data-view-summary-last-modified-time
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-data-view-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'data-view-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'data-view-summary 'make-data-view-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-view-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-view-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-view-id))
      (common-lisp:list
       (common-lisp:cons "dataViewId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-view-arn))
      (common-lisp:list
       (common-lisp:cons "dataViewArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as-of-timestamp))
      (common-lisp:list
       (common-lisp:cons "asOfTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-columns))
      (common-lisp:list
       (common-lisp:cons "partitionColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-columns))
      (common-lisp:list
       (common-lisp:cons "sortColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-type-properties))
      (common-lisp:list
       (common-lisp:cons "destinationTypeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "autoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-view-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dataset common-lisp:nil
                       ((dataset-id :initarg :dataset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-dataset-dataset-id :shape "DatasetId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-arn :initarg :dataset-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-arn common-lisp:null)
                         :accessor struct-shape-dataset-dataset-arn :shape
                         "DatasetArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-title :initarg :dataset-title :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-title common-lisp:null)
                         :accessor struct-shape-dataset-dataset-title :shape
                         "DatasetTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kind :initarg :kind :initform common-lisp:nil :type
                         (common-lisp:or dataset-kind common-lisp:null)
                         :accessor struct-shape-dataset-kind :shape
                         "DatasetKind" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-description :initarg :dataset-description
                         :initform common-lisp:nil :type
                         (common-lisp:or dataset-description common-lisp:null)
                         :accessor struct-shape-dataset-dataset-description
                         :shape "DatasetDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (owner-info :initarg :owner-info :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-owner-info common-lisp:null)
                         :accessor struct-shape-dataset-owner-info :shape
                         "DatasetOwnerInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor struct-shape-dataset-create-time :shape
                         "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor struct-shape-dataset-last-modified-time
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-definition :initarg :schema-definition
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-union common-lisp:null)
                         :accessor struct-shape-dataset-schema-definition
                         :shape "SchemaUnion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or alias-string common-lisp:null)
                         :accessor struct-shape-dataset-alias :shape
                         "AliasString" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dataset 'make-dataset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "datasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-title))
      (common-lisp:list
       (common-lisp:cons "datasetTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-description))
      (common-lisp:list
       (common-lisp:cons "datasetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-info))
      (common-lisp:list
       (common-lisp:cons "ownerInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "schemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset))
   common-lisp:nil))
(common-lisp:deftype dataset-arn () 'common-lisp:string)
(common-lisp:deftype dataset-description () 'common-lisp:string)
(common-lisp:deftype dataset-id () 'common-lisp:string)
(common-lisp:deftype dataset-kind () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dataset-list () '(trivial-types:proper-list dataset))
 (common-lisp:defun make-dataset-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass dataset-owner-info common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or owner-name common-lisp:null) :accessor
                         struct-shape-dataset-owner-info-name :shape
                         "OwnerName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (phone-number :initarg :phone-number :initform
                         common-lisp:nil :type
                         (common-lisp:or phone-number common-lisp:null)
                         :accessor struct-shape-dataset-owner-info-phone-number
                         :shape "PhoneNumber" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (email :initarg :email :initform common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-dataset-owner-info-email :shape "Email"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dataset-owner-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dataset-owner-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dataset-owner-info 'make-dataset-owner-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-owner-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-owner-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phone-number))
      (common-lisp:list
       (common-lisp:cons "phoneNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-owner-info))
   common-lisp:nil))
(common-lisp:deftype dataset-status () 'common-lisp:string)
(common-lisp:deftype dataset-title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-dataset-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-dataset-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken")
                        (dataset-id :initarg :dataset-id :initform
                         (common-lisp:error ":datasetid is required") :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-delete-dataset-request-dataset-id :shape
                         "DatasetId" :location "uri" :location-name
                         "datasetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-request 'make-delete-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dataset-response common-lisp:nil
                       ((dataset-id :initarg :dataset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-delete-dataset-response-dataset-id :shape
                         "DatasetId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-dataset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-response 'make-delete-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-permission-group-request common-lisp:nil
                       ((permission-group-id :initarg :permission-group-id
                         :initform
                         (common-lisp:error ":permissiongroupid is required")
                         :type
                         (common-lisp:or permission-group-id common-lisp:null)
                         :accessor
                         struct-shape-delete-permission-group-request-permission-group-id
                         :shape "PermissionGroupId" :location "uri"
                         :location-name "permissionGroupId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-delete-permission-group-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-permission-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-permission-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-permission-group-request
                    'make-delete-permission-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-permission-group-response common-lisp:nil
                       ((permission-group-id :initarg :permission-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or permission-group-id common-lisp:null)
                         :accessor
                         struct-shape-delete-permission-group-response-permission-group-id
                         :shape "PermissionGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-permission-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-permission-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-permission-group-response
                    'make-delete-permission-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-group-id))
      (common-lisp:list
       (common-lisp:cons "permissionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-user-request common-lisp:nil
                       ((user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-disable-user-request-user-id :shape
                         "UserId" :location "uri" :location-name "userId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-disable-user-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disable-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-user-request 'make-disable-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disable-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disable-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disable-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disable-user-response common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor struct-shape-disable-user-response-user-id
                         :shape "UserId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disable-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'disable-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disable-user-response 'make-disable-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-user-from-permission-group-request
                       common-lisp:nil
                       ((permission-group-id :initarg :permission-group-id
                         :initform
                         (common-lisp:error ":permissiongroupid is required")
                         :type
                         (common-lisp:or permission-group-id common-lisp:null)
                         :accessor
                         struct-shape-disassociate-user-from-permission-group-request-permission-group-id
                         :shape "PermissionGroupId" :location "uri"
                         :location-name "permissionGroupId")
                        (user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-disassociate-user-from-permission-group-request-user-id
                         :shape "UserId" :location "uri" :location-name
                         "userId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-disassociate-user-from-permission-group-request-client-token
                         :shape "ClientToken" :location "querystring"
                         :location-name "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-user-from-permission-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-user-from-permission-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-user-from-permission-group-request
                    'make-disassociate-user-from-permission-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-from-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-from-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-from-permission-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-user-from-permission-group-response
                       common-lisp:nil
                       ((status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor
                         struct-shape-disassociate-user-from-permission-group-response-status-code
                         :shape "StatusCode" :location "statusCode"
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-disassociate-user-from-permission-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-user-from-permission-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'disassociate-user-from-permission-group-response
                    'make-disassociate-user-from-permission-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-from-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-from-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-user-from-permission-group-response))
   common-lisp:nil))
(common-lisp:deftype email () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass enable-user-request common-lisp:nil
                       ((user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-enable-user-request-user-id :shape
                         "UserId" :location "uri" :location-name "userId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-enable-user-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-user-request 'make-enable-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass enable-user-response common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor struct-shape-enable-user-response-user-id
                         :shape "UserId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-enable-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'enable-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'enable-user-response 'make-enable-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-user-response))
   common-lisp:nil))
(common-lisp:deftype error-category () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype export-file-format () 'common-lisp:string)
(common-lisp:deftype first-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype format-params () 'common-lisp:hash-table)
 (common-lisp:defun make-format-params (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass get-changeset-request common-lisp:nil
                       ((dataset-id :initarg :dataset-id :initform
                         (common-lisp:error ":datasetid is required") :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-get-changeset-request-dataset-id :shape
                         "DatasetId" :location "uri" :location-name
                         "datasetId")
                        (changeset-id :initarg :changeset-id :initform
                         (common-lisp:error ":changesetid is required") :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-get-changeset-request-changeset-id :shape
                         "ChangesetId" :location "uri" :location-name
                         "changesetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-changeset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-changeset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-changeset-request 'make-get-changeset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-changeset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-changeset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-changeset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-changeset-response common-lisp:nil
                       ((changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-get-changeset-response-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (changeset-arn :initarg :changeset-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-arn common-lisp:null)
                         :accessor
                         struct-shape-get-changeset-response-changeset-arn
                         :shape "ChangesetArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-id :initarg :dataset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-get-changeset-response-dataset-id :shape
                         "DatasetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (change-type :initarg :change-type :initform
                         common-lisp:nil :type
                         (common-lisp:or change-type common-lisp:null)
                         :accessor
                         struct-shape-get-changeset-response-change-type :shape
                         "ChangeType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-params :initarg :source-params :initform
                         common-lisp:nil :type
                         (common-lisp:or source-params common-lisp:null)
                         :accessor
                         struct-shape-get-changeset-response-source-params
                         :shape "SourceParams" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format-params :initarg :format-params :initform
                         common-lisp:nil :type
                         (common-lisp:or format-params common-lisp:null)
                         :accessor
                         struct-shape-get-changeset-response-format-params
                         :shape "FormatParams" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-get-changeset-response-create-time :shape
                         "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or ingestion-status common-lisp:null)
                         :accessor struct-shape-get-changeset-response-status
                         :shape "IngestionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-info :initarg :error-info :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-error-info common-lisp:null)
                         :accessor
                         struct-shape-get-changeset-response-error-info :shape
                         "ChangesetErrorInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (active-until-timestamp :initarg
                         :active-until-timestamp :initform common-lisp:nil
                         :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-get-changeset-response-active-until-timestamp
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (active-from-timestamp :initarg :active-from-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-get-changeset-response-active-from-timestamp
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updates-changeset-id :initarg :updates-changeset-id
                         :initform common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-get-changeset-response-updates-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-by-changeset-id :initarg
                         :updated-by-changeset-id :initform common-lisp:nil
                         :type (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-get-changeset-response-updated-by-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-changeset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-changeset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-changeset-response 'make-get-changeset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-changeset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-changeset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-arn))
      (common-lisp:list
       (common-lisp:cons "changesetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "changeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-params))
      (common-lisp:list
       (common-lisp:cons "sourceParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-params))
      (common-lisp:list
       (common-lisp:cons "formatParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-until-timestamp))
      (common-lisp:list
       (common-lisp:cons "activeUntilTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-from-timestamp))
      (common-lisp:list
       (common-lisp:cons "activeFromTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'updates-changeset-id))
      (common-lisp:list
       (common-lisp:cons "updatesChangesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'updated-by-changeset-id))
      (common-lisp:list
       (common-lisp:cons "updatedByChangesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-changeset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-view-request common-lisp:nil
                       ((data-view-id :initarg :data-view-id :initform
                         (common-lisp:error ":dataviewid is required") :type
                         (common-lisp:or data-view-id common-lisp:null)
                         :accessor
                         struct-shape-get-data-view-request-data-view-id :shape
                         "DataViewId" :location "uri" :location-name
                         "dataviewId")
                        (dataset-id :initarg :dataset-id :initform
                         (common-lisp:error ":datasetid is required") :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-get-data-view-request-dataset-id :shape
                         "DatasetId" :location "uri" :location-name
                         "datasetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-view-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-view-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-view-request 'make-get-data-view-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-view-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-view-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-view-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-data-view-response common-lisp:nil
                       ((auto-update :initarg :auto-update :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-data-view-response-auto-update :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (partition-columns :initarg :partition-columns
                         :initform common-lisp:nil :type
                         (common-lisp:or partition-column-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-view-response-partition-columns
                         :shape "PartitionColumnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-id :initarg :dataset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-get-data-view-response-dataset-id :shape
                         "DatasetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (as-of-timestamp :initarg :as-of-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-get-data-view-response-as-of-timestamp
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-info :initarg :error-info :initform
                         common-lisp:nil :type
                         (common-lisp:or data-view-error-info common-lisp:null)
                         :accessor
                         struct-shape-get-data-view-response-error-info :shape
                         "DataViewErrorInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-get-data-view-response-last-modified-time
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-get-data-view-response-create-time :shape
                         "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-columns :initarg :sort-columns :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-column-list common-lisp:null)
                         :accessor
                         struct-shape-get-data-view-response-sort-columns
                         :shape "SortColumnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-view-id :initarg :data-view-id :initform
                         common-lisp:nil :type
                         (common-lisp:or data-view-id common-lisp:null)
                         :accessor
                         struct-shape-get-data-view-response-data-view-id
                         :shape "DataViewId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-view-arn :initarg :data-view-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or data-view-arn common-lisp:null)
                         :accessor
                         struct-shape-get-data-view-response-data-view-arn
                         :shape "DataViewArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-type-params :initarg
                         :destination-type-params :initform common-lisp:nil
                         :type
                         (common-lisp:or data-view-destination-type-params
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-data-view-response-destination-type-params
                         :shape "DataViewDestinationTypeParams" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or data-view-status common-lisp:null)
                         :accessor struct-shape-get-data-view-response-status
                         :shape "DataViewStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-data-view-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-data-view-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-data-view-response 'make-get-data-view-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-data-view-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-data-view-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "autoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partition-columns))
      (common-lisp:list
       (common-lisp:cons "partitionColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as-of-timestamp))
      (common-lisp:list
       (common-lisp:cons "asOfTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-columns))
      (common-lisp:list
       (common-lisp:cons "sortColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-view-id))
      (common-lisp:list
       (common-lisp:cons "dataViewId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-view-arn))
      (common-lisp:list
       (common-lisp:cons "dataViewArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-type-params))
      (common-lisp:list
       (common-lisp:cons "destinationTypeParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-data-view-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dataset-request common-lisp:nil
                       ((dataset-id :initarg :dataset-id :initform
                         (common-lisp:error ":datasetid is required") :type
                         (common-lisp:or string-value-length1to255
                                         common-lisp:null)
                         :accessor struct-shape-get-dataset-request-dataset-id
                         :shape "StringValueLength1to255" :location "uri"
                         :location-name "datasetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-dataset-request 'make-get-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-dataset-response common-lisp:nil
                       ((dataset-id :initarg :dataset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-get-dataset-response-dataset-id :shape
                         "DatasetId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-arn :initarg :dataset-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-arn common-lisp:null)
                         :accessor
                         struct-shape-get-dataset-response-dataset-arn :shape
                         "DatasetArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (dataset-title :initarg :dataset-title :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-title common-lisp:null)
                         :accessor
                         struct-shape-get-dataset-response-dataset-title :shape
                         "DatasetTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kind :initarg :kind :initform common-lisp:nil :type
                         (common-lisp:or dataset-kind common-lisp:null)
                         :accessor struct-shape-get-dataset-response-kind
                         :shape "DatasetKind" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-description :initarg :dataset-description
                         :initform common-lisp:nil :type
                         (common-lisp:or dataset-description common-lisp:null)
                         :accessor
                         struct-shape-get-dataset-response-dataset-description
                         :shape "DatasetDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-get-dataset-response-create-time :shape
                         "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-get-dataset-response-last-modified-time
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-definition :initarg :schema-definition
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-union common-lisp:null)
                         :accessor
                         struct-shape-get-dataset-response-schema-definition
                         :shape "SchemaUnion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or alias-string common-lisp:null)
                         :accessor struct-shape-get-dataset-response-alias
                         :shape "AliasString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or dataset-status common-lisp:null)
                         :accessor struct-shape-get-dataset-response-status
                         :shape "DatasetStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-dataset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-dataset-response 'make-get-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "datasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-title))
      (common-lisp:list
       (common-lisp:cons "datasetTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-description))
      (common-lisp:list
       (common-lisp:cons "datasetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "schemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-external-data-view-access-details-request
                       common-lisp:nil
                       ((data-view-id :initarg :data-view-id :initform
                         (common-lisp:error ":dataviewid is required") :type
                         (common-lisp:or data-view-id common-lisp:null)
                         :accessor
                         struct-shape-get-external-data-view-access-details-request-data-view-id
                         :shape "DataViewId" :location "uri" :location-name
                         "dataviewId")
                        (dataset-id :initarg :dataset-id :initform
                         (common-lisp:error ":datasetid is required") :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-get-external-data-view-access-details-request-dataset-id
                         :shape "DatasetId" :location "uri" :location-name
                         "datasetId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-external-data-view-access-details-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-external-data-view-access-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-external-data-view-access-details-request
                    'make-get-external-data-view-access-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-external-data-view-access-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-external-data-view-access-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-external-data-view-access-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-external-data-view-access-details-response
                       common-lisp:nil
                       ((credentials :initarg :credentials :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-credentials common-lisp:null)
                         :accessor
                         struct-shape-get-external-data-view-access-details-response-credentials
                         :shape "AwsCredentials" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3location :initarg :s3location :initform
                         common-lisp:nil :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         struct-shape-get-external-data-view-access-details-response-s3location
                         :shape "S3Location" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-external-data-view-access-details-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-external-data-view-access-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-external-data-view-access-details-response
                    'make-get-external-data-view-access-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-external-data-view-access-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-external-data-view-access-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location))
      (common-lisp:list
       (common-lisp:cons "s3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-external-data-view-access-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-permission-group-request common-lisp:nil
                       ((permission-group-id :initarg :permission-group-id
                         :initform
                         (common-lisp:error ":permissiongroupid is required")
                         :type
                         (common-lisp:or permission-group-id common-lisp:null)
                         :accessor
                         struct-shape-get-permission-group-request-permission-group-id
                         :shape "PermissionGroupId" :location "uri"
                         :location-name "permissionGroupId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-permission-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-permission-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-permission-group-request
                    'make-get-permission-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-permission-group-response common-lisp:nil
                       ((permission-group :initarg :permission-group :initform
                         common-lisp:nil :type
                         (common-lisp:or permission-group common-lisp:null)
                         :accessor
                         struct-shape-get-permission-group-response-permission-group
                         :shape "PermissionGroup" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-permission-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-permission-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-permission-group-response
                    'make-get-permission-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-group))
      (common-lisp:list
       (common-lisp:cons "permissionGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-programmatic-access-credentials-request
                       common-lisp:nil
                       ((duration-in-minutes :initarg :duration-in-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or session-duration common-lisp:null)
                         :accessor
                         struct-shape-get-programmatic-access-credentials-request-duration-in-minutes
                         :shape "SessionDuration" :location "querystring"
                         :location-name "durationInMinutes")
                        (environment-id :initarg :environment-id :initform
                         (common-lisp:error ":environmentid is required") :type
                         (common-lisp:or id-type common-lisp:null) :accessor
                         struct-shape-get-programmatic-access-credentials-request-environment-id
                         :shape "IdType" :location "querystring" :location-name
                         "environmentId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-programmatic-access-credentials-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-programmatic-access-credentials-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-programmatic-access-credentials-request
                    'make-get-programmatic-access-credentials-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-programmatic-access-credentials-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-programmatic-access-credentials-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-programmatic-access-credentials-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-programmatic-access-credentials-response
                       common-lisp:nil
                       ((credentials :initarg :credentials :initform
                         common-lisp:nil :type
                         (common-lisp:or credentials common-lisp:null)
                         :accessor
                         struct-shape-get-programmatic-access-credentials-response-credentials
                         :shape "Credentials" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration-in-minutes :initarg :duration-in-minutes
                         :initform common-lisp:nil :type
                         (common-lisp:or session-duration common-lisp:null)
                         :accessor
                         struct-shape-get-programmatic-access-credentials-response-duration-in-minutes
                         :shape "SessionDuration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-programmatic-access-credentials-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-programmatic-access-credentials-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-programmatic-access-credentials-response
                    'make-get-programmatic-access-credentials-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-programmatic-access-credentials-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-programmatic-access-credentials-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'credentials))
      (common-lisp:list
       (common-lisp:cons "credentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "durationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-programmatic-access-credentials-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-request common-lisp:nil
                       ((user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-get-user-request-user-id :shape "UserId"
                         :location "uri" :location-name "userId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-request 'make-get-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-user-response common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor struct-shape-get-user-response-user-id
                         :shape "UserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or user-status common-lisp:null)
                         :accessor struct-shape-get-user-response-status :shape
                         "UserStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or first-name common-lisp:null) :accessor
                         struct-shape-get-user-response-first-name :shape
                         "FirstName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or last-name common-lisp:null) :accessor
                         struct-shape-get-user-response-last-name :shape
                         "LastName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-get-user-response-email-address :shape
                         "Email" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or user-type common-lisp:null) :accessor
                         struct-shape-get-user-response-type :shape "UserType"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (api-access :initarg :api-access :initform
                         common-lisp:nil :type
                         (common-lisp:or api-access common-lisp:null) :accessor
                         struct-shape-get-user-response-api-access :shape
                         "ApiAccess" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (api-access-principal-arn :initarg
                         :api-access-principal-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-get-user-response-api-access-principal-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor struct-shape-get-user-response-create-time
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-enabled-time :initarg :last-enabled-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-get-user-response-last-enabled-time
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-disabled-time :initarg :last-disabled-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-get-user-response-last-disabled-time
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-get-user-response-last-modified-time
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-login-time :initarg :last-login-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-get-user-response-last-login-time :shape
                         "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-user-response 'make-get-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "firstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "lastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-access))
      (common-lisp:list
       (common-lisp:cons "apiAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-access-principal-arn))
      (common-lisp:list
       (common-lisp:cons "apiAccessPrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-enabled-time))
      (common-lisp:list
       (common-lisp:cons "lastEnabledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-disabled-time))
      (common-lisp:list
       (common-lisp:cons "lastDisabledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-login-time))
      (common-lisp:list
       (common-lisp:cons "lastLoginTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-working-location-request common-lisp:nil
                       ((location-type :initarg :location-type :initform
                         common-lisp:nil :type
                         (common-lisp:or |locationType| common-lisp:null)
                         :accessor
                         struct-shape-get-working-location-request-location-type
                         :shape "locationType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-working-location-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-working-location-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-working-location-request
                    'make-get-working-location-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-working-location-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-working-location-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location-type))
      (common-lisp:list
       (common-lisp:cons "locationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-working-location-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-working-location-response common-lisp:nil
                       ((s3uri :initarg :s3uri :initform common-lisp:nil :type
                         (common-lisp:or |stringValueLength1to1024|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-working-location-response-s3uri
                         :shape "stringValueLength1to1024" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3path :initarg :s3path :initform common-lisp:nil
                         :type
                         (common-lisp:or |stringValueLength1to1024|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-working-location-response-s3path
                         :shape "stringValueLength1to1024" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3bucket :initarg :s3bucket :initform common-lisp:nil
                         :type
                         (common-lisp:or |stringValueLength1to63|
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-working-location-response-s3bucket
                         :shape "stringValueLength1to63" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-working-location-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-working-location-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-working-location-response
                    'make-get-working-location-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-working-location-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-working-location-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "s3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3path))
      (common-lisp:list
       (common-lisp:cons "s3Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-working-location-response))
   common-lisp:nil))
(common-lisp:deftype id-type () 'common-lisp:string)
(common-lisp:deftype ingestion-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (finspace-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype last-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (finspace-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-changesets-request common-lisp:nil
                       ((dataset-id :initarg :dataset-id :initform
                         (common-lisp:error ":datasetid is required") :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-list-changesets-request-dataset-id :shape
                         "DatasetId" :location "uri" :location-name
                         "datasetId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-limit common-lisp:null)
                         :accessor
                         struct-shape-list-changesets-request-max-results
                         :shape "ResultLimit" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-changesets-request-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-changesets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-changesets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-changesets-request 'make-list-changesets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-changesets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-changesets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-changesets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-changesets-response common-lisp:nil
                       ((changesets :initarg :changesets :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-list common-lisp:null)
                         :accessor
                         struct-shape-list-changesets-response-changesets
                         :shape "ChangesetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-changesets-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-changesets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-changesets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-changesets-response 'make-list-changesets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-changesets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-changesets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changesets))
      (common-lisp:list
       (common-lisp:cons "changesets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-changesets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-views-request common-lisp:nil
                       ((dataset-id :initarg :dataset-id :initform
                         (common-lisp:error ":datasetid is required") :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-list-data-views-request-dataset-id :shape
                         "DatasetId" :location "uri" :location-name
                         "datasetId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-views-request-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-limit common-lisp:null)
                         :accessor
                         struct-shape-list-data-views-request-max-results
                         :shape "ResultLimit" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-views-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-views-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-views-request 'make-list-data-views-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-views-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-views-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-views-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-data-views-response common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-data-views-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (data-views :initarg :data-views :initform
                         common-lisp:nil :type
                         (common-lisp:or data-view-list common-lisp:null)
                         :accessor
                         struct-shape-list-data-views-response-data-views
                         :shape "DataViewList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-data-views-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-data-views-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-data-views-response 'make-list-data-views-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-views-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-views-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-views))
      (common-lisp:list
       (common-lisp:cons "dataViews"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-views-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-datasets-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-datasets-request-next-token :shape
                         "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or result-limit common-lisp:null)
                         :accessor
                         struct-shape-list-datasets-request-max-results :shape
                         "ResultLimit" :location "querystring" :location-name
                         "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-datasets-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-datasets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-datasets-request 'make-list-datasets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-datasets-response common-lisp:nil
                       ((datasets :initarg :datasets :initform common-lisp:nil
                         :type (common-lisp:or dataset-list common-lisp:null)
                         :accessor struct-shape-list-datasets-response-datasets
                         :shape "DatasetList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-datasets-response-next-token :shape
                         "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-datasets-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-datasets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-datasets-response 'make-list-datasets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datasets))
      (common-lisp:list
       (common-lisp:cons "datasets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-permission-groups-by-user-request common-lisp:nil
                       ((user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-list-permission-groups-by-user-request-user-id
                         :shape "UserId" :location "uri" :location-name
                         "userId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-permission-groups-by-user-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         (common-lisp:error ":maxresults is required") :type
                         (common-lisp:or result-limit common-lisp:null)
                         :accessor
                         struct-shape-list-permission-groups-by-user-request-max-results
                         :shape "ResultLimit" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-permission-groups-by-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-permission-groups-by-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-permission-groups-by-user-request
                    'make-list-permission-groups-by-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-by-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-by-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-by-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-permission-groups-by-user-response common-lisp:nil
                       ((permission-groups :initarg :permission-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or permission-group-by-user-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-permission-groups-by-user-response-permission-groups
                         :shape "PermissionGroupByUserList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-permission-groups-by-user-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-permission-groups-by-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-permission-groups-by-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-permission-groups-by-user-response
                    'make-list-permission-groups-by-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-by-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-by-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-groups))
      (common-lisp:list
       (common-lisp:cons "permissionGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-by-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-permission-groups-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-permission-groups-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         (common-lisp:error ":maxresults is required") :type
                         (common-lisp:or result-limit common-lisp:null)
                         :accessor
                         struct-shape-list-permission-groups-request-max-results
                         :shape "ResultLimit" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-permission-groups-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-permission-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-permission-groups-request
                    'make-list-permission-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-permission-groups-response common-lisp:nil
                       ((permission-groups :initarg :permission-groups
                         :initform common-lisp:nil :type
                         (common-lisp:or permission-group-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-permission-groups-response-permission-groups
                         :shape "PermissionGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-permission-groups-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-permission-groups-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-permission-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-permission-groups-response
                    'make-list-permission-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-groups))
      (common-lisp:list
       (common-lisp:cons "permissionGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-permission-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-by-permission-group-request common-lisp:nil
                       ((permission-group-id :initarg :permission-group-id
                         :initform
                         (common-lisp:error ":permissiongroupid is required")
                         :type
                         (common-lisp:or permission-group-id common-lisp:null)
                         :accessor
                         struct-shape-list-users-by-permission-group-request-permission-group-id
                         :shape "PermissionGroupId" :location "uri"
                         :location-name "permissionGroupId")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-users-by-permission-group-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         (common-lisp:error ":maxresults is required") :type
                         (common-lisp:or result-limit common-lisp:null)
                         :accessor
                         struct-shape-list-users-by-permission-group-request-max-results
                         :shape "ResultLimit" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-by-permission-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-users-by-permission-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-by-permission-group-request
                    'make-list-users-by-permission-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-users-by-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-users-by-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-users-by-permission-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-by-permission-group-response common-lisp:nil
                       ((users :initarg :users :initform common-lisp:nil :type
                         (common-lisp:or user-by-permission-group-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-users-by-permission-group-response-users
                         :shape "UserByPermissionGroupList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         struct-shape-list-users-by-permission-group-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-by-permission-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-users-by-permission-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-by-permission-group-response
                    'make-list-users-by-permission-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-users-by-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-users-by-permission-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-users-by-permission-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-users-request-next-token
                         :shape "PaginationToken" :location "querystring"
                         :location-name "nextToken")
                        (max-results :initarg :max-results :initform
                         (common-lisp:error ":maxresults is required") :type
                         (common-lisp:or result-limit common-lisp:null)
                         :accessor struct-shape-list-users-request-max-results
                         :shape "ResultLimit" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-response common-lisp:nil
                       ((users :initarg :users :initform common-lisp:nil :type
                         (common-lisp:or user-list common-lisp:null) :accessor
                         struct-shape-list-users-response-users :shape
                         "UserList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor struct-shape-list-users-response-next-token
                         :shape "PaginationToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-users-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-response))
   common-lisp:nil))
(common-lisp:deftype owner-name () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype partition-column-list ()
   '(trivial-types:proper-list string-value-length1to255))
 (common-lisp:defun make-partition-column-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            string-value-length1to255))
   aws-sdk/generator/shape::members))
(common-lisp:deftype password () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass permission-group common-lisp:nil
                       ((permission-group-id :initarg :permission-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or permission-group-id common-lisp:null)
                         :accessor
                         struct-shape-permission-group-permission-group-id
                         :shape "PermissionGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or permission-group-name
                                         common-lisp:null)
                         :accessor struct-shape-permission-group-name :shape
                         "PermissionGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or permission-group-description
                                         common-lisp:null)
                         :accessor struct-shape-permission-group-description
                         :shape "PermissionGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (application-permissions :initarg
                         :application-permissions :initform common-lisp:nil
                         :type
                         (common-lisp:or application-permission-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-permission-group-application-permissions
                         :shape "ApplicationPermissionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor struct-shape-permission-group-create-time
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor
                         struct-shape-permission-group-last-modified-time
                         :shape "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (membership-status :initarg :membership-status
                         :initform common-lisp:nil :type
                         (common-lisp:or permission-group-membership-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-permission-group-membership-status :shape
                         "PermissionGroupMembershipStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-permission-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'permission-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'permission-group 'make-permission-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input permission-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input permission-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-group-id))
      (common-lisp:list
       (common-lisp:cons "permissionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-permissions))
      (common-lisp:list
       (common-lisp:cons "applicationPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-status))
      (common-lisp:list
       (common-lisp:cons "membershipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input permission-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass permission-group-by-user common-lisp:nil
                       ((permission-group-id :initarg :permission-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or permission-group-id common-lisp:null)
                         :accessor
                         struct-shape-permission-group-by-user-permission-group-id
                         :shape "PermissionGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or permission-group-name
                                         common-lisp:null)
                         :accessor struct-shape-permission-group-by-user-name
                         :shape "PermissionGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (membership-status :initarg :membership-status
                         :initform common-lisp:nil :type
                         (common-lisp:or permission-group-membership-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-permission-group-by-user-membership-status
                         :shape "PermissionGroupMembershipStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-permission-group-by-user
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'permission-group-by-user
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'permission-group-by-user 'make-permission-group-by-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          permission-group-by-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          permission-group-by-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-group-id))
      (common-lisp:list
       (common-lisp:cons "permissionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-status))
      (common-lisp:list
       (common-lisp:cons "membershipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          permission-group-by-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype permission-group-by-user-list ()
   '(trivial-types:proper-list permission-group-by-user))
 (common-lisp:defun make-permission-group-by-user-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            permission-group-by-user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission-group-description () 'common-lisp:string)
(common-lisp:deftype permission-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype permission-group-list ()
   '(trivial-types:proper-list permission-group))
 (common-lisp:defun make-permission-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list permission-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission-group-membership-status () 'common-lisp:string)
(common-lisp:deftype permission-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass permission-group-params common-lisp:nil
                       ((permission-group-id :initarg :permission-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or permission-group-id common-lisp:null)
                         :accessor
                         struct-shape-permission-group-params-permission-group-id
                         :shape "PermissionGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-permissions :initarg :dataset-permissions
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-permissions-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-permission-group-params-dataset-permissions
                         :shape "ResourcePermissionsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-permission-group-params
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'permission-group-params
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'permission-group-params 'make-permission-group-params))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          permission-group-params))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          permission-group-params))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-group-id))
      (common-lisp:list
       (common-lisp:cons "permissionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-permissions))
      (common-lisp:list
       (common-lisp:cons "datasetPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          permission-group-params))
   common-lisp:nil))
(common-lisp:deftype phone-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reset-user-password-request common-lisp:nil
                       ((user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-reset-user-password-request-user-id
                         :shape "UserId" :location "uri" :location-name
                         "userId")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-reset-user-password-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-user-password-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reset-user-password-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-user-password-request
                    'make-reset-user-password-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-user-password-response common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor
                         struct-shape-reset-user-password-response-user-id
                         :shape "UserId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (temporary-password :initarg :temporary-password
                         :initform common-lisp:nil :type
                         (common-lisp:or password common-lisp:null) :accessor
                         struct-shape-reset-user-password-response-temporary-password
                         :shape "Password" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reset-user-password-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reset-user-password-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reset-user-password-response
                    'make-reset-user-password-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temporary-password))
      (common-lisp:list
       (common-lisp:cons "temporaryPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-user-password-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (finspace-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       resource-not-found-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-reason)))
(common-lisp:progn
 (common-lisp:defclass resource-permission common-lisp:nil
                       ((permission :initarg :permission :initform
                         common-lisp:nil :type
                         (common-lisp:or string-value-length1to250
                                         common-lisp:null)
                         :accessor struct-shape-resource-permission-permission
                         :shape "StringValueLength1to250" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-permission
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-permission
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-permission 'make-resource-permission))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-permission))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-permission))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-permission))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-permissions-list ()
   '(trivial-types:proper-list resource-permission))
 (common-lisp:defun make-resource-permissions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-permission))
   aws-sdk/generator/shape::members))
(common-lisp:deftype result-limit () 'common-lisp:integer)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype s3destination-format-options () 'common-lisp:hash-table)
 (common-lisp:defun make-s3destination-format-options
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((bucket :initarg :bucket :initform
                         (common-lisp:error ":bucket is required") :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor struct-shape-s3location-bucket :shape
                         "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-s3location-key :shape "S3Key" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schema-definition common-lisp:nil
                       ((columns :initarg :columns :initform common-lisp:nil
                         :type (common-lisp:or column-list common-lisp:null)
                         :accessor struct-shape-schema-definition-columns
                         :shape "ColumnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (primary-key-columns :initarg :primary-key-columns
                         :initform common-lisp:nil :type
                         (common-lisp:or column-name-list common-lisp:null)
                         :accessor
                         struct-shape-schema-definition-primary-key-columns
                         :shape "ColumnNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-definition
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'schema-definition 'make-schema-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'columns))
      (common-lisp:list
       (common-lisp:cons "columns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-key-columns))
      (common-lisp:list
       (common-lisp:cons "primaryKeyColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass schema-union common-lisp:nil
                       ((tabular-schema-config :initarg :tabular-schema-config
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-definition common-lisp:null)
                         :accessor
                         struct-shape-schema-union-tabular-schema-config :shape
                         "SchemaDefinition" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-schema-union
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'schema-union
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'schema-union 'make-schema-union))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-union))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-union))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tabular-schema-config))
      (common-lisp:list
       (common-lisp:cons "tabularSchemaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-union))
   common-lisp:nil))
(common-lisp:deftype secret-access-key () 'common-lisp:string)
(common-lisp:deftype session-duration () 'common-lisp:integer)
(common-lisp:deftype session-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sort-column-list ()
   '(trivial-types:proper-list string-value-length1to255))
 (common-lisp:defun make-sort-column-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            string-value-length1to255))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype source-params () 'common-lisp:hash-table)
 (common-lisp:defun make-source-params (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype status-code () 'common-lisp:integer)
(common-lisp:deftype string-map-key () 'common-lisp:string)
(common-lisp:deftype string-map-value () 'common-lisp:string)
(common-lisp:deftype string-value-length1to250 () 'common-lisp:string)
(common-lisp:deftype string-value-length1to255 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (finspace-data-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'throttling-exception)))
(common-lisp:deftype timestamp-epoch () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass update-changeset-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-changeset-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-id :initarg :dataset-id :initform
                         (common-lisp:error ":datasetid is required") :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-update-changeset-request-dataset-id
                         :shape "DatasetId" :location "uri" :location-name
                         "datasetId")
                        (changeset-id :initarg :changeset-id :initform
                         (common-lisp:error ":changesetid is required") :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-update-changeset-request-changeset-id
                         :shape "ChangesetId" :location "uri" :location-name
                         "changesetId")
                        (source-params :initarg :source-params :initform
                         (common-lisp:error ":sourceparams is required") :type
                         (common-lisp:or source-params common-lisp:null)
                         :accessor
                         struct-shape-update-changeset-request-source-params
                         :shape "SourceParams" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (format-params :initarg :format-params :initform
                         (common-lisp:error ":formatparams is required") :type
                         (common-lisp:or format-params common-lisp:null)
                         :accessor
                         struct-shape-update-changeset-request-format-params
                         :shape "FormatParams" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-changeset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-changeset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-changeset-request 'make-update-changeset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-changeset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-changeset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-params))
      (common-lisp:list
       (common-lisp:cons "sourceParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format-params))
      (common-lisp:list
       (common-lisp:cons "formatParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-changeset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-changeset-response common-lisp:nil
                       ((changeset-id :initarg :changeset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or changeset-id common-lisp:null)
                         :accessor
                         struct-shape-update-changeset-response-changeset-id
                         :shape "ChangesetId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-id :initarg :dataset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-update-changeset-response-dataset-id
                         :shape "DatasetId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-changeset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-changeset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-changeset-response
                    'make-update-changeset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-changeset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-changeset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changeset-id))
      (common-lisp:list
       (common-lisp:cons "changesetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-changeset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dataset-request common-lisp:nil
                       ((client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-id :initarg :dataset-id :initform
                         (common-lisp:error ":datasetid is required") :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-update-dataset-request-dataset-id :shape
                         "DatasetId" :location "uri" :location-name
                         "datasetId")
                        (dataset-title :initarg :dataset-title :initform
                         (common-lisp:error ":datasettitle is required") :type
                         (common-lisp:or dataset-title common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-request-dataset-title
                         :shape "DatasetTitle" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kind :initarg :kind :initform
                         (common-lisp:error ":kind is required") :type
                         (common-lisp:or dataset-kind common-lisp:null)
                         :accessor struct-shape-update-dataset-request-kind
                         :shape "DatasetKind" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dataset-description :initarg :dataset-description
                         :initform common-lisp:nil :type
                         (common-lisp:or dataset-description common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-request-dataset-description
                         :shape "DatasetDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (alias :initarg :alias :initform common-lisp:nil :type
                         (common-lisp:or alias-string common-lisp:null)
                         :accessor struct-shape-update-dataset-request-alias
                         :shape "AliasString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-definition :initarg :schema-definition
                         :initform common-lisp:nil :type
                         (common-lisp:or schema-union common-lisp:null)
                         :accessor
                         struct-shape-update-dataset-request-schema-definition
                         :shape "SchemaUnion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dataset-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dataset-request 'make-update-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-title))
      (common-lisp:list
       (common-lisp:cons "datasetTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kind))
      (common-lisp:list
       (common-lisp:cons "kind"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-description))
      (common-lisp:list
       (common-lisp:cons "datasetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-definition))
      (common-lisp:list
       (common-lisp:cons "schemaDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-dataset-response common-lisp:nil
                       ((dataset-id :initarg :dataset-id :initform
                         common-lisp:nil :type
                         (common-lisp:or dataset-id common-lisp:null) :accessor
                         struct-shape-update-dataset-response-dataset-id :shape
                         "DatasetId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-dataset-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-dataset-response 'make-update-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-id))
      (common-lisp:list
       (common-lisp:cons "datasetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-permission-group-request common-lisp:nil
                       ((permission-group-id :initarg :permission-group-id
                         :initform
                         (common-lisp:error ":permissiongroupid is required")
                         :type
                         (common-lisp:or permission-group-id common-lisp:null)
                         :accessor
                         struct-shape-update-permission-group-request-permission-group-id
                         :shape "PermissionGroupId" :location "uri"
                         :location-name "permissionGroupId")
                        (name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or permission-group-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-permission-group-request-name
                         :shape "PermissionGroupName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or permission-group-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-permission-group-request-description
                         :shape "PermissionGroupDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (application-permissions :initarg
                         :application-permissions :initform common-lisp:nil
                         :type
                         (common-lisp:or application-permission-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-permission-group-request-application-permissions
                         :shape "ApplicationPermissionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-permission-group-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-permission-group-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-permission-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-permission-group-request
                    'make-update-permission-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-permission-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-permission-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-permissions))
      (common-lisp:list
       (common-lisp:cons "applicationPermissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-permission-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-permission-group-response common-lisp:nil
                       ((permission-group-id :initarg :permission-group-id
                         :initform common-lisp:nil :type
                         (common-lisp:or permission-group-id common-lisp:null)
                         :accessor
                         struct-shape-update-permission-group-response-permission-group-id
                         :shape "PermissionGroupId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-permission-group-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-permission-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-permission-group-response
                    'make-update-permission-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-permission-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-permission-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-group-id))
      (common-lisp:list
       (common-lisp:cons "permissionGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-permission-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-request common-lisp:nil
                       ((user-id :initarg :user-id :initform
                         (common-lisp:error ":userid is required") :type
                         (common-lisp:or user-id common-lisp:null) :accessor
                         struct-shape-update-user-request-user-id :shape
                         "UserId" :location "uri" :location-name "userId")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or user-type common-lisp:null) :accessor
                         struct-shape-update-user-request-type :shape
                         "UserType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or first-name common-lisp:null) :accessor
                         struct-shape-update-user-request-first-name :shape
                         "FirstName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or last-name common-lisp:null) :accessor
                         struct-shape-update-user-request-last-name :shape
                         "LastName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (api-access :initarg :api-access :initform
                         common-lisp:nil :type
                         (common-lisp:or api-access common-lisp:null) :accessor
                         struct-shape-update-user-request-api-access :shape
                         "ApiAccess" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (api-access-principal-arn :initarg
                         :api-access-principal-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-update-user-request-api-access-principal-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-update-user-request-client-token :shape
                         "ClientToken" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "firstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "lastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-access))
      (common-lisp:list
       (common-lisp:cons "apiAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-access-principal-arn))
      (common-lisp:list
       (common-lisp:cons "apiAccessPrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-response common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor struct-shape-update-user-response-user-id
                         :shape "UserId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-user-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-user-response 'make-update-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor struct-shape-user-user-id :shape "UserId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or user-status common-lisp:null)
                         :accessor struct-shape-user-status :shape "UserStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or first-name common-lisp:null) :accessor
                         struct-shape-user-first-name :shape "FirstName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or last-name common-lisp:null) :accessor
                         struct-shape-user-last-name :shape "LastName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-user-email-address :shape "Email"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or user-type common-lisp:null) :accessor
                         struct-shape-user-type :shape "UserType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (api-access :initarg :api-access :initform
                         common-lisp:nil :type
                         (common-lisp:or api-access common-lisp:null) :accessor
                         struct-shape-user-api-access :shape "ApiAccess"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (api-access-principal-arn :initarg
                         :api-access-principal-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-user-api-access-principal-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (create-time :initarg :create-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor struct-shape-user-create-time :shape
                         "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-enabled-time :initarg :last-enabled-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor struct-shape-user-last-enabled-time :shape
                         "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-disabled-time :initarg :last-disabled-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor struct-shape-user-last-disabled-time :shape
                         "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-modified-time :initarg :last-modified-time
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor struct-shape-user-last-modified-time :shape
                         "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-login-time :initarg :last-login-time :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp-epoch common-lisp:null)
                         :accessor struct-shape-user-last-login-time :shape
                         "TimestampEpoch" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "firstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "lastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-access))
      (common-lisp:list
       (common-lisp:cons "apiAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-access-principal-arn))
      (common-lisp:list
       (common-lisp:cons "apiAccessPrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-enabled-time))
      (common-lisp:list
       (common-lisp:cons "lastEnabledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-disabled-time))
      (common-lisp:list
       (common-lisp:cons "lastDisabledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "lastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-login-time))
      (common-lisp:list
       (common-lisp:cons "lastLoginTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass user-by-permission-group common-lisp:nil
                       ((user-id :initarg :user-id :initform common-lisp:nil
                         :type (common-lisp:or user-id common-lisp:null)
                         :accessor
                         struct-shape-user-by-permission-group-user-id :shape
                         "UserId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or user-status common-lisp:null)
                         :accessor struct-shape-user-by-permission-group-status
                         :shape "UserStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-name :initarg :first-name :initform
                         common-lisp:nil :type
                         (common-lisp:or first-name common-lisp:null) :accessor
                         struct-shape-user-by-permission-group-first-name
                         :shape "FirstName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-name :initarg :last-name :initform
                         common-lisp:nil :type
                         (common-lisp:or last-name common-lisp:null) :accessor
                         struct-shape-user-by-permission-group-last-name :shape
                         "LastName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (email-address :initarg :email-address :initform
                         common-lisp:nil :type
                         (common-lisp:or email common-lisp:null) :accessor
                         struct-shape-user-by-permission-group-email-address
                         :shape "Email" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or user-type common-lisp:null) :accessor
                         struct-shape-user-by-permission-group-type :shape
                         "UserType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (api-access :initarg :api-access :initform
                         common-lisp:nil :type
                         (common-lisp:or api-access common-lisp:null) :accessor
                         struct-shape-user-by-permission-group-api-access
                         :shape "ApiAccess" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (api-access-principal-arn :initarg
                         :api-access-principal-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor
                         struct-shape-user-by-permission-group-api-access-principal-arn
                         :shape "RoleArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (membership-status :initarg :membership-status
                         :initform common-lisp:nil :type
                         (common-lisp:or permission-group-membership-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-user-by-permission-group-membership-status
                         :shape "PermissionGroupMembershipStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-user-by-permission-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'user-by-permission-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'user-by-permission-group 'make-user-by-permission-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          user-by-permission-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          user-by-permission-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-name))
      (common-lisp:list
       (common-lisp:cons "firstName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-name))
      (common-lisp:list
       (common-lisp:cons "lastName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-access))
      (common-lisp:list
       (common-lisp:cons "apiAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'api-access-principal-arn))
      (common-lisp:list
       (common-lisp:cons "apiAccessPrincipalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'membership-status))
      (common-lisp:list
       (common-lisp:cons "membershipStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          user-by-permission-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-by-permission-group-list ()
   '(trivial-types:proper-list user-by-permission-group))
 (common-lisp:defun make-user-by-permission-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            user-by-permission-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-list () '(trivial-types:proper-list user))
 (common-lisp:defun make-user-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-status () 'common-lisp:string)
(common-lisp:deftype user-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (finspace-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:deftype |locationType| () 'common-lisp:string)
(common-lisp:deftype |stringValueLength1to1024| () 'common-lisp:string)
(common-lisp:deftype |stringValueLength1to255| () 'common-lisp:string)
(common-lisp:deftype |stringValueLength1to63| () 'common-lisp:string)
(common-lisp:deftype |stringValueMaxLength1000| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-user-to-permission-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key permission-group-id user-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable permission-group-id user-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-user-to-permission-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/permission-group/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'permission-group-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "AssociateUserToPermissionGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-user-to-permission-group))
(common-lisp:progn
 (common-lisp:defun create-changeset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dataset-id change-type
                     source-params format-params)
   (common-lisp:declare
    (common-lisp:ignorable client-token dataset-id change-type source-params
     format-params))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-changeset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/changesetsv2"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))))
                                                        "CreateChangeset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-changeset))
(common-lisp:progn
 (common-lisp:defun create-data-view
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dataset-id auto-update
                     sort-columns partition-columns as-of-timestamp
                     destination-type-params)
   (common-lisp:declare
    (common-lisp:ignorable client-token dataset-id auto-update sort-columns
     partition-columns as-of-timestamp destination-type-params))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-data-view-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/dataviewsv2"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))))
                                                        "CreateDataView"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-data-view))
(common-lisp:progn
 (common-lisp:defun create-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dataset-title kind
                     dataset-description owner-info permission-group-params
                     alias schema-definition)
   (common-lisp:declare
    (common-lisp:ignorable client-token dataset-title kind dataset-description
     owner-info permission-group-params alias schema-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/datasetsv2"
                                                        "CreateDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-dataset))
(common-lisp:progn
 (common-lisp:defun create-permission-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description application-permissions
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable name description application-permissions
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-permission-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/permission-group"
                                                        "CreatePermissionGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-permission-group))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key email-address type first-name last-name
                     api-access api-access-principal-arn client-token)
   (common-lisp:declare
    (common-lisp:ignorable email-address type first-name last-name api-access
     api-access-principal-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/user"
                                                        "CreateUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun delete-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dataset-id)
   (common-lisp:declare (common-lisp:ignorable client-token dataset-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasetsv2/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))))
                                                        "DeleteDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-dataset))
(common-lisp:progn
 (common-lisp:defun delete-permission-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key permission-group-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable permission-group-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-permission-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/permission-group/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'permission-group-id))))
                                                        "DeletePermissionGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-permission-group))
(common-lisp:progn
 (common-lisp:defun disable-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id client-token)
   (common-lisp:declare (common-lisp:ignorable user-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user/~A/disable"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DisableUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disable-user))
(common-lisp:progn
 (common-lisp:defun disassociate-user-from-permission-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key permission-group-id user-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable permission-group-id user-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-user-from-permission-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/permission-group/~A/users/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'permission-group-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "DisassociateUserFromPermissionGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'disassociate-user-from-permission-group))
(common-lisp:progn
 (common-lisp:defun enable-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id client-token)
   (common-lisp:declare (common-lisp:ignorable user-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user/~A/enable"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "EnableUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'enable-user))
(common-lisp:progn
 (common-lisp:defun get-changeset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-id changeset-id)
   (common-lisp:declare (common-lisp:ignorable dataset-id changeset-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-changeset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/changesetsv2/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'changeset-id))))
                                                        "GetChangeset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-changeset))
(common-lisp:progn
 (common-lisp:defun get-data-view
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-view-id dataset-id)
   (common-lisp:declare (common-lisp:ignorable data-view-id dataset-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-data-view-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/dataviewsv2/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataview-id))))
                                                        "GetDataView"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-data-view))
(common-lisp:progn
 (common-lisp:defun get-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-id)
   (common-lisp:declare (common-lisp:ignorable dataset-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasetsv2/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))))
                                                        "GetDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-dataset))
(common-lisp:progn
 (common-lisp:defun get-external-data-view-access-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key data-view-id dataset-id)
   (common-lisp:declare (common-lisp:ignorable data-view-id dataset-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-external-data-view-access-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/dataviewsv2/~A/external-access-details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataview-id))))
                                                        "GetExternalDataViewAccessDetails"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-external-data-view-access-details))
(common-lisp:progn
 (common-lisp:defun get-permission-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key permission-group-id)
   (common-lisp:declare (common-lisp:ignorable permission-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-permission-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/permission-group/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'permission-group-id))))
                                                        "GetPermissionGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-permission-group))
(common-lisp:progn
 (common-lisp:defun get-programmatic-access-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key duration-in-minutes environment-id)
   (common-lisp:declare
    (common-lisp:ignorable duration-in-minutes environment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-programmatic-access-credentials-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/credentials/programmatic"
                                                        "GetProgrammaticAccessCredentials"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-programmatic-access-credentials))
(common-lisp:progn
 (common-lisp:defun get-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id)
   (common-lisp:declare (common-lisp:ignorable user-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "GetUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-user))
(common-lisp:progn
 (common-lisp:defun get-working-location
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key location-type)
   (common-lisp:declare (common-lisp:ignorable location-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-working-location-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/workingLocationV1"
                                                        "GetWorkingLocation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-working-location))
(common-lisp:progn
 (common-lisp:defun list-changesets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable dataset-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-changesets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/changesetsv2"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))))
                                                        "ListChangesets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-changesets))
(common-lisp:progn
 (common-lisp:defun list-data-views
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable dataset-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-views-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/dataviewsv2"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))))
                                                        "ListDataViews"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-data-views))
(common-lisp:progn
 (common-lisp:defun list-datasets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-datasets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/datasetsv2"
                                                        "ListDatasets"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-datasets))
(common-lisp:progn
 (common-lisp:defun list-permission-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-permission-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/permission-group"
                                                        "ListPermissionGroups"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-permission-groups))
(common-lisp:progn
 (common-lisp:defun list-permission-groups-by-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable user-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-permission-groups-by-user-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user/~A/permission-groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "ListPermissionGroupsByUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-permission-groups-by-user))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/user"
                                                        "ListUsers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun list-users-by-permission-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key permission-group-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable permission-group-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-users-by-permission-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/permission-group/~A/users"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'permission-group-id))))
                                                        "ListUsersByPermissionGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-users-by-permission-group))
(common-lisp:progn
 (common-lisp:defun reset-user-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id client-token)
   (common-lisp:declare (common-lisp:ignorable user-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-user-password-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user/~A/password"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "ResetUserPassword"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reset-user-password))
(common-lisp:progn
 (common-lisp:defun update-changeset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dataset-id changeset-id
                     source-params format-params)
   (common-lisp:declare
    (common-lisp:ignorable client-token dataset-id changeset-id source-params
     format-params))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-changeset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasets/~A/changesetsv2/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'changeset-id))))
                                                        "UpdateChangeset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-changeset))
(common-lisp:progn
 (common-lisp:defun update-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token dataset-id dataset-title
                     kind dataset-description alias schema-definition)
   (common-lisp:declare
    (common-lisp:ignorable client-token dataset-id dataset-title kind
     dataset-description alias schema-definition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/datasetsv2/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-id))))
                                                        "UpdateDataset"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-dataset))
(common-lisp:progn
 (common-lisp:defun update-permission-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key permission-group-id name description
                     application-permissions client-token)
   (common-lisp:declare
    (common-lisp:ignorable permission-group-id name description
     application-permissions client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-permission-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/permission-group/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'permission-group-id))))
                                                        "UpdatePermissionGroup"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-permission-group))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-id type first-name last-name
                     api-access api-access-principal-arn client-token)
   (common-lisp:declare
    (common-lisp:ignorable user-id type first-name last-name api-access
     api-access-principal-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'finspace-data-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/user/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'user-id))))
                                                        "UpdateUser"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-user))
