;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/accessanalyzer/api (:use)
                             (:nicknames #:aws/accessanalyzer)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/accessanalyzer/api)
(common-lisp:progn
 (common-lisp:define-condition accessanalyzer-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'accessanalyzer-error))
(common-lisp:progn
 (common-lisp:defclass accessanalyzer-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "accessanalyzer"
                        :api-version "2019-11-01" :host-prefix
                        "access-analyzer" :signing-name "access-analyzer"
                        :global-host common-lisp:nil))
 (common-lisp:export 'accessanalyzer-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("UnprocessableEntityException" . unprocessable-entity-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass access common-lisp:nil
                       ((actions :initarg :actions :initform
                         (common-lisp:error ":actions is required") :type
                         (common-lisp:or access-actions-list common-lisp:null)
                         :accessor struct-shape-access-actions :shape
                         "AccessActionsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'access 'make-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-actions-list ()
   '(trivial-types:proper-list action))
 (common-lisp:defun make-access-actions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype access-check-policy-document () 'common-lisp:string)
(common-lisp:deftype access-check-policy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype access-point-arn () 'common-lisp:string)
(common-lisp:deftype access-point-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-preview common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or access-preview-id common-lisp:null)
                         :accessor struct-shape-access-preview-id :shape
                         "AccessPreviewId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor struct-shape-access-preview-analyzer-arn
                         :shape "AnalyzerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configurations :initarg :configurations :initform
                         (common-lisp:error ":configurations is required")
                         :type
                         (common-lisp:or configurations-map common-lisp:null)
                         :accessor struct-shape-access-preview-configurations
                         :shape "ConfigurationsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-access-preview-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or access-preview-status
                                         common-lisp:null)
                         :accessor struct-shape-access-preview-status :shape
                         "AccessPreviewStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or access-preview-status-reason
                                         common-lisp:null)
                         :accessor struct-shape-access-preview-status-reason
                         :shape "AccessPreviewStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-preview
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-preview
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'access-preview 'make-access-preview))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-preview))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-preview))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-preview))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass access-preview-finding common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or access-preview-finding-id
                                         common-lisp:null)
                         :accessor struct-shape-access-preview-finding-id
                         :shape "AccessPreviewFindingId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (existing-finding-id :initarg :existing-finding-id
                         :initform common-lisp:nil :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-access-preview-finding-existing-finding-id
                         :shape "FindingId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (existing-finding-status :initarg
                         :existing-finding-status :initform common-lisp:nil
                         :type (common-lisp:or finding-status common-lisp:null)
                         :accessor
                         struct-shape-access-preview-finding-existing-finding-status
                         :shape "FindingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal :initarg :principal :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-map common-lisp:null)
                         :accessor
                         struct-shape-access-preview-finding-principal :shape
                         "PrincipalMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or action-list common-lisp:null)
                         :accessor struct-shape-access-preview-finding-action
                         :shape "ActionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (condition :initarg :condition :initform
                         common-lisp:nil :type
                         (common-lisp:or condition-key-map common-lisp:null)
                         :accessor
                         struct-shape-access-preview-finding-condition :shape
                         "ConditionKeyMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource :initarg :resource :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-access-preview-finding-resource
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-public :initarg :is-public :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-access-preview-finding-is-public :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-access-preview-finding-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-access-preview-finding-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (change-type :initarg :change-type :initform
                         (common-lisp:error ":changetype is required") :type
                         (common-lisp:or finding-change-type common-lisp:null)
                         :accessor
                         struct-shape-access-preview-finding-change-type :shape
                         "FindingChangeType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or finding-status common-lisp:null)
                         :accessor struct-shape-access-preview-finding-status
                         :shape "FindingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-owner-account :initarg
                         :resource-owner-account :initform
                         (common-lisp:error
                          ":resourceowneraccount is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-access-preview-finding-resource-owner-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-access-preview-finding-error :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or finding-source-list common-lisp:null)
                         :accessor struct-shape-access-preview-finding-sources
                         :shape "FindingSourceList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-preview-finding
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-preview-finding
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-preview-finding 'make-access-preview-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'existing-finding-id))
      (common-lisp:list
       (common-lisp:cons "existingFindingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'existing-finding-status))
      (common-lisp:list
       (common-lisp:cons "existingFindingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "isPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "changeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-finding))
   common-lisp:nil))
(common-lisp:deftype access-preview-finding-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype access-preview-findings-list ()
   '(trivial-types:proper-list access-preview-finding))
 (common-lisp:defun make-access-preview-findings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-preview-finding))
   aws-sdk/generator/shape::members))
(common-lisp:deftype access-preview-id () 'common-lisp:string)
(common-lisp:deftype access-preview-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-preview-status-reason common-lisp:nil
                       ((code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or access-preview-status-reason-code
                                         common-lisp:null)
                         :accessor
                         struct-shape-access-preview-status-reason-code :shape
                         "AccessPreviewStatusReasonCode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-preview-status-reason
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-preview-status-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-preview-status-reason
                    'make-access-preview-status-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-status-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-status-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-status-reason))
   common-lisp:nil))
(common-lisp:deftype access-preview-status-reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass access-preview-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or access-preview-id common-lisp:null)
                         :accessor struct-shape-access-preview-summary-id
                         :shape "AccessPreviewId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         struct-shape-access-preview-summary-analyzer-arn
                         :shape "AnalyzerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-access-preview-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or access-preview-status
                                         common-lisp:null)
                         :accessor struct-shape-access-preview-summary-status
                         :shape "AccessPreviewStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or access-preview-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-access-preview-summary-status-reason
                         :shape "AccessPreviewStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-preview-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-preview-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-preview-summary 'make-access-preview-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-preview-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-previews-list ()
   '(trivial-types:proper-list access-preview-summary))
 (common-lisp:defun make-access-previews-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-preview-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype acl-canonical-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass acl-grantee common-lisp:nil
                       ((id :initarg :id :initform common-lisp:nil :type
                         (common-lisp:or acl-canonical-id common-lisp:null)
                         :accessor struct-shape-acl-grantee-id :shape
                         "AclCanonicalId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (uri :initarg :uri :initform common-lisp:nil :type
                         (common-lisp:or acl-uri common-lisp:null) :accessor
                         struct-shape-acl-grantee-uri :shape "AclUri" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-acl-grantee
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'acl-grantee
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'acl-grantee 'make-acl-grantee))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input acl-grantee))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input acl-grantee))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input acl-grantee))
   common-lisp:nil))
(common-lisp:deftype acl-permission () 'common-lisp:string)
(common-lisp:deftype acl-uri () 'common-lisp:string)
(common-lisp:deftype action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass analyzed-resource common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor struct-shape-analyzed-resource-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-analyzed-resource-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-analyzed-resource-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (analyzed-at :initarg :analyzed-at :initform
                         (common-lisp:error ":analyzedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-analyzed-resource-analyzed-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-analyzed-resource-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-public :initarg :is-public :initform
                         (common-lisp:error ":ispublic is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-analyzed-resource-is-public :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (actions :initarg :actions :initform common-lisp:nil
                         :type (common-lisp:or action-list common-lisp:null)
                         :accessor struct-shape-analyzed-resource-actions
                         :shape "ActionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (shared-via :initarg :shared-via :initform
                         common-lisp:nil :type
                         (common-lisp:or shared-via-list common-lisp:null)
                         :accessor struct-shape-analyzed-resource-shared-via
                         :shape "SharedViaList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or finding-status common-lisp:null)
                         :accessor struct-shape-analyzed-resource-status :shape
                         "FindingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-owner-account :initarg
                         :resource-owner-account :initform
                         (common-lisp:error
                          ":resourceowneraccount is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-analyzed-resource-resource-owner-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-analyzed-resource-error :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analyzed-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analyzed-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analyzed-resource 'make-analyzed-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analyzed-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analyzed-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-at))
      (common-lisp:list
       (common-lisp:cons "analyzedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "isPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shared-via))
      (common-lisp:list
       (common-lisp:cons "sharedVia"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analyzed-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass analyzed-resource-summary common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-analyzed-resource-summary-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-owner-account :initarg
                         :resource-owner-account :initform
                         (common-lisp:error
                          ":resourceowneraccount is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-analyzed-resource-summary-resource-owner-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-analyzed-resource-summary-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analyzed-resource-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analyzed-resource-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analyzed-resource-summary
                    'make-analyzed-resource-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analyzed-resource-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analyzed-resource-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analyzed-resource-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analyzed-resources-list ()
   '(trivial-types:proper-list analyzed-resource-summary))
 (common-lisp:defun make-analyzed-resources-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            analyzed-resource-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype analyzer-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analyzer-configuration common-lisp:nil
                       ((unused-access :initarg :unused-access :initform
                         common-lisp:nil :type
                         (common-lisp:or unused-access-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-analyzer-configuration-unused-access
                         :shape "UnusedAccessConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analyzer-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analyzer-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analyzer-configuration 'make-analyzer-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          analyzer-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          analyzer-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unused-access))
      (common-lisp:list
       (common-lisp:cons "unusedAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          analyzer-configuration))
   common-lisp:nil))
(common-lisp:deftype analyzer-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass analyzer-summary common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor struct-shape-analyzer-summary-arn :shape
                         "AnalyzerArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-analyzer-summary-name :shape "Name"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-analyzer-summary-type :shape "Type"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-analyzer-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-resource-analyzed :initarg
                         :last-resource-analyzed :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-analyzer-summary-last-resource-analyzed
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-resource-analyzed-at :initarg
                         :last-resource-analyzed-at :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-analyzer-summary-last-resource-analyzed-at
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-analyzer-summary-tags :shape "TagsMap"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or analyzer-status common-lisp:null)
                         :accessor struct-shape-analyzer-summary-status :shape
                         "AnalyzerStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status-reason :initarg :status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or status-reason common-lisp:null)
                         :accessor struct-shape-analyzer-summary-status-reason
                         :shape "StatusReason" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or analyzer-configuration
                                         common-lisp:null)
                         :accessor struct-shape-analyzer-summary-configuration
                         :shape "AnalyzerConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-analyzer-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'analyzer-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'analyzer-summary 'make-analyzer-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input analyzer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input analyzer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-resource-analyzed))
      (common-lisp:list
       (common-lisp:cons "lastResourceAnalyzed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-resource-analyzed-at))
      (common-lisp:list
       (common-lisp:cons "lastResourceAnalyzedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "statusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input analyzer-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype analyzers-list ()
   '(trivial-types:proper-list analyzer-summary))
 (common-lisp:defun make-analyzers-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list analyzer-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass apply-archive-rule-request common-lisp:nil
                       ((analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         struct-shape-apply-archive-rule-request-analyzer-arn
                         :shape "AnalyzerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rulename is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-apply-archive-rule-request-rule-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-apply-archive-rule-request-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-apply-archive-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'apply-archive-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'apply-archive-rule-request
                    'make-apply-archive-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-archive-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-archive-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass archive-rule-summary common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rulename is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-archive-rule-summary-rule-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter :initarg :filter :initform
                         (common-lisp:error ":filter is required") :type
                         (common-lisp:or filter-criteria-map common-lisp:null)
                         :accessor struct-shape-archive-rule-summary-filter
                         :shape "FilterCriteriaMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-archive-rule-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-archive-rule-summary-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-archive-rule-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'archive-rule-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'archive-rule-summary 'make-archive-rule-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-rule-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-rule-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-rule-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype archive-rules-list ()
   '(trivial-types:proper-list archive-rule-summary))
 (common-lisp:defun make-archive-rules-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list archive-rule-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-policy-generation-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-cancel-policy-generation-request-job-id
                         :shape "JobId" :location "uri" :location-name
                         "jobId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-policy-generation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-policy-generation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-policy-generation-request
                    'make-cancel-policy-generation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-policy-generation-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-policy-generation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-policy-generation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-policy-generation-response
                    'make-cancel-policy-generation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-policy-generation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass check-access-not-granted-request common-lisp:nil
                       ((policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policydocument is required")
                         :type
                         (common-lisp:or access-check-policy-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-check-access-not-granted-request-policy-document
                         :shape "AccessCheckPolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (access :initarg :access :initform
                         (common-lisp:error ":access is required") :type
                         (common-lisp:or
                          check-access-not-granted-request-access-list
                          common-lisp:null)
                         :accessor
                         struct-shape-check-access-not-granted-request-access
                         :shape "CheckAccessNotGrantedRequestAccessList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (policy-type :initarg :policy-type :initform
                         (common-lisp:error ":policytype is required") :type
                         (common-lisp:or access-check-policy-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-check-access-not-granted-request-policy-type
                         :shape "AccessCheckPolicyType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-check-access-not-granted-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'check-access-not-granted-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'check-access-not-granted-request
                    'make-check-access-not-granted-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-access-not-granted-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-access-not-granted-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access))
      (common-lisp:list
       (common-lisp:cons "access"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "policyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-access-not-granted-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype check-access-not-granted-request-access-list ()
   '(trivial-types:proper-list access))
 (common-lisp:defun make-check-access-not-granted-request-access-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass check-access-not-granted-response common-lisp:nil
                       ((result :initarg :result :initform common-lisp:nil
                         :type
                         (common-lisp:or check-access-not-granted-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-check-access-not-granted-response-result
                         :shape "CheckAccessNotGrantedResult" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-check-access-not-granted-response-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reasons :initarg :reasons :initform common-lisp:nil
                         :type
                         (common-lisp:or reason-summary-list common-lisp:null)
                         :accessor
                         struct-shape-check-access-not-granted-response-reasons
                         :shape "ReasonSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-check-access-not-granted-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'check-access-not-granted-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'check-access-not-granted-response
                    'make-check-access-not-granted-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-access-not-granted-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-access-not-granted-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reasons))
      (common-lisp:list
       (common-lisp:cons "reasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-access-not-granted-response))
   common-lisp:nil))
(common-lisp:deftype check-access-not-granted-result () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass check-no-new-access-request common-lisp:nil
                       ((new-policy-document :initarg :new-policy-document
                         :initform
                         (common-lisp:error ":newpolicydocument is required")
                         :type
                         (common-lisp:or access-check-policy-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-check-no-new-access-request-new-policy-document
                         :shape "AccessCheckPolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (existing-policy-document :initarg
                         :existing-policy-document :initform
                         (common-lisp:error
                          ":existingpolicydocument is required")
                         :type
                         (common-lisp:or access-check-policy-document
                                         common-lisp:null)
                         :accessor
                         struct-shape-check-no-new-access-request-existing-policy-document
                         :shape "AccessCheckPolicyDocument" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (policy-type :initarg :policy-type :initform
                         (common-lisp:error ":policytype is required") :type
                         (common-lisp:or access-check-policy-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-check-no-new-access-request-policy-type
                         :shape "AccessCheckPolicyType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-check-no-new-access-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'check-no-new-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'check-no-new-access-request
                    'make-check-no-new-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-no-new-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-no-new-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-policy-document))
      (common-lisp:list
       (common-lisp:cons "newPolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'existing-policy-document))
      (common-lisp:list
       (common-lisp:cons "existingPolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "policyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-no-new-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass check-no-new-access-response common-lisp:nil
                       ((result :initarg :result :initform common-lisp:nil
                         :type
                         (common-lisp:or check-no-new-access-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-check-no-new-access-response-result
                         :shape "CheckNoNewAccessResult" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-check-no-new-access-response-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reasons :initarg :reasons :initform common-lisp:nil
                         :type
                         (common-lisp:or reason-summary-list common-lisp:null)
                         :accessor
                         struct-shape-check-no-new-access-response-reasons
                         :shape "ReasonSummaryList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-check-no-new-access-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'check-no-new-access-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'check-no-new-access-response
                    'make-check-no-new-access-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          check-no-new-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          check-no-new-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reasons))
      (common-lisp:list
       (common-lisp:cons "reasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          check-no-new-access-response))
   common-lisp:nil))
(common-lisp:deftype check-no-new-access-result () 'common-lisp:string)
(common-lisp:deftype cloud-trail-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-trail-details common-lisp:nil
                       ((trails :initarg :trails :initform
                         (common-lisp:error ":trails is required") :type
                         (common-lisp:or trail-list common-lisp:null) :accessor
                         struct-shape-cloud-trail-details-trails :shape
                         "TrailList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (access-role :initarg :access-role :initform
                         (common-lisp:error ":accessrole is required") :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         struct-shape-cloud-trail-details-access-role :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-cloud-trail-details-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor struct-shape-cloud-trail-details-end-time
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-trail-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-trail-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-trail-details 'make-cloud-trail-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cloud-trail-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cloud-trail-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trails))
      (common-lisp:list
       (common-lisp:cons "trails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "accessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cloud-trail-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cloud-trail-properties common-lisp:nil
                       ((trail-properties :initarg :trail-properties :initform
                         (common-lisp:error ":trailproperties is required")
                         :type
                         (common-lisp:or trail-properties-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cloud-trail-properties-trail-properties
                         :shape "TrailPropertiesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         (common-lisp:error ":starttime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-cloud-trail-properties-start-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform
                         (common-lisp:error ":endtime is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-cloud-trail-properties-end-time :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cloud-trail-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-trail-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cloud-trail-properties 'make-cloud-trail-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-trail-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-trail-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-properties))
      (common-lisp:list
       (common-lisp:cons "trailProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-trail-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype condition-key-map () 'common-lisp:hash-table)
 (common-lisp:defun make-condition-key-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass configuration common-lisp:nil
                       ((ebs-snapshot :initarg :ebs-snapshot :initform
                         common-lisp:nil :type
                         (common-lisp:or ebs-snapshot-configuration
                                         common-lisp:null)
                         :accessor struct-shape-configuration-ebs-snapshot
                         :shape "EbsSnapshotConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ecr-repository :initarg :ecr-repository :initform
                         common-lisp:nil :type
                         (common-lisp:or ecr-repository-configuration
                                         common-lisp:null)
                         :accessor struct-shape-configuration-ecr-repository
                         :shape "EcrRepositoryConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (iam-role :initarg :iam-role :initform common-lisp:nil
                         :type
                         (common-lisp:or iam-role-configuration
                                         common-lisp:null)
                         :accessor struct-shape-configuration-iam-role :shape
                         "IamRoleConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (efs-file-system :initarg :efs-file-system :initform
                         common-lisp:nil :type
                         (common-lisp:or efs-file-system-configuration
                                         common-lisp:null)
                         :accessor struct-shape-configuration-efs-file-system
                         :shape "EfsFileSystemConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key :initarg :kms-key :initform common-lisp:nil
                         :type
                         (common-lisp:or kms-key-configuration
                                         common-lisp:null)
                         :accessor struct-shape-configuration-kms-key :shape
                         "KmsKeyConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rds-db-cluster-snapshot :initarg
                         :rds-db-cluster-snapshot :initform common-lisp:nil
                         :type
                         (common-lisp:or rds-db-cluster-snapshot-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-rds-db-cluster-snapshot
                         :shape "RdsDbClusterSnapshotConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rds-db-snapshot :initarg :rds-db-snapshot :initform
                         common-lisp:nil :type
                         (common-lisp:or rds-db-snapshot-configuration
                                         common-lisp:null)
                         :accessor struct-shape-configuration-rds-db-snapshot
                         :shape "RdsDbSnapshotConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (secrets-manager-secret :initarg
                         :secrets-manager-secret :initform common-lisp:nil
                         :type
                         (common-lisp:or secrets-manager-secret-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-secrets-manager-secret
                         :shape "SecretsManagerSecretConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (s3bucket :initarg :s3bucket :initform common-lisp:nil
                         :type
                         (common-lisp:or s3bucket-configuration
                                         common-lisp:null)
                         :accessor struct-shape-configuration-s3bucket :shape
                         "S3BucketConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sns-topic :initarg :sns-topic :initform
                         common-lisp:nil :type
                         (common-lisp:or sns-topic-configuration
                                         common-lisp:null)
                         :accessor struct-shape-configuration-sns-topic :shape
                         "SnsTopicConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sqs-queue :initarg :sqs-queue :initform
                         common-lisp:nil :type
                         (common-lisp:or sqs-queue-configuration
                                         common-lisp:null)
                         :accessor struct-shape-configuration-sqs-queue :shape
                         "SqsQueueConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3express-directory-bucket :initarg
                         :s3express-directory-bucket :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          s3express-directory-bucket-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-configuration-s3express-directory-bucket
                         :shape "S3ExpressDirectoryBucketConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'configuration 'make-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-snapshot))
      (common-lisp:list
       (common-lisp:cons "ebsSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecr-repository))
      (common-lisp:list
       (common-lisp:cons "ecrRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'efs-file-system))
      (common-lisp:list
       (common-lisp:cons "efsFileSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "kmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-db-cluster-snapshot))
      (common-lisp:list
       (common-lisp:cons "rdsDbClusterSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-db-snapshot))
      (common-lisp:list
       (common-lisp:cons "rdsDbSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secrets-manager-secret))
      (common-lisp:list
       (common-lisp:cons "secretsManagerSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket))
      (common-lisp:list
       (common-lisp:cons "s3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic))
      (common-lisp:list
       (common-lisp:cons "snsTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sqs-queue))
      (common-lisp:list
       (common-lisp:cons "sqsQueue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3express-directory-bucket))
      (common-lisp:list
       (common-lisp:cons "s3ExpressDirectoryBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configurations-map () 'common-lisp:hash-table)
 (common-lisp:defun make-configurations-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype configurations-map-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass create-access-preview-request common-lisp:nil
                       ((analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         struct-shape-create-access-preview-request-analyzer-arn
                         :shape "AnalyzerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configurations :initarg :configurations :initform
                         (common-lisp:error ":configurations is required")
                         :type
                         (common-lisp:or configurations-map common-lisp:null)
                         :accessor
                         struct-shape-create-access-preview-request-configurations
                         :shape "ConfigurationsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-access-preview-request-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-access-preview-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-access-preview-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-access-preview-request
                    'make-create-access-preview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configurations))
      (common-lisp:list
       (common-lisp:cons "configurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-access-preview-response common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or access-preview-id common-lisp:null)
                         :accessor
                         struct-shape-create-access-preview-response-id :shape
                         "AccessPreviewId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-access-preview-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-access-preview-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-access-preview-response
                    'make-create-access-preview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-preview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-analyzer-request common-lisp:nil
                       ((analyzer-name :initarg :analyzer-name :initform
                         (common-lisp:error ":analyzername is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-analyzer-request-analyzer-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-create-analyzer-request-type :shape
                         "Type" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (archive-rules :initarg :archive-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or inline-archive-rules-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-analyzer-request-archive-rules
                         :shape "InlineArchiveRulesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-create-analyzer-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-analyzer-request-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or analyzer-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-analyzer-request-configuration
                         :shape "AnalyzerConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-analyzer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-analyzer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-analyzer-request 'make-create-analyzer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-name))
      (common-lisp:list
       (common-lisp:cons "analyzerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-rules))
      (common-lisp:list
       (common-lisp:cons "archiveRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-analyzer-response common-lisp:nil
                       ((arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor struct-shape-create-analyzer-response-arn
                         :shape "AnalyzerArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-analyzer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-analyzer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-analyzer-response 'make-create-analyzer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-analyzer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-archive-rule-request common-lisp:nil
                       ((analyzer-name :initarg :analyzer-name :initform
                         (common-lisp:error ":analyzername is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-archive-rule-request-analyzer-name
                         :shape "Name" :location "uri" :location-name
                         "analyzerName")
                        (rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rulename is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-create-archive-rule-request-rule-name
                         :shape "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter :initarg :filter :initform
                         (common-lisp:error ":filter is required") :type
                         (common-lisp:or filter-criteria-map common-lisp:null)
                         :accessor
                         struct-shape-create-archive-rule-request-filter :shape
                         "FilterCriteriaMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-create-archive-rule-request-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-archive-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-archive-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-archive-rule-request
                    'make-create-archive-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-archive-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass criterion common-lisp:nil
                       ((eq :initarg :eq :initform common-lisp:nil :type
                         (common-lisp:or value-list common-lisp:null) :accessor
                         struct-shape-criterion-eq :shape "ValueList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (neq :initarg :neq :initform common-lisp:nil :type
                         (common-lisp:or value-list common-lisp:null) :accessor
                         struct-shape-criterion-neq :shape "ValueList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (contains :initarg :contains :initform common-lisp:nil
                         :type (common-lisp:or value-list common-lisp:null)
                         :accessor struct-shape-criterion-contains :shape
                         "ValueList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (exists :initarg :exists :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-criterion-exists :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-criterion
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'criterion
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'criterion 'make-criterion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input criterion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input criterion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eq))
      (common-lisp:list
       (common-lisp:cons "eq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neq))
      (common-lisp:list
       (common-lisp:cons "neq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contains))
      (common-lisp:list
       (common-lisp:cons "contains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exists))
      (common-lisp:list
       (common-lisp:cons "exists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input criterion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-analyzer-request common-lisp:nil
                       ((analyzer-name :initarg :analyzer-name :initform
                         (common-lisp:error ":analyzername is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-delete-analyzer-request-analyzer-name
                         :shape "Name" :location "uri" :location-name
                         "analyzerName")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-analyzer-request-client-token
                         :shape "String" :location "querystring" :location-name
                         "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-analyzer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-analyzer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-analyzer-request 'make-delete-analyzer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-analyzer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-archive-rule-request common-lisp:nil
                       ((analyzer-name :initarg :analyzer-name :initform
                         (common-lisp:error ":analyzername is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-delete-archive-rule-request-analyzer-name
                         :shape "Name" :location "uri" :location-name
                         "analyzerName")
                        (rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rulename is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-delete-archive-rule-request-rule-name
                         :shape "Name" :location "uri" :location-name
                         "ruleName")
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-archive-rule-request-client-token
                         :shape "String" :location "querystring" :location-name
                         "clientToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-archive-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-archive-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-archive-rule-request
                    'make-delete-archive-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-archive-rule-request))
   common-lisp:nil))
(common-lisp:deftype ebs-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ebs-group-list () '(trivial-types:proper-list ebs-group))
 (common-lisp:defun make-ebs-group-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ebs-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ebs-snapshot-configuration common-lisp:nil
                       ((user-ids :initarg :user-ids :initform common-lisp:nil
                         :type
                         (common-lisp:or ebs-user-id-list common-lisp:null)
                         :accessor
                         struct-shape-ebs-snapshot-configuration-user-ids
                         :shape "EbsUserIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (groups :initarg :groups :initform common-lisp:nil
                         :type (common-lisp:or ebs-group-list common-lisp:null)
                         :accessor
                         struct-shape-ebs-snapshot-configuration-groups :shape
                         "EbsGroupList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or ebs-snapshot-data-encryption-key-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-ebs-snapshot-configuration-kms-key-id
                         :shape "EbsSnapshotDataEncryptionKeyId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebs-snapshot-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebs-snapshot-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ebs-snapshot-configuration
                    'make-ebs-snapshot-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebs-snapshot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebs-snapshot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-ids))
      (common-lisp:list
       (common-lisp:cons "userIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebs-snapshot-configuration))
   common-lisp:nil))
(common-lisp:deftype ebs-snapshot-data-encryption-key-id () 'common-lisp:string)
(common-lisp:deftype ebs-user-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ebs-user-id-list ()
   '(trivial-types:proper-list ebs-user-id))
 (common-lisp:defun make-ebs-user-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ebs-user-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ecr-repository-configuration common-lisp:nil
                       ((repository-policy :initarg :repository-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or ecr-repository-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-ecr-repository-configuration-repository-policy
                         :shape "EcrRepositoryPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ecr-repository-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ecr-repository-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ecr-repository-configuration
                    'make-ecr-repository-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ecr-repository-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ecr-repository-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-policy))
      (common-lisp:list
       (common-lisp:cons "repositoryPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ecr-repository-configuration))
   common-lisp:nil))
(common-lisp:deftype ecr-repository-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass efs-file-system-configuration common-lisp:nil
                       ((file-system-policy :initarg :file-system-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or efs-file-system-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-efs-file-system-configuration-file-system-policy
                         :shape "EfsFileSystemPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-efs-file-system-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'efs-file-system-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'efs-file-system-configuration
                    'make-efs-file-system-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          efs-file-system-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          efs-file-system-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-policy))
      (common-lisp:list
       (common-lisp:cons "fileSystemPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          efs-file-system-configuration))
   common-lisp:nil))
(common-lisp:deftype efs-file-system-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass external-access-details common-lisp:nil
                       ((action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or action-list common-lisp:null)
                         :accessor struct-shape-external-access-details-action
                         :shape "ActionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (condition :initarg :condition :initform
                         (common-lisp:error ":condition is required") :type
                         (common-lisp:or condition-key-map common-lisp:null)
                         :accessor
                         struct-shape-external-access-details-condition :shape
                         "ConditionKeyMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (is-public :initarg :is-public :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-external-access-details-is-public :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (principal :initarg :principal :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-map common-lisp:null)
                         :accessor
                         struct-shape-external-access-details-principal :shape
                         "PrincipalMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or finding-source-list common-lisp:null)
                         :accessor struct-shape-external-access-details-sources
                         :shape "FindingSourceList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-external-access-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'external-access-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'external-access-details 'make-external-access-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          external-access-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          external-access-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "isPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          external-access-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-criteria-map () 'common-lisp:hash-table)
 (common-lisp:defun make-filter-criteria-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass finding common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-finding-id :shape "FindingId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (principal :initarg :principal :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-map common-lisp:null)
                         :accessor struct-shape-finding-principal :shape
                         "PrincipalMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or action-list common-lisp:null)
                         :accessor struct-shape-finding-action :shape
                         "ActionList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource :initarg :resource :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-finding-resource :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-public :initarg :is-public :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-finding-is-public :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-finding-resource-type :shape
                         "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (condition :initarg :condition :initform
                         (common-lisp:error ":condition is required") :type
                         (common-lisp:or condition-key-map common-lisp:null)
                         :accessor struct-shape-finding-condition :shape
                         "ConditionKeyMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-finding-created-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (analyzed-at :initarg :analyzed-at :initform
                         (common-lisp:error ":analyzedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-finding-analyzed-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-finding-updated-at :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or finding-status common-lisp:null)
                         :accessor struct-shape-finding-status :shape
                         "FindingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-owner-account :initarg
                         :resource-owner-account :initform
                         (common-lisp:error
                          ":resourceowneraccount is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-finding-resource-owner-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-finding-error :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or finding-source-list common-lisp:null)
                         :accessor struct-shape-finding-sources :shape
                         "FindingSourceList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-finding
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'finding
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'finding 'make-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "isPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-at))
      (common-lisp:list
       (common-lisp:cons "analyzedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding))
   common-lisp:nil))
(common-lisp:deftype finding-change-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass finding-details common-lisp:nil
                       ((external-access-details :initarg
                         :external-access-details :initform common-lisp:nil
                         :type
                         (common-lisp:or external-access-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-finding-details-external-access-details
                         :shape "ExternalAccessDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unused-permission-details :initarg
                         :unused-permission-details :initform common-lisp:nil
                         :type
                         (common-lisp:or unused-permission-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-finding-details-unused-permission-details
                         :shape "UnusedPermissionDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unused-iam-user-access-key-details :initarg
                         :unused-iam-user-access-key-details :initform
                         common-lisp:nil :type
                         (common-lisp:or unused-iam-user-access-key-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-finding-details-unused-iam-user-access-key-details
                         :shape "UnusedIamUserAccessKeyDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unused-iam-role-details :initarg
                         :unused-iam-role-details :initform common-lisp:nil
                         :type
                         (common-lisp:or unused-iam-role-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-finding-details-unused-iam-role-details
                         :shape "UnusedIamRoleDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unused-iam-user-password-details :initarg
                         :unused-iam-user-password-details :initform
                         common-lisp:nil :type
                         (common-lisp:or unused-iam-user-password-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-finding-details-unused-iam-user-password-details
                         :shape "UnusedIamUserPasswordDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-finding-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'finding-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'finding-details 'make-finding-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-access-details))
      (common-lisp:list
       (common-lisp:cons "externalAccessDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unused-permission-details))
      (common-lisp:list
       (common-lisp:cons "unusedPermissionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unused-iam-user-access-key-details))
      (common-lisp:list
       (common-lisp:cons "unusedIamUserAccessKeyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unused-iam-role-details))
      (common-lisp:list
       (common-lisp:cons "unusedIamRoleDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unused-iam-user-password-details))
      (common-lisp:list
       (common-lisp:cons "unusedIamUserPasswordDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype finding-details-list ()
   '(trivial-types:proper-list finding-details))
 (common-lisp:defun make-finding-details-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype finding-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-id-list ()
   '(trivial-types:proper-list finding-id))
 (common-lisp:defun make-finding-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass finding-source common-lisp:nil
                       ((type :initarg :type :initform
                         (common-lisp:error ":type is required") :type
                         (common-lisp:or finding-source-type common-lisp:null)
                         :accessor struct-shape-finding-source-type :shape
                         "FindingSourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (detail :initarg :detail :initform common-lisp:nil
                         :type
                         (common-lisp:or finding-source-detail
                                         common-lisp:null)
                         :accessor struct-shape-finding-source-detail :shape
                         "FindingSourceDetail" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-finding-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'finding-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'finding-source 'make-finding-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detail))
      (common-lisp:list
       (common-lisp:cons "detail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass finding-source-detail common-lisp:nil
                       ((access-point-arn :initarg :access-point-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-finding-source-detail-access-point-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-point-account :initarg :access-point-account
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-finding-source-detail-access-point-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-finding-source-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'finding-source-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'finding-source-detail 'make-finding-source-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          finding-source-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          finding-source-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-arn))
      (common-lisp:list
       (common-lisp:cons "accessPointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-point-account))
      (common-lisp:list
       (common-lisp:cons "accessPointAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          finding-source-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype finding-source-list ()
   '(trivial-types:proper-list finding-source))
 (common-lisp:defun make-finding-source-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype finding-source-type () 'common-lisp:string)
(common-lisp:deftype finding-status () 'common-lisp:string)
(common-lisp:deftype finding-status-update () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass finding-summary common-lisp:nil
                       ((id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-finding-summary-id :shape "FindingId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (principal :initarg :principal :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-map common-lisp:null)
                         :accessor struct-shape-finding-summary-principal
                         :shape "PrincipalMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type (common-lisp:or action-list common-lisp:null)
                         :accessor struct-shape-finding-summary-action :shape
                         "ActionList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource :initarg :resource :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-finding-summary-resource :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (is-public :initarg :is-public :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-finding-summary-is-public :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-finding-summary-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (condition :initarg :condition :initform
                         (common-lisp:error ":condition is required") :type
                         (common-lisp:or condition-key-map common-lisp:null)
                         :accessor struct-shape-finding-summary-condition
                         :shape "ConditionKeyMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-finding-summary-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (analyzed-at :initarg :analyzed-at :initform
                         (common-lisp:error ":analyzedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-finding-summary-analyzed-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-finding-summary-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or finding-status common-lisp:null)
                         :accessor struct-shape-finding-summary-status :shape
                         "FindingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-owner-account :initarg
                         :resource-owner-account :initform
                         (common-lisp:error
                          ":resourceowneraccount is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-finding-summary-resource-owner-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-finding-summary-error :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sources :initarg :sources :initform common-lisp:nil
                         :type
                         (common-lisp:or finding-source-list common-lisp:null)
                         :accessor struct-shape-finding-summary-sources :shape
                         "FindingSourceList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-finding-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'finding-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'finding-summary 'make-finding-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-public))
      (common-lisp:list
       (common-lisp:cons "isPublic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-at))
      (common-lisp:list
       (common-lisp:cons "analyzedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass finding-summary-v2 common-lisp:nil
                       ((analyzed-at :initarg :analyzed-at :initform
                         (common-lisp:error ":analyzedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-finding-summary-v2-analyzed-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-finding-summary-v2-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-finding-summary-v2-error :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-finding-summary-v2-id :shape "FindingId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource :initarg :resource :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-finding-summary-v2-resource
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-finding-summary-v2-resource-type :shape
                         "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-owner-account :initarg
                         :resource-owner-account :initform
                         (common-lisp:error
                          ":resourceowneraccount is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-finding-summary-v2-resource-owner-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or finding-status common-lisp:null)
                         :accessor struct-shape-finding-summary-v2-status
                         :shape "FindingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-finding-summary-v2-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (finding-type :initarg :finding-type :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-type common-lisp:null)
                         :accessor struct-shape-finding-summary-v2-finding-type
                         :shape "FindingType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-finding-summary-v2
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'finding-summary-v2
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'finding-summary-v2 'make-finding-summary-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-summary-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-summary-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-at))
      (common-lisp:list
       (common-lisp:cons "analyzedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-type))
      (common-lisp:list
       (common-lisp:cons "findingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-summary-v2))
   common-lisp:nil))
(common-lisp:deftype finding-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype findings-list ()
   '(trivial-types:proper-list finding-summary))
 (common-lisp:defun make-findings-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype findings-list-v2 ()
   '(trivial-types:proper-list finding-summary-v2))
 (common-lisp:defun make-findings-list-v2
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding-summary-v2))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass generated-policy common-lisp:nil
                       ((policy :initarg :policy :initform
                         (common-lisp:error ":policy is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-generated-policy-policy :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generated-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generated-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generated-policy 'make-generated-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input generated-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input generated-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input generated-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype generated-policy-list ()
   '(trivial-types:proper-list generated-policy))
 (common-lisp:defun make-generated-policy-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generated-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass generated-policy-properties common-lisp:nil
                       ((is-complete :initarg :is-complete :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-generated-policy-properties-is-complete
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal-arn :initarg :principal-arn :initform
                         (common-lisp:error ":principalarn is required") :type
                         (common-lisp:or principal-arn common-lisp:null)
                         :accessor
                         struct-shape-generated-policy-properties-principal-arn
                         :shape "PrincipalArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cloud-trail-properties :initarg
                         :cloud-trail-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or cloud-trail-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-generated-policy-properties-cloud-trail-properties
                         :shape "CloudTrailProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generated-policy-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generated-policy-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generated-policy-properties
                    'make-generated-policy-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-complete))
      (common-lisp:list
       (common-lisp:cons "isComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-trail-properties))
      (common-lisp:list
       (common-lisp:cons "cloudTrailProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generated-policy-result common-lisp:nil
                       ((properties :initarg :properties :initform
                         (common-lisp:error ":properties is required") :type
                         (common-lisp:or generated-policy-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-generated-policy-result-properties :shape
                         "GeneratedPolicyProperties" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generated-policies :initarg :generated-policies
                         :initform common-lisp:nil :type
                         (common-lisp:or generated-policy-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-generated-policy-result-generated-policies
                         :shape "GeneratedPolicyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-generated-policy-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'generated-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'generated-policy-result 'make-generated-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generated-policies))
      (common-lisp:list
       (common-lisp:cons "generatedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generated-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-preview-request common-lisp:nil
                       ((access-preview-id :initarg :access-preview-id
                         :initform
                         (common-lisp:error ":accesspreviewid is required")
                         :type
                         (common-lisp:or access-preview-id common-lisp:null)
                         :accessor
                         struct-shape-get-access-preview-request-access-preview-id
                         :shape "AccessPreviewId" :location "uri"
                         :location-name "accessPreviewId")
                        (analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         struct-shape-get-access-preview-request-analyzer-arn
                         :shape "AnalyzerArn" :location "querystring"
                         :location-name "analyzerArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-access-preview-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-access-preview-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-access-preview-request
                    'make-get-access-preview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-access-preview-response common-lisp:nil
                       ((access-preview :initarg :access-preview :initform
                         (common-lisp:error ":accesspreview is required") :type
                         (common-lisp:or access-preview common-lisp:null)
                         :accessor
                         struct-shape-get-access-preview-response-access-preview
                         :shape "AccessPreview" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-access-preview-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-access-preview-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-access-preview-response
                    'make-get-access-preview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-preview))
      (common-lisp:list
       (common-lisp:cons "accessPreview"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-preview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-analyzed-resource-request common-lisp:nil
                       ((analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         struct-shape-get-analyzed-resource-request-analyzer-arn
                         :shape "AnalyzerArn" :location "querystring"
                         :location-name "analyzerArn")
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-get-analyzed-resource-request-resource-arn
                         :shape "ResourceArn" :location "querystring"
                         :location-name "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-analyzed-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-analyzed-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-analyzed-resource-request
                    'make-get-analyzed-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-analyzed-resource-response common-lisp:nil
                       ((resource :initarg :resource :initform common-lisp:nil
                         :type
                         (common-lisp:or analyzed-resource common-lisp:null)
                         :accessor
                         struct-shape-get-analyzed-resource-response-resource
                         :shape "AnalyzedResource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-analyzed-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-analyzed-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-analyzed-resource-response
                    'make-get-analyzed-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzed-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-analyzer-request common-lisp:nil
                       ((analyzer-name :initarg :analyzer-name :initform
                         (common-lisp:error ":analyzername is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-get-analyzer-request-analyzer-name :shape
                         "Name" :location "uri" :location-name "analyzerName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-analyzer-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-analyzer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-analyzer-request 'make-get-analyzer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-analyzer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-analyzer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-analyzer-response common-lisp:nil
                       ((analyzer :initarg :analyzer :initform
                         (common-lisp:error ":analyzer is required") :type
                         (common-lisp:or analyzer-summary common-lisp:null)
                         :accessor struct-shape-get-analyzer-response-analyzer
                         :shape "AnalyzerSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-analyzer-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-analyzer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-analyzer-response 'make-get-analyzer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer))
      (common-lisp:list
       (common-lisp:cons "analyzer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-analyzer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-archive-rule-request common-lisp:nil
                       ((analyzer-name :initarg :analyzer-name :initform
                         (common-lisp:error ":analyzername is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-get-archive-rule-request-analyzer-name
                         :shape "Name" :location "uri" :location-name
                         "analyzerName")
                        (rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rulename is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-get-archive-rule-request-rule-name :shape
                         "Name" :location "uri" :location-name "ruleName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-archive-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-archive-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-archive-rule-request 'make-get-archive-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-archive-rule-response common-lisp:nil
                       ((archive-rule :initarg :archive-rule :initform
                         (common-lisp:error ":archiverule is required") :type
                         (common-lisp:or archive-rule-summary common-lisp:null)
                         :accessor
                         struct-shape-get-archive-rule-response-archive-rule
                         :shape "ArchiveRuleSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-archive-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-archive-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-archive-rule-response
                    'make-get-archive-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-rule))
      (common-lisp:list
       (common-lisp:cons "archiveRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-archive-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-finding-request common-lisp:nil
                       ((analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         struct-shape-get-finding-request-analyzer-arn :shape
                         "AnalyzerArn" :location "querystring" :location-name
                         "analyzerArn")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-get-finding-request-id :shape "FindingId"
                         :location "uri" :location-name "id"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-finding-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-finding-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-finding-request 'make-get-finding-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-finding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-finding-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-finding-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-finding-response common-lisp:nil
                       ((finding :initarg :finding :initform common-lisp:nil
                         :type (common-lisp:or finding common-lisp:null)
                         :accessor struct-shape-get-finding-response-finding
                         :shape "Finding" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-finding-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-finding-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-finding-response 'make-get-finding-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-finding-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-finding-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding))
      (common-lisp:list
       (common-lisp:cons "finding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-finding-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-finding-v2request common-lisp:nil
                       ((analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         struct-shape-get-finding-v2request-analyzer-arn :shape
                         "AnalyzerArn" :location "querystring" :location-name
                         "analyzerArn")
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-get-finding-v2request-id :shape
                         "FindingId" :location "uri" :location-name "id")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-finding-v2request-max-results :shape
                         "Integer" :location "querystring" :location-name
                         "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-finding-v2request-next-token :shape
                         "Token" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-finding-v2request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-finding-v2request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-finding-v2request 'make-get-finding-v2request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-finding-v2response common-lisp:nil
                       ((analyzed-at :initarg :analyzed-at :initform
                         (common-lisp:error ":analyzedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-finding-v2response-analyzed-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         (common-lisp:error ":createdat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-finding-v2response-created-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error :initarg :error :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-finding-v2response-error :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (id :initarg :id :initform
                         (common-lisp:error ":id is required") :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         struct-shape-get-finding-v2response-id :shape
                         "FindingId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-get-finding-v2response-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource :initarg :resource :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-get-finding-v2response-resource
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-get-finding-v2response-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-owner-account :initarg
                         :resource-owner-account :initform
                         (common-lisp:error
                          ":resourceowneraccount is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-finding-v2response-resource-owner-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or finding-status common-lisp:null)
                         :accessor struct-shape-get-finding-v2response-status
                         :shape "FindingStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (updated-at :initarg :updated-at :initform
                         (common-lisp:error ":updatedat is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-get-finding-v2response-updated-at :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (finding-details :initarg :finding-details :initform
                         (common-lisp:error ":findingdetails is required")
                         :type
                         (common-lisp:or finding-details-list common-lisp:null)
                         :accessor
                         struct-shape-get-finding-v2response-finding-details
                         :shape "FindingDetailsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (finding-type :initarg :finding-type :initform
                         common-lisp:nil :type
                         (common-lisp:or finding-type common-lisp:null)
                         :accessor
                         struct-shape-get-finding-v2response-finding-type
                         :shape "FindingType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-finding-v2response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-finding-v2response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-finding-v2response 'make-get-finding-v2response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-at))
      (common-lisp:list
       (common-lisp:cons "analyzedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-details))
      (common-lisp:list
       (common-lisp:cons "findingDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-type))
      (common-lisp:list
       (common-lisp:cons "findingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-finding-v2response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-generated-policy-request common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-get-generated-policy-request-job-id
                         :shape "JobId" :location "uri" :location-name "jobId")
                        (include-resource-placeholders :initarg
                         :include-resource-placeholders :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-generated-policy-request-include-resource-placeholders
                         :shape "Boolean" :location "querystring"
                         :location-name "includeResourcePlaceholders")
                        (include-service-level-template :initarg
                         :include-service-level-template :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-generated-policy-request-include-service-level-template
                         :shape "Boolean" :location "querystring"
                         :location-name "includeServiceLevelTemplate"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-generated-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-generated-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-generated-policy-request
                    'make-get-generated-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-generated-policy-response common-lisp:nil
                       ((job-details :initarg :job-details :initform
                         (common-lisp:error ":jobdetails is required") :type
                         (common-lisp:or job-details common-lisp:null)
                         :accessor
                         struct-shape-get-generated-policy-response-job-details
                         :shape "JobDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (generated-policy-result :initarg
                         :generated-policy-result :initform
                         (common-lisp:error
                          ":generatedpolicyresult is required")
                         :type
                         (common-lisp:or generated-policy-result
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-generated-policy-response-generated-policy-result
                         :shape "GeneratedPolicyResult" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-generated-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-generated-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-generated-policy-response
                    'make-get-generated-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-details))
      (common-lisp:list
       (common-lisp:cons "jobDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generated-policy-result))
      (common-lisp:list
       (common-lisp:cons "generatedPolicyResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-generated-policy-response))
   common-lisp:nil))
(common-lisp:deftype grantee-principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass iam-role-configuration common-lisp:nil
                       ((trust-policy :initarg :trust-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or iam-trust-policy common-lisp:null)
                         :accessor
                         struct-shape-iam-role-configuration-trust-policy
                         :shape "IamTrustPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-iam-role-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'iam-role-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'iam-role-configuration 'make-iam-role-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          iam-role-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          iam-role-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trust-policy))
      (common-lisp:list
       (common-lisp:cons "trustPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          iam-role-configuration))
   common-lisp:nil))
(common-lisp:deftype iam-trust-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass inline-archive-rule common-lisp:nil
                       ((rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rulename is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-inline-archive-rule-rule-name :shape
                         "Name" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter :initarg :filter :initform
                         (common-lisp:error ":filter is required") :type
                         (common-lisp:or filter-criteria-map common-lisp:null)
                         :accessor struct-shape-inline-archive-rule-filter
                         :shape "FilterCriteriaMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inline-archive-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'inline-archive-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inline-archive-rule 'make-inline-archive-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inline-archive-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inline-archive-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-name))
      (common-lisp:list
       (common-lisp:cons "ruleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inline-archive-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inline-archive-rules-list ()
   '(trivial-types:proper-list inline-archive-rule))
 (common-lisp:defun make-inline-archive-rules-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inline-archive-rule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:progn
 (common-lisp:defclass internet-configuration common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-internet-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'internet-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'internet-configuration 'make-internet-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          internet-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          internet-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          internet-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:deftype issue-code () 'common-lisp:string)
(common-lisp:deftype issuing-account () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass job-details common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-job-details-job-id :shape "JobId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         struct-shape-job-details-status :shape "JobStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         (common-lisp:error ":startedon is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-job-details-started-on :shape "Timestamp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completed-on :initarg :completed-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-job-details-completed-on :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (job-error :initarg :job-error :initform
                         common-lisp:nil :type
                         (common-lisp:or job-error common-lisp:null) :accessor
                         struct-shape-job-details-job-error :shape "JobError"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-details 'make-job-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "startedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "completedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-error))
      (common-lisp:list
       (common-lisp:cons "jobError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass job-error common-lisp:nil
                       ((code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or job-error-code common-lisp:null)
                         :accessor struct-shape-job-error-code :shape
                         "JobErrorCode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-job-error-message :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-job-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'job-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'job-error 'make-job-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-error))
   common-lisp:nil))
(common-lisp:deftype job-error-code () 'common-lisp:string)
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:deftype kms-constraints-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kms-constraints-map () 'common-lisp:hash-table)
 (common-lisp:defun make-kms-constraints-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype kms-constraints-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass kms-grant-configuration common-lisp:nil
                       ((operations :initarg :operations :initform
                         (common-lisp:error ":operations is required") :type
                         (common-lisp:or kms-grant-operations-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-kms-grant-configuration-operations :shape
                         "KmsGrantOperationsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grantee-principal :initarg :grantee-principal
                         :initform
                         (common-lisp:error ":granteeprincipal is required")
                         :type
                         (common-lisp:or grantee-principal common-lisp:null)
                         :accessor
                         struct-shape-kms-grant-configuration-grantee-principal
                         :shape "GranteePrincipal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (retiring-principal :initarg :retiring-principal
                         :initform common-lisp:nil :type
                         (common-lisp:or retiring-principal common-lisp:null)
                         :accessor
                         struct-shape-kms-grant-configuration-retiring-principal
                         :shape "RetiringPrincipal" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (constraints :initarg :constraints :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-grant-constraints
                                         common-lisp:null)
                         :accessor
                         struct-shape-kms-grant-configuration-constraints
                         :shape "KmsGrantConstraints" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (issuing-account :initarg :issuing-account :initform
                         (common-lisp:error ":issuingaccount is required")
                         :type
                         (common-lisp:or issuing-account common-lisp:null)
                         :accessor
                         struct-shape-kms-grant-configuration-issuing-account
                         :shape "IssuingAccount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kms-grant-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kms-grant-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kms-grant-configuration 'make-kms-grant-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee-principal))
      (common-lisp:list
       (common-lisp:cons "granteePrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retiring-principal))
      (common-lisp:list
       (common-lisp:cons "retiringPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuing-account))
      (common-lisp:list
       (common-lisp:cons "issuingAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kms-grant-configurations-list ()
   '(trivial-types:proper-list kms-grant-configuration))
 (common-lisp:defun make-kms-grant-configurations-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kms-grant-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kms-grant-constraints common-lisp:nil
                       ((encryption-context-equals :initarg
                         :encryption-context-equals :initform common-lisp:nil
                         :type
                         (common-lisp:or kms-constraints-map common-lisp:null)
                         :accessor
                         struct-shape-kms-grant-constraints-encryption-context-equals
                         :shape "KmsConstraintsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-context-subset :initarg
                         :encryption-context-subset :initform common-lisp:nil
                         :type
                         (common-lisp:or kms-constraints-map common-lisp:null)
                         :accessor
                         struct-shape-kms-grant-constraints-encryption-context-subset
                         :shape "KmsConstraintsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kms-grant-constraints
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kms-grant-constraints
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kms-grant-constraints 'make-kms-grant-constraints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-constraints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-constraints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-context-equals))
      (common-lisp:list
       (common-lisp:cons "encryptionContextEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-context-subset))
      (common-lisp:list
       (common-lisp:cons "encryptionContextSubset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kms-grant-constraints))
   common-lisp:nil))
(common-lisp:deftype kms-grant-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype kms-grant-operations-list ()
   '(trivial-types:proper-list kms-grant-operation))
 (common-lisp:defun make-kms-grant-operations-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kms-grant-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass kms-key-configuration common-lisp:nil
                       ((key-policies :initarg :key-policies :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-policies-map common-lisp:null)
                         :accessor
                         struct-shape-kms-key-configuration-key-policies :shape
                         "KmsKeyPoliciesMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grants :initarg :grants :initform common-lisp:nil
                         :type
                         (common-lisp:or kms-grant-configurations-list
                                         common-lisp:null)
                         :accessor struct-shape-kms-key-configuration-grants
                         :shape "KmsGrantConfigurationsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-kms-key-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'kms-key-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'kms-key-configuration 'make-kms-key-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kms-key-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kms-key-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-policies))
      (common-lisp:list
       (common-lisp:cons "keyPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grants))
      (common-lisp:list
       (common-lisp:cons "grants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kms-key-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kms-key-policies-map () 'common-lisp:hash-table)
 (common-lisp:defun make-kms-key-policies-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype kms-key-policy () 'common-lisp:string)
(common-lisp:deftype learn-more-link () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-access-preview-findings-request common-lisp:nil
                       ((access-preview-id :initarg :access-preview-id
                         :initform
                         (common-lisp:error ":accesspreviewid is required")
                         :type
                         (common-lisp:or access-preview-id common-lisp:null)
                         :accessor
                         struct-shape-list-access-preview-findings-request-access-preview-id
                         :shape "AccessPreviewId" :location "uri"
                         :location-name "accessPreviewId")
                        (analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         struct-shape-list-access-preview-findings-request-analyzer-arn
                         :shape "AnalyzerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or filter-criteria-map common-lisp:null)
                         :accessor
                         struct-shape-list-access-preview-findings-request-filter
                         :shape "FilterCriteriaMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-access-preview-findings-request-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-access-preview-findings-request-max-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-access-preview-findings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-access-preview-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-access-preview-findings-request
                    'make-list-access-preview-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-access-preview-findings-response common-lisp:nil
                       ((findings :initarg :findings :initform
                         (common-lisp:error ":findings is required") :type
                         (common-lisp:or access-preview-findings-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-access-preview-findings-response-findings
                         :shape "AccessPreviewFindingsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-access-preview-findings-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-access-preview-findings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-access-preview-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-access-preview-findings-response
                    'make-list-access-preview-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-preview-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-access-previews-request common-lisp:nil
                       ((analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         struct-shape-list-access-previews-request-analyzer-arn
                         :shape "AnalyzerArn" :location "querystring"
                         :location-name "analyzerArn")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-access-previews-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-access-previews-request-max-results
                         :shape "Integer" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-access-previews-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-access-previews-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-access-previews-request
                    'make-list-access-previews-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-access-previews-response common-lisp:nil
                       ((access-previews :initarg :access-previews :initform
                         (common-lisp:error ":accesspreviews is required")
                         :type
                         (common-lisp:or access-previews-list common-lisp:null)
                         :accessor
                         struct-shape-list-access-previews-response-access-previews
                         :shape "AccessPreviewsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-access-previews-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-access-previews-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-access-previews-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-access-previews-response
                    'make-list-access-previews-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-previews))
      (common-lisp:list
       (common-lisp:cons "accessPreviews"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-previews-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-analyzed-resources-request common-lisp:nil
                       ((analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         struct-shape-list-analyzed-resources-request-analyzer-arn
                         :shape "AnalyzerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-list-analyzed-resources-request-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-analyzed-resources-request-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-analyzed-resources-request-max-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-analyzed-resources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-analyzed-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-analyzed-resources-request
                    'make-list-analyzed-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-analyzed-resources-response common-lisp:nil
                       ((analyzed-resources :initarg :analyzed-resources
                         :initform
                         (common-lisp:error ":analyzedresources is required")
                         :type
                         (common-lisp:or analyzed-resources-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-analyzed-resources-response-analyzed-resources
                         :shape "AnalyzedResourcesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-analyzed-resources-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-analyzed-resources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-analyzed-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-analyzed-resources-response
                    'make-list-analyzed-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzed-resources))
      (common-lisp:list
       (common-lisp:cons "analyzedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzed-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-analyzers-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-analyzers-request-next-token :shape
                         "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-analyzers-request-max-results :shape
                         "Integer" :location "querystring" :location-name
                         "maxResults")
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or type common-lisp:null) :accessor
                         struct-shape-list-analyzers-request-type :shape "Type"
                         :location "querystring" :location-name "type"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-analyzers-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-analyzers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-analyzers-request 'make-list-analyzers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-analyzers-response common-lisp:nil
                       ((analyzers :initarg :analyzers :initform
                         (common-lisp:error ":analyzers is required") :type
                         (common-lisp:or analyzers-list common-lisp:null)
                         :accessor
                         struct-shape-list-analyzers-response-analyzers :shape
                         "AnalyzersList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-analyzers-response-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-analyzers-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-analyzers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-analyzers-response 'make-list-analyzers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzers))
      (common-lisp:list
       (common-lisp:cons "analyzers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-analyzers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-archive-rules-request common-lisp:nil
                       ((analyzer-name :initarg :analyzer-name :initform
                         (common-lisp:error ":analyzername is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-list-archive-rules-request-analyzer-name
                         :shape "Name" :location "uri" :location-name
                         "analyzerName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-archive-rules-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-archive-rules-request-max-results
                         :shape "Integer" :location "querystring"
                         :location-name "maxResults"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-archive-rules-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-archive-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-archive-rules-request
                    'make-list-archive-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-archive-rules-response common-lisp:nil
                       ((archive-rules :initarg :archive-rules :initform
                         (common-lisp:error ":archiverules is required") :type
                         (common-lisp:or archive-rules-list common-lisp:null)
                         :accessor
                         struct-shape-list-archive-rules-response-archive-rules
                         :shape "ArchiveRulesList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-archive-rules-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-archive-rules-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-archive-rules-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-archive-rules-response
                    'make-list-archive-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-rules))
      (common-lisp:list
       (common-lisp:cons "archiveRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-archive-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-request common-lisp:nil
                       ((analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         struct-shape-list-findings-request-analyzer-arn :shape
                         "AnalyzerArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or filter-criteria-map common-lisp:null)
                         :accessor struct-shape-list-findings-request-filter
                         :shape "FilterCriteriaMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort :initarg :sort :initform common-lisp:nil :type
                         (common-lisp:or sort-criteria common-lisp:null)
                         :accessor struct-shape-list-findings-request-sort
                         :shape "SortCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-findings-request-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-findings-request-max-results :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-findings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-findings-request 'make-list-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-response common-lisp:nil
                       ((findings :initarg :findings :initform
                         (common-lisp:error ":findings is required") :type
                         (common-lisp:or findings-list common-lisp:null)
                         :accessor struct-shape-list-findings-response-findings
                         :shape "FindingsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-findings-response-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-findings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-findings-response 'make-list-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-v2request common-lisp:nil
                       ((analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         struct-shape-list-findings-v2request-analyzer-arn
                         :shape "AnalyzerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filter :initarg :filter :initform common-lisp:nil
                         :type
                         (common-lisp:or filter-criteria-map common-lisp:null)
                         :accessor struct-shape-list-findings-v2request-filter
                         :shape "FilterCriteriaMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-list-findings-v2request-max-results
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-findings-v2request-next-token :shape
                         "Token" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort :initarg :sort :initform common-lisp:nil :type
                         (common-lisp:or sort-criteria common-lisp:null)
                         :accessor struct-shape-list-findings-v2request-sort
                         :shape "SortCriteria" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-findings-v2request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-findings-v2request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-findings-v2request 'make-list-findings-v2request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-v2request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-v2response common-lisp:nil
                       ((findings :initarg :findings :initform
                         (common-lisp:error ":findings is required") :type
                         (common-lisp:or findings-list-v2 common-lisp:null)
                         :accessor
                         struct-shape-list-findings-v2response-findings :shape
                         "FindingsListV2" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-findings-v2response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-findings-v2response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-findings-v2response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-findings-v2response 'make-list-findings-v2response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-v2response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-policy-generations-request common-lisp:nil
                       ((principal-arn :initarg :principal-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-arn common-lisp:null)
                         :accessor
                         struct-shape-list-policy-generations-request-principal-arn
                         :shape "PrincipalArn" :location "querystring"
                         :location-name "principalArn")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-policy-generations-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-policy-generations-request-max-results
                         :shape "ListPolicyGenerationsRequestMaxResultsInteger"
                         :location "querystring" :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-policy-generations-request-next-token
                         :shape "Token" :location "querystring" :location-name
                         "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policy-generations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-policy-generations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policy-generations-request
                    'make-list-policy-generations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-request))
   common-lisp:nil))
(common-lisp:deftype list-policy-generations-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-policy-generations-response common-lisp:nil
                       ((policy-generations :initarg :policy-generations
                         :initform
                         (common-lisp:error ":policygenerations is required")
                         :type
                         (common-lisp:or policy-generation-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-policy-generations-response-policy-generations
                         :shape "PolicyGenerationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-list-policy-generations-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-policy-generations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-policy-generations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-policy-generations-response
                    'make-list-policy-generations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-generations))
      (common-lisp:list
       (common-lisp:cons "policyGenerations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-generations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagsMap" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype locale () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass location common-lisp:nil
                       ((path :initarg :path :initform
                         (common-lisp:error ":path is required") :type
                         (common-lisp:or path-element-list common-lisp:null)
                         :accessor struct-shape-location-path :shape
                         "PathElementList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (span :initarg :span :initform
                         (common-lisp:error ":span is required") :type
                         (common-lisp:or span common-lisp:null) :accessor
                         struct-shape-location-span :shape "Span" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-location
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'location
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'location 'make-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'span))
      (common-lisp:list
       (common-lisp:cons "span"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype location-list () '(trivial-types:proper-list location))
 (common-lisp:defun make-location-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list location))
   aws-sdk/generator/shape::members))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-origin-configuration common-lisp:nil
                       ((vpc-configuration :initarg :vpc-configuration
                         :initform common-lisp:nil :type
                         (common-lisp:or vpc-configuration common-lisp:null)
                         :accessor
                         struct-shape-network-origin-configuration-vpc-configuration
                         :shape "VpcConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (internet-configuration :initarg
                         :internet-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or internet-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-network-origin-configuration-internet-configuration
                         :shape "InternetConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-network-origin-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'network-origin-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'network-origin-configuration
                    'make-network-origin-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-origin-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-origin-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "vpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internet-configuration))
      (common-lisp:list
       (common-lisp:cons "internetConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-origin-configuration))
   common-lisp:nil))
(common-lisp:deftype order-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass path-element common-lisp:nil
                       ((index :initarg :index :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-path-element-index :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-path-element-key :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (substring :initarg :substring :initform
                         common-lisp:nil :type
                         (common-lisp:or substring common-lisp:null) :accessor
                         struct-shape-path-element-substring :shape "Substring"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-path-element-value :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-path-element
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'path-element
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'path-element 'make-path-element))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input path-element))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input path-element))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index))
      (common-lisp:list
       (common-lisp:cons "index"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'substring))
      (common-lisp:list
       (common-lisp:cons "substring"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input path-element))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype path-element-list ()
   '(trivial-types:proper-list path-element))
 (common-lisp:defun make-path-element-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list path-element))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass policy-generation common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-policy-generation-job-id :shape "JobId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (principal-arn :initarg :principal-arn :initform
                         (common-lisp:error ":principalarn is required") :type
                         (common-lisp:or principal-arn common-lisp:null)
                         :accessor struct-shape-policy-generation-principal-arn
                         :shape "PrincipalArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or job-status common-lisp:null) :accessor
                         struct-shape-policy-generation-status :shape
                         "JobStatus" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (started-on :initarg :started-on :initform
                         (common-lisp:error ":startedon is required") :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-policy-generation-started-on :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (completed-on :initarg :completed-on :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-policy-generation-completed-on :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-generation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy-generation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'policy-generation 'make-policy-generation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-generation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-generation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-on))
      (common-lisp:list
       (common-lisp:cons "startedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-on))
      (common-lisp:list
       (common-lisp:cons "completedOn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-generation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass policy-generation-details common-lisp:nil
                       ((principal-arn :initarg :principal-arn :initform
                         (common-lisp:error ":principalarn is required") :type
                         (common-lisp:or principal-arn common-lisp:null)
                         :accessor
                         struct-shape-policy-generation-details-principal-arn
                         :shape "PrincipalArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-policy-generation-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'policy-generation-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'policy-generation-details
                    'make-policy-generation-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-generation-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-generation-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-generation-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-generation-list ()
   '(trivial-types:proper-list policy-generation))
 (common-lisp:defun make-policy-generation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-generation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:deftype policy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass position common-lisp:nil
                       ((line :initarg :line :initform
                         (common-lisp:error ":line is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-position-line :shape "Integer" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (column :initarg :column :initform
                         (common-lisp:error ":column is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-position-column :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (offset :initarg :offset :initform
                         (common-lisp:error ":offset is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-position-offset :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-position
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'position
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'position 'make-position))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input position))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input position))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line))
      (common-lisp:list
       (common-lisp:cons "line"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input position))
   common-lisp:nil))
(common-lisp:deftype principal-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principal-map () 'common-lisp:hash-table)
 (common-lisp:defun make-principal-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype rds-db-cluster-snapshot-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rds-db-cluster-snapshot-account-ids-list ()
   '(trivial-types:proper-list rds-db-cluster-snapshot-account-id))
 (common-lisp:defun make-rds-db-cluster-snapshot-account-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rds-db-cluster-snapshot-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rds-db-cluster-snapshot-attribute-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rds-db-cluster-snapshot-attribute-value common-lisp:nil
                       ((account-ids :initarg :account-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          rds-db-cluster-snapshot-account-ids-list
                          common-lisp:null)
                         :accessor
                         struct-shape-rds-db-cluster-snapshot-attribute-value-account-ids
                         :shape "RdsDbClusterSnapshotAccountIdsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-db-cluster-snapshot-attribute-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rds-db-cluster-snapshot-attribute-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-db-cluster-snapshot-attribute-value
                    'make-rds-db-cluster-snapshot-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rds-db-cluster-snapshot-attributes-map ()
   'common-lisp:hash-table)
 (common-lisp:defun make-rds-db-cluster-snapshot-attributes-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass rds-db-cluster-snapshot-configuration common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or rds-db-cluster-snapshot-attributes-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-rds-db-cluster-snapshot-configuration-attributes
                         :shape "RdsDbClusterSnapshotAttributesMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or rds-db-cluster-snapshot-kms-key-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-rds-db-cluster-snapshot-configuration-kms-key-id
                         :shape "RdsDbClusterSnapshotKmsKeyId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-db-cluster-snapshot-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rds-db-cluster-snapshot-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-db-cluster-snapshot-configuration
                    'make-rds-db-cluster-snapshot-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-cluster-snapshot-configuration))
   common-lisp:nil))
(common-lisp:deftype rds-db-cluster-snapshot-kms-key-id () 'common-lisp:string)
(common-lisp:deftype rds-db-snapshot-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rds-db-snapshot-account-ids-list ()
   '(trivial-types:proper-list rds-db-snapshot-account-id))
 (common-lisp:defun make-rds-db-snapshot-account-ids-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            rds-db-snapshot-account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rds-db-snapshot-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rds-db-snapshot-attribute-value common-lisp:nil
                       ((account-ids :initarg :account-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or rds-db-snapshot-account-ids-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-rds-db-snapshot-attribute-value-account-ids
                         :shape "RdsDbSnapshotAccountIdsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-db-snapshot-attribute-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rds-db-snapshot-attribute-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-db-snapshot-attribute-value
                    'make-rds-db-snapshot-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rds-db-snapshot-attributes-map ()
   'common-lisp:hash-table)
 (common-lisp:defun make-rds-db-snapshot-attributes-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass rds-db-snapshot-configuration common-lisp:nil
                       ((attributes :initarg :attributes :initform
                         common-lisp:nil :type
                         (common-lisp:or rds-db-snapshot-attributes-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-rds-db-snapshot-configuration-attributes
                         :shape "RdsDbSnapshotAttributesMap" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or rds-db-snapshot-kms-key-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-rds-db-snapshot-configuration-kms-key-id
                         :shape "RdsDbSnapshotKmsKeyId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-db-snapshot-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rds-db-snapshot-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-db-snapshot-configuration
                    'make-rds-db-snapshot-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-db-snapshot-configuration))
   common-lisp:nil))
(common-lisp:deftype rds-db-snapshot-kms-key-id () 'common-lisp:string)
(common-lisp:deftype reason-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reason-summary common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reason-summary-description :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (statement-index :initarg :statement-index :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-reason-summary-statement-index :shape
                         "Integer" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (statement-id :initarg :statement-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reason-summary-statement-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reason-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reason-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'reason-summary 'make-reason-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reason-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reason-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-index))
      (common-lisp:list
       (common-lisp:cons "statementIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statement-id))
      (common-lisp:list
       (common-lisp:cons "statementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reason-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reason-summary-list ()
   '(trivial-types:proper-list reason-summary))
 (common-lisp:defun make-reason-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reason-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype region-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-region-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype retiring-principal () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3access-point-configuration common-lisp:nil
                       ((access-point-policy :initarg :access-point-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or access-point-policy common-lisp:null)
                         :accessor
                         struct-shape-s3access-point-configuration-access-point-policy
                         :shape "AccessPointPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (public-access-block :initarg :public-access-block
                         :initform common-lisp:nil :type
                         (common-lisp:or s3public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3access-point-configuration-public-access-block
                         :shape "S3PublicAccessBlockConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (network-origin :initarg :network-origin :initform
                         common-lisp:nil :type
                         (common-lisp:or network-origin-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3access-point-configuration-network-origin
                         :shape "NetworkOriginConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3access-point-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3access-point-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3access-point-configuration
                    'make-s3access-point-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3access-point-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3access-point-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-point-policy))
      (common-lisp:list
       (common-lisp:cons "accessPointPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-access-block))
      (common-lisp:list
       (common-lisp:cons "publicAccessBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-origin))
      (common-lisp:list
       (common-lisp:cons "networkOrigin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3access-point-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3access-point-configurations-map ()
   'common-lisp:hash-table)
 (common-lisp:defun make-s3access-point-configurations-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass s3bucket-acl-grant-configuration common-lisp:nil
                       ((permission :initarg :permission :initform
                         (common-lisp:error ":permission is required") :type
                         (common-lisp:or acl-permission common-lisp:null)
                         :accessor
                         struct-shape-s3bucket-acl-grant-configuration-permission
                         :shape "AclPermission" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (grantee :initarg :grantee :initform
                         (common-lisp:error ":grantee is required") :type
                         (common-lisp:or acl-grantee common-lisp:null)
                         :accessor
                         struct-shape-s3bucket-acl-grant-configuration-grantee
                         :shape "AclGrantee" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3bucket-acl-grant-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      's3bucket-acl-grant-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3bucket-acl-grant-configuration
                    'make-s3bucket-acl-grant-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-acl-grant-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-acl-grant-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grantee))
      (common-lisp:list
       (common-lisp:cons "grantee"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-acl-grant-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype s3bucket-acl-grant-configurations-list ()
   '(trivial-types:proper-list s3bucket-acl-grant-configuration))
 (common-lisp:defun make-s3bucket-acl-grant-configurations-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            s3bucket-acl-grant-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass s3bucket-configuration common-lisp:nil
                       ((bucket-policy :initarg :bucket-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or s3bucket-policy common-lisp:null)
                         :accessor
                         struct-shape-s3bucket-configuration-bucket-policy
                         :shape "S3BucketPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (bucket-acl-grants :initarg :bucket-acl-grants
                         :initform common-lisp:nil :type
                         (common-lisp:or s3bucket-acl-grant-configurations-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3bucket-configuration-bucket-acl-grants
                         :shape "S3BucketAclGrantConfigurationsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (bucket-public-access-block :initarg
                         :bucket-public-access-block :initform common-lisp:nil
                         :type
                         (common-lisp:or s3public-access-block-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3bucket-configuration-bucket-public-access-block
                         :shape "S3PublicAccessBlockConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (access-points :initarg :access-points :initform
                         common-lisp:nil :type
                         (common-lisp:or s3access-point-configurations-map
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3bucket-configuration-access-points
                         :shape "S3AccessPointConfigurationsMap" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3bucket-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3bucket-configuration 'make-s3bucket-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-policy))
      (common-lisp:list
       (common-lisp:cons "bucketPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-acl-grants))
      (common-lisp:list
       (common-lisp:cons "bucketAclGrants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bucket-public-access-block))
      (common-lisp:list
       (common-lisp:cons "bucketPublicAccessBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-points))
      (common-lisp:list
       (common-lisp:cons "accessPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3bucket-configuration))
   common-lisp:nil))
(common-lisp:deftype s3bucket-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3express-directory-bucket-configuration common-lisp:nil
                       ((bucket-policy :initarg :bucket-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or s3express-directory-bucket-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-s3express-directory-bucket-configuration-bucket-policy
                         :shape "S3ExpressDirectoryBucketPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3express-directory-bucket-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      's3express-directory-bucket-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3express-directory-bucket-configuration
                    'make-s3express-directory-bucket-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3express-directory-bucket-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3express-directory-bucket-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-policy))
      (common-lisp:list
       (common-lisp:cons "bucketPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3express-directory-bucket-configuration))
   common-lisp:nil))
(common-lisp:deftype s3express-directory-bucket-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3public-access-block-configuration common-lisp:nil
                       ((ignore-public-acls :initarg :ignore-public-acls
                         :initform
                         (common-lisp:error ":ignorepublicacls is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-s3public-access-block-configuration-ignore-public-acls
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (restrict-public-buckets :initarg
                         :restrict-public-buckets :initform
                         (common-lisp:error
                          ":restrictpublicbuckets is required")
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-s3public-access-block-configuration-restrict-public-buckets
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-s3public-access-block-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      's3public-access-block-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 's3public-access-block-configuration
                    'make-s3public-access-block-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3public-access-block-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3public-access-block-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-public-acls))
      (common-lisp:list
       (common-lisp:cons "ignorePublicAcls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'restrict-public-buckets))
      (common-lisp:list
       (common-lisp:cons "restrictPublicBuckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3public-access-block-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass secrets-manager-secret-configuration common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or secrets-manager-secret-kms-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-secrets-manager-secret-configuration-kms-key-id
                         :shape "SecretsManagerSecretKmsId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (secret-policy :initarg :secret-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or secrets-manager-secret-policy
                                         common-lisp:null)
                         :accessor
                         struct-shape-secrets-manager-secret-configuration-secret-policy
                         :shape "SecretsManagerSecretPolicy" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-secrets-manager-secret-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'secrets-manager-secret-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'secrets-manager-secret-configuration
                    'make-secrets-manager-secret-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          secrets-manager-secret-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          secrets-manager-secret-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-policy))
      (common-lisp:list
       (common-lisp:cons "secretPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          secrets-manager-secret-configuration))
   common-lisp:nil))
(common-lisp:deftype secrets-manager-secret-kms-id () 'common-lisp:string)
(common-lisp:deftype secrets-manager-secret-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type)))
(common-lisp:progn
 (common-lisp:deftype shared-via-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-shared-via-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sns-topic-configuration common-lisp:nil
                       ((topic-policy :initarg :topic-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or sns-topic-policy common-lisp:null)
                         :accessor
                         struct-shape-sns-topic-configuration-topic-policy
                         :shape "SnsTopicPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sns-topic-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sns-topic-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sns-topic-configuration 'make-sns-topic-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sns-topic-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sns-topic-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-policy))
      (common-lisp:list
       (common-lisp:cons "topicPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sns-topic-configuration))
   common-lisp:nil))
(common-lisp:deftype sns-topic-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sort-criteria common-lisp:nil
                       ((attribute-name :initarg :attribute-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sort-criteria-attribute-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (order-by :initarg :order-by :initform common-lisp:nil
                         :type (common-lisp:or order-by common-lisp:null)
                         :accessor struct-shape-sort-criteria-order-by :shape
                         "OrderBy" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sort-criteria
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sort-criteria
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'sort-criteria 'make-sort-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass span common-lisp:nil
                       ((start :initarg :start :initform
                         (common-lisp:error ":start is required") :type
                         (common-lisp:or position common-lisp:null) :accessor
                         struct-shape-span-start :shape "Position" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (end :initarg :end :initform
                         (common-lisp:error ":end is required") :type
                         (common-lisp:or position common-lisp:null) :accessor
                         struct-shape-span-end :shape "Position" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-span (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'span
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'span 'make-span))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input span))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input span))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input span))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sqs-queue-configuration common-lisp:nil
                       ((queue-policy :initarg :queue-policy :initform
                         common-lisp:nil :type
                         (common-lisp:or sqs-queue-policy common-lisp:null)
                         :accessor
                         struct-shape-sqs-queue-configuration-queue-policy
                         :shape "SqsQueuePolicy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sqs-queue-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sqs-queue-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sqs-queue-configuration 'make-sqs-queue-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sqs-queue-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sqs-queue-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queue-policy))
      (common-lisp:list
       (common-lisp:cons "queuePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sqs-queue-configuration))
   common-lisp:nil))
(common-lisp:deftype sqs-queue-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-policy-generation-request common-lisp:nil
                       ((policy-generation-details :initarg
                         :policy-generation-details :initform
                         (common-lisp:error
                          ":policygenerationdetails is required")
                         :type
                         (common-lisp:or policy-generation-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-policy-generation-request-policy-generation-details
                         :shape "PolicyGenerationDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cloud-trail-details :initarg :cloud-trail-details
                         :initform common-lisp:nil :type
                         (common-lisp:or cloud-trail-details common-lisp:null)
                         :accessor
                         struct-shape-start-policy-generation-request-cloud-trail-details
                         :shape "CloudTrailDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-policy-generation-request-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-policy-generation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-policy-generation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-policy-generation-request
                    'make-start-policy-generation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policy-generation-details))
      (common-lisp:list
       (common-lisp:cons "policyGenerationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-trail-details))
      (common-lisp:list
       (common-lisp:cons "cloudTrailDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-policy-generation-response common-lisp:nil
                       ((job-id :initarg :job-id :initform
                         (common-lisp:error ":jobid is required") :type
                         (common-lisp:or job-id common-lisp:null) :accessor
                         struct-shape-start-policy-generation-response-job-id
                         :shape "JobId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-policy-generation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-policy-generation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-policy-generation-response
                    'make-start-policy-generation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-policy-generation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-resource-scan-request common-lisp:nil
                       ((analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         struct-shape-start-resource-scan-request-analyzer-arn
                         :shape "AnalyzerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-start-resource-scan-request-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-owner-account :initarg
                         :resource-owner-account :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-start-resource-scan-request-resource-owner-account
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-resource-scan-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'start-resource-scan-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-resource-scan-request
                    'make-start-resource-scan-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-scan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-scan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-owner-account))
      (common-lisp:list
       (common-lisp:cons "resourceOwnerAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-scan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass status-reason common-lisp:nil
                       ((code :initarg :code :initform
                         (common-lisp:error ":code is required") :type
                         (common-lisp:or reason-code common-lisp:null)
                         :accessor struct-shape-status-reason-code :shape
                         "ReasonCode" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-status-reason
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'status-reason
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'status-reason 'make-status-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input status-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input status-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input status-reason))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass substring common-lisp:nil
                       ((start :initarg :start :initform
                         (common-lisp:error ":start is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-substring-start :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (length :initarg :length :initform
                         (common-lisp:error ":length is required") :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-substring-length :shape "Integer"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-substring
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'substring
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'substring 'make-substring))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input substring))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input substring))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'length))
      (common-lisp:list
       (common-lisp:cons "length"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input substring))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list string))
 (common-lisp:defun make-tag-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "String" :location "uri" :location-name "resourceArn")
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagsMap" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tags-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-retry-after-seconds)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass trail common-lisp:nil
                       ((cloud-trail-arn :initarg :cloud-trail-arn :initform
                         (common-lisp:error ":cloudtrailarn is required") :type
                         (common-lisp:or cloud-trail-arn common-lisp:null)
                         :accessor struct-shape-trail-cloud-trail-arn :shape
                         "CloudTrailArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regions :initarg :regions :initform common-lisp:nil
                         :type (common-lisp:or region-list common-lisp:null)
                         :accessor struct-shape-trail-regions :shape
                         "RegionList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (all-regions :initarg :all-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-trail-all-regions :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'trail 'make-trail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-trail-arn))
      (common-lisp:list
       (common-lisp:cons "cloudTrailArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-regions))
      (common-lisp:list
       (common-lisp:cons "allRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trail-list () '(trivial-types:proper-list trail))
 (common-lisp:defun make-trail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass trail-properties common-lisp:nil
                       ((cloud-trail-arn :initarg :cloud-trail-arn :initform
                         (common-lisp:error ":cloudtrailarn is required") :type
                         (common-lisp:or cloud-trail-arn common-lisp:null)
                         :accessor
                         struct-shape-trail-properties-cloud-trail-arn :shape
                         "CloudTrailArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (regions :initarg :regions :initform common-lisp:nil
                         :type (common-lisp:or region-list common-lisp:null)
                         :accessor struct-shape-trail-properties-regions :shape
                         "RegionList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (all-regions :initarg :all-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-trail-properties-all-regions :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-trail-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'trail-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'trail-properties 'make-trail-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trail-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trail-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-trail-arn))
      (common-lisp:list
       (common-lisp:cons "cloudTrailArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-regions))
      (common-lisp:list
       (common-lisp:cons "allRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trail-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trail-properties-list ()
   '(trivial-types:proper-list trail-properties))
 (common-lisp:defun make-trail-properties-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trail-properties))
   aws-sdk/generator/shape::members))
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unprocessable-entity-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unprocessable-entity-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unprocessable-entity-exception
                    'unprocessable-entity-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resourcearn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "String" :location "uri" :location-name
                         "resourceArn")
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tagkeys is required") :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         struct-shape-untag-resource-request-tag-keys :shape
                         "TagKeys" :location "querystring" :location-name
                         "tagKeys"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unused-access-configuration common-lisp:nil
                       ((unused-access-age :initarg :unused-access-age
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-unused-access-configuration-unused-access-age
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unused-access-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unused-access-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unused-access-configuration
                    'make-unused-access-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unused-access-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unused-access-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unused-access-age))
      (common-lisp:list
       (common-lisp:cons "unusedAccessAge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unused-access-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unused-action common-lisp:nil
                       ((action :initarg :action :initform
                         (common-lisp:error ":action is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-unused-action-action :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-accessed :initarg :last-accessed :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-unused-action-last-accessed :shape
                         "Timestamp" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unused-action
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unused-action
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'unused-action 'make-unused-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unused-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unused-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-accessed))
      (common-lisp:list
       (common-lisp:cons "lastAccessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unused-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unused-action-list ()
   '(trivial-types:proper-list unused-action))
 (common-lisp:defun make-unused-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list unused-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass unused-iam-role-details common-lisp:nil
                       ((last-accessed :initarg :last-accessed :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-unused-iam-role-details-last-accessed
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unused-iam-role-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unused-iam-role-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unused-iam-role-details 'make-unused-iam-role-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unused-iam-role-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unused-iam-role-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-accessed))
      (common-lisp:list
       (common-lisp:cons "lastAccessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unused-iam-role-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unused-iam-user-access-key-details common-lisp:nil
                       ((access-key-id :initarg :access-key-id :initform
                         (common-lisp:error ":accesskeyid is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-unused-iam-user-access-key-details-access-key-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-accessed :initarg :last-accessed :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-unused-iam-user-access-key-details-last-accessed
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unused-iam-user-access-key-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'unused-iam-user-access-key-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unused-iam-user-access-key-details
                    'make-unused-iam-user-access-key-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unused-iam-user-access-key-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unused-iam-user-access-key-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-accessed))
      (common-lisp:list
       (common-lisp:cons "lastAccessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unused-iam-user-access-key-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unused-iam-user-password-details common-lisp:nil
                       ((last-accessed :initarg :last-accessed :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-unused-iam-user-password-details-last-accessed
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unused-iam-user-password-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'unused-iam-user-password-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unused-iam-user-password-details
                    'make-unused-iam-user-password-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unused-iam-user-password-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unused-iam-user-password-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-accessed))
      (common-lisp:list
       (common-lisp:cons "lastAccessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unused-iam-user-password-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unused-permission-details common-lisp:nil
                       ((actions :initarg :actions :initform common-lisp:nil
                         :type
                         (common-lisp:or unused-action-list common-lisp:null)
                         :accessor
                         struct-shape-unused-permission-details-actions :shape
                         "UnusedActionList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service-namespace :initarg :service-namespace
                         :initform
                         (common-lisp:error ":servicenamespace is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-unused-permission-details-service-namespace
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-accessed :initarg :last-accessed :initform
                         common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-unused-permission-details-last-accessed
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-unused-permission-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'unused-permission-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'unused-permission-details
                    'make-unused-permission-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unused-permission-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unused-permission-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "serviceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-accessed))
      (common-lisp:list
       (common-lisp:cons "lastAccessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unused-permission-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-archive-rule-request common-lisp:nil
                       ((analyzer-name :initarg :analyzer-name :initform
                         (common-lisp:error ":analyzername is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-archive-rule-request-analyzer-name
                         :shape "Name" :location "uri" :location-name
                         "analyzerName")
                        (rule-name :initarg :rule-name :initform
                         (common-lisp:error ":rulename is required") :type
                         (common-lisp:or name common-lisp:null) :accessor
                         struct-shape-update-archive-rule-request-rule-name
                         :shape "Name" :location "uri" :location-name
                         "ruleName")
                        (filter :initarg :filter :initform
                         (common-lisp:error ":filter is required") :type
                         (common-lisp:or filter-criteria-map common-lisp:null)
                         :accessor
                         struct-shape-update-archive-rule-request-filter :shape
                         "FilterCriteriaMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-archive-rule-request-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-archive-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-archive-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-archive-rule-request
                    'make-update-archive-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-archive-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-findings-request common-lisp:nil
                       ((analyzer-arn :initarg :analyzer-arn :initform
                         (common-lisp:error ":analyzerarn is required") :type
                         (common-lisp:or analyzer-arn common-lisp:null)
                         :accessor
                         struct-shape-update-findings-request-analyzer-arn
                         :shape "AnalyzerArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or finding-status-update
                                         common-lisp:null)
                         :accessor struct-shape-update-findings-request-status
                         :shape "FindingStatusUpdate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ids :initarg :ids :initform common-lisp:nil :type
                         (common-lisp:or finding-id-list common-lisp:null)
                         :accessor struct-shape-update-findings-request-ids
                         :shape "FindingIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         struct-shape-update-findings-request-resource-arn
                         :shape "ResourceArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-update-findings-request-client-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-findings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-findings-request 'make-update-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'analyzer-arn))
      (common-lisp:list
       (common-lisp:cons "analyzerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ids))
      (common-lisp:list
       (common-lisp:cons "ids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validate-policy-finding common-lisp:nil
                       ((finding-details :initarg :finding-details :initform
                         (common-lisp:error ":findingdetails is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-validate-policy-finding-finding-details
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (finding-type :initarg :finding-type :initform
                         (common-lisp:error ":findingtype is required") :type
                         (common-lisp:or validate-policy-finding-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-validate-policy-finding-finding-type
                         :shape "ValidatePolicyFindingType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (issue-code :initarg :issue-code :initform
                         (common-lisp:error ":issuecode is required") :type
                         (common-lisp:or issue-code common-lisp:null) :accessor
                         struct-shape-validate-policy-finding-issue-code :shape
                         "IssueCode" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (learn-more-link :initarg :learn-more-link :initform
                         (common-lisp:error ":learnmorelink is required") :type
                         (common-lisp:or learn-more-link common-lisp:null)
                         :accessor
                         struct-shape-validate-policy-finding-learn-more-link
                         :shape "LearnMoreLink" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (locations :initarg :locations :initform
                         (common-lisp:error ":locations is required") :type
                         (common-lisp:or location-list common-lisp:null)
                         :accessor
                         struct-shape-validate-policy-finding-locations :shape
                         "LocationList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-policy-finding
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validate-policy-finding
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-policy-finding 'make-validate-policy-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-details))
      (common-lisp:list
       (common-lisp:cons "findingDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-type))
      (common-lisp:list
       (common-lisp:cons "findingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issue-code))
      (common-lisp:list
       (common-lisp:cons "issueCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'learn-more-link))
      (common-lisp:list
       (common-lisp:cons "learnMoreLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locations))
      (common-lisp:list
       (common-lisp:cons "locations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-finding))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validate-policy-finding-list ()
   '(trivial-types:proper-list validate-policy-finding))
 (common-lisp:defun make-validate-policy-finding-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validate-policy-finding))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validate-policy-finding-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass validate-policy-request common-lisp:nil
                       ((locale :initarg :locale :initform common-lisp:nil
                         :type (common-lisp:or locale common-lisp:null)
                         :accessor struct-shape-validate-policy-request-locale
                         :shape "Locale" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-validate-policy-request-max-results
                         :shape "Integer" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-validate-policy-request-next-token :shape
                         "Token" :location "querystring" :location-name
                         "nextToken")
                        (policy-document :initarg :policy-document :initform
                         (common-lisp:error ":policydocument is required")
                         :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         struct-shape-validate-policy-request-policy-document
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-type :initarg :policy-type :initform
                         (common-lisp:error ":policytype is required") :type
                         (common-lisp:or policy-type common-lisp:null)
                         :accessor
                         struct-shape-validate-policy-request-policy-type
                         :shape "PolicyType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (validate-policy-resource-type :initarg
                         :validate-policy-resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or validate-policy-resource-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-validate-policy-request-validate-policy-resource-type
                         :shape "ValidatePolicyResourceType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validate-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-policy-request 'make-validate-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "policyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validate-policy-resource-type))
      (common-lisp:list
       (common-lisp:cons "validatePolicyResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-request))
   common-lisp:nil))
(common-lisp:deftype validate-policy-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass validate-policy-response common-lisp:nil
                       ((findings :initarg :findings :initform
                         (common-lisp:error ":findings is required") :type
                         (common-lisp:or validate-policy-finding-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-validate-policy-response-findings :shape
                         "ValidatePolicyFindingList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or token common-lisp:null) :accessor
                         struct-shape-validate-policy-response-next-token
                         :shape "Token" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validate-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validate-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validate-policy-response 'make-validate-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (accessanalyzer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)
      (field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason
                    'validation-exception-field-list)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-field common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-field-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-exception-field
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-field
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype value-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-configuration common-lisp:nil
                       ((vpc-id :initarg :vpc-id :initform
                         (common-lisp:error ":vpcid is required") :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         struct-shape-vpc-configuration-vpc-id :shape "VpcId"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-configuration 'make-vpc-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-configuration))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun apply-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn rule-name client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn rule-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-apply-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/archive-rule"
                                                        "ApplyArchiveRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'apply-archive-rule))
(common-lisp:progn
 (common-lisp:defun cancel-policy-generation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-policy-generation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/generation/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "CancelPolicyGeneration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-policy-generation))
(common-lisp:progn
 (common-lisp:defun check-access-not-granted
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-document access policy-type)
   (common-lisp:declare
    (common-lisp:ignorable policy-document access policy-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-check-access-not-granted-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/policy/check-access-not-granted"
                                                        "CheckAccessNotGranted"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'check-access-not-granted))
(common-lisp:progn
 (common-lisp:defun check-no-new-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key new-policy-document
                     existing-policy-document policy-type)
   (common-lisp:declare
    (common-lisp:ignorable new-policy-document existing-policy-document
     policy-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-check-no-new-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/policy/check-no-new-access"
                                                        "CheckNoNewAccess"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'check-no-new-access))
(common-lisp:progn
 (common-lisp:defun create-access-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn configurations client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn configurations client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-preview-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/access-preview"
                                                        "CreateAccessPreview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-access-preview))
(common-lisp:progn
 (common-lisp:defun create-analyzer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name type archive-rules tags
                     client-token configuration)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name type archive-rules tags client-token
     configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-analyzer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/analyzer"
                                                        "CreateAnalyzer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-analyzer))
(common-lisp:progn
 (common-lisp:defun create-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name rule-name filter
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name rule-name filter client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))))
                                                        "CreateArchiveRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-archive-rule))
(common-lisp:progn
 (common-lisp:defun delete-analyzer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name client-token)
   (common-lisp:declare (common-lisp:ignorable analyzer-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-analyzer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))))
                                                        "DeleteAnalyzer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-analyzer))
(common-lisp:progn
 (common-lisp:defun delete-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name rule-name client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name rule-name client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "DeleteArchiveRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-archive-rule))
(common-lisp:progn
 (common-lisp:defun get-access-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-preview-id analyzer-arn)
   (common-lisp:declare (common-lisp:ignorable access-preview-id analyzer-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-access-preview-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/access-preview/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'access-preview-id))))
                                                        "GetAccessPreview"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-access-preview))
(common-lisp:progn
 (common-lisp:defun get-analyzed-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn resource-arn)
   (common-lisp:declare (common-lisp:ignorable analyzer-arn resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-analyzed-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/analyzed-resource"
                                                        "GetAnalyzedResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-analyzed-resource))
(common-lisp:progn
 (common-lisp:defun get-analyzer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name)
   (common-lisp:declare (common-lisp:ignorable analyzer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-analyzer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))))
                                                        "GetAnalyzer"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-analyzer))
(common-lisp:progn
 (common-lisp:defun get-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name rule-name)
   (common-lisp:declare (common-lisp:ignorable analyzer-name rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "GetArchiveRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-archive-rule))
(common-lisp:progn
 (common-lisp:defun get-finding
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn id)
   (common-lisp:declare (common-lisp:ignorable analyzer-arn id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-finding-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/finding/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetFinding"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-finding))
(common-lisp:progn
 (common-lisp:defun get-finding-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-finding-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/findingv2/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetFindingV2"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-finding-v2))
(common-lisp:progn
 (common-lisp:defun get-generated-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id include-resource-placeholders
                     include-service-level-template)
   (common-lisp:declare
    (common-lisp:ignorable job-id include-resource-placeholders
     include-service-level-template))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-generated-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/policy/generation/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "GetGeneratedPolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-generated-policy))
(common-lisp:progn
 (common-lisp:defun list-access-preview-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-preview-id analyzer-arn filter
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable access-preview-id analyzer-arn filter next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-access-preview-findings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/access-preview/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'access-preview-id))))
                                                        "ListAccessPreviewFindings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-access-preview-findings))
(common-lisp:progn
 (common-lisp:defun list-access-previews
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-previews-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/access-preview"
                                                        "ListAccessPreviews"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-access-previews))
(common-lisp:progn
 (common-lisp:defun list-analyzed-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn resource-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn resource-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-analyzed-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/analyzed-resource"
                                                        "ListAnalyzedResources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-analyzed-resources))
(common-lisp:progn
 (common-lisp:defun list-analyzers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results type)
   (common-lisp:declare (common-lisp:ignorable next-token max-results type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-analyzers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/analyzer"
                                                        "ListAnalyzers"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-analyzers))
(common-lisp:progn
 (common-lisp:defun list-archive-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-archive-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))))
                                                        "ListArchiveRules"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-archive-rules))
(common-lisp:progn
 (common-lisp:defun list-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn filter sort next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn filter sort next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/finding"
                                                        "ListFindings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-findings))
(common-lisp:progn
 (common-lisp:defun list-findings-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn filter max-results
                     next-token sort)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn filter max-results next-token sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-findings-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/findingv2"
                                                        "ListFindingsV2"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-findings-v2))
(common-lisp:progn
 (common-lisp:defun list-policy-generations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable principal-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-generations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/policy/generation"
                                                        "ListPolicyGenerations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-policy-generations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-policy-generation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-generation-details
                     cloud-trail-details client-token)
   (common-lisp:declare
    (common-lisp:ignorable policy-generation-details cloud-trail-details
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-policy-generation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/policy/generation"
                                                        "StartPolicyGeneration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-policy-generation))
(common-lisp:progn
 (common-lisp:defun start-resource-scan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn resource-arn
                     resource-owner-account)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn resource-arn resource-owner-account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-resource-scan-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/resource/scan"
                                                        "StartResourceScan"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-resource-scan))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-archive-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-name rule-name filter
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-name rule-name filter client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-archive-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/analyzer/~A/archive-rule/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'analyzer-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'rule-name))))
                                                        "UpdateArchiveRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-archive-rule))
(common-lisp:progn
 (common-lisp:defun update-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key analyzer-arn status ids resource-arn
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable analyzer-arn status ids resource-arn client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/finding"
                                                        "UpdateFindings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-findings))
(common-lisp:progn
 (common-lisp:defun validate-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key locale max-results next-token
                     policy-document policy-type validate-policy-resource-type)
   (common-lisp:declare
    (common-lisp:ignorable locale max-results next-token policy-document
     policy-type validate-policy-resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-validate-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'accessanalyzer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/policy/validation"
                                                        "ValidatePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'validate-policy))
