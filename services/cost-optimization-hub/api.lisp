;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/cost-optimization-hub/api
  (:use)
  (:nicknames #:aws/cost-optimization-hub)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cost-optimization-hub/api)
(common-lisp:progn
 (common-lisp:define-condition cost-optimization-hub-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cost-optimization-hub-error))
(common-lisp:progn
 (common-lisp:defclass cost-optimization-hub-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "cost-optimization-hub"
                        :api-version "2022-07-26" :host-prefix
                        "cost-optimization-hub" :signing-name
                        "cost-optimization-hub" :global-host common-lisp:nil
                        :target-prefix "CostOptimizationHubService"
                        :json-version "1.0"))
 (common-lisp:export 'cost-optimization-hub-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (cost-optimization-hub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass account-enrollment-status common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-account-enrollment-status-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-timestamp :initarg :created-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         struct-shape-account-enrollment-status-created-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-timestamp :initarg
                         :last-updated-timestamp :initform common-lisp:nil
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         struct-shape-account-enrollment-status-last-updated-timestamp
                         :shape "Timestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or enrollment-status common-lisp:null)
                         :accessor
                         struct-shape-account-enrollment-status-status :shape
                         "EnrollmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-enrollment-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-enrollment-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-enrollment-status
                    'make-account-enrollment-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-enrollment-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-enrollment-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "createdTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-enrollment-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-enrollment-statuses ()
   '(trivial-types:proper-list account-enrollment-status))
 (common-lisp:defun make-account-enrollment-statuses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            account-enrollment-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype account-id-list ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun make-account-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype action-type-list ()
   '(trivial-types:proper-list action-type))
 (common-lisp:defun make-action-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass block-storage-performance-configuration common-lisp:nil
                       ((iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-block-storage-performance-configuration-iops
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (throughput :initarg :throughput :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-block-storage-performance-configuration-throughput
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-block-storage-performance-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'block-storage-performance-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'block-storage-performance-configuration
                    'make-block-storage-performance-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          block-storage-performance-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          block-storage-performance-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          block-storage-performance-configuration))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass compute-configuration common-lisp:nil
                       ((architecture :initarg :architecture :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-compute-configuration-architecture :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (memory-size-in-mb :initarg :memory-size-in-mb
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-compute-configuration-memory-size-in-mb
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-compute-configuration-platform
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (v-cpu :initarg :v-cpu :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-compute-configuration-v-cpu :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compute-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compute-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compute-configuration 'make-compute-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compute-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compute-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'architecture))
      (common-lisp:list
       (common-lisp:cons "architecture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-size-in-mb))
      (common-lisp:list
       (common-lisp:cons "memorySizeInMB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'v-cpu))
      (common-lisp:list
       (common-lisp:cons "vCpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compute-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass compute-savings-plans common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or compute-savings-plans-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-compute-savings-plans-configuration
                         :shape "ComputeSavingsPlansConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cost-calculation :initarg :cost-calculation :initform
                         common-lisp:nil :type
                         (common-lisp:or savings-plans-cost-calculation
                                         common-lisp:null)
                         :accessor
                         struct-shape-compute-savings-plans-cost-calculation
                         :shape "SavingsPlansCostCalculation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compute-savings-plans
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compute-savings-plans
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compute-savings-plans 'make-compute-savings-plans))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compute-savings-plans))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compute-savings-plans))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compute-savings-plans))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass compute-savings-plans-configuration common-lisp:nil
                       ((account-scope :initarg :account-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-compute-savings-plans-configuration-account-scope
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hourly-commitment :initarg :hourly-commitment
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-compute-savings-plans-configuration-hourly-commitment
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-compute-savings-plans-configuration-payment-option
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term :initarg :term :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-compute-savings-plans-configuration-term
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compute-savings-plans-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'compute-savings-plans-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compute-savings-plans-configuration
                    'make-compute-savings-plans-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compute-savings-plans-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compute-savings-plans-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hourly-commitment))
      (common-lisp:list
       (common-lisp:cons "hourlyCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compute-savings-plans-configuration))
   common-lisp:nil))
(common-lisp:deftype datetime () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defclass ebs-volume common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or ebs-volume-configuration
                                         common-lisp:null)
                         :accessor struct-shape-ebs-volume-configuration :shape
                         "EbsVolumeConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cost-calculation :initarg :cost-calculation :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-cost-calculation
                                         common-lisp:null)
                         :accessor struct-shape-ebs-volume-cost-calculation
                         :shape "ResourceCostCalculation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebs-volume
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebs-volume
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ebs-volume 'make-ebs-volume))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebs-volume))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebs-volume))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebs-volume))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ebs-volume-configuration common-lisp:nil
                       ((attachment-state :initarg :attachment-state :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ebs-volume-configuration-attachment-state
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (performance :initarg :performance :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          block-storage-performance-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-ebs-volume-configuration-performance
                         :shape "BlockStoragePerformanceConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (storage :initarg :storage :initform common-lisp:nil
                         :type
                         (common-lisp:or storage-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-ebs-volume-configuration-storage :shape
                         "StorageConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebs-volume-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebs-volume-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ebs-volume-configuration 'make-ebs-volume-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebs-volume-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebs-volume-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-state))
      (common-lisp:list
       (common-lisp:cons "attachmentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'performance))
      (common-lisp:list
       (common-lisp:cons "performance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage))
      (common-lisp:list
       (common-lisp:cons "storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebs-volume-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2auto-scaling-group common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2auto-scaling-group-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2auto-scaling-group-configuration
                         :shape "Ec2AutoScalingGroupConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cost-calculation :initarg :cost-calculation :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-cost-calculation
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2auto-scaling-group-cost-calculation
                         :shape "ResourceCostCalculation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2auto-scaling-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2auto-scaling-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2auto-scaling-group 'make-ec2auto-scaling-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2auto-scaling-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2auto-scaling-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2auto-scaling-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2auto-scaling-group-configuration common-lisp:nil
                       ((instance :initarg :instance :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2auto-scaling-group-configuration-instance
                         :shape "InstanceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2auto-scaling-group-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'ec2auto-scaling-group-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2auto-scaling-group-configuration
                    'make-ec2auto-scaling-group-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2auto-scaling-group-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2auto-scaling-group-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance))
      (common-lisp:list
       (common-lisp:cons "instance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2auto-scaling-group-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2instance common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2instance-configuration
                                         common-lisp:null)
                         :accessor struct-shape-ec2instance-configuration
                         :shape "Ec2InstanceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cost-calculation :initarg :cost-calculation :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-cost-calculation
                                         common-lisp:null)
                         :accessor struct-shape-ec2instance-cost-calculation
                         :shape "ResourceCostCalculation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ec2instance 'make-ec2instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ec2instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ec2instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ec2instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2instance-configuration common-lisp:nil
                       ((instance :initarg :instance :initform common-lisp:nil
                         :type
                         (common-lisp:or instance-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2instance-configuration-instance :shape
                         "InstanceConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2instance-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2instance-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2instance-configuration
                    'make-ec2instance-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance))
      (common-lisp:list
       (common-lisp:cons "instance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2instance-savings-plans common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          ec2instance-savings-plans-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-ec2instance-savings-plans-configuration
                         :shape "Ec2InstanceSavingsPlansConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cost-calculation :initarg :cost-calculation :initform
                         common-lisp:nil :type
                         (common-lisp:or savings-plans-cost-calculation
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2instance-savings-plans-cost-calculation
                         :shape "SavingsPlansCostCalculation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2instance-savings-plans
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2instance-savings-plans
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2instance-savings-plans
                    'make-ec2instance-savings-plans))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-savings-plans))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-savings-plans))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-savings-plans))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2instance-savings-plans-configuration common-lisp:nil
                       ((account-scope :initarg :account-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2instance-savings-plans-configuration-account-scope
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hourly-commitment :initarg :hourly-commitment
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2instance-savings-plans-configuration-hourly-commitment
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-family :initarg :instance-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2instance-savings-plans-configuration-instance-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2instance-savings-plans-configuration-payment-option
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (savings-plans-region :initarg :savings-plans-region
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2instance-savings-plans-configuration-savings-plans-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term :initarg :term :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2instance-savings-plans-configuration-term
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2instance-savings-plans-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'ec2instance-savings-plans-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2instance-savings-plans-configuration
                    'make-ec2instance-savings-plans-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-savings-plans-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-savings-plans-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hourly-commitment))
      (common-lisp:list
       (common-lisp:cons "hourlyCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "instanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-region))
      (common-lisp:list
       (common-lisp:cons "savingsPlansRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2instance-savings-plans-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2reserved-instances common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2reserved-instances-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2reserved-instances-configuration
                         :shape "Ec2ReservedInstancesConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cost-calculation :initarg :cost-calculation :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-instances-cost-calculation
                                         common-lisp:null)
                         :accessor
                         struct-shape-ec2reserved-instances-cost-calculation
                         :shape "ReservedInstancesCostCalculation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2reserved-instances
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ec2reserved-instances
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2reserved-instances 'make-ec2reserved-instances))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2reserved-instances))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2reserved-instances))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2reserved-instances))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ec2reserved-instances-configuration common-lisp:nil
                       ((account-scope :initarg :account-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2reserved-instances-configuration-account-scope
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-generation :initarg :current-generation
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2reserved-instances-configuration-current-generation
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-family :initarg :instance-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2reserved-instances-configuration-instance-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2reserved-instances-configuration-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monthly-recurring-cost :initarg
                         :monthly-recurring-cost :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-ec2reserved-instances-configuration-monthly-recurring-cost
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (normalized-units-to-purchase :initarg
                         :normalized-units-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2reserved-instances-configuration-normalized-units-to-purchase
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-instances-to-purchase :initarg
                         :number-of-instances-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2reserved-instances-configuration-number-of-instances-to-purchase
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (offering-class :initarg :offering-class :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2reserved-instances-configuration-offering-class
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2reserved-instances-configuration-payment-option
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (platform :initarg :platform :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-ec2reserved-instances-configuration-platform
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-instances-region :initarg
                         :reserved-instances-region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-ec2reserved-instances-configuration-reserved-instances-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service :initarg :service :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-ec2reserved-instances-configuration-service
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-flex-eligible :initarg :size-flex-eligible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-ec2reserved-instances-configuration-size-flex-eligible
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tenancy :initarg :tenancy :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-ec2reserved-instances-configuration-tenancy
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term :initarg :term :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2reserved-instances-configuration-term
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upfront-cost :initarg :upfront-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-ec2reserved-instances-configuration-upfront-cost
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ec2reserved-instances-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'ec2reserved-instances-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ec2reserved-instances-configuration
                    'make-ec2reserved-instances-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ec2reserved-instances-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ec2reserved-instances-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "currentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "instanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-recurring-cost))
      (common-lisp:list
       (common-lisp:cons "monthlyRecurringCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'normalized-units-to-purchase))
      (common-lisp:list
       (common-lisp:cons "normalizedUnitsToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-instances-to-purchase))
      (common-lisp:list
       (common-lisp:cons "numberOfInstancesToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-class))
      (common-lisp:list
       (common-lisp:cons "offeringClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-region))
      (common-lisp:list
       (common-lisp:cons "reservedInstancesRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "sizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tenancy))
      (common-lisp:list
       (common-lisp:cons "tenancy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "upfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ec2reserved-instances-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ecs-service common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or ecs-service-configuration
                                         common-lisp:null)
                         :accessor struct-shape-ecs-service-configuration
                         :shape "EcsServiceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cost-calculation :initarg :cost-calculation :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-cost-calculation
                                         common-lisp:null)
                         :accessor struct-shape-ecs-service-cost-calculation
                         :shape "ResourceCostCalculation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ecs-service
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ecs-service
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ecs-service 'make-ecs-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ecs-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ecs-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ecs-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ecs-service-configuration common-lisp:nil
                       ((compute :initarg :compute :initform common-lisp:nil
                         :type
                         (common-lisp:or compute-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-ecs-service-configuration-compute :shape
                         "ComputeConfiguration" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ecs-service-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ecs-service-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ecs-service-configuration
                    'make-ecs-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ecs-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ecs-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute))
      (common-lisp:list
       (common-lisp:cons "compute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ecs-service-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass elasti-cache-reserved-instances common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          elasti-cache-reserved-instances-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-elasti-cache-reserved-instances-configuration
                         :shape "ElastiCacheReservedInstancesConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cost-calculation :initarg :cost-calculation :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-instances-cost-calculation
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasti-cache-reserved-instances-cost-calculation
                         :shape "ReservedInstancesCostCalculation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elasti-cache-reserved-instances
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'elasti-cache-reserved-instances
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'elasti-cache-reserved-instances
                    'make-elasti-cache-reserved-instances))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-reserved-instances))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-reserved-instances))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-reserved-instances))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass elasti-cache-reserved-instances-configuration
                       common-lisp:nil
                       ((account-scope :initarg :account-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elasti-cache-reserved-instances-configuration-account-scope
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-generation :initarg :current-generation
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elasti-cache-reserved-instances-configuration-current-generation
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-family :initarg :instance-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elasti-cache-reserved-instances-configuration-instance-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elasti-cache-reserved-instances-configuration-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monthly-recurring-cost :initarg
                         :monthly-recurring-cost :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-elasti-cache-reserved-instances-configuration-monthly-recurring-cost
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (normalized-units-to-purchase :initarg
                         :normalized-units-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elasti-cache-reserved-instances-configuration-normalized-units-to-purchase
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-instances-to-purchase :initarg
                         :number-of-instances-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elasti-cache-reserved-instances-configuration-number-of-instances-to-purchase
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elasti-cache-reserved-instances-configuration-payment-option
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-instances-region :initarg
                         :reserved-instances-region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-elasti-cache-reserved-instances-configuration-reserved-instances-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service :initarg :service :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-elasti-cache-reserved-instances-configuration-service
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-flex-eligible :initarg :size-flex-eligible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-elasti-cache-reserved-instances-configuration-size-flex-eligible
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term :initarg :term :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elasti-cache-reserved-instances-configuration-term
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upfront-cost :initarg :upfront-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-elasti-cache-reserved-instances-configuration-upfront-cost
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elasti-cache-reserved-instances-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'elasti-cache-reserved-instances-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'elasti-cache-reserved-instances-configuration
                    'make-elasti-cache-reserved-instances-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-reserved-instances-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-reserved-instances-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "currentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "instanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-recurring-cost))
      (common-lisp:list
       (common-lisp:cons "monthlyRecurringCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'normalized-units-to-purchase))
      (common-lisp:list
       (common-lisp:cons "normalizedUnitsToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-instances-to-purchase))
      (common-lisp:list
       (common-lisp:cons "numberOfInstancesToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-region))
      (common-lisp:list
       (common-lisp:cons "reservedInstancesRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "sizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "upfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasti-cache-reserved-instances-configuration))
   common-lisp:nil))
(common-lisp:deftype enrollment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass estimated-discounts common-lisp:nil
                       ((other-discount :initarg :other-discount :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-estimated-discounts-other-discount :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reserved-instances-discount :initarg
                         :reserved-instances-discount :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         struct-shape-estimated-discounts-reserved-instances-discount
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (savings-plans-discount :initarg
                         :savings-plans-discount :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         struct-shape-estimated-discounts-savings-plans-discount
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-estimated-discounts
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'estimated-discounts
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'estimated-discounts 'make-estimated-discounts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input estimated-discounts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input estimated-discounts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'other-discount))
      (common-lisp:list
       (common-lisp:cons "otherDiscount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-discount))
      (common-lisp:list
       (common-lisp:cons "reservedInstancesDiscount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-plans-discount))
      (common-lisp:list
       (common-lisp:cons "savingsPlansDiscount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input estimated-discounts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((account-ids :initarg :account-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id-list common-lisp:null)
                         :accessor struct-shape-filter-account-ids :shape
                         "AccountIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-types :initarg :action-types :initform
                         common-lisp:nil :type
                         (common-lisp:or action-type-list common-lisp:null)
                         :accessor struct-shape-filter-action-types :shape
                         "ActionTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (implementation-efforts :initarg
                         :implementation-efforts :initform common-lisp:nil
                         :type
                         (common-lisp:or implementation-effort-list
                                         common-lisp:null)
                         :accessor struct-shape-filter-implementation-efforts
                         :shape "ImplementationEffortList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recommendation-ids :initarg :recommendation-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or recommendation-id-list
                                         common-lisp:null)
                         :accessor struct-shape-filter-recommendation-ids
                         :shape "RecommendationIdList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (regions :initarg :regions :initform common-lisp:nil
                         :type (common-lisp:or region-list common-lisp:null)
                         :accessor struct-shape-filter-regions :shape
                         "RegionList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arns :initarg :resource-arns :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-arn-list common-lisp:null)
                         :accessor struct-shape-filter-resource-arns :shape
                         "ResourceArnList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-ids :initarg :resource-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-list common-lisp:null)
                         :accessor struct-shape-filter-resource-ids :shape
                         "ResourceIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-types :initarg :resource-types :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type-list common-lisp:null)
                         :accessor struct-shape-filter-resource-types :shape
                         "ResourceTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (restart-needed :initarg :restart-needed :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-filter-restart-needed :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rollback-possible :initarg :rollback-possible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-filter-rollback-possible :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-filter-tags :shape "TagList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "accountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-types))
      (common-lisp:list
       (common-lisp:cons "actionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'implementation-efforts))
      (common-lisp:list
       (common-lisp:cons "implementationEfforts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-ids))
      (common-lisp:list
       (common-lisp:cons "recommendationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "resourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "resourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-needed))
      (common-lisp:list
       (common-lisp:cons "restartNeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-possible))
      (common-lisp:list
       (common-lisp:cons "rollbackPossible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-preferences-request common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-preferences-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-preferences-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-preferences-request 'make-get-preferences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-preferences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-preferences-response common-lisp:nil
                       ((member-account-discount-visibility :initarg
                         :member-account-discount-visibility :initform
                         common-lisp:nil :type
                         (common-lisp:or member-account-discount-visibility
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-preferences-response-member-account-discount-visibility
                         :shape "MemberAccountDiscountVisibility" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (savings-estimation-mode :initarg
                         :savings-estimation-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or savings-estimation-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-preferences-response-savings-estimation-mode
                         :shape "SavingsEstimationMode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-preferences-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-preferences-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-preferences-response 'make-get-preferences-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-preferences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-preferences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-account-discount-visibility))
      (common-lisp:list
       (common-lisp:cons "memberAccountDiscountVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-estimation-mode))
      (common-lisp:list
       (common-lisp:cons "savingsEstimationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-preferences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-recommendation-request common-lisp:nil
                       ((recommendation-id :initarg :recommendation-id
                         :initform
                         (common-lisp:error ":recommendationid is required")
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-recommendation-request-recommendation-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-recommendation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-recommendation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-recommendation-request
                    'make-get-recommendation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "recommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-recommendation-response common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-recommendation-response-account-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-type :initarg :action-type :initform
                         common-lisp:nil :type
                         (common-lisp:or action-type common-lisp:null)
                         :accessor
                         struct-shape-get-recommendation-response-action-type
                         :shape "ActionType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cost-calculation-lookback-period-in-days :initarg
                         :cost-calculation-lookback-period-in-days :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-recommendation-response-cost-calculation-lookback-period-in-days
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-recommendation-response-currency-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-resource-details :initarg
                         :current-resource-details :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-details common-lisp:null)
                         :accessor
                         struct-shape-get-recommendation-response-current-resource-details
                         :shape "ResourceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-resource-type :initarg :current-resource-type
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-get-recommendation-response-current-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-monthly-cost :initarg
                         :estimated-monthly-cost :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         struct-shape-get-recommendation-response-estimated-monthly-cost
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-monthly-savings :initarg
                         :estimated-monthly-savings :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         struct-shape-get-recommendation-response-estimated-monthly-savings
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-savings-over-cost-calculation-lookback-period
                         :initarg
                         :estimated-savings-over-cost-calculation-lookback-period
                         :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-get-recommendation-response-estimated-savings-over-cost-calculation-lookback-period
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-savings-percentage :initarg
                         :estimated-savings-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-get-recommendation-response-estimated-savings-percentage
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (implementation-effort :initarg :implementation-effort
                         :initform common-lisp:nil :type
                         (common-lisp:or implementation-effort
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-recommendation-response-implementation-effort
                         :shape "ImplementationEffort" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-refresh-timestamp :initarg
                         :last-refresh-timestamp :initform common-lisp:nil
                         :type (common-lisp:or datetime common-lisp:null)
                         :accessor
                         struct-shape-get-recommendation-response-last-refresh-timestamp
                         :shape "Datetime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommendation-id :initarg :recommendation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-recommendation-response-recommendation-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommendation-lookback-period-in-days :initarg
                         :recommendation-lookback-period-in-days :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-get-recommendation-response-recommendation-lookback-period-in-days
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-resource-details :initarg
                         :recommended-resource-details :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-details common-lisp:null)
                         :accessor
                         struct-shape-get-recommendation-response-recommended-resource-details
                         :shape "ResourceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-resource-type :initarg
                         :recommended-resource-type :initform common-lisp:nil
                         :type (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-get-recommendation-response-recommended-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-get-recommendation-response-region :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-recommendation-response-resource-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-recommendation-response-resource-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (restart-needed :initarg :restart-needed :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-recommendation-response-restart-needed
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (rollback-possible :initarg :rollback-possible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-get-recommendation-response-rollback-possible
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or source common-lisp:null)
                         :accessor
                         struct-shape-get-recommendation-response-source :shape
                         "Source" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-get-recommendation-response-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-recommendation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-recommendation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-recommendation-response
                    'make-get-recommendation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cost-calculation-lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "costCalculationLookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "currencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-resource-details))
      (common-lisp:list
       (common-lisp:cons "currentResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-resource-type))
      (common-lisp:list
       (common-lisp:cons "currentResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlyCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlySavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-over-cost-calculation-lookback-period))
      (common-lisp:list
       (common-lisp:cons "estimatedSavingsOverCostCalculationLookbackPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-percentage))
      (common-lisp:list
       (common-lisp:cons "estimatedSavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'implementation-effort))
      (common-lisp:list
       (common-lisp:cons "implementationEffort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-refresh-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastRefreshTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "recommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "recommendationLookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-resource-details))
      (common-lisp:list
       (common-lisp:cons "recommendedResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-resource-type))
      (common-lisp:list
       (common-lisp:cons "recommendedResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-needed))
      (common-lisp:list
       (common-lisp:cons "restartNeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-possible))
      (common-lisp:list
       (common-lisp:cons "rollbackPossible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendation-response))
   common-lisp:nil))
(common-lisp:deftype implementation-effort () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype implementation-effort-list ()
   '(trivial-types:proper-list implementation-effort))
 (common-lisp:defun make-implementation-effort-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list implementation-effort))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-configuration common-lisp:nil
                       ((type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-instance-configuration-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-configuration 'make-instance-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (cost-optimization-hub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass lambda-function common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-function-configuration
                                         common-lisp:null)
                         :accessor struct-shape-lambda-function-configuration
                         :shape "LambdaFunctionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cost-calculation :initarg :cost-calculation :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-cost-calculation
                                         common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-cost-calculation :shape
                         "ResourceCostCalculation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-function
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'lambda-function
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'lambda-function 'make-lambda-function))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-function))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-function))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-function))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lambda-function-configuration common-lisp:nil
                       ((compute :initarg :compute :initform common-lisp:nil
                         :type
                         (common-lisp:or compute-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-lambda-function-configuration-compute
                         :shape "ComputeConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-lambda-function-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'lambda-function-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'lambda-function-configuration
                    'make-lambda-function-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute))
      (common-lisp:list
       (common-lisp:cons "compute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lambda-function-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-enrollment-statuses-request common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-list-enrollment-statuses-request-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-organization-info :initarg
                         :include-organization-info :initform common-lisp:nil
                         :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         struct-shape-list-enrollment-statuses-request-include-organization-info
                         :shape "PrimitiveBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-enrollment-statuses-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-enrollment-statuses-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-enrollment-statuses-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-enrollment-statuses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-enrollment-statuses-request
                    'make-list-enrollment-statuses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-enrollment-statuses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-enrollment-statuses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-organization-info))
      (common-lisp:list
       (common-lisp:cons "includeOrganizationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-enrollment-statuses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-enrollment-statuses-response common-lisp:nil
                       ((include-member-accounts :initarg
                         :include-member-accounts :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-list-enrollment-statuses-response-include-member-accounts
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or account-enrollment-statuses
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-enrollment-statuses-response-items
                         :shape "AccountEnrollmentStatuses" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-enrollment-statuses-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-enrollment-statuses-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-enrollment-statuses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-enrollment-statuses-response
                    'make-list-enrollment-statuses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-enrollment-statuses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-enrollment-statuses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-member-accounts))
      (common-lisp:list
       (common-lisp:cons "includeMemberAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-enrollment-statuses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recommendation-summaries-request common-lisp:nil
                       ((filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or filter common-lisp:null)
                         :accessor
                         struct-shape-list-recommendation-summaries-request-filter
                         :shape "Filter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-by :initarg :group-by :initform
                         (common-lisp:error ":groupby is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-recommendation-summaries-request-group-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-recommendation-summaries-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-recommendation-summaries-request-max-results
                         :shape
                         "ListRecommendationSummariesRequestMaxResultsInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-recommendation-summaries-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-recommendation-summaries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recommendation-summaries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-recommendation-summaries-request
                    'make-list-recommendation-summaries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-summaries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-summaries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "groupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-summaries-request))
   common-lisp:nil))
(common-lisp:deftype list-recommendation-summaries-request-max-results-integer
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-recommendation-summaries-response common-lisp:nil
                       ((currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-recommendation-summaries-response-currency-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-total-deduped-savings :initarg
                         :estimated-total-deduped-savings :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-list-recommendation-summaries-response-estimated-total-deduped-savings
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group-by :initarg :group-by :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-list-recommendation-summaries-response-group-by
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or recommendation-summaries-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-recommendation-summaries-response-items
                         :shape "RecommendationSummariesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-recommendation-summaries-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-recommendation-summaries-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recommendation-summaries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-recommendation-summaries-response
                    'make-list-recommendation-summaries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-summaries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-summaries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "currencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-total-deduped-savings))
      (common-lisp:list
       (common-lisp:cons "estimatedTotalDedupedSavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by))
      (common-lisp:list
       (common-lisp:cons "groupBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendation-summaries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-recommendations-request common-lisp:nil
                       ((filter :initarg :filter :initform common-lisp:nil
                         :type (common-lisp:or filter common-lisp:null)
                         :accessor
                         struct-shape-list-recommendations-request-filter
                         :shape "Filter" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-all-recommendations :initarg
                         :include-all-recommendations :initform common-lisp:nil
                         :type
                         (common-lisp:or primitive-boolean common-lisp:null)
                         :accessor
                         struct-shape-list-recommendations-request-include-all-recommendations
                         :shape "PrimitiveBoolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          list-recommendations-request-max-results-integer
                          common-lisp:null)
                         :accessor
                         struct-shape-list-recommendations-request-max-results
                         :shape "ListRecommendationsRequestMaxResultsInteger"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-recommendations-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (order-by :initarg :order-by :initform common-lisp:nil
                         :type (common-lisp:or order-by common-lisp:null)
                         :accessor
                         struct-shape-list-recommendations-request-order-by
                         :shape "OrderBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-recommendations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-recommendations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-recommendations-request
                    'make-list-recommendations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-all-recommendations))
      (common-lisp:list
       (common-lisp:cons "includeAllRecommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order-by))
      (common-lisp:list
       (common-lisp:cons "orderBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-request))
   common-lisp:nil))
(common-lisp:deftype list-recommendations-request-max-results-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-recommendations-response common-lisp:nil
                       ((items :initarg :items :initform common-lisp:nil :type
                         (common-lisp:or recommendation-list common-lisp:null)
                         :accessor
                         struct-shape-list-recommendations-response-items
                         :shape "RecommendationList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-recommendations-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-recommendations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-recommendations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-recommendations-response
                    'make-list-recommendations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-recommendations-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype member-account-discount-visibility () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass open-search-reserved-instances common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          open-search-reserved-instances-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-open-search-reserved-instances-configuration
                         :shape "OpenSearchReservedInstancesConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cost-calculation :initarg :cost-calculation :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-instances-cost-calculation
                                         common-lisp:null)
                         :accessor
                         struct-shape-open-search-reserved-instances-cost-calculation
                         :shape "ReservedInstancesCostCalculation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-open-search-reserved-instances
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'open-search-reserved-instances
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'open-search-reserved-instances
                    'make-open-search-reserved-instances))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-search-reserved-instances))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-search-reserved-instances))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-search-reserved-instances))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass open-search-reserved-instances-configuration
                       common-lisp:nil
                       ((account-scope :initarg :account-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-open-search-reserved-instances-configuration-account-scope
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-generation :initarg :current-generation
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-open-search-reserved-instances-configuration-current-generation
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-open-search-reserved-instances-configuration-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monthly-recurring-cost :initarg
                         :monthly-recurring-cost :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-open-search-reserved-instances-configuration-monthly-recurring-cost
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (normalized-units-to-purchase :initarg
                         :normalized-units-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-open-search-reserved-instances-configuration-normalized-units-to-purchase
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-instances-to-purchase :initarg
                         :number-of-instances-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-open-search-reserved-instances-configuration-number-of-instances-to-purchase
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-open-search-reserved-instances-configuration-payment-option
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-instances-region :initarg
                         :reserved-instances-region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-open-search-reserved-instances-configuration-reserved-instances-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service :initarg :service :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-open-search-reserved-instances-configuration-service
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-flex-eligible :initarg :size-flex-eligible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-open-search-reserved-instances-configuration-size-flex-eligible
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term :initarg :term :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-open-search-reserved-instances-configuration-term
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upfront-cost :initarg :upfront-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-open-search-reserved-instances-configuration-upfront-cost
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-open-search-reserved-instances-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'open-search-reserved-instances-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'open-search-reserved-instances-configuration
                    'make-open-search-reserved-instances-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-search-reserved-instances-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-search-reserved-instances-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "currentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-recurring-cost))
      (common-lisp:list
       (common-lisp:cons "monthlyRecurringCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'normalized-units-to-purchase))
      (common-lisp:list
       (common-lisp:cons "normalizedUnitsToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-instances-to-purchase))
      (common-lisp:list
       (common-lisp:cons "numberOfInstancesToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-region))
      (common-lisp:list
       (common-lisp:cons "reservedInstancesRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "sizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "upfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-search-reserved-instances-configuration))
   common-lisp:nil))
(common-lisp:deftype order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass order-by common-lisp:nil
                       ((dimension :initarg :dimension :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-order-by-dimension :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (order :initarg :order :initform common-lisp:nil :type
                         (common-lisp:or order common-lisp:null) :accessor
                         struct-shape-order-by-order :shape "Order" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-order-by
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'order-by
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'order-by 'make-order-by))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input order-by))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input order-by))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension))
      (common-lisp:list
       (common-lisp:cons "dimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'order))
      (common-lisp:list
       (common-lisp:cons "order"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input order-by))
   common-lisp:nil))
(common-lisp:deftype primitive-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass rds-reserved-instances common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or rds-reserved-instances-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-rds-reserved-instances-configuration
                         :shape "RdsReservedInstancesConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cost-calculation :initarg :cost-calculation :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-instances-cost-calculation
                                         common-lisp:null)
                         :accessor
                         struct-shape-rds-reserved-instances-cost-calculation
                         :shape "ReservedInstancesCostCalculation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-reserved-instances
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'rds-reserved-instances
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-reserved-instances 'make-rds-reserved-instances))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-reserved-instances))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-reserved-instances))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-reserved-instances))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rds-reserved-instances-configuration common-lisp:nil
                       ((account-scope :initarg :account-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-reserved-instances-configuration-account-scope
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-generation :initarg :current-generation
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-reserved-instances-configuration-current-generation
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-edition :initarg :database-edition :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-reserved-instances-configuration-database-edition
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (database-engine :initarg :database-engine :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-reserved-instances-configuration-database-engine
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deployment-option :initarg :deployment-option
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-reserved-instances-configuration-deployment-option
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-family :initarg :instance-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-reserved-instances-configuration-instance-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-reserved-instances-configuration-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (license-model :initarg :license-model :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-reserved-instances-configuration-license-model
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monthly-recurring-cost :initarg
                         :monthly-recurring-cost :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-rds-reserved-instances-configuration-monthly-recurring-cost
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (normalized-units-to-purchase :initarg
                         :normalized-units-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-reserved-instances-configuration-normalized-units-to-purchase
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-instances-to-purchase :initarg
                         :number-of-instances-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-reserved-instances-configuration-number-of-instances-to-purchase
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-reserved-instances-configuration-payment-option
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-instances-region :initarg
                         :reserved-instances-region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-rds-reserved-instances-configuration-reserved-instances-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service :initarg :service :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-rds-reserved-instances-configuration-service
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-flex-eligible :initarg :size-flex-eligible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-rds-reserved-instances-configuration-size-flex-eligible
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term :initarg :term :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-reserved-instances-configuration-term
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upfront-cost :initarg :upfront-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-rds-reserved-instances-configuration-upfront-cost
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-rds-reserved-instances-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'rds-reserved-instances-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'rds-reserved-instances-configuration
                    'make-rds-reserved-instances-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rds-reserved-instances-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rds-reserved-instances-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "currentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-edition))
      (common-lisp:list
       (common-lisp:cons "databaseEdition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database-engine))
      (common-lisp:list
       (common-lisp:cons "databaseEngine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-option))
      (common-lisp:list
       (common-lisp:cons "deploymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "instanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-model))
      (common-lisp:list
       (common-lisp:cons "licenseModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-recurring-cost))
      (common-lisp:list
       (common-lisp:cons "monthlyRecurringCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'normalized-units-to-purchase))
      (common-lisp:list
       (common-lisp:cons "normalizedUnitsToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-instances-to-purchase))
      (common-lisp:list
       (common-lisp:cons "numberOfInstancesToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-region))
      (common-lisp:list
       (common-lisp:cons "reservedInstancesRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "sizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "upfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rds-reserved-instances-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recommendation common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-account-id :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (action-type :initarg :action-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-action-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-currency-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (current-resource-summary :initarg
                         :current-resource-summary :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-current-resource-summary
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-resource-type :initarg :current-resource-type
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-current-resource-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-monthly-cost :initarg
                         :estimated-monthly-cost :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         struct-shape-recommendation-estimated-monthly-cost
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-monthly-savings :initarg
                         :estimated-monthly-savings :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         struct-shape-recommendation-estimated-monthly-savings
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-savings-percentage :initarg
                         :estimated-savings-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-recommendation-estimated-savings-percentage
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (implementation-effort :initarg :implementation-effort
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-implementation-effort
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-refresh-timestamp :initarg
                         :last-refresh-timestamp :initform common-lisp:nil
                         :type (common-lisp:or datetime common-lisp:null)
                         :accessor
                         struct-shape-recommendation-last-refresh-timestamp
                         :shape "Datetime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommendation-id :initarg :recommendation-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-recommendation-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recommendation-lookback-period-in-days :initarg
                         :recommendation-lookback-period-in-days :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-recommendation-recommendation-lookback-period-in-days
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-resource-summary :initarg
                         :recommended-resource-summary :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-recommended-resource-summary
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recommended-resource-type :initarg
                         :recommended-resource-type :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-recommendation-recommended-resource-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-recommendation-region :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-resource-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-resource-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (restart-needed :initarg :restart-needed :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-recommendation-restart-needed :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (rollback-possible :initarg :rollback-possible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-recommendation-rollback-possible :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source :initarg :source :initform common-lisp:nil
                         :type (common-lisp:or source common-lisp:null)
                         :accessor struct-shape-recommendation-source :shape
                         "Source" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-recommendation-tags :shape "TagList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommendation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'recommendation 'make-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "actionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "currencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-resource-summary))
      (common-lisp:list
       (common-lisp:cons "currentResourceSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-resource-type))
      (common-lisp:list
       (common-lisp:cons "currentResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlyCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlySavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-savings-percentage))
      (common-lisp:list
       (common-lisp:cons "estimatedSavingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'implementation-effort))
      (common-lisp:list
       (common-lisp:cons "implementationEffort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-refresh-timestamp))
      (common-lisp:list
       (common-lisp:cons "lastRefreshTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "recommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-lookback-period-in-days))
      (common-lisp:list
       (common-lisp:cons "recommendationLookbackPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-resource-summary))
      (common-lisp:list
       (common-lisp:cons "recommendedResourceSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommended-resource-type))
      (common-lisp:list
       (common-lisp:cons "recommendedResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-needed))
      (common-lisp:list
       (common-lisp:cons "restartNeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-possible))
      (common-lisp:list
       (common-lisp:cons "rollbackPossible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-id-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-recommendation-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype recommendation-list ()
   '(trivial-types:proper-list recommendation))
 (common-lisp:defun make-recommendation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype recommendation-summaries-list ()
   '(trivial-types:proper-list recommendation-summary))
 (common-lisp:defun make-recommendation-summaries-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recommendation-summary common-lisp:nil
                       ((estimated-monthly-savings :initarg
                         :estimated-monthly-savings :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         struct-shape-recommendation-summary-estimated-monthly-savings
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (group :initarg :group :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-recommendation-summary-group :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recommendation-count :initarg :recommendation-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-recommendation-summary-recommendation-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recommendation-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recommendation-summary 'make-recommendation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlySavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recommendation-count))
      (common-lisp:list
       (common-lisp:cons "recommendationCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redshift-reserved-instances common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          redshift-reserved-instances-configuration
                          common-lisp:null)
                         :accessor
                         struct-shape-redshift-reserved-instances-configuration
                         :shape "RedshiftReservedInstancesConfiguration"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cost-calculation :initarg :cost-calculation :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-instances-cost-calculation
                                         common-lisp:null)
                         :accessor
                         struct-shape-redshift-reserved-instances-cost-calculation
                         :shape "ReservedInstancesCostCalculation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redshift-reserved-instances
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'redshift-reserved-instances
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redshift-reserved-instances
                    'make-redshift-reserved-instances))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-reserved-instances))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-reserved-instances))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-reserved-instances))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass redshift-reserved-instances-configuration
                       common-lisp:nil
                       ((account-scope :initarg :account-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-reserved-instances-configuration-account-scope
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (current-generation :initarg :current-generation
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-reserved-instances-configuration-current-generation
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-family :initarg :instance-family :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-reserved-instances-configuration-instance-family
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-reserved-instances-configuration-instance-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monthly-recurring-cost :initarg
                         :monthly-recurring-cost :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-redshift-reserved-instances-configuration-monthly-recurring-cost
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (normalized-units-to-purchase :initarg
                         :normalized-units-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-reserved-instances-configuration-normalized-units-to-purchase
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (number-of-instances-to-purchase :initarg
                         :number-of-instances-to-purchase :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-reserved-instances-configuration-number-of-instances-to-purchase
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-reserved-instances-configuration-payment-option
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-instances-region :initarg
                         :reserved-instances-region :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-redshift-reserved-instances-configuration-reserved-instances-region
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (service :initarg :service :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-redshift-reserved-instances-configuration-service
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (size-flex-eligible :initarg :size-flex-eligible
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-redshift-reserved-instances-configuration-size-flex-eligible
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term :initarg :term :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-reserved-instances-configuration-term
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upfront-cost :initarg :upfront-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-redshift-reserved-instances-configuration-upfront-cost
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-redshift-reserved-instances-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'redshift-reserved-instances-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'redshift-reserved-instances-configuration
                    'make-redshift-reserved-instances-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-reserved-instances-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-reserved-instances-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-generation))
      (common-lisp:list
       (common-lisp:cons "currentGeneration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-family))
      (common-lisp:list
       (common-lisp:cons "instanceFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-recurring-cost))
      (common-lisp:list
       (common-lisp:cons "monthlyRecurringCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'normalized-units-to-purchase))
      (common-lisp:list
       (common-lisp:cons "normalizedUnitsToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-instances-to-purchase))
      (common-lisp:list
       (common-lisp:cons "numberOfInstancesToPurchase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instances-region))
      (common-lisp:list
       (common-lisp:cons "reservedInstancesRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-flex-eligible))
      (common-lisp:list
       (common-lisp:cons "sizeFlexEligible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upfront-cost))
      (common-lisp:list
       (common-lisp:cons "upfrontCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-reserved-instances-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype region-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-region-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reserved-instances-cost-calculation common-lisp:nil
                       ((pricing :initarg :pricing :initform common-lisp:nil
                         :type
                         (common-lisp:or reserved-instances-pricing
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-instances-cost-calculation-pricing
                         :shape "ReservedInstancesPricing" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-instances-cost-calculation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reserved-instances-cost-calculation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-instances-cost-calculation
                    'make-reserved-instances-cost-calculation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-cost-calculation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-cost-calculation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing))
      (common-lisp:list
       (common-lisp:cons "pricing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-cost-calculation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reserved-instances-pricing common-lisp:nil
                       ((estimated-monthly-amortized-reservation-cost :initarg
                         :estimated-monthly-amortized-reservation-cost
                         :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-instances-pricing-estimated-monthly-amortized-reservation-cost
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-on-demand-cost :initarg
                         :estimated-on-demand-cost :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         struct-shape-reserved-instances-pricing-estimated-on-demand-cost
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monthly-reservation-eligible-cost :initarg
                         :monthly-reservation-eligible-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-instances-pricing-monthly-reservation-eligible-cost
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (savings-percentage :initarg :savings-percentage
                         :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-instances-pricing-savings-percentage
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-instances-pricing
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'reserved-instances-pricing
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-instances-pricing
                    'make-reserved-instances-pricing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-pricing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-pricing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-amortized-reservation-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlyAmortizedReservationCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedOnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-reservation-eligible-cost))
      (common-lisp:list
       (common-lisp:cons "monthlyReservationEligibleCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings-percentage))
      (common-lisp:list
       (common-lisp:cons "savingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instances-pricing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-arn-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-resource-arn-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource-cost-calculation common-lisp:nil
                       ((pricing :initarg :pricing :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-pricing common-lisp:null)
                         :accessor
                         struct-shape-resource-cost-calculation-pricing :shape
                         "ResourcePricing" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (usages :initarg :usages :initform common-lisp:nil
                         :type (common-lisp:or usage-list common-lisp:null)
                         :accessor
                         struct-shape-resource-cost-calculation-usages :shape
                         "UsageList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-cost-calculation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-cost-calculation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-cost-calculation
                    'make-resource-cost-calculation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-cost-calculation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-cost-calculation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing))
      (common-lisp:list
       (common-lisp:cons "pricing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usages))
      (common-lisp:list
       (common-lisp:cons "usages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-cost-calculation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-details common-lisp:nil
                       ((compute-savings-plans :initarg :compute-savings-plans
                         :initform common-lisp:nil :type
                         (common-lisp:or compute-savings-plans
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-details-compute-savings-plans
                         :shape "ComputeSavingsPlans" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ebs-volume :initarg :ebs-volume :initform
                         common-lisp:nil :type
                         (common-lisp:or ebs-volume common-lisp:null) :accessor
                         struct-shape-resource-details-ebs-volume :shape
                         "EbsVolume" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (ec2auto-scaling-group :initarg :ec2auto-scaling-group
                         :initform common-lisp:nil :type
                         (common-lisp:or ec2auto-scaling-group
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-details-ec2auto-scaling-group
                         :shape "Ec2AutoScalingGroup" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2instance :initarg :ec2instance :initform
                         common-lisp:nil :type
                         (common-lisp:or ec2instance common-lisp:null)
                         :accessor struct-shape-resource-details-ec2instance
                         :shape "Ec2Instance" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ec2instance-savings-plans :initarg
                         :ec2instance-savings-plans :initform common-lisp:nil
                         :type
                         (common-lisp:or ec2instance-savings-plans
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-details-ec2instance-savings-plans
                         :shape "Ec2InstanceSavingsPlans" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ec2reserved-instances :initarg :ec2reserved-instances
                         :initform common-lisp:nil :type
                         (common-lisp:or ec2reserved-instances
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-details-ec2reserved-instances
                         :shape "Ec2ReservedInstances" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ecs-service :initarg :ecs-service :initform
                         common-lisp:nil :type
                         (common-lisp:or ecs-service common-lisp:null)
                         :accessor struct-shape-resource-details-ecs-service
                         :shape "EcsService" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elasti-cache-reserved-instances :initarg
                         :elasti-cache-reserved-instances :initform
                         common-lisp:nil :type
                         (common-lisp:or elasti-cache-reserved-instances
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-details-elasti-cache-reserved-instances
                         :shape "ElastiCacheReservedInstances" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-function :initarg :lambda-function :initform
                         common-lisp:nil :type
                         (common-lisp:or lambda-function common-lisp:null)
                         :accessor
                         struct-shape-resource-details-lambda-function :shape
                         "LambdaFunction" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (open-search-reserved-instances :initarg
                         :open-search-reserved-instances :initform
                         common-lisp:nil :type
                         (common-lisp:or open-search-reserved-instances
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-details-open-search-reserved-instances
                         :shape "OpenSearchReservedInstances" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rds-reserved-instances :initarg
                         :rds-reserved-instances :initform common-lisp:nil
                         :type
                         (common-lisp:or rds-reserved-instances
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-details-rds-reserved-instances
                         :shape "RdsReservedInstances" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (redshift-reserved-instances :initarg
                         :redshift-reserved-instances :initform common-lisp:nil
                         :type
                         (common-lisp:or redshift-reserved-instances
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-details-redshift-reserved-instances
                         :shape "RedshiftReservedInstances" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (sage-maker-savings-plans :initarg
                         :sage-maker-savings-plans :initform common-lisp:nil
                         :type
                         (common-lisp:or sage-maker-savings-plans
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-details-sage-maker-savings-plans
                         :shape "SageMakerSavingsPlans" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-details 'make-resource-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compute-savings-plans))
      (common-lisp:list
       (common-lisp:cons "computeSavingsPlans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-volume))
      (common-lisp:list
       (common-lisp:cons "ebsVolume"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2auto-scaling-group))
      (common-lisp:list
       (common-lisp:cons "ec2AutoScalingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2instance))
      (common-lisp:list
       (common-lisp:cons "ec2Instance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2instance-savings-plans))
      (common-lisp:list
       (common-lisp:cons "ec2InstanceSavingsPlans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ec2reserved-instances))
      (common-lisp:list
       (common-lisp:cons "ec2ReservedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecs-service))
      (common-lisp:list
       (common-lisp:cons "ecsService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasti-cache-reserved-instances))
      (common-lisp:list
       (common-lisp:cons "elastiCacheReservedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function))
      (common-lisp:list
       (common-lisp:cons "lambdaFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-search-reserved-instances))
      (common-lisp:list
       (common-lisp:cons "openSearchReservedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-reserved-instances))
      (common-lisp:list
       (common-lisp:cons "rdsReservedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-reserved-instances))
      (common-lisp:list
       (common-lisp:cons "redshiftReservedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sage-maker-savings-plans))
      (common-lisp:list
       (common-lisp:cons "sageMakerSavingsPlans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-id-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-resource-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (cost-optimization-hub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id)))
(common-lisp:progn
 (common-lisp:defclass resource-pricing common-lisp:nil
                       ((estimated-cost-after-discounts :initarg
                         :estimated-cost-after-discounts :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-resource-pricing-estimated-cost-after-discounts
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-cost-before-discounts :initarg
                         :estimated-cost-before-discounts :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-resource-pricing-estimated-cost-before-discounts
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-discounts :initarg :estimated-discounts
                         :initform common-lisp:nil :type
                         (common-lisp:or estimated-discounts common-lisp:null)
                         :accessor
                         struct-shape-resource-pricing-estimated-discounts
                         :shape "EstimatedDiscounts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-net-unused-amortized-commitments :initarg
                         :estimated-net-unused-amortized-commitments :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-resource-pricing-estimated-net-unused-amortized-commitments
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-pricing
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-pricing
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-pricing 'make-resource-pricing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-pricing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-pricing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-cost-after-discounts))
      (common-lisp:list
       (common-lisp:cons "estimatedCostAfterDiscounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-cost-before-discounts))
      (common-lisp:list
       (common-lisp:cons "estimatedCostBeforeDiscounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'estimated-discounts))
      (common-lisp:list
       (common-lisp:cons "estimatedDiscounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-net-unused-amortized-commitments))
      (common-lisp:list
       (common-lisp:cons "estimatedNetUnusedAmortizedCommitments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-pricing))
   common-lisp:nil))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-type-list ()
   '(trivial-types:proper-list resource-type))
 (common-lisp:defun make-resource-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sage-maker-savings-plans common-lisp:nil
                       ((configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or sage-maker-savings-plans-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-sage-maker-savings-plans-configuration
                         :shape "SageMakerSavingsPlansConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cost-calculation :initarg :cost-calculation :initform
                         common-lisp:nil :type
                         (common-lisp:or savings-plans-cost-calculation
                                         common-lisp:null)
                         :accessor
                         struct-shape-sage-maker-savings-plans-cost-calculation
                         :shape "SavingsPlansCostCalculation" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sage-maker-savings-plans
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'sage-maker-savings-plans
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sage-maker-savings-plans 'make-sage-maker-savings-plans))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-savings-plans))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-savings-plans))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-calculation))
      (common-lisp:list
       (common-lisp:cons "costCalculation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-savings-plans))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sage-maker-savings-plans-configuration common-lisp:nil
                       ((account-scope :initarg :account-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sage-maker-savings-plans-configuration-account-scope
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (hourly-commitment :initarg :hourly-commitment
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sage-maker-savings-plans-configuration-hourly-commitment
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sage-maker-savings-plans-configuration-payment-option
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (term :initarg :term :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-sage-maker-savings-plans-configuration-term
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-sage-maker-savings-plans-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'sage-maker-savings-plans-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'sage-maker-savings-plans-configuration
                    'make-sage-maker-savings-plans-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-savings-plans-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-savings-plans-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-scope))
      (common-lisp:list
       (common-lisp:cons "accountScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hourly-commitment))
      (common-lisp:list
       (common-lisp:cons "hourlyCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "paymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'term))
      (common-lisp:list
       (common-lisp:cons "term"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sage-maker-savings-plans-configuration))
   common-lisp:nil))
(common-lisp:deftype savings-estimation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass savings-plans-cost-calculation common-lisp:nil
                       ((pricing :initarg :pricing :initform common-lisp:nil
                         :type
                         (common-lisp:or savings-plans-pricing
                                         common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-cost-calculation-pricing
                         :shape "SavingsPlansPricing" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-cost-calculation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'savings-plans-cost-calculation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-cost-calculation
                    'make-savings-plans-cost-calculation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-cost-calculation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-cost-calculation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing))
      (common-lisp:list
       (common-lisp:cons "pricing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-cost-calculation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass savings-plans-pricing common-lisp:nil
                       ((estimated-monthly-commitment :initarg
                         :estimated-monthly-commitment :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-savings-plans-pricing-estimated-monthly-commitment
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (estimated-on-demand-cost :initarg
                         :estimated-on-demand-cost :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         struct-shape-savings-plans-pricing-estimated-on-demand-cost
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (monthly-savings-plans-eligible-cost :initarg
                         :monthly-savings-plans-eligible-cost :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-savings-plans-pricing-monthly-savings-plans-eligible-cost
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (savings-percentage :initarg :savings-percentage
                         :initform common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-savings-plans-pricing-savings-percentage
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-savings-plans-pricing
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'savings-plans-pricing
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'savings-plans-pricing 'make-savings-plans-pricing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-pricing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-pricing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-commitment))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlyCommitment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-on-demand-cost))
      (common-lisp:list
       (common-lisp:cons "estimatedOnDemandCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monthly-savings-plans-eligible-cost))
      (common-lisp:list
       (common-lisp:cons "monthlySavingsPlansEligibleCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'savings-percentage))
      (common-lisp:list
       (common-lisp:cons "savingsPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          savings-plans-pricing))
   common-lisp:nil))
(common-lisp:deftype source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass storage-configuration common-lisp:nil
                       ((size-in-gb :initarg :size-in-gb :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-storage-configuration-size-in-gb :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (type :initarg :type :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-storage-configuration-type :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-storage-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'storage-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'storage-configuration 'make-storage-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          storage-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          storage-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          storage-configuration))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-key :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-tag-value :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (cost-optimization-hub-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-enrollment-status-request common-lisp:nil
                       ((include-member-accounts :initarg
                         :include-member-accounts :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-update-enrollment-status-request-include-member-accounts
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or enrollment-status common-lisp:null)
                         :accessor
                         struct-shape-update-enrollment-status-request-status
                         :shape "EnrollmentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-enrollment-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-enrollment-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-enrollment-status-request
                    'make-update-enrollment-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-enrollment-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-enrollment-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-member-accounts))
      (common-lisp:list
       (common-lisp:cons "includeMemberAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-enrollment-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-enrollment-status-response common-lisp:nil
                       ((status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-update-enrollment-status-response-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-enrollment-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-enrollment-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-enrollment-status-response
                    'make-update-enrollment-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-enrollment-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-enrollment-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-enrollment-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-preferences-request common-lisp:nil
                       ((member-account-discount-visibility :initarg
                         :member-account-discount-visibility :initform
                         common-lisp:nil :type
                         (common-lisp:or member-account-discount-visibility
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-preferences-request-member-account-discount-visibility
                         :shape "MemberAccountDiscountVisibility" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (savings-estimation-mode :initarg
                         :savings-estimation-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or savings-estimation-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-preferences-request-savings-estimation-mode
                         :shape "SavingsEstimationMode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-preferences-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-preferences-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-preferences-request
                    'make-update-preferences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-preferences-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-account-discount-visibility))
      (common-lisp:list
       (common-lisp:cons "memberAccountDiscountVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-estimation-mode))
      (common-lisp:list
       (common-lisp:cons "savingsEstimationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-preferences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-preferences-response common-lisp:nil
                       ((member-account-discount-visibility :initarg
                         :member-account-discount-visibility :initform
                         common-lisp:nil :type
                         (common-lisp:or member-account-discount-visibility
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-preferences-response-member-account-discount-visibility
                         :shape "MemberAccountDiscountVisibility" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (savings-estimation-mode :initarg
                         :savings-estimation-mode :initform common-lisp:nil
                         :type
                         (common-lisp:or savings-estimation-mode
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-preferences-response-savings-estimation-mode
                         :shape "SavingsEstimationMode" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-preferences-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-preferences-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-preferences-response
                    'make-update-preferences-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-preferences-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-preferences-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-account-discount-visibility))
      (common-lisp:list
       (common-lisp:cons "memberAccountDiscountVisibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'savings-estimation-mode))
      (common-lisp:list
       (common-lisp:cons "savingsEstimationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-preferences-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass usage common-lisp:nil
                       ((operation :initarg :operation :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-usage-operation :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (product-code :initarg :product-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-usage-product-code :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-usage-unit :shape "String" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (usage-amount :initarg :usage-amount :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-usage-usage-amount :shape "Double"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (usage-type :initarg :usage-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-usage-usage-type :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-usage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'usage
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'usage 'make-usage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-code))
      (common-lisp:list
       (common-lisp:cons "productCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-amount))
      (common-lisp:list
       (common-lisp:cons "usageAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-type))
      (common-lisp:list
       (common-lisp:cons "usageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype usage-list () '(trivial-types:proper-list usage))
 (common-lisp:defun make-usage-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list usage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (cost-optimization-hub-error)
     ((fields :initarg :fields :initform common-lisp:nil :reader
       validation-exception-fields)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-fields
                    'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:progn
 (common-lisp:defclass validation-exception-detail common-lisp:nil
                       ((field-name :initarg :field-name :initform
                         (common-lisp:error ":fieldname is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-detail-field-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform
                         (common-lisp:error ":message is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-validation-exception-detail-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-validation-exception-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'validation-exception-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'validation-exception-detail
                    'make-validation-exception-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-name))
      (common-lisp:list
       (common-lisp:cons "fieldName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-details ()
   '(trivial-types:proper-list validation-exception-detail))
 (common-lisp:defun make-validation-exception-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun get-preferences ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'cost-optimization-hub-request :method "POST"
                                :path "/" :operation "GetPreferences"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-preferences))
(common-lisp:progn
 (common-lisp:defun get-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key recommendation-id)
   (common-lisp:declare (common-lisp:ignorable recommendation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-recommendation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cost-optimization-hub-request aws-sdk/generator/operation::input
        "POST" "/" "GetRecommendation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-recommendation))
(common-lisp:progn
 (common-lisp:defun list-enrollment-statuses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id include-organization-info
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable account-id include-organization-info max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-enrollment-statuses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cost-optimization-hub-request aws-sdk/generator/operation::input
        "POST" "/" "ListEnrollmentStatuses"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-enrollment-statuses))
(common-lisp:progn
 (common-lisp:defun list-recommendation-summaries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter group-by max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable filter group-by max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-recommendation-summaries-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cost-optimization-hub-request aws-sdk/generator/operation::input
        "POST" "/" "ListRecommendationSummaries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-recommendation-summaries))
(common-lisp:progn
 (common-lisp:defun list-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter include-all-recommendations
                     max-results next-token order-by)
   (common-lisp:declare
    (common-lisp:ignorable filter include-all-recommendations max-results
     next-token order-by))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-recommendations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cost-optimization-hub-request aws-sdk/generator/operation::input
        "POST" "/" "ListRecommendations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-recommendations))
(common-lisp:progn
 (common-lisp:defun update-enrollment-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-member-accounts status)
   (common-lisp:declare (common-lisp:ignorable include-member-accounts status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-enrollment-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cost-optimization-hub-request aws-sdk/generator/operation::input
        "POST" "/" "UpdateEnrollmentStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-enrollment-status))
(common-lisp:progn
 (common-lisp:defun update-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key member-account-discount-visibility
                     savings-estimation-mode)
   (common-lisp:declare
    (common-lisp:ignorable member-account-discount-visibility
     savings-estimation-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-preferences-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'cost-optimization-hub-request aws-sdk/generator/operation::input
        "POST" "/" "UpdatePreferences"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-preferences))
