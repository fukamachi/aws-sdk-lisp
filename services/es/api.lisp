;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/es/api (:use)
                             (:nicknames #:aws/es)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/es/api)
(common-lisp:progn
 (common-lisp:define-condition es-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'es-error))
(common-lisp:progn
 (common-lisp:defclass es-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "es" :api-version
                        "2015-01-01" :host-prefix "es" :signing-name
                        common-lisp:nil :global-host common-lisp:nil))
 (common-lisp:export 'es-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BaseException" . base-exception)
    ("ConflictException" . conflict-exception)
    ("DisabledOperationException" . disabled-operation-exception)
    ("InternalException" . internal-exception)
    ("InvalidPaginationTokenException" . invalid-pagination-token-exception)
    ("InvalidTypeException" . invalid-type-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype awsaccount () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass accept-inbound-cross-cluster-search-connection-request
                       common-lisp:nil
                       ((cross-cluster-search-connection-id :initarg
                         :cross-cluster-search-connection-id :initform
                         (common-lisp:error
                          ":cross-cluster-search-connection-id is required")
                         :type
                         (common-lisp:or cross-cluster-search-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-accept-inbound-cross-cluster-search-connection-request-cross-cluster-search-connection-id
                         :shape "CrossClusterSearchConnectionId" :location
                         "uri" :location-name "ConnectionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-inbound-cross-cluster-search-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-inbound-cross-cluster-search-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-inbound-cross-cluster-search-connection-request
                    'make-accept-inbound-cross-cluster-search-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-inbound-cross-cluster-search-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-inbound-cross-cluster-search-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-inbound-cross-cluster-search-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-inbound-cross-cluster-search-connection-response
                       common-lisp:nil
                       ((cross-cluster-search-connection :initarg
                         :cross-cluster-search-connection :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          inbound-cross-cluster-search-connection
                          common-lisp:null)
                         :accessor
                         struct-shape-accept-inbound-cross-cluster-search-connection-response-cross-cluster-search-connection
                         :shape "InboundCrossClusterSearchConnection" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-accept-inbound-cross-cluster-search-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-inbound-cross-cluster-search-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'accept-inbound-cross-cluster-search-connection-response
                    'make-accept-inbound-cross-cluster-search-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-inbound-cross-cluster-search-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-inbound-cross-cluster-search-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-cluster-search-connection))
      (common-lisp:list
       (common-lisp:cons "CrossClusterSearchConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-inbound-cross-cluster-search-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'access-denied-exception)))
(common-lisp:progn
 (common-lisp:defclass access-policies-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor struct-shape-access-policies-status-options
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor struct-shape-access-policies-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-access-policies-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'access-policies-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'access-policies-status 'make-access-policies-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-policies-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-policies-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-policies-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-tags-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-add-tags-request-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-list :initarg :tag-list :initform
                         (common-lisp:error ":tag-list is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-add-tags-request-tag-list :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-add-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'add-tags-request 'make-add-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass additional-limit common-lisp:nil
                       ((limit-name :initarg :limit-name :initform
                         common-lisp:nil :type
                         (common-lisp:or limit-name common-lisp:null) :accessor
                         struct-shape-additional-limit-limit-name :shape
                         "LimitName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (limit-values :initarg :limit-values :initform
                         common-lisp:nil :type
                         (common-lisp:or limit-value-list common-lisp:null)
                         :accessor struct-shape-additional-limit-limit-values
                         :shape "LimitValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-additional-limit
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'additional-limit
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'additional-limit 'make-additional-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input additional-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input additional-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-name))
      (common-lisp:list
       (common-lisp:cons "LimitName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-values))
      (common-lisp:list
       (common-lisp:cons "LimitValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input additional-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-limit-list ()
   '(trivial-types:proper-list additional-limit))
 (common-lisp:defun make-additional-limit-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list additional-limit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype advanced-options () 'common-lisp:hash-table)
 (common-lisp:defun make-advanced-options (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass advanced-options-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or advanced-options common-lisp:null)
                         :accessor struct-shape-advanced-options-status-options
                         :shape "AdvancedOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor struct-shape-advanced-options-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-advanced-options-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'advanced-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'advanced-options-status 'make-advanced-options-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-options-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass advanced-security-options common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-advanced-security-options-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (internal-user-database-enabled :initarg
                         :internal-user-database-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-advanced-security-options-internal-user-database-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (samloptions :initarg :samloptions :initform
                         common-lisp:nil :type
                         (common-lisp:or samloptions-output common-lisp:null)
                         :accessor
                         struct-shape-advanced-security-options-samloptions
                         :shape "SAMLOptionsOutput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (anonymous-auth-disable-date :initarg
                         :anonymous-auth-disable-date :initform common-lisp:nil
                         :type
                         (common-lisp:or disable-timestamp common-lisp:null)
                         :accessor
                         struct-shape-advanced-security-options-anonymous-auth-disable-date
                         :shape "DisableTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (anonymous-auth-enabled :initarg
                         :anonymous-auth-enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-advanced-security-options-anonymous-auth-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-advanced-security-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'advanced-security-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'advanced-security-options
                    'make-advanced-security-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-user-database-enabled))
      (common-lisp:list
       (common-lisp:cons "InternalUserDatabaseEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samloptions))
      (common-lisp:list
       (common-lisp:cons "SAMLOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anonymous-auth-disable-date))
      (common-lisp:list
       (common-lisp:cons "AnonymousAuthDisableDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anonymous-auth-enabled))
      (common-lisp:list
       (common-lisp:cons "AnonymousAuthEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass advanced-security-options-input common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-advanced-security-options-input-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (internal-user-database-enabled :initarg
                         :internal-user-database-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-advanced-security-options-input-internal-user-database-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-options :initarg :master-user-options
                         :initform common-lisp:nil :type
                         (common-lisp:or master-user-options common-lisp:null)
                         :accessor
                         struct-shape-advanced-security-options-input-master-user-options
                         :shape "MasterUserOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (samloptions :initarg :samloptions :initform
                         common-lisp:nil :type
                         (common-lisp:or samloptions-input common-lisp:null)
                         :accessor
                         struct-shape-advanced-security-options-input-samloptions
                         :shape "SAMLOptionsInput" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (anonymous-auth-enabled :initarg
                         :anonymous-auth-enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-advanced-security-options-input-anonymous-auth-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-advanced-security-options-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'advanced-security-options-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'advanced-security-options-input
                    'make-advanced-security-options-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-user-database-enabled))
      (common-lisp:list
       (common-lisp:cons "InternalUserDatabaseEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-options))
      (common-lisp:list
       (common-lisp:cons "MasterUserOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samloptions))
      (common-lisp:list
       (common-lisp:cons "SAMLOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anonymous-auth-enabled))
      (common-lisp:list
       (common-lisp:cons "AnonymousAuthEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass advanced-security-options-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or advanced-security-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-advanced-security-options-status-options
                         :shape "AdvancedSecurityOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor
                         struct-shape-advanced-security-options-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-advanced-security-options-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'advanced-security-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'advanced-security-options-status
                    'make-advanced-security-options-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-package-request common-lisp:nil
                       ((package-id :initarg :package-id :initform
                         (common-lisp:error ":package-id is required") :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         struct-shape-associate-package-request-package-id
                         :shape "PackageID" :location "uri" :location-name
                         "PackageID")
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-associate-package-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-package-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-package-request
                    'make-associate-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-package-response common-lisp:nil
                       ((domain-package-details :initarg
                         :domain-package-details :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-package-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-associate-package-response-domain-package-details
                         :shape "DomainPackageDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-associate-package-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'associate-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'associate-package-response
                    'make-associate-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-package-details))
      (common-lisp:list
       (common-lisp:cons "DomainPackageDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorize-vpc-endpoint-access-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-authorize-vpc-endpoint-access-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName")
                        (account :initarg :account :initform
                         (common-lisp:error ":account is required") :type
                         (common-lisp:or awsaccount common-lisp:null) :accessor
                         struct-shape-authorize-vpc-endpoint-access-request-account
                         :shape "AWSAccount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorize-vpc-endpoint-access-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'authorize-vpc-endpoint-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorize-vpc-endpoint-access-request
                    'make-authorize-vpc-endpoint-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-vpc-endpoint-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-vpc-endpoint-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-vpc-endpoint-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorize-vpc-endpoint-access-response common-lisp:nil
                       ((authorized-principal :initarg :authorized-principal
                         :initform
                         (common-lisp:error
                          ":authorized-principal is required")
                         :type
                         (common-lisp:or authorized-principal common-lisp:null)
                         :accessor
                         struct-shape-authorize-vpc-endpoint-access-response-authorized-principal
                         :shape "AuthorizedPrincipal" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorize-vpc-endpoint-access-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'authorize-vpc-endpoint-access-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorize-vpc-endpoint-access-response
                    'make-authorize-vpc-endpoint-access-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-vpc-endpoint-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-vpc-endpoint-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principal))
      (common-lisp:list
       (common-lisp:cons "AuthorizedPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-vpc-endpoint-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorized-principal common-lisp:nil
                       ((principal-type :initarg :principal-type :initform
                         common-lisp:nil :type
                         (common-lisp:or principal-type common-lisp:null)
                         :accessor
                         struct-shape-authorized-principal-principal-type
                         :shape "PrincipalType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (principal :initarg :principal :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-authorized-principal-principal :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-authorized-principal
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'authorized-principal
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'authorized-principal 'make-authorized-principal))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authorized-principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authorized-principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-type))
      (common-lisp:list
       (common-lisp:cons "PrincipalType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authorized-principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype authorized-principal-list ()
   '(trivial-types:proper-list authorized-principal))
 (common-lisp:defun make-authorized-principal-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list authorized-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass auto-tune common-lisp:nil
                       ((auto-tune-type :initarg :auto-tune-type :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-tune-type common-lisp:null)
                         :accessor struct-shape-auto-tune-auto-tune-type :shape
                         "AutoTuneType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (auto-tune-details :initarg :auto-tune-details
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-tune-details common-lisp:null)
                         :accessor struct-shape-auto-tune-auto-tune-details
                         :shape "AutoTuneDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-tune
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-tune
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'auto-tune 'make-auto-tune))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-tune))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-tune))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-tune-type))
      (common-lisp:list
       (common-lisp:cons "AutoTuneType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-tune-details))
      (common-lisp:list
       (common-lisp:cons "AutoTuneDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-tune))
   common-lisp:nil))
(common-lisp:deftype auto-tune-date () 'common-lisp:string)
(common-lisp:deftype auto-tune-desired-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auto-tune-details common-lisp:nil
                       ((scheduled-auto-tune-details :initarg
                         :scheduled-auto-tune-details :initform common-lisp:nil
                         :type
                         (common-lisp:or scheduled-auto-tune-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-auto-tune-details-scheduled-auto-tune-details
                         :shape "ScheduledAutoTuneDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-tune-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-tune-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-tune-details 'make-auto-tune-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-tune-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-tune-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-auto-tune-details))
      (common-lisp:list
       (common-lisp:cons "ScheduledAutoTuneDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-tune-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-tune-list () '(trivial-types:proper-list auto-tune))
 (common-lisp:defun make-auto-tune-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-tune))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass auto-tune-maintenance-schedule common-lisp:nil
                       ((start-at :initarg :start-at :initform common-lisp:nil
                         :type (common-lisp:or start-at common-lisp:null)
                         :accessor
                         struct-shape-auto-tune-maintenance-schedule-start-at
                         :shape "StartAt" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or duration common-lisp:null)
                         :accessor
                         struct-shape-auto-tune-maintenance-schedule-duration
                         :shape "Duration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cron-expression-for-recurrence :initarg
                         :cron-expression-for-recurrence :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-auto-tune-maintenance-schedule-cron-expression-for-recurrence
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-tune-maintenance-schedule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'auto-tune-maintenance-schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-tune-maintenance-schedule
                    'make-auto-tune-maintenance-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-maintenance-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-maintenance-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-at))
      (common-lisp:list
       (common-lisp:cons "StartAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cron-expression-for-recurrence))
      (common-lisp:list
       (common-lisp:cons "CronExpressionForRecurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-maintenance-schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-tune-maintenance-schedule-list ()
   '(trivial-types:proper-list auto-tune-maintenance-schedule))
 (common-lisp:defun make-auto-tune-maintenance-schedule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            auto-tune-maintenance-schedule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass auto-tune-options common-lisp:nil
                       ((desired-state :initarg :desired-state :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-tune-desired-state
                                         common-lisp:null)
                         :accessor struct-shape-auto-tune-options-desired-state
                         :shape "AutoTuneDesiredState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rollback-on-disable :initarg :rollback-on-disable
                         :initform common-lisp:nil :type
                         (common-lisp:or rollback-on-disable common-lisp:null)
                         :accessor
                         struct-shape-auto-tune-options-rollback-on-disable
                         :shape "RollbackOnDisable" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maintenance-schedules :initarg :maintenance-schedules
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-tune-maintenance-schedule-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-auto-tune-options-maintenance-schedules
                         :shape "AutoTuneMaintenanceScheduleList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-tune-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-tune-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-tune-options 'make-auto-tune-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-tune-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-tune-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-on-disable))
      (common-lisp:list
       (common-lisp:cons "RollbackOnDisable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-schedules))
      (common-lisp:list
       (common-lisp:cons "MaintenanceSchedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-tune-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-tune-options-input common-lisp:nil
                       ((desired-state :initarg :desired-state :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-tune-desired-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-auto-tune-options-input-desired-state
                         :shape "AutoTuneDesiredState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maintenance-schedules :initarg :maintenance-schedules
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-tune-maintenance-schedule-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-auto-tune-options-input-maintenance-schedules
                         :shape "AutoTuneMaintenanceScheduleList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-tune-options-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-tune-options-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-tune-options-input 'make-auto-tune-options-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-schedules))
      (common-lisp:list
       (common-lisp:cons "MaintenanceSchedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-tune-options-output common-lisp:nil
                       ((state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or auto-tune-state common-lisp:null)
                         :accessor struct-shape-auto-tune-options-output-state
                         :shape "AutoTuneState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-auto-tune-options-output-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-tune-options-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-tune-options-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-tune-options-output 'make-auto-tune-options-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-tune-options-status common-lisp:nil
                       ((options :initarg :options :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-tune-options common-lisp:null)
                         :accessor
                         struct-shape-auto-tune-options-status-options :shape
                         "AutoTuneOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-tune-status common-lisp:null)
                         :accessor struct-shape-auto-tune-options-status-status
                         :shape "AutoTuneStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-tune-options-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-tune-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-tune-options-status 'make-auto-tune-options-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-status))
   common-lisp:nil))
(common-lisp:deftype auto-tune-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auto-tune-status common-lisp:nil
                       ((creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creation-date is required") :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor struct-shape-auto-tune-status-creation-date
                         :shape "UpdateTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-date :initarg :update-date :initform
                         (common-lisp:error ":update-date is required") :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor struct-shape-auto-tune-status-update-date
                         :shape "UpdateTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-version :initarg :update-version :initform
                         common-lisp:nil :type
                         (common-lisp:or uint-value common-lisp:null) :accessor
                         struct-shape-auto-tune-status-update-version :shape
                         "UIntValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or auto-tune-state common-lisp:null)
                         :accessor struct-shape-auto-tune-status-state :shape
                         "AutoTuneState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-auto-tune-status-error-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pending-deletion :initarg :pending-deletion :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-auto-tune-status-pending-deletion :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-auto-tune-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'auto-tune-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'auto-tune-status 'make-auto-tune-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-tune-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-tune-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-version))
      (common-lisp:list
       (common-lisp:cons "UpdateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-deletion))
      (common-lisp:list
       (common-lisp:cons "PendingDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-tune-status))
   common-lisp:nil))
(common-lisp:deftype auto-tune-type () 'common-lisp:string)
(common-lisp:deftype backend-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition base-exception
     (es-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       base-exception-message)))
 (common-lisp:export
  (common-lisp:list 'base-exception 'base-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-domain-config-change-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-cancel-domain-config-change-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName")
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type (common-lisp:or dry-run common-lisp:null)
                         :accessor
                         struct-shape-cancel-domain-config-change-request-dry-run
                         :shape "DryRun" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-domain-config-change-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-domain-config-change-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-domain-config-change-request
                    'make-cancel-domain-config-change-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-domain-config-change-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-domain-config-change-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-domain-config-change-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-domain-config-change-response common-lisp:nil
                       ((dry-run :initarg :dry-run :initform common-lisp:nil
                         :type (common-lisp:or dry-run common-lisp:null)
                         :accessor
                         struct-shape-cancel-domain-config-change-response-dry-run
                         :shape "DryRun" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cancelled-change-ids :initarg :cancelled-change-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or guidlist common-lisp:null) :accessor
                         struct-shape-cancel-domain-config-change-response-cancelled-change-ids
                         :shape "GUIDList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cancelled-change-properties :initarg
                         :cancelled-change-properties :initform common-lisp:nil
                         :type
                         (common-lisp:or cancelled-change-property-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-cancel-domain-config-change-response-cancelled-change-properties
                         :shape "CancelledChangePropertyList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-domain-config-change-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-domain-config-change-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-domain-config-change-response
                    'make-cancel-domain-config-change-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-domain-config-change-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-domain-config-change-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cancelled-change-ids))
      (common-lisp:list
       (common-lisp:cons "CancelledChangeIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cancelled-change-properties))
      (common-lisp:list
       (common-lisp:cons "CancelledChangeProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-domain-config-change-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-elasticsearch-service-software-update-request
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-cancel-elasticsearch-service-software-update-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-elasticsearch-service-software-update-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-elasticsearch-service-software-update-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-elasticsearch-service-software-update-request
                    'make-cancel-elasticsearch-service-software-update-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-elasticsearch-service-software-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-elasticsearch-service-software-update-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-elasticsearch-service-software-update-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-elasticsearch-service-software-update-response
                       common-lisp:nil
                       ((service-software-options :initarg
                         :service-software-options :initform common-lisp:nil
                         :type
                         (common-lisp:or service-software-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-cancel-elasticsearch-service-software-update-response-service-software-options
                         :shape "ServiceSoftwareOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancel-elasticsearch-service-software-update-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-elasticsearch-service-software-update-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancel-elasticsearch-service-software-update-response
                    'make-cancel-elasticsearch-service-software-update-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-elasticsearch-service-software-update-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-elasticsearch-service-software-update-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-software-options))
      (common-lisp:list
       (common-lisp:cons "ServiceSoftwareOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-elasticsearch-service-software-update-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancelled-change-property common-lisp:nil
                       ((property-name :initarg :property-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cancelled-change-property-property-name
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cancelled-value :initarg :cancelled-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cancelled-change-property-cancelled-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (active-value :initarg :active-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-cancelled-change-property-active-value
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cancelled-change-property
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cancelled-change-property
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cancelled-change-property
                    'make-cancelled-change-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancelled-change-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancelled-change-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-name))
      (common-lisp:list
       (common-lisp:cons "PropertyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancelled-value))
      (common-lisp:list
       (common-lisp:cons "CancelledValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-value))
      (common-lisp:list
       (common-lisp:cons "ActiveValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancelled-change-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cancelled-change-property-list ()
   '(trivial-types:proper-list cancelled-change-property))
 (common-lisp:defun make-cancelled-change-property-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cancelled-change-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass change-progress-details common-lisp:nil
                       ((change-id :initarg :change-id :initform
                         common-lisp:nil :type
                         (common-lisp:or guid common-lisp:null) :accessor
                         struct-shape-change-progress-details-change-id :shape
                         "GUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-change-progress-details-message
                         :shape "Message" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (config-change-status :initarg :config-change-status
                         :initform common-lisp:nil :type
                         (common-lisp:or config-change-status common-lisp:null)
                         :accessor
                         struct-shape-change-progress-details-config-change-status
                         :shape "ConfigChangeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor
                         struct-shape-change-progress-details-start-time :shape
                         "UpdateTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor
                         struct-shape-change-progress-details-last-updated-time
                         :shape "UpdateTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initiated-by :initarg :initiated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or initiated-by common-lisp:null)
                         :accessor
                         struct-shape-change-progress-details-initiated-by
                         :shape "InitiatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-change-progress-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'change-progress-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'change-progress-details 'make-change-progress-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-id))
      (common-lisp:list
       (common-lisp:cons "ChangeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'config-change-status))
      (common-lisp:list
       (common-lisp:cons "ConfigChangeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-by))
      (common-lisp:list
       (common-lisp:cons "InitiatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass change-progress-stage common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or change-progress-stage-name
                                         common-lisp:null)
                         :accessor struct-shape-change-progress-stage-name
                         :shape "ChangeProgressStageName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or change-progress-stage-status
                                         common-lisp:null)
                         :accessor struct-shape-change-progress-stage-status
                         :shape "ChangeProgressStageStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-change-progress-stage-description :shape
                         "Description" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or last-updated common-lisp:null)
                         :accessor
                         struct-shape-change-progress-stage-last-updated :shape
                         "LastUpdated" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-change-progress-stage
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'change-progress-stage
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'change-progress-stage 'make-change-progress-stage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-stage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-stage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-stage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype change-progress-stage-list ()
   '(trivial-types:proper-list change-progress-stage))
 (common-lisp:defun make-change-progress-stage-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change-progress-stage))
   aws-sdk/generator/shape::members))
(common-lisp:deftype change-progress-stage-name () 'common-lisp:string)
(common-lisp:deftype change-progress-stage-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass change-progress-status-details common-lisp:nil
                       ((change-id :initarg :change-id :initform
                         common-lisp:nil :type
                         (common-lisp:or guid common-lisp:null) :accessor
                         struct-shape-change-progress-status-details-change-id
                         :shape "GUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor
                         struct-shape-change-progress-status-details-start-time
                         :shape "UpdateTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or overall-change-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-change-progress-status-details-status
                         :shape "OverallChangeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (pending-properties :initarg :pending-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-change-progress-status-details-pending-properties
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (completed-properties :initarg :completed-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-change-progress-status-details-completed-properties
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-number-of-stages :initarg
                         :total-number-of-stages :initform common-lisp:nil
                         :type
                         (common-lisp:or total-number-of-stages
                                         common-lisp:null)
                         :accessor
                         struct-shape-change-progress-status-details-total-number-of-stages
                         :shape "TotalNumberOfStages" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (change-progress-stages :initarg
                         :change-progress-stages :initform common-lisp:nil
                         :type
                         (common-lisp:or change-progress-stage-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-change-progress-status-details-change-progress-stages
                         :shape "ChangeProgressStageList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (config-change-status :initarg :config-change-status
                         :initform common-lisp:nil :type
                         (common-lisp:or config-change-status common-lisp:null)
                         :accessor
                         struct-shape-change-progress-status-details-config-change-status
                         :shape "ConfigChangeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor
                         struct-shape-change-progress-status-details-last-updated-time
                         :shape "UpdateTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (initiated-by :initarg :initiated-by :initform
                         common-lisp:nil :type
                         (common-lisp:or initiated-by common-lisp:null)
                         :accessor
                         struct-shape-change-progress-status-details-initiated-by
                         :shape "InitiatedBy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-change-progress-status-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'change-progress-status-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'change-progress-status-details
                    'make-change-progress-status-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-status-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-status-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-id))
      (common-lisp:list
       (common-lisp:cons "ChangeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-properties))
      (common-lisp:list
       (common-lisp:cons "PendingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'completed-properties))
      (common-lisp:list
       (common-lisp:cons "CompletedProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-stages))
      (common-lisp:list
       (common-lisp:cons "TotalNumberOfStages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-progress-stages))
      (common-lisp:list
       (common-lisp:cons "ChangeProgressStages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'config-change-status))
      (common-lisp:list
       (common-lisp:cons "ConfigChangeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initiated-by))
      (common-lisp:list
       (common-lisp:cons "InitiatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-status-details))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype cloud-watch-logs-log-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cognito-options common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-cognito-options-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or user-pool-id common-lisp:null)
                         :accessor struct-shape-cognito-options-user-pool-id
                         :shape "UserPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (identity-pool-id :initarg :identity-pool-id :initform
                         common-lisp:nil :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         struct-shape-cognito-options-identity-pool-id :shape
                         "IdentityPoolId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or role-arn common-lisp:null)
                         :accessor struct-shape-cognito-options-role-arn :shape
                         "RoleArn" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cognito-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cognito-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'cognito-options 'make-cognito-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cognito-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cognito-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cognito-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cognito-options-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or cognito-options common-lisp:null)
                         :accessor struct-shape-cognito-options-status-options
                         :shape "CognitoOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor struct-shape-cognito-options-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cognito-options-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cognito-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cognito-options-status 'make-cognito-options-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cognito-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cognito-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cognito-options-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cold-storage-options common-lisp:nil
                       ((enabled :initarg :enabled :initform
                         (common-lisp:error ":enabled is required") :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-cold-storage-options-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-cold-storage-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'cold-storage-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'cold-storage-options 'make-cold-storage-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cold-storage-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cold-storage-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cold-storage-options))
   common-lisp:nil))
(common-lisp:deftype commit-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compatible-elasticsearch-versions-list ()
   '(trivial-types:proper-list compatible-versions-map))
 (common-lisp:defun make-compatible-elasticsearch-versions-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compatible-versions-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass compatible-versions-map common-lisp:nil
                       ((source-version :initarg :source-version :initform
                         common-lisp:nil :type
                         (common-lisp:or elasticsearch-version-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-compatible-versions-map-source-version
                         :shape "ElasticsearchVersionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-versions :initarg :target-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or elasticsearch-version-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-compatible-versions-map-target-versions
                         :shape "ElasticsearchVersionList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compatible-versions-map
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compatible-versions-map
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compatible-versions-map 'make-compatible-versions-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compatible-versions-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compatible-versions-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "SourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-versions))
      (common-lisp:list
       (common-lisp:cons "TargetVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compatible-versions-map))
   common-lisp:nil))
(common-lisp:deftype config-change-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'conflict-exception)))
(common-lisp:deftype connection-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-elasticsearch-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elasticsearch-version :initarg :elasticsearch-version
                         :initform common-lisp:nil :type
                         (common-lisp:or elasticsearch-version-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-request-elasticsearch-version
                         :shape "ElasticsearchVersionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (elasticsearch-cluster-config :initarg
                         :elasticsearch-cluster-config :initform
                         common-lisp:nil :type
                         (common-lisp:or elasticsearch-cluster-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-request-elasticsearch-cluster-config
                         :shape "ElasticsearchClusterConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ebsoptions :initarg :ebsoptions :initform
                         common-lisp:nil :type
                         (common-lisp:or ebsoptions common-lisp:null) :accessor
                         struct-shape-create-elasticsearch-domain-request-ebsoptions
                         :shape "EBSOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-policies :initarg :access-policies :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-request-access-policies
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-options :initarg :snapshot-options :initform
                         common-lisp:nil :type
                         (common-lisp:or snapshot-options common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-request-snapshot-options
                         :shape "SnapshotOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpcoptions :initarg :vpcoptions :initform
                         common-lisp:nil :type
                         (common-lisp:or vpcoptions common-lisp:null) :accessor
                         struct-shape-create-elasticsearch-domain-request-vpcoptions
                         :shape "VPCOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cognito-options :initarg :cognito-options :initform
                         common-lisp:nil :type
                         (common-lisp:or cognito-options common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-request-cognito-options
                         :shape "CognitoOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-at-rest-options :initarg
                         :encryption-at-rest-options :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-at-rest-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-request-encryption-at-rest-options
                         :shape "EncryptionAtRestOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (node-to-node-encryption-options :initarg
                         :node-to-node-encryption-options :initform
                         common-lisp:nil :type
                         (common-lisp:or node-to-node-encryption-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-request-node-to-node-encryption-options
                         :shape "NodeToNodeEncryptionOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (advanced-options :initarg :advanced-options :initform
                         common-lisp:nil :type
                         (common-lisp:or advanced-options common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-request-advanced-options
                         :shape "AdvancedOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-publishing-options :initarg
                         :log-publishing-options :initform common-lisp:nil
                         :type
                         (common-lisp:or log-publishing-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-request-log-publishing-options
                         :shape "LogPublishingOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-endpoint-options :initarg
                         :domain-endpoint-options :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-endpoint-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-request-domain-endpoint-options
                         :shape "DomainEndpointOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (advanced-security-options :initarg
                         :advanced-security-options :initform common-lisp:nil
                         :type
                         (common-lisp:or advanced-security-options-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-request-advanced-security-options
                         :shape "AdvancedSecurityOptionsInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-tune-options :initarg :auto-tune-options
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-tune-options-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-request-auto-tune-options
                         :shape "AutoTuneOptionsInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-request-tag-list
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-elasticsearch-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-elasticsearch-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-elasticsearch-domain-request
                    'make-create-elasticsearch-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-elasticsearch-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-elasticsearch-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-version))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-cluster-config))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsoptions))
      (common-lisp:list
       (common-lisp:cons "EBSOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-options))
      (common-lisp:list
       (common-lisp:cons "SnapshotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcoptions))
      (common-lisp:list
       (common-lisp:cons "VPCOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cognito-options))
      (common-lisp:list
       (common-lisp:cons "CognitoOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-at-rest-options))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRestOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-to-node-encryption-options))
      (common-lisp:list
       (common-lisp:cons "NodeToNodeEncryptionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-options))
      (common-lisp:list
       (common-lisp:cons "LogPublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-security-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedSecurityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-tune-options))
      (common-lisp:list
       (common-lisp:cons "AutoTuneOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-elasticsearch-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-elasticsearch-domain-response common-lisp:nil
                       ((domain-status :initarg :domain-status :initform
                         common-lisp:nil :type
                         (common-lisp:or elasticsearch-domain-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-elasticsearch-domain-response-domain-status
                         :shape "ElasticsearchDomainStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-elasticsearch-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-elasticsearch-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-elasticsearch-domain-response
                    'make-create-elasticsearch-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-elasticsearch-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-elasticsearch-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "DomainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-elasticsearch-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-outbound-cross-cluster-search-connection-request
                       common-lisp:nil
                       ((source-domain-info :initarg :source-domain-info
                         :initform
                         (common-lisp:error ":source-domain-info is required")
                         :type
                         (common-lisp:or domain-information common-lisp:null)
                         :accessor
                         struct-shape-create-outbound-cross-cluster-search-connection-request-source-domain-info
                         :shape "DomainInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-domain-info :initarg
                         :destination-domain-info :initform
                         (common-lisp:error
                          ":destination-domain-info is required")
                         :type
                         (common-lisp:or domain-information common-lisp:null)
                         :accessor
                         struct-shape-create-outbound-cross-cluster-search-connection-request-destination-domain-info
                         :shape "DomainInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-alias :initarg :connection-alias :initform
                         (common-lisp:error ":connection-alias is required")
                         :type
                         (common-lisp:or connection-alias common-lisp:null)
                         :accessor
                         struct-shape-create-outbound-cross-cluster-search-connection-request-connection-alias
                         :shape "ConnectionAlias" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-outbound-cross-cluster-search-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-outbound-cross-cluster-search-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-outbound-cross-cluster-search-connection-request
                    'make-create-outbound-cross-cluster-search-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-outbound-cross-cluster-search-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-outbound-cross-cluster-search-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-domain-info))
      (common-lisp:list
       (common-lisp:cons "SourceDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-domain-info))
      (common-lisp:list
       (common-lisp:cons "DestinationDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-alias))
      (common-lisp:list
       (common-lisp:cons "ConnectionAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-outbound-cross-cluster-search-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-outbound-cross-cluster-search-connection-response
                       common-lisp:nil
                       ((source-domain-info :initarg :source-domain-info
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-information common-lisp:null)
                         :accessor
                         struct-shape-create-outbound-cross-cluster-search-connection-response-source-domain-info
                         :shape "DomainInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-domain-info :initarg
                         :destination-domain-info :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-information common-lisp:null)
                         :accessor
                         struct-shape-create-outbound-cross-cluster-search-connection-response-destination-domain-info
                         :shape "DomainInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-alias :initarg :connection-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-alias common-lisp:null)
                         :accessor
                         struct-shape-create-outbound-cross-cluster-search-connection-response-connection-alias
                         :shape "ConnectionAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-status :initarg :connection-status
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          outbound-cross-cluster-search-connection-status
                          common-lisp:null)
                         :accessor
                         struct-shape-create-outbound-cross-cluster-search-connection-response-connection-status
                         :shape "OutboundCrossClusterSearchConnectionStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (cross-cluster-search-connection-id :initarg
                         :cross-cluster-search-connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or cross-cluster-search-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-create-outbound-cross-cluster-search-connection-response-cross-cluster-search-connection-id
                         :shape "CrossClusterSearchConnectionId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-outbound-cross-cluster-search-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-outbound-cross-cluster-search-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-outbound-cross-cluster-search-connection-response
                    'make-create-outbound-cross-cluster-search-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-outbound-cross-cluster-search-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-outbound-cross-cluster-search-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-domain-info))
      (common-lisp:list
       (common-lisp:cons "SourceDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-domain-info))
      (common-lisp:list
       (common-lisp:cons "DestinationDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-alias))
      (common-lisp:list
       (common-lisp:cons "ConnectionAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-cluster-search-connection-id))
      (common-lisp:list
       (common-lisp:cons "CrossClusterSearchConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-outbound-cross-cluster-search-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-package-request common-lisp:nil
                       ((package-name :initarg :package-name :initform
                         (common-lisp:error ":package-name is required") :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-create-package-request-package-name
                         :shape "PackageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-type :initarg :package-type :initform
                         (common-lisp:error ":package-type is required") :type
                         (common-lisp:or package-type common-lisp:null)
                         :accessor
                         struct-shape-create-package-request-package-type
                         :shape "PackageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-description :initarg :package-description
                         :initform common-lisp:nil :type
                         (common-lisp:or package-description common-lisp:null)
                         :accessor
                         struct-shape-create-package-request-package-description
                         :shape "PackageDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-source :initarg :package-source :initform
                         (common-lisp:error ":package-source is required")
                         :type (common-lisp:or package-source common-lisp:null)
                         :accessor
                         struct-shape-create-package-request-package-source
                         :shape "PackageSource" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-package-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-package-request 'make-create-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-type))
      (common-lisp:list
       (common-lisp:cons "PackageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-description))
      (common-lisp:list
       (common-lisp:cons "PackageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-source))
      (common-lisp:list
       (common-lisp:cons "PackageSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-package-response common-lisp:nil
                       ((package-details :initarg :package-details :initform
                         common-lisp:nil :type
                         (common-lisp:or package-details common-lisp:null)
                         :accessor
                         struct-shape-create-package-response-package-details
                         :shape "PackageDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-package-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-package-response 'make-create-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-details))
      (common-lisp:list
       (common-lisp:cons "PackageDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-endpoint-request common-lisp:nil
                       ((domain-arn :initarg :domain-arn :initform
                         (common-lisp:error ":domain-arn is required") :type
                         (common-lisp:or domain-arn common-lisp:null) :accessor
                         struct-shape-create-vpc-endpoint-request-domain-arn
                         :shape "DomainArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-options :initarg :vpc-options :initform
                         (common-lisp:error ":vpc-options is required") :type
                         (common-lisp:or vpcoptions common-lisp:null) :accessor
                         struct-shape-create-vpc-endpoint-request-vpc-options
                         :shape "VPCOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-endpoint-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vpc-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-vpc-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vpc-endpoint-request
                    'make-create-vpc-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-arn))
      (common-lisp:list
       (common-lisp:cons "DomainArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-options))
      (common-lisp:list
       (common-lisp:cons "VpcOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-endpoint-response common-lisp:nil
                       ((vpc-endpoint :initarg :vpc-endpoint :initform
                         (common-lisp:error ":vpc-endpoint is required") :type
                         (common-lisp:or vpc-endpoint common-lisp:null)
                         :accessor
                         struct-shape-create-vpc-endpoint-response-vpc-endpoint
                         :shape "VpcEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-create-vpc-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'create-vpc-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'create-vpc-endpoint-response
                    'make-create-vpc-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint))
      (common-lisp:list
       (common-lisp:cons "VpcEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-response))
   common-lisp:nil))
(common-lisp:deftype created-at () 'common-lisp:string)
(common-lisp:deftype cross-cluster-search-connection-id () 'common-lisp:string)
(common-lisp:deftype cross-cluster-search-connection-status-message ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-elasticsearch-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-delete-elasticsearch-domain-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-elasticsearch-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-elasticsearch-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-elasticsearch-domain-request
                    'make-delete-elasticsearch-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-elasticsearch-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-elasticsearch-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-elasticsearch-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-elasticsearch-domain-response common-lisp:nil
                       ((domain-status :initarg :domain-status :initform
                         common-lisp:nil :type
                         (common-lisp:or elasticsearch-domain-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-elasticsearch-domain-response-domain-status
                         :shape "ElasticsearchDomainStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-elasticsearch-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-elasticsearch-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-elasticsearch-domain-response
                    'make-delete-elasticsearch-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-elasticsearch-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-elasticsearch-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "DomainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-elasticsearch-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-inbound-cross-cluster-search-connection-request
                       common-lisp:nil
                       ((cross-cluster-search-connection-id :initarg
                         :cross-cluster-search-connection-id :initform
                         (common-lisp:error
                          ":cross-cluster-search-connection-id is required")
                         :type
                         (common-lisp:or cross-cluster-search-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-inbound-cross-cluster-search-connection-request-cross-cluster-search-connection-id
                         :shape "CrossClusterSearchConnectionId" :location
                         "uri" :location-name "ConnectionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-inbound-cross-cluster-search-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-inbound-cross-cluster-search-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-inbound-cross-cluster-search-connection-request
                    'make-delete-inbound-cross-cluster-search-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-inbound-cross-cluster-search-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-inbound-cross-cluster-search-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-inbound-cross-cluster-search-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-inbound-cross-cluster-search-connection-response
                       common-lisp:nil
                       ((cross-cluster-search-connection :initarg
                         :cross-cluster-search-connection :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          inbound-cross-cluster-search-connection
                          common-lisp:null)
                         :accessor
                         struct-shape-delete-inbound-cross-cluster-search-connection-response-cross-cluster-search-connection
                         :shape "InboundCrossClusterSearchConnection" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-inbound-cross-cluster-search-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-inbound-cross-cluster-search-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-inbound-cross-cluster-search-connection-response
                    'make-delete-inbound-cross-cluster-search-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-inbound-cross-cluster-search-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-inbound-cross-cluster-search-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-cluster-search-connection))
      (common-lisp:list
       (common-lisp:cons "CrossClusterSearchConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-inbound-cross-cluster-search-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-outbound-cross-cluster-search-connection-request
                       common-lisp:nil
                       ((cross-cluster-search-connection-id :initarg
                         :cross-cluster-search-connection-id :initform
                         (common-lisp:error
                          ":cross-cluster-search-connection-id is required")
                         :type
                         (common-lisp:or cross-cluster-search-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-outbound-cross-cluster-search-connection-request-cross-cluster-search-connection-id
                         :shape "CrossClusterSearchConnectionId" :location
                         "uri" :location-name "ConnectionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-outbound-cross-cluster-search-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-outbound-cross-cluster-search-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-outbound-cross-cluster-search-connection-request
                    'make-delete-outbound-cross-cluster-search-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-outbound-cross-cluster-search-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-outbound-cross-cluster-search-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-outbound-cross-cluster-search-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-outbound-cross-cluster-search-connection-response
                       common-lisp:nil
                       ((cross-cluster-search-connection :initarg
                         :cross-cluster-search-connection :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          outbound-cross-cluster-search-connection
                          common-lisp:null)
                         :accessor
                         struct-shape-delete-outbound-cross-cluster-search-connection-response-cross-cluster-search-connection
                         :shape "OutboundCrossClusterSearchConnection"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-outbound-cross-cluster-search-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-outbound-cross-cluster-search-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-outbound-cross-cluster-search-connection-response
                    'make-delete-outbound-cross-cluster-search-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-outbound-cross-cluster-search-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-outbound-cross-cluster-search-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-cluster-search-connection))
      (common-lisp:list
       (common-lisp:cons "CrossClusterSearchConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-outbound-cross-cluster-search-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-package-request common-lisp:nil
                       ((package-id :initarg :package-id :initform
                         (common-lisp:error ":package-id is required") :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         struct-shape-delete-package-request-package-id :shape
                         "PackageID" :location "uri" :location-name
                         "PackageID"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-package-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-package-request 'make-delete-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-package-response common-lisp:nil
                       ((package-details :initarg :package-details :initform
                         common-lisp:nil :type
                         (common-lisp:or package-details common-lisp:null)
                         :accessor
                         struct-shape-delete-package-response-package-details
                         :shape "PackageDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-package-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-package-response 'make-delete-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-details))
      (common-lisp:list
       (common-lisp:cons "PackageDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-endpoint-request common-lisp:nil
                       ((vpc-endpoint-id :initarg :vpc-endpoint-id :initform
                         (common-lisp:error ":vpc-endpoint-id is required")
                         :type
                         (common-lisp:or vpc-endpoint-id common-lisp:null)
                         :accessor
                         struct-shape-delete-vpc-endpoint-request-vpc-endpoint-id
                         :shape "VpcEndpointId" :location "uri" :location-name
                         "VpcEndpointId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-vpc-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-vpc-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-endpoint-request
                    'make-delete-vpc-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-endpoint-response common-lisp:nil
                       ((vpc-endpoint-summary :initarg :vpc-endpoint-summary
                         :initform
                         (common-lisp:error
                          ":vpc-endpoint-summary is required")
                         :type
                         (common-lisp:or vpc-endpoint-summary common-lisp:null)
                         :accessor
                         struct-shape-delete-vpc-endpoint-response-vpc-endpoint-summary
                         :shape "VpcEndpointSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-vpc-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-vpc-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-endpoint-response
                    'make-delete-vpc-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-endpoint-summary))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoint-response))
   common-lisp:nil))
(common-lisp:deftype deployment-close-date-time-stamp () 'common-lisp:string)
(common-lisp:deftype deployment-status () 'common-lisp:string)
(common-lisp:deftype deployment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-domain-auto-tunes-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-auto-tunes-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-auto-tunes-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-domain-auto-tunes-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-domain-auto-tunes-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-auto-tunes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-domain-auto-tunes-request
                    'make-describe-domain-auto-tunes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-auto-tunes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-auto-tunes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-auto-tunes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-auto-tunes-response common-lisp:nil
                       ((auto-tunes :initarg :auto-tunes :initform
                         common-lisp:nil :type
                         (common-lisp:or auto-tune-list common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-auto-tunes-response-auto-tunes
                         :shape "AutoTuneList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-domain-auto-tunes-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-domain-auto-tunes-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-auto-tunes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-domain-auto-tunes-response
                    'make-describe-domain-auto-tunes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-auto-tunes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-auto-tunes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-tunes))
      (common-lisp:list
       (common-lisp:cons "AutoTunes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-auto-tunes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-change-progress-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-change-progress-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName")
                        (change-id :initarg :change-id :initform
                         common-lisp:nil :type
                         (common-lisp:or guid common-lisp:null) :accessor
                         struct-shape-describe-domain-change-progress-request-change-id
                         :shape "GUID" :location "querystring" :location-name
                         "changeid"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-domain-change-progress-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-change-progress-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-domain-change-progress-request
                    'make-describe-domain-change-progress-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-change-progress-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-change-progress-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-change-progress-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-change-progress-response common-lisp:nil
                       ((change-progress-status :initarg
                         :change-progress-status :initform common-lisp:nil
                         :type
                         (common-lisp:or change-progress-status-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-domain-change-progress-response-change-progress-status
                         :shape "ChangeProgressStatusDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-domain-change-progress-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-change-progress-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-domain-change-progress-response
                    'make-describe-domain-change-progress-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-change-progress-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-change-progress-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-progress-status))
      (common-lisp:list
       (common-lisp:cons "ChangeProgressStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-change-progress-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-elasticsearch-domain-config-request
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-describe-elasticsearch-domain-config-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-elasticsearch-domain-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-elasticsearch-domain-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-domain-config-request
                    'make-describe-elasticsearch-domain-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-elasticsearch-domain-config-response
                       common-lisp:nil
                       ((domain-config :initarg :domain-config :initform
                         (common-lisp:error ":domain-config is required") :type
                         (common-lisp:or elasticsearch-domain-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-elasticsearch-domain-config-response-domain-config
                         :shape "ElasticsearchDomainConfig" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-elasticsearch-domain-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-elasticsearch-domain-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-domain-config-response
                    'make-describe-elasticsearch-domain-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-config))
      (common-lisp:list
       (common-lisp:cons "DomainConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-elasticsearch-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-describe-elasticsearch-domain-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-elasticsearch-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-elasticsearch-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-domain-request
                    'make-describe-elasticsearch-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-elasticsearch-domain-response common-lisp:nil
                       ((domain-status :initarg :domain-status :initform
                         (common-lisp:error ":domain-status is required") :type
                         (common-lisp:or elasticsearch-domain-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-elasticsearch-domain-response-domain-status
                         :shape "ElasticsearchDomainStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-elasticsearch-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-elasticsearch-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-domain-response
                    'make-describe-elasticsearch-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "DomainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-elasticsearch-domains-request common-lisp:nil
                       ((domain-names :initarg :domain-names :initform
                         (common-lisp:error ":domain-names is required") :type
                         (common-lisp:or domain-name-list common-lisp:null)
                         :accessor
                         struct-shape-describe-elasticsearch-domains-request-domain-names
                         :shape "DomainNameList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-elasticsearch-domains-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-elasticsearch-domains-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-domains-request
                    'make-describe-elasticsearch-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-names))
      (common-lisp:list
       (common-lisp:cons "DomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-elasticsearch-domains-response common-lisp:nil
                       ((domain-status-list :initarg :domain-status-list
                         :initform
                         (common-lisp:error ":domain-status-list is required")
                         :type
                         (common-lisp:or elasticsearch-domain-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-elasticsearch-domains-response-domain-status-list
                         :shape "ElasticsearchDomainStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-elasticsearch-domains-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-elasticsearch-domains-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-domains-response
                    'make-describe-elasticsearch-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status-list))
      (common-lisp:list
       (common-lisp:cons "DomainStatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-elasticsearch-instance-type-limits-request
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-describe-elasticsearch-instance-type-limits-request-domain-name
                         :shape "DomainName" :location "querystring"
                         :location-name "domainName")
                        (instance-type :initarg :instance-type :initform
                         (common-lisp:error ":instance-type is required") :type
                         (common-lisp:or espartition-instance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-elasticsearch-instance-type-limits-request-instance-type
                         :shape "ESPartitionInstanceType" :location "uri"
                         :location-name "InstanceType")
                        (elasticsearch-version :initarg :elasticsearch-version
                         :initform
                         (common-lisp:error
                          ":elasticsearch-version is required")
                         :type
                         (common-lisp:or elasticsearch-version-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-elasticsearch-instance-type-limits-request-elasticsearch-version
                         :shape "ElasticsearchVersionString" :location "uri"
                         :location-name "ElasticsearchVersion"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-elasticsearch-instance-type-limits-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-elasticsearch-instance-type-limits-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-instance-type-limits-request
                    'make-describe-elasticsearch-instance-type-limits-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-instance-type-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-instance-type-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-instance-type-limits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-elasticsearch-instance-type-limits-response
                       common-lisp:nil
                       ((limits-by-role :initarg :limits-by-role :initform
                         common-lisp:nil :type
                         (common-lisp:or limits-by-role common-lisp:null)
                         :accessor
                         struct-shape-describe-elasticsearch-instance-type-limits-response-limits-by-role
                         :shape "LimitsByRole" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-elasticsearch-instance-type-limits-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-elasticsearch-instance-type-limits-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-elasticsearch-instance-type-limits-response
                    'make-describe-elasticsearch-instance-type-limits-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-instance-type-limits-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-instance-type-limits-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limits-by-role))
      (common-lisp:list
       (common-lisp:cons "LimitsByRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-elasticsearch-instance-type-limits-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  describe-inbound-cross-cluster-search-connections-request common-lisp:nil
  ((filters :initarg :filters :initform common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null) :accessor
    struct-shape-describe-inbound-cross-cluster-search-connections-request-filters
    :shape "FilterList" :location common-lisp:nil :location-name
    common-lisp:nil)
   (max-results :initarg :max-results :initform common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null) :accessor
    struct-shape-describe-inbound-cross-cluster-search-connections-request-max-results
    :shape "MaxResults" :location common-lisp:nil :location-name
    common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null) :accessor
    struct-shape-describe-inbound-cross-cluster-search-connections-request-next-token
    :shape "NextToken" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-inbound-cross-cluster-search-connections-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-inbound-cross-cluster-search-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-inbound-cross-cluster-search-connections-request
                    'make-describe-inbound-cross-cluster-search-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-cross-cluster-search-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-cross-cluster-search-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-cross-cluster-search-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  describe-inbound-cross-cluster-search-connections-response common-lisp:nil
  ((cross-cluster-search-connections :initarg :cross-cluster-search-connections
    :initform common-lisp:nil :type
    (common-lisp:or inbound-cross-cluster-search-connections common-lisp:null)
    :accessor
    struct-shape-describe-inbound-cross-cluster-search-connections-response-cross-cluster-search-connections
    :shape "InboundCrossClusterSearchConnections" :location common-lisp:nil
    :location-name common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null) :accessor
    struct-shape-describe-inbound-cross-cluster-search-connections-response-next-token
    :shape "NextToken" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-inbound-cross-cluster-search-connections-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-inbound-cross-cluster-search-connections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-inbound-cross-cluster-search-connections-response
                    'make-describe-inbound-cross-cluster-search-connections-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-cross-cluster-search-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-cross-cluster-search-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-cluster-search-connections))
      (common-lisp:list
       (common-lisp:cons "CrossClusterSearchConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-cross-cluster-search-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  describe-outbound-cross-cluster-search-connections-request common-lisp:nil
  ((filters :initarg :filters :initform common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null) :accessor
    struct-shape-describe-outbound-cross-cluster-search-connections-request-filters
    :shape "FilterList" :location common-lisp:nil :location-name
    common-lisp:nil)
   (max-results :initarg :max-results :initform common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null) :accessor
    struct-shape-describe-outbound-cross-cluster-search-connections-request-max-results
    :shape "MaxResults" :location common-lisp:nil :location-name
    common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null) :accessor
    struct-shape-describe-outbound-cross-cluster-search-connections-request-next-token
    :shape "NextToken" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-outbound-cross-cluster-search-connections-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-outbound-cross-cluster-search-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-outbound-cross-cluster-search-connections-request
                    'make-describe-outbound-cross-cluster-search-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-outbound-cross-cluster-search-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-outbound-cross-cluster-search-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-outbound-cross-cluster-search-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  describe-outbound-cross-cluster-search-connections-response common-lisp:nil
  ((cross-cluster-search-connections :initarg :cross-cluster-search-connections
    :initform common-lisp:nil :type
    (common-lisp:or outbound-cross-cluster-search-connections common-lisp:null)
    :accessor
    struct-shape-describe-outbound-cross-cluster-search-connections-response-cross-cluster-search-connections
    :shape "OutboundCrossClusterSearchConnections" :location common-lisp:nil
    :location-name common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null) :accessor
    struct-shape-describe-outbound-cross-cluster-search-connections-response-next-token
    :shape "NextToken" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-outbound-cross-cluster-search-connections-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-outbound-cross-cluster-search-connections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'describe-outbound-cross-cluster-search-connections-response
   'make-describe-outbound-cross-cluster-search-connections-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-outbound-cross-cluster-search-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-outbound-cross-cluster-search-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-cluster-search-connections))
      (common-lisp:list
       (common-lisp:cons "CrossClusterSearchConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-outbound-cross-cluster-search-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-packages-filter common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or describe-packages-filter-name
                                         common-lisp:null)
                         :accessor struct-shape-describe-packages-filter-name
                         :shape "DescribePackagesFilterName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or describe-packages-filter-values
                                         common-lisp:null)
                         :accessor struct-shape-describe-packages-filter-value
                         :shape "DescribePackagesFilterValues" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-packages-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-packages-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-packages-filter 'make-describe-packages-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-packages-filter-list ()
   '(trivial-types:proper-list describe-packages-filter))
 (common-lisp:defun make-describe-packages-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            describe-packages-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype describe-packages-filter-name () 'common-lisp:string)
(common-lisp:deftype describe-packages-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype describe-packages-filter-values ()
   '(trivial-types:proper-list describe-packages-filter-value))
 (common-lisp:defun make-describe-packages-filter-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            describe-packages-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass describe-packages-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or describe-packages-filter-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-packages-request-filters :shape
                         "DescribePackagesFilterList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-packages-request-max-results
                         :shape "MaxResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-packages-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-packages-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-packages-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-packages-request
                    'make-describe-packages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-packages-response common-lisp:nil
                       ((package-details-list :initarg :package-details-list
                         :initform common-lisp:nil :type
                         (common-lisp:or package-details-list common-lisp:null)
                         :accessor
                         struct-shape-describe-packages-response-package-details-list
                         :shape "PackageDetailsList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-packages-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-packages-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'describe-packages-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-packages-response
                    'make-describe-packages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-details-list))
      (common-lisp:list
       (common-lisp:cons "PackageDetailsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  describe-reserved-elasticsearch-instance-offerings-request common-lisp:nil
  ((reserved-elasticsearch-instance-offering-id :initarg
    :reserved-elasticsearch-instance-offering-id :initform common-lisp:nil
    :type (common-lisp:or guid common-lisp:null) :accessor
    struct-shape-describe-reserved-elasticsearch-instance-offerings-request-reserved-elasticsearch-instance-offering-id
    :shape "GUID" :location "querystring" :location-name "offeringId")
   (max-results :initarg :max-results :initform common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null) :accessor
    struct-shape-describe-reserved-elasticsearch-instance-offerings-request-max-results
    :shape "MaxResults" :location "querystring" :location-name "maxResults")
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null) :accessor
    struct-shape-describe-reserved-elasticsearch-instance-offerings-request-next-token
    :shape "NextToken" :location "querystring" :location-name "nextToken"))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reserved-elasticsearch-instance-offerings-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-elasticsearch-instance-offerings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-elasticsearch-instance-offerings-request
                    'make-describe-reserved-elasticsearch-instance-offerings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-elasticsearch-instance-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-elasticsearch-instance-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-elasticsearch-instance-offerings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  describe-reserved-elasticsearch-instance-offerings-response common-lisp:nil
  ((next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null) :accessor
    struct-shape-describe-reserved-elasticsearch-instance-offerings-response-next-token
    :shape "NextToken" :location common-lisp:nil :location-name
    common-lisp:nil)
   (reserved-elasticsearch-instance-offerings :initarg
    :reserved-elasticsearch-instance-offerings :initform common-lisp:nil :type
    (common-lisp:or reserved-elasticsearch-instance-offering-list
                    common-lisp:null)
    :accessor
    struct-shape-describe-reserved-elasticsearch-instance-offerings-response-reserved-elasticsearch-instance-offerings
    :shape "ReservedElasticsearchInstanceOfferingList" :location
    common-lisp:nil :location-name common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reserved-elasticsearch-instance-offerings-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-elasticsearch-instance-offerings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'describe-reserved-elasticsearch-instance-offerings-response
   'make-describe-reserved-elasticsearch-instance-offerings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-elasticsearch-instance-offerings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-elasticsearch-instance-offerings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-elasticsearch-instance-offerings))
      (common-lisp:list
       (common-lisp:cons "ReservedElasticsearchInstanceOfferings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-elasticsearch-instance-offerings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-elasticsearch-instances-request
                       common-lisp:nil
                       ((reserved-elasticsearch-instance-id :initarg
                         :reserved-elasticsearch-instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or guid common-lisp:null) :accessor
                         struct-shape-describe-reserved-elasticsearch-instances-request-reserved-elasticsearch-instance-id
                         :shape "GUID" :location "querystring" :location-name
                         "reservationId")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-elasticsearch-instances-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-reserved-elasticsearch-instances-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reserved-elasticsearch-instances-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-elasticsearch-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-elasticsearch-instances-request
                    'make-describe-reserved-elasticsearch-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-elasticsearch-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-elasticsearch-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-elasticsearch-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-elasticsearch-instances-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-reserved-elasticsearch-instances-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-elasticsearch-instances :initarg
                         :reserved-elasticsearch-instances :initform
                         common-lisp:nil :type
                         (common-lisp:or reserved-elasticsearch-instance-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-reserved-elasticsearch-instances-response-reserved-elasticsearch-instances
                         :shape "ReservedElasticsearchInstanceList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-reserved-elasticsearch-instances-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-elasticsearch-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-elasticsearch-instances-response
                    'make-describe-reserved-elasticsearch-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-elasticsearch-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-elasticsearch-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-elasticsearch-instances))
      (common-lisp:list
       (common-lisp:cons "ReservedElasticsearchInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-elasticsearch-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-endpoints-request common-lisp:nil
                       ((vpc-endpoint-ids :initarg :vpc-endpoint-ids :initform
                         (common-lisp:error ":vpc-endpoint-ids is required")
                         :type
                         (common-lisp:or vpc-endpoint-id-list common-lisp:null)
                         :accessor
                         struct-shape-describe-vpc-endpoints-request-vpc-endpoint-ids
                         :shape "VpcEndpointIdList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-vpc-endpoints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-endpoints-request
                    'make-describe-vpc-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-ids))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-endpoints-response common-lisp:nil
                       ((vpc-endpoints :initarg :vpc-endpoints :initform
                         (common-lisp:error ":vpc-endpoints is required") :type
                         (common-lisp:or vpc-endpoints common-lisp:null)
                         :accessor
                         struct-shape-describe-vpc-endpoints-response-vpc-endpoints
                         :shape "VpcEndpoints" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-endpoint-errors :initarg :vpc-endpoint-errors
                         :initform
                         (common-lisp:error ":vpc-endpoint-errors is required")
                         :type
                         (common-lisp:or vpc-endpoint-error-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-vpc-endpoints-response-vpc-endpoint-errors
                         :shape "VpcEndpointErrorList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-vpc-endpoints-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-endpoints-response
                    'make-describe-vpc-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoints))
      (common-lisp:list
       (common-lisp:cons "VpcEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-errors))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype disable-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition disabled-operation-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'disabled-operation-exception)))
(common-lisp:progn
 (common-lisp:defclass dissociate-package-request common-lisp:nil
                       ((package-id :initarg :package-id :initform
                         (common-lisp:error ":package-id is required") :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         struct-shape-dissociate-package-request-package-id
                         :shape "PackageID" :location "uri" :location-name
                         "PackageID")
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-dissociate-package-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dissociate-package-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dissociate-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dissociate-package-request
                    'make-dissociate-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dissociate-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dissociate-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dissociate-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dissociate-package-response common-lisp:nil
                       ((domain-package-details :initarg
                         :domain-package-details :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-package-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-dissociate-package-response-domain-package-details
                         :shape "DomainPackageDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dissociate-package-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dissociate-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'dissociate-package-response
                    'make-dissociate-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dissociate-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dissociate-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-package-details))
      (common-lisp:list
       (common-lisp:cons "DomainPackageDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dissociate-package-response))
   common-lisp:nil))
(common-lisp:deftype domain-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass domain-endpoint-options common-lisp:nil
                       ((enforce-https :initarg :enforce-https :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-domain-endpoint-options-enforce-https
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tlssecurity-policy :initarg :tlssecurity-policy
                         :initform common-lisp:nil :type
                         (common-lisp:or tlssecurity-policy common-lisp:null)
                         :accessor
                         struct-shape-domain-endpoint-options-tlssecurity-policy
                         :shape "TLSSecurityPolicy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-endpoint-enabled :initarg
                         :custom-endpoint-enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-domain-endpoint-options-custom-endpoint-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-endpoint :initarg :custom-endpoint :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name-fqdn common-lisp:null)
                         :accessor
                         struct-shape-domain-endpoint-options-custom-endpoint
                         :shape "DomainNameFqdn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-endpoint-certificate-arn :initarg
                         :custom-endpoint-certificate-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-domain-endpoint-options-custom-endpoint-certificate-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-endpoint-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-endpoint-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'domain-endpoint-options 'make-domain-endpoint-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforce-https))
      (common-lisp:list
       (common-lisp:cons "EnforceHTTPS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tlssecurity-policy))
      (common-lisp:list
       (common-lisp:cons "TLSSecurityPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-endpoint-enabled))
      (common-lisp:list
       (common-lisp:cons "CustomEndpointEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-endpoint))
      (common-lisp:list
       (common-lisp:cons "CustomEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-endpoint-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CustomEndpointCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass domain-endpoint-options-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or domain-endpoint-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-domain-endpoint-options-status-options
                         :shape "DomainEndpointOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor
                         struct-shape-domain-endpoint-options-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-endpoint-options-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'domain-endpoint-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'domain-endpoint-options-status
                    'make-domain-endpoint-options-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options-status))
   common-lisp:nil))
(common-lisp:deftype domain-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass domain-info common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-domain-info-domain-name :shape
                         "DomainName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (engine-type :initarg :engine-type :initform
                         common-lisp:nil :type
                         (common-lisp:or engine-type common-lisp:null)
                         :accessor struct-shape-domain-info-engine-type :shape
                         "EngineType" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'domain-info 'make-domain-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-type))
      (common-lisp:list
       (common-lisp:cons "EngineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-info-list ()
   '(trivial-types:proper-list domain-info))
 (common-lisp:defun make-domain-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass domain-information common-lisp:nil
                       ((owner-id :initarg :owner-id :initform common-lisp:nil
                         :type (common-lisp:or owner-id common-lisp:null)
                         :accessor struct-shape-domain-information-owner-id
                         :shape "OwnerId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor struct-shape-domain-information-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or region common-lisp:null)
                         :accessor struct-shape-domain-information-region
                         :shape "Region" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-information
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-information
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'domain-information 'make-domain-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-information))
   common-lisp:nil))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype domain-name-fqdn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-name-list ()
   '(trivial-types:proper-list domain-name))
 (common-lisp:defun make-domain-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass domain-package-details common-lisp:nil
                       ((package-id :initarg :package-id :initform
                         common-lisp:nil :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         struct-shape-domain-package-details-package-id :shape
                         "PackageID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (package-name :initarg :package-name :initform
                         common-lisp:nil :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         struct-shape-domain-package-details-package-name
                         :shape "PackageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-type :initarg :package-type :initform
                         common-lisp:nil :type
                         (common-lisp:or package-type common-lisp:null)
                         :accessor
                         struct-shape-domain-package-details-package-type
                         :shape "PackageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated :initarg :last-updated :initform
                         common-lisp:nil :type
                         (common-lisp:or last-updated common-lisp:null)
                         :accessor
                         struct-shape-domain-package-details-last-updated
                         :shape "LastUpdated" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-domain-package-details-domain-name :shape
                         "DomainName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-package-status :initarg :domain-package-status
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-package-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-domain-package-details-domain-package-status
                         :shape "DomainPackageStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-version :initarg :package-version :initform
                         common-lisp:nil :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor
                         struct-shape-domain-package-details-package-version
                         :shape "PackageVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reference-path :initarg :reference-path :initform
                         common-lisp:nil :type
                         (common-lisp:or reference-path common-lisp:null)
                         :accessor
                         struct-shape-domain-package-details-reference-path
                         :shape "ReferencePath" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-details :initarg :error-details :initform
                         common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor
                         struct-shape-domain-package-details-error-details
                         :shape "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-domain-package-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'domain-package-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'domain-package-details 'make-domain-package-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-package-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-package-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-type))
      (common-lisp:list
       (common-lisp:cons "PackageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-package-status))
      (common-lisp:list
       (common-lisp:cons "DomainPackageStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-path))
      (common-lisp:list
       (common-lisp:cons "ReferencePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-package-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-package-details-list ()
   '(trivial-types:proper-list domain-package-details))
 (common-lisp:defun make-domain-package-details-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-package-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-package-status () 'common-lisp:string)
(common-lisp:deftype domain-processing-status-type () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype dry-run () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass dry-run-results common-lisp:nil
                       ((deployment-type :initarg :deployment-type :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-type common-lisp:null)
                         :accessor struct-shape-dry-run-results-deployment-type
                         :shape "DeploymentType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type (common-lisp:or message common-lisp:null)
                         :accessor struct-shape-dry-run-results-message :shape
                         "Message" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-dry-run-results
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'dry-run-results
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'dry-run-results 'make-dry-run-results))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dry-run-results))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dry-run-results))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "DeploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dry-run-results))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass duration common-lisp:nil
                       ((value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or duration-value common-lisp:null)
                         :accessor struct-shape-duration-value :shape
                         "DurationValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (unit :initarg :unit :initform common-lisp:nil :type
                         (common-lisp:or time-unit common-lisp:null) :accessor
                         struct-shape-duration-unit :shape "TimeUnit" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-duration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'duration
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'duration 'make-duration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input duration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input duration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input duration))
   common-lisp:nil))
(common-lisp:deftype duration-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass ebsoptions common-lisp:nil
                       ((ebsenabled :initarg :ebsenabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-ebsoptions-ebsenabled :shape "Boolean"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volume-type :initarg :volume-type :initform
                         common-lisp:nil :type
                         (common-lisp:or volume-type common-lisp:null)
                         :accessor struct-shape-ebsoptions-volume-type :shape
                         "VolumeType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (volume-size :initarg :volume-size :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor struct-shape-ebsoptions-volume-size :shape
                         "IntegerClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (iops :initarg :iops :initform common-lisp:nil :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor struct-shape-ebsoptions-iops :shape
                         "IntegerClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (throughput :initarg :throughput :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor struct-shape-ebsoptions-throughput :shape
                         "IntegerClass" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebsoptions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebsoptions
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ebsoptions 'make-ebsoptions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebsoptions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebsoptions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsenabled))
      (common-lisp:list
       (common-lisp:cons "EBSEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "Throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebsoptions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ebsoptions-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or ebsoptions common-lisp:null) :accessor
                         struct-shape-ebsoptions-status-options :shape
                         "EBSOptions" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor struct-shape-ebsoptions-status-status :shape
                         "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ebsoptions-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ebsoptions-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'ebsoptions-status 'make-ebsoptions-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebsoptions-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebsoptions-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebsoptions-status))
   common-lisp:nil))
(common-lisp:deftype espartition-instance-type () 'common-lisp:string)
(common-lisp:deftype eswarm-partition-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass elasticsearch-cluster-config common-lisp:nil
                       ((instance-type :initarg :instance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or espartition-instance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-cluster-config-instance-type
                         :shape "ESPartitionInstanceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (instance-count :initarg :instance-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-cluster-config-instance-count
                         :shape "IntegerClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dedicated-master-enabled :initarg
                         :dedicated-master-enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-cluster-config-dedicated-master-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (zone-awareness-enabled :initarg
                         :zone-awareness-enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-cluster-config-zone-awareness-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (zone-awareness-config :initarg :zone-awareness-config
                         :initform common-lisp:nil :type
                         (common-lisp:or zone-awareness-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-cluster-config-zone-awareness-config
                         :shape "ZoneAwarenessConfig" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dedicated-master-type :initarg :dedicated-master-type
                         :initform common-lisp:nil :type
                         (common-lisp:or espartition-instance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-cluster-config-dedicated-master-type
                         :shape "ESPartitionInstanceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dedicated-master-count :initarg
                         :dedicated-master-count :initform common-lisp:nil
                         :type (common-lisp:or integer-class common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-cluster-config-dedicated-master-count
                         :shape "IntegerClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (warm-enabled :initarg :warm-enabled :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-elasticsearch-cluster-config-warm-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (warm-type :initarg :warm-type :initform
                         common-lisp:nil :type
                         (common-lisp:or eswarm-partition-instance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-cluster-config-warm-type
                         :shape "ESWarmPartitionInstanceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (warm-count :initarg :warm-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-cluster-config-warm-count
                         :shape "IntegerClass" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cold-storage-options :initarg :cold-storage-options
                         :initform common-lisp:nil :type
                         (common-lisp:or cold-storage-options common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-cluster-config-cold-storage-options
                         :shape "ColdStorageOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elasticsearch-cluster-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'elasticsearch-cluster-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-cluster-config
                    'make-elasticsearch-cluster-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-cluster-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-cluster-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-enabled))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-awareness-enabled))
      (common-lisp:list
       (common-lisp:cons "ZoneAwarenessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-awareness-config))
      (common-lisp:list
       (common-lisp:cons "ZoneAwarenessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-type))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-count))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-enabled))
      (common-lisp:list
       (common-lisp:cons "WarmEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-type))
      (common-lisp:list
       (common-lisp:cons "WarmType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-count))
      (common-lisp:list
       (common-lisp:cons "WarmCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cold-storage-options))
      (common-lisp:list
       (common-lisp:cons "ColdStorageOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-cluster-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass elasticsearch-cluster-config-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or elasticsearch-cluster-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-cluster-config-status-options
                         :shape "ElasticsearchClusterConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-cluster-config-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elasticsearch-cluster-config-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'elasticsearch-cluster-config-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-cluster-config-status
                    'make-elasticsearch-cluster-config-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-cluster-config-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-cluster-config-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-cluster-config-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass elasticsearch-domain-config common-lisp:nil
                       ((elasticsearch-version :initarg :elasticsearch-version
                         :initform common-lisp:nil :type
                         (common-lisp:or elasticsearch-version-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-elasticsearch-version
                         :shape "ElasticsearchVersionStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (elasticsearch-cluster-config :initarg
                         :elasticsearch-cluster-config :initform
                         common-lisp:nil :type
                         (common-lisp:or elasticsearch-cluster-config-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-elasticsearch-cluster-config
                         :shape "ElasticsearchClusterConfigStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ebsoptions :initarg :ebsoptions :initform
                         common-lisp:nil :type
                         (common-lisp:or ebsoptions-status common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-ebsoptions
                         :shape "EBSOptionsStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-policies :initarg :access-policies :initform
                         common-lisp:nil :type
                         (common-lisp:or access-policies-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-access-policies
                         :shape "AccessPoliciesStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (snapshot-options :initarg :snapshot-options :initform
                         common-lisp:nil :type
                         (common-lisp:or snapshot-options-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-snapshot-options
                         :shape "SnapshotOptionsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (vpcoptions :initarg :vpcoptions :initform
                         common-lisp:nil :type
                         (common-lisp:or vpcderived-info-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-vpcoptions
                         :shape "VPCDerivedInfoStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (cognito-options :initarg :cognito-options :initform
                         common-lisp:nil :type
                         (common-lisp:or cognito-options-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-cognito-options
                         :shape "CognitoOptionsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-at-rest-options :initarg
                         :encryption-at-rest-options :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-at-rest-options-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-encryption-at-rest-options
                         :shape "EncryptionAtRestOptionsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (node-to-node-encryption-options :initarg
                         :node-to-node-encryption-options :initform
                         common-lisp:nil :type
                         (common-lisp:or node-to-node-encryption-options-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-node-to-node-encryption-options
                         :shape "NodeToNodeEncryptionOptionsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (advanced-options :initarg :advanced-options :initform
                         common-lisp:nil :type
                         (common-lisp:or advanced-options-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-advanced-options
                         :shape "AdvancedOptionsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (log-publishing-options :initarg
                         :log-publishing-options :initform common-lisp:nil
                         :type
                         (common-lisp:or log-publishing-options-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-log-publishing-options
                         :shape "LogPublishingOptionsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-endpoint-options :initarg
                         :domain-endpoint-options :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-endpoint-options-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-domain-endpoint-options
                         :shape "DomainEndpointOptionsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (advanced-security-options :initarg
                         :advanced-security-options :initform common-lisp:nil
                         :type
                         (common-lisp:or advanced-security-options-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-advanced-security-options
                         :shape "AdvancedSecurityOptionsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-tune-options :initarg :auto-tune-options
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-tune-options-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-auto-tune-options
                         :shape "AutoTuneOptionsStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (change-progress-details :initarg
                         :change-progress-details :initform common-lisp:nil
                         :type
                         (common-lisp:or change-progress-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-change-progress-details
                         :shape "ChangeProgressDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (modifying-properties :initarg :modifying-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or modifying-properties-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-config-modifying-properties
                         :shape "ModifyingPropertiesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elasticsearch-domain-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'elasticsearch-domain-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-domain-config
                    'make-elasticsearch-domain-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-domain-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-domain-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-version))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-cluster-config))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsoptions))
      (common-lisp:list
       (common-lisp:cons "EBSOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-options))
      (common-lisp:list
       (common-lisp:cons "SnapshotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcoptions))
      (common-lisp:list
       (common-lisp:cons "VPCOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cognito-options))
      (common-lisp:list
       (common-lisp:cons "CognitoOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-at-rest-options))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRestOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-to-node-encryption-options))
      (common-lisp:list
       (common-lisp:cons "NodeToNodeEncryptionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-options))
      (common-lisp:list
       (common-lisp:cons "LogPublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-security-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedSecurityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-tune-options))
      (common-lisp:list
       (common-lisp:cons "AutoTuneOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-progress-details))
      (common-lisp:list
       (common-lisp:cons "ChangeProgressDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'modifying-properties))
      (common-lisp:list
       (common-lisp:cons "ModifyingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-domain-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass elasticsearch-domain-status common-lisp:nil
                       ((domain-id :initarg :domain-id :initform
                         (common-lisp:error ":domain-id is required") :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         struct-shape-elasticsearch-domain-status-domain-id
                         :shape "DomainId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-elasticsearch-domain-status-arn :shape
                         "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created :initarg :created :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-created
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (deleted :initarg :deleted :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-deleted
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or service-url common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-endpoint
                         :shape "ServiceUrl" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoints :initarg :endpoints :initform
                         common-lisp:nil :type
                         (common-lisp:or endpoints-map common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-endpoints
                         :shape "EndpointsMap" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (processing :initarg :processing :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-elasticsearch-domain-status-processing
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upgrade-processing :initarg :upgrade-processing
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-elasticsearch-domain-status-upgrade-processing
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elasticsearch-version :initarg :elasticsearch-version
                         :initform common-lisp:nil :type
                         (common-lisp:or elasticsearch-version-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-elasticsearch-version
                         :shape "ElasticsearchVersionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (elasticsearch-cluster-config :initarg
                         :elasticsearch-cluster-config :initform
                         (common-lisp:error
                          ":elasticsearch-cluster-config is required")
                         :type
                         (common-lisp:or elasticsearch-cluster-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-elasticsearch-cluster-config
                         :shape "ElasticsearchClusterConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ebsoptions :initarg :ebsoptions :initform
                         common-lisp:nil :type
                         (common-lisp:or ebsoptions common-lisp:null) :accessor
                         struct-shape-elasticsearch-domain-status-ebsoptions
                         :shape "EBSOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-policies :initarg :access-policies :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-access-policies
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-options :initarg :snapshot-options :initform
                         common-lisp:nil :type
                         (common-lisp:or snapshot-options common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-snapshot-options
                         :shape "SnapshotOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpcoptions :initarg :vpcoptions :initform
                         common-lisp:nil :type
                         (common-lisp:or vpcderived-info common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-vpcoptions
                         :shape "VPCDerivedInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cognito-options :initarg :cognito-options :initform
                         common-lisp:nil :type
                         (common-lisp:or cognito-options common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-cognito-options
                         :shape "CognitoOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (encryption-at-rest-options :initarg
                         :encryption-at-rest-options :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-at-rest-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-encryption-at-rest-options
                         :shape "EncryptionAtRestOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (node-to-node-encryption-options :initarg
                         :node-to-node-encryption-options :initform
                         common-lisp:nil :type
                         (common-lisp:or node-to-node-encryption-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-node-to-node-encryption-options
                         :shape "NodeToNodeEncryptionOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (advanced-options :initarg :advanced-options :initform
                         common-lisp:nil :type
                         (common-lisp:or advanced-options common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-advanced-options
                         :shape "AdvancedOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-publishing-options :initarg
                         :log-publishing-options :initform common-lisp:nil
                         :type
                         (common-lisp:or log-publishing-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-log-publishing-options
                         :shape "LogPublishingOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (service-software-options :initarg
                         :service-software-options :initform common-lisp:nil
                         :type
                         (common-lisp:or service-software-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-service-software-options
                         :shape "ServiceSoftwareOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-endpoint-options :initarg
                         :domain-endpoint-options :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-endpoint-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-domain-endpoint-options
                         :shape "DomainEndpointOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (advanced-security-options :initarg
                         :advanced-security-options :initform common-lisp:nil
                         :type
                         (common-lisp:or advanced-security-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-advanced-security-options
                         :shape "AdvancedSecurityOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-tune-options :initarg :auto-tune-options
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-tune-options-output
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-auto-tune-options
                         :shape "AutoTuneOptionsOutput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (change-progress-details :initarg
                         :change-progress-details :initform common-lisp:nil
                         :type
                         (common-lisp:or change-progress-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-change-progress-details
                         :shape "ChangeProgressDetails" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-processing-status :initarg
                         :domain-processing-status :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-processing-status-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-domain-processing-status
                         :shape "DomainProcessingStatusType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (modifying-properties :initarg :modifying-properties
                         :initform common-lisp:nil :type
                         (common-lisp:or modifying-properties-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-domain-status-modifying-properties
                         :shape "ModifyingPropertiesList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elasticsearch-domain-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'elasticsearch-domain-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-domain-status
                    'make-elasticsearch-domain-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-domain-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-domain-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "Created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted))
      (common-lisp:list
       (common-lisp:cons "Deleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing))
      (common-lisp:list
       (common-lisp:cons "Processing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-processing))
      (common-lisp:list
       (common-lisp:cons "UpgradeProcessing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-version))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-cluster-config))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsoptions))
      (common-lisp:list
       (common-lisp:cons "EBSOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-options))
      (common-lisp:list
       (common-lisp:cons "SnapshotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcoptions))
      (common-lisp:list
       (common-lisp:cons "VPCOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cognito-options))
      (common-lisp:list
       (common-lisp:cons "CognitoOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-at-rest-options))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRestOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-to-node-encryption-options))
      (common-lisp:list
       (common-lisp:cons "NodeToNodeEncryptionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-options))
      (common-lisp:list
       (common-lisp:cons "LogPublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-software-options))
      (common-lisp:list
       (common-lisp:cons "ServiceSoftwareOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-security-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedSecurityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-tune-options))
      (common-lisp:list
       (common-lisp:cons "AutoTuneOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-progress-details))
      (common-lisp:list
       (common-lisp:cons "ChangeProgressDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-processing-status))
      (common-lisp:list
       (common-lisp:cons "DomainProcessingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'modifying-properties))
      (common-lisp:list
       (common-lisp:cons "ModifyingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-domain-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype elasticsearch-domain-status-list ()
   '(trivial-types:proper-list elasticsearch-domain-status))
 (common-lisp:defun make-elasticsearch-domain-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            elasticsearch-domain-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype elasticsearch-instance-type-list ()
   '(trivial-types:proper-list espartition-instance-type))
 (common-lisp:defun make-elasticsearch-instance-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            espartition-instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype elasticsearch-version-list ()
   '(trivial-types:proper-list elasticsearch-version-string))
 (common-lisp:defun make-elasticsearch-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            elasticsearch-version-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass elasticsearch-version-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or elasticsearch-version-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-version-status-options
                         :shape "ElasticsearchVersionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor
                         struct-shape-elasticsearch-version-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-elasticsearch-version-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'elasticsearch-version-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-version-status
                    'make-elasticsearch-version-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-version-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-version-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          elasticsearch-version-status))
   common-lisp:nil))
(common-lisp:deftype elasticsearch-version-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass encryption-at-rest-options common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-encryption-at-rest-options-enabled :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (kms-key-id :initarg :kms-key-id :initform
                         common-lisp:nil :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         struct-shape-encryption-at-rest-options-kms-key-id
                         :shape "KmsKeyId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-at-rest-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-at-rest-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-at-rest-options
                    'make-encryption-at-rest-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-at-rest-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-at-rest-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-at-rest-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-at-rest-options-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or encryption-at-rest-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-encryption-at-rest-options-status-options
                         :shape "EncryptionAtRestOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor
                         struct-shape-encryption-at-rest-options-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-encryption-at-rest-options-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'encryption-at-rest-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'encryption-at-rest-options-status
                    'make-encryption-at-rest-options-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-at-rest-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-at-rest-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-at-rest-options-status))
   common-lisp:nil))
(common-lisp:deftype endpoint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype endpoints-map () 'common-lisp:hash-table)
 (common-lisp:defun make-endpoints-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype engine-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-details common-lisp:nil
                       ((error-type :initarg :error-type :initform
                         common-lisp:nil :type
                         (common-lisp:or error-type common-lisp:null) :accessor
                         struct-shape-error-details-error-type :shape
                         "ErrorType" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor struct-shape-error-details-error-message
                         :shape "ErrorMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-error-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "ErrorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype error-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor struct-shape-filter-name :shape
                         "NonEmptyString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (values :initarg :values :initform common-lisp:nil
                         :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor struct-shape-filter-values :shape
                         "ValueStringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-filter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype guid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype guidlist () '(trivial-types:proper-list guid))
 (common-lisp:defun make-guidlist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list guid))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-compatible-elasticsearch-versions-request
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-get-compatible-elasticsearch-versions-request-domain-name
                         :shape "DomainName" :location "querystring"
                         :location-name "domainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-compatible-elasticsearch-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compatible-elasticsearch-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-compatible-elasticsearch-versions-request
                    'make-get-compatible-elasticsearch-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-elasticsearch-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-elasticsearch-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-elasticsearch-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compatible-elasticsearch-versions-response
                       common-lisp:nil
                       ((compatible-elasticsearch-versions :initarg
                         :compatible-elasticsearch-versions :initform
                         common-lisp:nil :type
                         (common-lisp:or compatible-elasticsearch-versions-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-compatible-elasticsearch-versions-response-compatible-elasticsearch-versions
                         :shape "CompatibleElasticsearchVersionsList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-compatible-elasticsearch-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compatible-elasticsearch-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-compatible-elasticsearch-versions-response
                    'make-get-compatible-elasticsearch-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-elasticsearch-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-elasticsearch-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compatible-elasticsearch-versions))
      (common-lisp:list
       (common-lisp:cons "CompatibleElasticsearchVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-elasticsearch-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-package-version-history-request common-lisp:nil
                       ((package-id :initarg :package-id :initform
                         (common-lisp:error ":package-id is required") :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         struct-shape-get-package-version-history-request-package-id
                         :shape "PackageID" :location "uri" :location-name
                         "PackageID")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-package-version-history-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-package-version-history-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-package-version-history-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-package-version-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-package-version-history-request
                    'make-get-package-version-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-package-version-history-response common-lisp:nil
                       ((package-id :initarg :package-id :initform
                         common-lisp:nil :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         struct-shape-get-package-version-history-response-package-id
                         :shape "PackageID" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-version-history-list :initarg
                         :package-version-history-list :initform
                         common-lisp:nil :type
                         (common-lisp:or package-version-history-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-package-version-history-response-package-version-history-list
                         :shape "PackageVersionHistoryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-package-version-history-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-package-version-history-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-package-version-history-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-package-version-history-response
                    'make-get-package-version-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-version-history-list))
      (common-lisp:list
       (common-lisp:cons "PackageVersionHistoryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-upgrade-history-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-get-upgrade-history-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-get-upgrade-history-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-upgrade-history-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-upgrade-history-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-upgrade-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-upgrade-history-request
                    'make-get-upgrade-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-upgrade-history-response common-lisp:nil
                       ((upgrade-histories :initarg :upgrade-histories
                         :initform common-lisp:nil :type
                         (common-lisp:or upgrade-history-list common-lisp:null)
                         :accessor
                         struct-shape-get-upgrade-history-response-upgrade-histories
                         :shape "UpgradeHistoryList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-upgrade-history-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-upgrade-history-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-upgrade-history-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-upgrade-history-response
                    'make-get-upgrade-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-histories))
      (common-lisp:list
       (common-lisp:cons "UpgradeHistories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-upgrade-status-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-get-upgrade-status-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-upgrade-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-upgrade-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-upgrade-status-request
                    'make-get-upgrade-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-upgrade-status-response common-lisp:nil
                       ((upgrade-step :initarg :upgrade-step :initform
                         common-lisp:nil :type
                         (common-lisp:or upgrade-step common-lisp:null)
                         :accessor
                         struct-shape-get-upgrade-status-response-upgrade-step
                         :shape "UpgradeStep" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (step-status :initarg :step-status :initform
                         common-lisp:nil :type
                         (common-lisp:or upgrade-status common-lisp:null)
                         :accessor
                         struct-shape-get-upgrade-status-response-step-status
                         :shape "UpgradeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upgrade-name :initarg :upgrade-name :initform
                         common-lisp:nil :type
                         (common-lisp:or upgrade-name common-lisp:null)
                         :accessor
                         struct-shape-get-upgrade-status-response-upgrade-name
                         :shape "UpgradeName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-upgrade-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-upgrade-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-upgrade-status-response
                    'make-get-upgrade-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-step))
      (common-lisp:list
       (common-lisp:cons "UpgradeStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-status))
      (common-lisp:list
       (common-lisp:cons "StepStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-name))
      (common-lisp:list
       (common-lisp:cons "UpgradeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-status-response))
   common-lisp:nil))
(common-lisp:deftype identity-pool-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass inbound-cross-cluster-search-connection common-lisp:nil
                       ((source-domain-info :initarg :source-domain-info
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-information common-lisp:null)
                         :accessor
                         struct-shape-inbound-cross-cluster-search-connection-source-domain-info
                         :shape "DomainInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-domain-info :initarg
                         :destination-domain-info :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-information common-lisp:null)
                         :accessor
                         struct-shape-inbound-cross-cluster-search-connection-destination-domain-info
                         :shape "DomainInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cross-cluster-search-connection-id :initarg
                         :cross-cluster-search-connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or cross-cluster-search-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-inbound-cross-cluster-search-connection-cross-cluster-search-connection-id
                         :shape "CrossClusterSearchConnectionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-status :initarg :connection-status
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          inbound-cross-cluster-search-connection-status
                          common-lisp:null)
                         :accessor
                         struct-shape-inbound-cross-cluster-search-connection-connection-status
                         :shape "InboundCrossClusterSearchConnectionStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inbound-cross-cluster-search-connection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'inbound-cross-cluster-search-connection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inbound-cross-cluster-search-connection
                    'make-inbound-cross-cluster-search-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inbound-cross-cluster-search-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inbound-cross-cluster-search-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-domain-info))
      (common-lisp:list
       (common-lisp:cons "SourceDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-domain-info))
      (common-lisp:list
       (common-lisp:cons "DestinationDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-cluster-search-connection-id))
      (common-lisp:list
       (common-lisp:cons "CrossClusterSearchConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inbound-cross-cluster-search-connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inbound-cross-cluster-search-connection-status
                       common-lisp:nil
                       ((status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          inbound-cross-cluster-search-connection-status-code
                          common-lisp:null)
                         :accessor
                         struct-shape-inbound-cross-cluster-search-connection-status-status-code
                         :shape "InboundCrossClusterSearchConnectionStatusCode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          cross-cluster-search-connection-status-message
                          common-lisp:null)
                         :accessor
                         struct-shape-inbound-cross-cluster-search-connection-status-message
                         :shape "CrossClusterSearchConnectionStatusMessage"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-inbound-cross-cluster-search-connection-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'inbound-cross-cluster-search-connection-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'inbound-cross-cluster-search-connection-status
                    'make-inbound-cross-cluster-search-connection-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inbound-cross-cluster-search-connection-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inbound-cross-cluster-search-connection-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inbound-cross-cluster-search-connection-status))
   common-lisp:nil))
(common-lisp:deftype inbound-cross-cluster-search-connection-status-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inbound-cross-cluster-search-connections ()
   '(trivial-types:proper-list inbound-cross-cluster-search-connection))
 (common-lisp:defun make-inbound-cross-cluster-search-connections
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inbound-cross-cluster-search-connection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype initiated-by () 'common-lisp:string)
(common-lisp:deftype instance-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass instance-count-limits common-lisp:nil
                       ((minimum-instance-count :initarg
                         :minimum-instance-count :initform common-lisp:nil
                         :type
                         (common-lisp:or minimum-instance-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-count-limits-minimum-instance-count
                         :shape "MinimumInstanceCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-instance-count :initarg
                         :maximum-instance-count :initform common-lisp:nil
                         :type
                         (common-lisp:or maximum-instance-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-count-limits-maximum-instance-count
                         :shape "MaximumInstanceCount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-count-limits
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-count-limits
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'instance-count-limits 'make-instance-count-limits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-count-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-count-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-instance-count))
      (common-lisp:list
       (common-lisp:cons "MinimumInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-instance-count))
      (common-lisp:list
       (common-lisp:cons "MaximumInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-count-limits))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-limits common-lisp:nil
                       ((instance-count-limits :initarg :instance-count-limits
                         :initform common-lisp:nil :type
                         (common-lisp:or instance-count-limits
                                         common-lisp:null)
                         :accessor
                         struct-shape-instance-limits-instance-count-limits
                         :shape "InstanceCountLimits" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-instance-limits
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'instance-limits
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'instance-limits 'make-instance-limits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-count-limits))
      (common-lisp:list
       (common-lisp:cons "InstanceCountLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-limits))
   common-lisp:nil))
(common-lisp:deftype instance-role () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-class () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'internal-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-pagination-token-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-pagination-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-type-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-type-exception)))
(common-lisp:deftype issue () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype issues () '(trivial-types:proper-list issue))
 (common-lisp:defun make-issues
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list issue))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:deftype last-updated () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:deftype limit-name () 'common-lisp:string)
(common-lisp:deftype limit-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype limit-value-list ()
   '(trivial-types:proper-list limit-value))
 (common-lisp:defun make-limit-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list limit-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass limits common-lisp:nil
                       ((storage-types :initarg :storage-types :initform
                         common-lisp:nil :type
                         (common-lisp:or storage-type-list common-lisp:null)
                         :accessor struct-shape-limits-storage-types :shape
                         "StorageTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (instance-limits :initarg :instance-limits :initform
                         common-lisp:nil :type
                         (common-lisp:or instance-limits common-lisp:null)
                         :accessor struct-shape-limits-instance-limits :shape
                         "InstanceLimits" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (additional-limits :initarg :additional-limits
                         :initform common-lisp:nil :type
                         (common-lisp:or additional-limit-list
                                         common-lisp:null)
                         :accessor struct-shape-limits-additional-limits :shape
                         "AdditionalLimitList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-limits
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'limits
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'limits 'make-limits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-types))
      (common-lisp:list
       (common-lisp:cons "StorageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-limits))
      (common-lisp:list
       (common-lisp:cons "InstanceLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-limits))
      (common-lisp:list
       (common-lisp:cons "AdditionalLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input limits))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype limits-by-role () 'common-lisp:hash-table)
 (common-lisp:defun make-limits-by-role (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass list-domain-names-request common-lisp:nil
                       ((engine-type :initarg :engine-type :initform
                         common-lisp:nil :type
                         (common-lisp:or engine-type common-lisp:null)
                         :accessor
                         struct-shape-list-domain-names-request-engine-type
                         :shape "EngineType" :location "querystring"
                         :location-name "engineType"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domain-names-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-domain-names-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domain-names-request
                    'make-list-domain-names-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domain-names-response common-lisp:nil
                       ((domain-names :initarg :domain-names :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-info-list common-lisp:null)
                         :accessor
                         struct-shape-list-domain-names-response-domain-names
                         :shape "DomainInfoList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domain-names-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-domain-names-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domain-names-response
                    'make-list-domain-names-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-names))
      (common-lisp:list
       (common-lisp:cons "DomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domains-for-package-request common-lisp:nil
                       ((package-id :initarg :package-id :initform
                         (common-lisp:error ":package-id is required") :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         struct-shape-list-domains-for-package-request-package-id
                         :shape "PackageID" :location "uri" :location-name
                         "PackageID")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-domains-for-package-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-domains-for-package-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domains-for-package-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-domains-for-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domains-for-package-request
                    'make-list-domains-for-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-for-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-for-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-for-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domains-for-package-response common-lisp:nil
                       ((domain-package-details-list :initarg
                         :domain-package-details-list :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-package-details-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-domains-for-package-response-domain-package-details-list
                         :shape "DomainPackageDetailsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-domains-for-package-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-domains-for-package-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-domains-for-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-domains-for-package-response
                    'make-list-domains-for-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-for-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-for-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-package-details-list))
      (common-lisp:list
       (common-lisp:cons "DomainPackageDetailsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-for-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-elasticsearch-instance-types-request
                       common-lisp:nil
                       ((elasticsearch-version :initarg :elasticsearch-version
                         :initform
                         (common-lisp:error
                          ":elasticsearch-version is required")
                         :type
                         (common-lisp:or elasticsearch-version-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-elasticsearch-instance-types-request-elasticsearch-version
                         :shape "ElasticsearchVersionString" :location "uri"
                         :location-name "ElasticsearchVersion")
                        (domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-list-elasticsearch-instance-types-request-domain-name
                         :shape "DomainName" :location "querystring"
                         :location-name "domainName")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-elasticsearch-instance-types-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-elasticsearch-instance-types-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-elasticsearch-instance-types-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-elasticsearch-instance-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-elasticsearch-instance-types-request
                    'make-list-elasticsearch-instance-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-instance-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-instance-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-instance-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-elasticsearch-instance-types-response
                       common-lisp:nil
                       ((elasticsearch-instance-types :initarg
                         :elasticsearch-instance-types :initform
                         common-lisp:nil :type
                         (common-lisp:or elasticsearch-instance-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-elasticsearch-instance-types-response-elasticsearch-instance-types
                         :shape "ElasticsearchInstanceTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-elasticsearch-instance-types-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-elasticsearch-instance-types-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-elasticsearch-instance-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-elasticsearch-instance-types-response
                    'make-list-elasticsearch-instance-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-instance-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-instance-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-instance-types))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-instance-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-elasticsearch-versions-request common-lisp:nil
                       ((max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-elasticsearch-versions-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-elasticsearch-versions-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-elasticsearch-versions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-elasticsearch-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-elasticsearch-versions-request
                    'make-list-elasticsearch-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-elasticsearch-versions-response common-lisp:nil
                       ((elasticsearch-versions :initarg
                         :elasticsearch-versions :initform common-lisp:nil
                         :type
                         (common-lisp:or elasticsearch-version-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-elasticsearch-versions-response-elasticsearch-versions
                         :shape "ElasticsearchVersionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-elasticsearch-versions-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-elasticsearch-versions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-elasticsearch-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-elasticsearch-versions-response
                    'make-list-elasticsearch-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-versions))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-elasticsearch-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-packages-for-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-list-packages-for-domain-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName")
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         struct-shape-list-packages-for-domain-request-max-results
                         :shape "MaxResults" :location "querystring"
                         :location-name "maxResults")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-packages-for-domain-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-packages-for-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-packages-for-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-packages-for-domain-request
                    'make-list-packages-for-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-for-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-for-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-for-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-packages-for-domain-response common-lisp:nil
                       ((domain-package-details-list :initarg
                         :domain-package-details-list :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-package-details-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-packages-for-domain-response-domain-package-details-list
                         :shape "DomainPackageDetailsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-packages-for-domain-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-packages-for-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-packages-for-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-packages-for-domain-response
                    'make-list-packages-for-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-for-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-for-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-package-details-list))
      (common-lisp:list
       (common-lisp:cons "DomainPackageDetailsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-for-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-list-tags-request-arn :shape "ARN"
                         :location "querystring" :location-name "arn"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-request 'make-list-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-response common-lisp:nil
                       ((tag-list :initarg :tag-list :initform common-lisp:nil
                         :type (common-lisp:or tag-list common-lisp:null)
                         :accessor struct-shape-list-tags-response-tag-list
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-response 'make-list-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-endpoint-access-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-list-vpc-endpoint-access-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-vpc-endpoint-access-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vpc-endpoint-access-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpc-endpoint-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vpc-endpoint-access-request
                    'make-list-vpc-endpoint-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoint-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoint-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoint-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-endpoint-access-response common-lisp:nil
                       ((authorized-principal-list :initarg
                         :authorized-principal-list :initform
                         (common-lisp:error
                          ":authorized-principal-list is required")
                         :type
                         (common-lisp:or authorized-principal-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-vpc-endpoint-access-response-authorized-principal-list
                         :shape "AuthorizedPrincipalList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         (common-lisp:error ":next-token is required") :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-vpc-endpoint-access-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vpc-endpoint-access-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpc-endpoint-access-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vpc-endpoint-access-response
                    'make-list-vpc-endpoint-access-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoint-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoint-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principal-list))
      (common-lisp:list
       (common-lisp:cons "AuthorizedPrincipalList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoint-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-endpoints-for-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-list-vpc-endpoints-for-domain-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName")
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-vpc-endpoints-for-domain-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vpc-endpoints-for-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpc-endpoints-for-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vpc-endpoints-for-domain-request
                    'make-list-vpc-endpoints-for-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-for-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-for-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-for-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-endpoints-for-domain-response common-lisp:nil
                       ((vpc-endpoint-summary-list :initarg
                         :vpc-endpoint-summary-list :initform
                         (common-lisp:error
                          ":vpc-endpoint-summary-list is required")
                         :type
                         (common-lisp:or vpc-endpoint-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-vpc-endpoints-for-domain-response-vpc-endpoint-summary-list
                         :shape "VpcEndpointSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         (common-lisp:error ":next-token is required") :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-vpc-endpoints-for-domain-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vpc-endpoints-for-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpc-endpoints-for-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vpc-endpoints-for-domain-response
                    'make-list-vpc-endpoints-for-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-for-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-for-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-endpoint-summary-list))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-for-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-endpoints-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-vpc-endpoints-request-next-token
                         :shape "NextToken" :location "querystring"
                         :location-name "nextToken"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vpc-endpoints-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-vpc-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vpc-endpoints-request
                    'make-list-vpc-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-endpoints-response common-lisp:nil
                       ((vpc-endpoint-summary-list :initarg
                         :vpc-endpoint-summary-list :initform
                         (common-lisp:error
                          ":vpc-endpoint-summary-list is required")
                         :type
                         (common-lisp:or vpc-endpoint-summary-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-vpc-endpoints-response-vpc-endpoint-summary-list
                         :shape "VpcEndpointSummaryList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         (common-lisp:error ":next-token is required") :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-vpc-endpoints-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-vpc-endpoints-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-vpc-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-vpc-endpoints-response
                    'make-list-vpc-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-endpoint-summary-list))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass log-publishing-option common-lisp:nil
                       ((cloud-watch-logs-log-group-arn :initarg
                         :cloud-watch-logs-log-group-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or cloud-watch-logs-log-group-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-log-publishing-option-cloud-watch-logs-log-group-arn
                         :shape "CloudWatchLogsLogGroupArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-log-publishing-option-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-publishing-option
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'log-publishing-option
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'log-publishing-option 'make-log-publishing-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          log-publishing-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          log-publishing-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          log-publishing-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-publishing-options () 'common-lisp:hash-table)
 (common-lisp:defun make-log-publishing-options
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass log-publishing-options-status common-lisp:nil
                       ((options :initarg :options :initform common-lisp:nil
                         :type
                         (common-lisp:or log-publishing-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-log-publishing-options-status-options
                         :shape "LogPublishingOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type (common-lisp:or option-status common-lisp:null)
                         :accessor
                         struct-shape-log-publishing-options-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-log-publishing-options-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'log-publishing-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'log-publishing-options-status
                    'make-log-publishing-options-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          log-publishing-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          log-publishing-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          log-publishing-options-status))
   common-lisp:nil))
(common-lisp:deftype log-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass master-user-options common-lisp:nil
                       ((master-user-arn :initarg :master-user-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-master-user-options-master-user-arn
                         :shape "ARN" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-user-name :initarg :master-user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or username common-lisp:null) :accessor
                         struct-shape-master-user-options-master-user-name
                         :shape "Username" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (master-user-password :initarg :master-user-password
                         :initform common-lisp:nil :type
                         (common-lisp:or password common-lisp:null) :accessor
                         struct-shape-master-user-options-master-user-password
                         :shape "Password" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-master-user-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'master-user-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'master-user-options 'make-master-user-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input master-user-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input master-user-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-arn))
      (common-lisp:list
       (common-lisp:cons "MasterUserARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-name))
      (common-lisp:list
       (common-lisp:cons "MasterUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input master-user-options))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype maximum-instance-count () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype minimum-instance-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass modifying-properties common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modifying-properties-name :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (active-value :initarg :active-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modifying-properties-active-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pending-value :initarg :pending-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-modifying-properties-pending-value :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (value-type :initarg :value-type :initform
                         common-lisp:nil :type
                         (common-lisp:or property-value-type common-lisp:null)
                         :accessor struct-shape-modifying-properties-value-type
                         :shape "PropertyValueType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-modifying-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'modifying-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'modifying-properties 'make-modifying-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input modifying-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input modifying-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-value))
      (common-lisp:list
       (common-lisp:cons "ActiveValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-value))
      (common-lisp:list
       (common-lisp:cons "PendingValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-type))
      (common-lisp:list
       (common-lisp:cons "ValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input modifying-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype modifying-properties-list ()
   '(trivial-types:proper-list modifying-properties))
 (common-lisp:defun make-modifying-properties-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list modifying-properties))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass node-to-node-encryption-options common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-node-to-node-encryption-options-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-to-node-encryption-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'node-to-node-encryption-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-to-node-encryption-options
                    'make-node-to-node-encryption-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-to-node-encryption-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-to-node-encryption-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-to-node-encryption-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-to-node-encryption-options-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or node-to-node-encryption-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-node-to-node-encryption-options-status-options
                         :shape "NodeToNodeEncryptionOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor
                         struct-shape-node-to-node-encryption-options-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-node-to-node-encryption-options-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'node-to-node-encryption-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'node-to-node-encryption-options-status
                    'make-node-to-node-encryption-options-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-to-node-encryption-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-to-node-encryption-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-to-node-encryption-options-status))
   common-lisp:nil))
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:deftype option-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass option-status common-lisp:nil
                       ((creation-date :initarg :creation-date :initform
                         (common-lisp:error ":creation-date is required") :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor struct-shape-option-status-creation-date
                         :shape "UpdateTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-date :initarg :update-date :initform
                         (common-lisp:error ":update-date is required") :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor struct-shape-option-status-update-date
                         :shape "UpdateTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-version :initarg :update-version :initform
                         common-lisp:nil :type
                         (common-lisp:or uint-value common-lisp:null) :accessor
                         struct-shape-option-status-update-version :shape
                         "UIntValue" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform
                         (common-lisp:error ":state is required") :type
                         (common-lisp:or option-state common-lisp:null)
                         :accessor struct-shape-option-status-state :shape
                         "OptionState" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (pending-deletion :initarg :pending-deletion :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-option-status-pending-deletion :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-option-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'option-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'option-status 'make-option-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-version))
      (common-lisp:list
       (common-lisp:cons "UpdateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-deletion))
      (common-lisp:list
       (common-lisp:cons "PendingDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass outbound-cross-cluster-search-connection common-lisp:nil
                       ((source-domain-info :initarg :source-domain-info
                         :initform common-lisp:nil :type
                         (common-lisp:or domain-information common-lisp:null)
                         :accessor
                         struct-shape-outbound-cross-cluster-search-connection-source-domain-info
                         :shape "DomainInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (destination-domain-info :initarg
                         :destination-domain-info :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-information common-lisp:null)
                         :accessor
                         struct-shape-outbound-cross-cluster-search-connection-destination-domain-info
                         :shape "DomainInformation" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cross-cluster-search-connection-id :initarg
                         :cross-cluster-search-connection-id :initform
                         common-lisp:nil :type
                         (common-lisp:or cross-cluster-search-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-outbound-cross-cluster-search-connection-cross-cluster-search-connection-id
                         :shape "CrossClusterSearchConnectionId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (connection-alias :initarg :connection-alias :initform
                         common-lisp:nil :type
                         (common-lisp:or connection-alias common-lisp:null)
                         :accessor
                         struct-shape-outbound-cross-cluster-search-connection-connection-alias
                         :shape "ConnectionAlias" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (connection-status :initarg :connection-status
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          outbound-cross-cluster-search-connection-status
                          common-lisp:null)
                         :accessor
                         struct-shape-outbound-cross-cluster-search-connection-connection-status
                         :shape "OutboundCrossClusterSearchConnectionStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-outbound-cross-cluster-search-connection
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'outbound-cross-cluster-search-connection
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'outbound-cross-cluster-search-connection
                    'make-outbound-cross-cluster-search-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          outbound-cross-cluster-search-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          outbound-cross-cluster-search-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-domain-info))
      (common-lisp:list
       (common-lisp:cons "SourceDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-domain-info))
      (common-lisp:list
       (common-lisp:cons "DestinationDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-cluster-search-connection-id))
      (common-lisp:list
       (common-lisp:cons "CrossClusterSearchConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-alias))
      (common-lisp:list
       (common-lisp:cons "ConnectionAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          outbound-cross-cluster-search-connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass outbound-cross-cluster-search-connection-status
                       common-lisp:nil
                       ((status-code :initarg :status-code :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          outbound-cross-cluster-search-connection-status-code
                          common-lisp:null)
                         :accessor
                         struct-shape-outbound-cross-cluster-search-connection-status-status-code
                         :shape
                         "OutboundCrossClusterSearchConnectionStatusCode"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          cross-cluster-search-connection-status-message
                          common-lisp:null)
                         :accessor
                         struct-shape-outbound-cross-cluster-search-connection-status-message
                         :shape "CrossClusterSearchConnectionStatusMessage"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-outbound-cross-cluster-search-connection-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'outbound-cross-cluster-search-connection-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'outbound-cross-cluster-search-connection-status
                    'make-outbound-cross-cluster-search-connection-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          outbound-cross-cluster-search-connection-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          outbound-cross-cluster-search-connection-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          outbound-cross-cluster-search-connection-status))
   common-lisp:nil))
(common-lisp:deftype outbound-cross-cluster-search-connection-status-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype outbound-cross-cluster-search-connections ()
   '(trivial-types:proper-list outbound-cross-cluster-search-connection))
 (common-lisp:defun make-outbound-cross-cluster-search-connections
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            outbound-cross-cluster-search-connection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype overall-change-status () 'common-lisp:string)
(common-lisp:deftype owner-id () 'common-lisp:string)
(common-lisp:deftype package-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass package-details common-lisp:nil
                       ((package-id :initarg :package-id :initform
                         common-lisp:nil :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         struct-shape-package-details-package-id :shape
                         "PackageID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (package-name :initarg :package-name :initform
                         common-lisp:nil :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor struct-shape-package-details-package-name
                         :shape "PackageName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-type :initarg :package-type :initform
                         common-lisp:nil :type
                         (common-lisp:or package-type common-lisp:null)
                         :accessor struct-shape-package-details-package-type
                         :shape "PackageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-description :initarg :package-description
                         :initform common-lisp:nil :type
                         (common-lisp:or package-description common-lisp:null)
                         :accessor
                         struct-shape-package-details-package-description
                         :shape "PackageDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-status :initarg :package-status :initform
                         common-lisp:nil :type
                         (common-lisp:or package-status common-lisp:null)
                         :accessor struct-shape-package-details-package-status
                         :shape "PackageStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-package-details-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :initform
                         common-lisp:nil :type
                         (common-lisp:or last-updated common-lisp:null)
                         :accessor struct-shape-package-details-last-updated-at
                         :shape "LastUpdated" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (available-package-version :initarg
                         :available-package-version :initform common-lisp:nil
                         :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor
                         struct-shape-package-details-available-package-version
                         :shape "PackageVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-details :initarg :error-details :initform
                         common-lisp:nil :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor struct-shape-package-details-error-details
                         :shape "ErrorDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-package-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'package-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'package-details 'make-package-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-type))
      (common-lisp:list
       (common-lisp:cons "PackageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-description))
      (common-lisp:list
       (common-lisp:cons "PackageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-status))
      (common-lisp:list
       (common-lisp:cons "PackageStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-package-version))
      (common-lisp:list
       (common-lisp:cons "AvailablePackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-details-list ()
   '(trivial-types:proper-list package-details))
 (common-lisp:defun make-package-details-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype package-id () 'common-lisp:string)
(common-lisp:deftype package-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass package-source common-lisp:nil
                       ((s3bucket-name :initarg :s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor struct-shape-package-source-s3bucket-name
                         :shape "S3BucketName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (s3key :initarg :s3key :initform common-lisp:nil :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         struct-shape-package-source-s3key :shape "S3Key"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-package-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'package-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'package-source 'make-package-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-source))
   common-lisp:nil))
(common-lisp:deftype package-status () 'common-lisp:string)
(common-lisp:deftype package-type () 'common-lisp:string)
(common-lisp:deftype package-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass package-version-history common-lisp:nil
                       ((package-version :initarg :package-version :initform
                         common-lisp:nil :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor
                         struct-shape-package-version-history-package-version
                         :shape "PackageVersion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (commit-message :initarg :commit-message :initform
                         common-lisp:nil :type
                         (common-lisp:or commit-message common-lisp:null)
                         :accessor
                         struct-shape-package-version-history-commit-message
                         :shape "CommitMessage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-at :initarg :created-at :initform
                         common-lisp:nil :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         struct-shape-package-version-history-created-at :shape
                         "CreatedAt" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-package-version-history
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'package-version-history
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'package-version-history 'make-package-version-history))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-history))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-history))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-message))
      (common-lisp:list
       (common-lisp:cons "CommitMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-history))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-version-history-list ()
   '(trivial-types:proper-list package-version-history))
 (common-lisp:defun make-package-version-history-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-version-history))
   aws-sdk/generator/shape::members))
(common-lisp:deftype password () 'common-lisp:string)
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:deftype principal-type () 'common-lisp:string)
(common-lisp:deftype property-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass
  purchase-reserved-elasticsearch-instance-offering-request common-lisp:nil
  ((reserved-elasticsearch-instance-offering-id :initarg
    :reserved-elasticsearch-instance-offering-id :initform
    (common-lisp:error
     ":reserved-elasticsearch-instance-offering-id is required")
    :type (common-lisp:or guid common-lisp:null) :accessor
    struct-shape-purchase-reserved-elasticsearch-instance-offering-request-reserved-elasticsearch-instance-offering-id
    :shape "GUID" :location common-lisp:nil :location-name common-lisp:nil)
   (reservation-name :initarg :reservation-name :initform
    (common-lisp:error ":reservation-name is required") :type
    (common-lisp:or reservation-token common-lisp:null) :accessor
    struct-shape-purchase-reserved-elasticsearch-instance-offering-request-reservation-name
    :shape "ReservationToken" :location common-lisp:nil :location-name
    common-lisp:nil)
   (instance-count :initarg :instance-count :initform common-lisp:nil :type
    (common-lisp:or instance-count common-lisp:null) :accessor
    struct-shape-purchase-reserved-elasticsearch-instance-offering-request-instance-count
    :shape "InstanceCount" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-reserved-elasticsearch-instance-offering-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'purchase-reserved-elasticsearch-instance-offering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-elasticsearch-instance-offering-request
                    'make-purchase-reserved-elasticsearch-instance-offering-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-elasticsearch-instance-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-elasticsearch-instance-offering-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-elasticsearch-instance-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedElasticsearchInstanceOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-name))
      (common-lisp:list
       (common-lisp:cons "ReservationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-elasticsearch-instance-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  purchase-reserved-elasticsearch-instance-offering-response common-lisp:nil
  ((reserved-elasticsearch-instance-id :initarg
    :reserved-elasticsearch-instance-id :initform common-lisp:nil :type
    (common-lisp:or guid common-lisp:null) :accessor
    struct-shape-purchase-reserved-elasticsearch-instance-offering-response-reserved-elasticsearch-instance-id
    :shape "GUID" :location common-lisp:nil :location-name common-lisp:nil)
   (reservation-name :initarg :reservation-name :initform common-lisp:nil :type
    (common-lisp:or reservation-token common-lisp:null) :accessor
    struct-shape-purchase-reserved-elasticsearch-instance-offering-response-reservation-name
    :shape "ReservationToken" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-purchase-reserved-elasticsearch-instance-offering-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'purchase-reserved-elasticsearch-instance-offering-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-elasticsearch-instance-offering-response
                    'make-purchase-reserved-elasticsearch-instance-offering-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-elasticsearch-instance-offering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-elasticsearch-instance-offering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-elasticsearch-instance-id))
      (common-lisp:list
       (common-lisp:cons "ReservedElasticsearchInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-name))
      (common-lisp:list
       (common-lisp:cons "ReservationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-elasticsearch-instance-offering-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recurring-charge common-lisp:nil
                       ((recurring-charge-amount :initarg
                         :recurring-charge-amount :initform common-lisp:nil
                         :type (common-lisp:or double common-lisp:null)
                         :accessor
                         struct-shape-recurring-charge-recurring-charge-amount
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recurring-charge-frequency :initarg
                         :recurring-charge-frequency :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         struct-shape-recurring-charge-recurring-charge-frequency
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recurring-charge
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recurring-charge
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recurring-charge 'make-recurring-charge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-amount))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-frequency))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recurring-charge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recurring-charge-list ()
   '(trivial-types:proper-list recurring-charge))
 (common-lisp:defun make-recurring-charge-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recurring-charge))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reference-path () 'common-lisp:string)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reject-inbound-cross-cluster-search-connection-request
                       common-lisp:nil
                       ((cross-cluster-search-connection-id :initarg
                         :cross-cluster-search-connection-id :initform
                         (common-lisp:error
                          ":cross-cluster-search-connection-id is required")
                         :type
                         (common-lisp:or cross-cluster-search-connection-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-reject-inbound-cross-cluster-search-connection-request-cross-cluster-search-connection-id
                         :shape "CrossClusterSearchConnectionId" :location
                         "uri" :location-name "ConnectionId"))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-inbound-cross-cluster-search-connection-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-inbound-cross-cluster-search-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-inbound-cross-cluster-search-connection-request
                    'make-reject-inbound-cross-cluster-search-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-inbound-cross-cluster-search-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-inbound-cross-cluster-search-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-inbound-cross-cluster-search-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-inbound-cross-cluster-search-connection-response
                       common-lisp:nil
                       ((cross-cluster-search-connection :initarg
                         :cross-cluster-search-connection :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          inbound-cross-cluster-search-connection
                          common-lisp:null)
                         :accessor
                         struct-shape-reject-inbound-cross-cluster-search-connection-response-cross-cluster-search-connection
                         :shape "InboundCrossClusterSearchConnection" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reject-inbound-cross-cluster-search-connection-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-inbound-cross-cluster-search-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reject-inbound-cross-cluster-search-connection-response
                    'make-reject-inbound-cross-cluster-search-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-inbound-cross-cluster-search-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-inbound-cross-cluster-search-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-cluster-search-connection))
      (common-lisp:list
       (common-lisp:cons "CrossClusterSearchConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-inbound-cross-cluster-search-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-request common-lisp:nil
                       ((arn :initarg :arn :initform
                         (common-lisp:error ":arn is required") :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-remove-tags-request-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-remove-tags-request-tag-keys
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remove-tags-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remove-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remove-tags-request 'make-remove-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-request))
   common-lisp:nil))
(common-lisp:deftype reservation-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reserved-elasticsearch-instance common-lisp:nil
                       ((reservation-name :initarg :reservation-name :initform
                         common-lisp:nil :type
                         (common-lisp:or reservation-token common-lisp:null)
                         :accessor
                         struct-shape-reserved-elasticsearch-instance-reservation-name
                         :shape "ReservationToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (reserved-elasticsearch-instance-id :initarg
                         :reserved-elasticsearch-instance-id :initform
                         common-lisp:nil :type
                         (common-lisp:or guid common-lisp:null) :accessor
                         struct-shape-reserved-elasticsearch-instance-reserved-elasticsearch-instance-id
                         :shape "GUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (reserved-elasticsearch-instance-offering-id :initarg
                         :reserved-elasticsearch-instance-offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-elasticsearch-instance-reserved-elasticsearch-instance-offering-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elasticsearch-instance-type :initarg
                         :elasticsearch-instance-type :initform common-lisp:nil
                         :type
                         (common-lisp:or espartition-instance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-elasticsearch-instance-elasticsearch-instance-type
                         :shape "ESPartitionInstanceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor
                         struct-shape-reserved-elasticsearch-instance-start-time
                         :shape "UpdateTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-reserved-elasticsearch-instance-duration
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fixed-price :initarg :fixed-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-elasticsearch-instance-fixed-price
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (usage-price :initarg :usage-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-elasticsearch-instance-usage-price
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-elasticsearch-instance-currency-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (elasticsearch-instance-count :initarg
                         :elasticsearch-instance-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-reserved-elasticsearch-instance-elasticsearch-instance-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-elasticsearch-instance-state
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          reserved-elasticsearch-instance-payment-option
                          common-lisp:null)
                         :accessor
                         struct-shape-reserved-elasticsearch-instance-payment-option
                         :shape "ReservedElasticsearchInstancePaymentOption"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recurring-charges :initarg :recurring-charges
                         :initform common-lisp:nil :type
                         (common-lisp:or recurring-charge-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-elasticsearch-instance-recurring-charges
                         :shape "RecurringChargeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-elasticsearch-instance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reserved-elasticsearch-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-elasticsearch-instance
                    'make-reserved-elasticsearch-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-elasticsearch-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-elasticsearch-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-name))
      (common-lisp:list
       (common-lisp:cons "ReservationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-elasticsearch-instance-id))
      (common-lisp:list
       (common-lisp:cons "ReservedElasticsearchInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-elasticsearch-instance-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedElasticsearchInstanceOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-instance-type))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-instance-count))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-elasticsearch-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-elasticsearch-instance-list ()
   '(trivial-types:proper-list reserved-elasticsearch-instance))
 (common-lisp:defun make-reserved-elasticsearch-instance-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-elasticsearch-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reserved-elasticsearch-instance-offering common-lisp:nil
                       ((reserved-elasticsearch-instance-offering-id :initarg
                         :reserved-elasticsearch-instance-offering-id :initform
                         common-lisp:nil :type
                         (common-lisp:or guid common-lisp:null) :accessor
                         struct-shape-reserved-elasticsearch-instance-offering-reserved-elasticsearch-instance-offering-id
                         :shape "GUID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (elasticsearch-instance-type :initarg
                         :elasticsearch-instance-type :initform common-lisp:nil
                         :type
                         (common-lisp:or espartition-instance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-elasticsearch-instance-offering-elasticsearch-instance-type
                         :shape "ESPartitionInstanceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (duration :initarg :duration :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-reserved-elasticsearch-instance-offering-duration
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (fixed-price :initarg :fixed-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-elasticsearch-instance-offering-fixed-price
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (usage-price :initarg :usage-price :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-reserved-elasticsearch-instance-offering-usage-price
                         :shape "Double" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (currency-code :initarg :currency-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-reserved-elasticsearch-instance-offering-currency-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (payment-option :initarg :payment-option :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          reserved-elasticsearch-instance-payment-option
                          common-lisp:null)
                         :accessor
                         struct-shape-reserved-elasticsearch-instance-offering-payment-option
                         :shape "ReservedElasticsearchInstancePaymentOption"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recurring-charges :initarg :recurring-charges
                         :initform common-lisp:nil :type
                         (common-lisp:or recurring-charge-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-reserved-elasticsearch-instance-offering-recurring-charges
                         :shape "RecurringChargeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-reserved-elasticsearch-instance-offering
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'reserved-elasticsearch-instance-offering
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'reserved-elasticsearch-instance-offering
                    'make-reserved-elasticsearch-instance-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-elasticsearch-instance-offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-elasticsearch-instance-offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-elasticsearch-instance-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedElasticsearchInstanceOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-instance-type))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchInstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-elasticsearch-instance-offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-elasticsearch-instance-offering-list ()
   '(trivial-types:proper-list reserved-elasticsearch-instance-offering))
 (common-lisp:defun make-reserved-elasticsearch-instance-offering-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-elasticsearch-instance-offering))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reserved-elasticsearch-instance-payment-option ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-already-exists-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass revoke-vpc-endpoint-access-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-revoke-vpc-endpoint-access-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName")
                        (account :initarg :account :initform
                         (common-lisp:error ":account is required") :type
                         (common-lisp:or awsaccount common-lisp:null) :accessor
                         struct-shape-revoke-vpc-endpoint-access-request-account
                         :shape "AWSAccount" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-vpc-endpoint-access-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-vpc-endpoint-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-vpc-endpoint-access-request
                    'make-revoke-vpc-endpoint-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-vpc-endpoint-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-vpc-endpoint-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-vpc-endpoint-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-vpc-endpoint-access-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-revoke-vpc-endpoint-access-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-vpc-endpoint-access-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'revoke-vpc-endpoint-access-response
                    'make-revoke-vpc-endpoint-access-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-vpc-endpoint-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-vpc-endpoint-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-vpc-endpoint-access-response))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype rollback-on-disable () 'common-lisp:string)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:deftype samlentity-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass samlidp common-lisp:nil
                       ((metadata-content :initarg :metadata-content :initform
                         (common-lisp:error ":metadata-content is required")
                         :type (common-lisp:or samlmetadata common-lisp:null)
                         :accessor struct-shape-samlidp-metadata-content :shape
                         "SAMLMetadata" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (entity-id :initarg :entity-id :initform
                         (common-lisp:error ":entity-id is required") :type
                         (common-lisp:or samlentity-id common-lisp:null)
                         :accessor struct-shape-samlidp-entity-id :shape
                         "SAMLEntityId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-samlidp
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'samlidp
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'samlidp 'make-samlidp))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input samlidp))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input samlidp))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-content))
      (common-lisp:list
       (common-lisp:cons "MetadataContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input samlidp))
   common-lisp:nil))
(common-lisp:deftype samlmetadata () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass samloptions-input common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-samloptions-input-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idp :initarg :idp :initform common-lisp:nil :type
                         (common-lisp:or samlidp common-lisp:null) :accessor
                         struct-shape-samloptions-input-idp :shape "SAMLIdp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-user-name :initarg :master-user-name :initform
                         common-lisp:nil :type
                         (common-lisp:or username common-lisp:null) :accessor
                         struct-shape-samloptions-input-master-user-name :shape
                         "Username" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (master-backend-role :initarg :master-backend-role
                         :initform common-lisp:nil :type
                         (common-lisp:or backend-role common-lisp:null)
                         :accessor
                         struct-shape-samloptions-input-master-backend-role
                         :shape "BackendRole" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (subject-key :initarg :subject-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-samloptions-input-subject-key :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (roles-key :initarg :roles-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-samloptions-input-roles-key :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-timeout-minutes :initarg
                         :session-timeout-minutes :initform common-lisp:nil
                         :type (common-lisp:or integer-class common-lisp:null)
                         :accessor
                         struct-shape-samloptions-input-session-timeout-minutes
                         :shape "IntegerClass" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-samloptions-input
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'samloptions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'samloptions-input 'make-samloptions-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input samloptions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input samloptions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idp))
      (common-lisp:list
       (common-lisp:cons "Idp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-name))
      (common-lisp:list
       (common-lisp:cons "MasterUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-backend-role))
      (common-lisp:list
       (common-lisp:cons "MasterBackendRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-key))
      (common-lisp:list
       (common-lisp:cons "SubjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles-key))
      (common-lisp:list
       (common-lisp:cons "RolesKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "SessionTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input samloptions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass samloptions-output common-lisp:nil
                       ((enabled :initarg :enabled :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor struct-shape-samloptions-output-enabled
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (idp :initarg :idp :initform common-lisp:nil :type
                         (common-lisp:or samlidp common-lisp:null) :accessor
                         struct-shape-samloptions-output-idp :shape "SAMLIdp"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subject-key :initarg :subject-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-samloptions-output-subject-key :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (roles-key :initarg :roles-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-samloptions-output-roles-key :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (session-timeout-minutes :initarg
                         :session-timeout-minutes :initform common-lisp:nil
                         :type (common-lisp:or integer-class common-lisp:null)
                         :accessor
                         struct-shape-samloptions-output-session-timeout-minutes
                         :shape "IntegerClass" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-samloptions-output
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'samloptions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'samloptions-output 'make-samloptions-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input samloptions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input samloptions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idp))
      (common-lisp:list
       (common-lisp:cons "Idp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-key))
      (common-lisp:list
       (common-lisp:cons "SubjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles-key))
      (common-lisp:list
       (common-lisp:cons "RolesKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "SessionTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input samloptions-output))
   common-lisp:nil))
(common-lisp:deftype scheduled-auto-tune-action-type () 'common-lisp:string)
(common-lisp:deftype scheduled-auto-tune-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scheduled-auto-tune-details common-lisp:nil
                       ((date :initarg :date :initform common-lisp:nil :type
                         (common-lisp:or auto-tune-date common-lisp:null)
                         :accessor
                         struct-shape-scheduled-auto-tune-details-date :shape
                         "AutoTuneDate" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (action-type :initarg :action-type :initform
                         common-lisp:nil :type
                         (common-lisp:or scheduled-auto-tune-action-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-scheduled-auto-tune-details-action-type
                         :shape "ScheduledAutoTuneActionType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (action :initarg :action :initform common-lisp:nil
                         :type
                         (common-lisp:or scheduled-auto-tune-description
                                         common-lisp:null)
                         :accessor
                         struct-shape-scheduled-auto-tune-details-action :shape
                         "ScheduledAutoTuneDescription" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (severity :initarg :severity :initform common-lisp:nil
                         :type
                         (common-lisp:or scheduled-auto-tune-severity-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-scheduled-auto-tune-details-severity
                         :shape "ScheduledAutoTuneSeverityType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scheduled-auto-tune-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-auto-tune-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'scheduled-auto-tune-details
                    'make-scheduled-auto-tune-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-auto-tune-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-auto-tune-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-auto-tune-details))
   common-lisp:nil))
(common-lisp:deftype scheduled-auto-tune-severity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-software-options common-lisp:nil
                       ((current-version :initarg :current-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-software-options-current-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (new-version :initarg :new-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-software-options-new-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-available :initarg :update-available :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-service-software-options-update-available
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cancellable :initarg :cancellable :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-service-software-options-cancellable
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (update-status :initarg :update-status :initform
                         common-lisp:nil :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor
                         struct-shape-service-software-options-update-status
                         :shape "DeploymentStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-service-software-options-description
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automated-update-date :initarg :automated-update-date
                         :initform common-lisp:nil :type
                         (common-lisp:or deployment-close-date-time-stamp
                                         common-lisp:null)
                         :accessor
                         struct-shape-service-software-options-automated-update-date
                         :shape "DeploymentCloseDateTimeStamp" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (optional-deployment :initarg :optional-deployment
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-service-software-options-optional-deployment
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-service-software-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'service-software-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'service-software-options 'make-service-software-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-software-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-software-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-version))
      (common-lisp:list
       (common-lisp:cons "NewVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-available))
      (common-lisp:list
       (common-lisp:cons "UpdateAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellable))
      (common-lisp:list
       (common-lisp:cons "Cancellable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-update-date))
      (common-lisp:list
       (common-lisp:cons "AutomatedUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional-deployment))
      (common-lisp:list
       (common-lisp:cons "OptionalDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-software-options))
   common-lisp:nil))
(common-lisp:deftype service-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass snapshot-options common-lisp:nil
                       ((automated-snapshot-start-hour :initarg
                         :automated-snapshot-start-hour :initform
                         common-lisp:nil :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor
                         struct-shape-snapshot-options-automated-snapshot-start-hour
                         :shape "IntegerClass" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snapshot-options
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot-options
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'snapshot-options 'make-snapshot-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-start-hour))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotStartHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snapshot-options-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or snapshot-options common-lisp:null)
                         :accessor struct-shape-snapshot-options-status-options
                         :shape "SnapshotOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor struct-shape-snapshot-options-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-snapshot-options-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'snapshot-options-status 'make-snapshot-options-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-options-status))
   common-lisp:nil))
(common-lisp:deftype start-at () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-elasticsearch-service-software-update-request
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-start-elasticsearch-service-software-update-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-elasticsearch-service-software-update-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-elasticsearch-service-software-update-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-elasticsearch-service-software-update-request
                    'make-start-elasticsearch-service-software-update-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-elasticsearch-service-software-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-elasticsearch-service-software-update-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-elasticsearch-service-software-update-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-elasticsearch-service-software-update-response
                       common-lisp:nil
                       ((service-software-options :initarg
                         :service-software-options :initform common-lisp:nil
                         :type
                         (common-lisp:or service-software-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-elasticsearch-service-software-update-response-service-software-options
                         :shape "ServiceSoftwareOptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-elasticsearch-service-software-update-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-elasticsearch-service-software-update-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-elasticsearch-service-software-update-response
                    'make-start-elasticsearch-service-software-update-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-elasticsearch-service-software-update-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-elasticsearch-service-software-update-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-software-options))
      (common-lisp:list
       (common-lisp:cons "ServiceSoftwareOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-elasticsearch-service-software-update-response))
   common-lisp:nil))
(common-lisp:deftype start-timestamp () 'common-lisp:string)
(common-lisp:deftype storage-sub-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass storage-type common-lisp:nil
                       ((storage-type-name :initarg :storage-type-name
                         :initform common-lisp:nil :type
                         (common-lisp:or storage-type-name common-lisp:null)
                         :accessor struct-shape-storage-type-storage-type-name
                         :shape "StorageTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-sub-type-name :initarg :storage-sub-type-name
                         :initform common-lisp:nil :type
                         (common-lisp:or storage-sub-type-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-storage-type-storage-sub-type-name :shape
                         "StorageSubTypeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (storage-type-limits :initarg :storage-type-limits
                         :initform common-lisp:nil :type
                         (common-lisp:or storage-type-limit-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-storage-type-storage-type-limits :shape
                         "StorageTypeLimitList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-storage-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'storage-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'storage-type 'make-storage-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type-name))
      (common-lisp:list
       (common-lisp:cons "StorageTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-sub-type-name))
      (common-lisp:list
       (common-lisp:cons "StorageSubTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type-limits))
      (common-lisp:list
       (common-lisp:cons "StorageTypeLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass storage-type-limit common-lisp:nil
                       ((limit-name :initarg :limit-name :initform
                         common-lisp:nil :type
                         (common-lisp:or limit-name common-lisp:null) :accessor
                         struct-shape-storage-type-limit-limit-name :shape
                         "LimitName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (limit-values :initarg :limit-values :initform
                         common-lisp:nil :type
                         (common-lisp:or limit-value-list common-lisp:null)
                         :accessor struct-shape-storage-type-limit-limit-values
                         :shape "LimitValueList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-storage-type-limit
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'storage-type-limit
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'storage-type-limit 'make-storage-type-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-type-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-type-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-name))
      (common-lisp:list
       (common-lisp:cons "LimitName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-values))
      (common-lisp:list
       (common-lisp:cons "LimitValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-type-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype storage-type-limit-list ()
   '(trivial-types:proper-list storage-type-limit))
 (common-lisp:defun make-storage-type-limit-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list storage-type-limit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype storage-type-list ()
   '(trivial-types:proper-list storage-type))
 (common-lisp:defun make-storage-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list storage-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype storage-type-name () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tlssecurity-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform
                         (common-lisp:error ":key is required") :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype time-unit () 'common-lisp:string)
(common-lisp:deftype total-number-of-stages () 'common-lisp:integer)
(common-lisp:deftype uint-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass update-elasticsearch-domain-config-request
                       common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-request-domain-name
                         :shape "DomainName" :location "uri" :location-name
                         "DomainName")
                        (elasticsearch-cluster-config :initarg
                         :elasticsearch-cluster-config :initform
                         common-lisp:nil :type
                         (common-lisp:or elasticsearch-cluster-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-request-elasticsearch-cluster-config
                         :shape "ElasticsearchClusterConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ebsoptions :initarg :ebsoptions :initform
                         common-lisp:nil :type
                         (common-lisp:or ebsoptions common-lisp:null) :accessor
                         struct-shape-update-elasticsearch-domain-config-request-ebsoptions
                         :shape "EBSOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (snapshot-options :initarg :snapshot-options :initform
                         common-lisp:nil :type
                         (common-lisp:or snapshot-options common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-request-snapshot-options
                         :shape "SnapshotOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpcoptions :initarg :vpcoptions :initform
                         common-lisp:nil :type
                         (common-lisp:or vpcoptions common-lisp:null) :accessor
                         struct-shape-update-elasticsearch-domain-config-request-vpcoptions
                         :shape "VPCOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cognito-options :initarg :cognito-options :initform
                         common-lisp:nil :type
                         (common-lisp:or cognito-options common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-request-cognito-options
                         :shape "CognitoOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (advanced-options :initarg :advanced-options :initform
                         common-lisp:nil :type
                         (common-lisp:or advanced-options common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-request-advanced-options
                         :shape "AdvancedOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (access-policies :initarg :access-policies :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-request-access-policies
                         :shape "PolicyDocument" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (log-publishing-options :initarg
                         :log-publishing-options :initform common-lisp:nil
                         :type
                         (common-lisp:or log-publishing-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-request-log-publishing-options
                         :shape "LogPublishingOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (domain-endpoint-options :initarg
                         :domain-endpoint-options :initform common-lisp:nil
                         :type
                         (common-lisp:or domain-endpoint-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-request-domain-endpoint-options
                         :shape "DomainEndpointOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (advanced-security-options :initarg
                         :advanced-security-options :initform common-lisp:nil
                         :type
                         (common-lisp:or advanced-security-options-input
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-request-advanced-security-options
                         :shape "AdvancedSecurityOptionsInput" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (node-to-node-encryption-options :initarg
                         :node-to-node-encryption-options :initform
                         common-lisp:nil :type
                         (common-lisp:or node-to-node-encryption-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-request-node-to-node-encryption-options
                         :shape "NodeToNodeEncryptionOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (encryption-at-rest-options :initarg
                         :encryption-at-rest-options :initform common-lisp:nil
                         :type
                         (common-lisp:or encryption-at-rest-options
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-request-encryption-at-rest-options
                         :shape "EncryptionAtRestOptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (auto-tune-options :initarg :auto-tune-options
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-tune-options common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-request-auto-tune-options
                         :shape "AutoTuneOptions" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (dry-run :initarg :dry-run :initform common-lisp:nil
                         :type (common-lisp:or dry-run common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-request-dry-run
                         :shape "DryRun" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-elasticsearch-domain-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-elasticsearch-domain-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-elasticsearch-domain-config-request
                    'make-update-elasticsearch-domain-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-elasticsearch-domain-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-elasticsearch-domain-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'elasticsearch-cluster-config))
      (common-lisp:list
       (common-lisp:cons "ElasticsearchClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsoptions))
      (common-lisp:list
       (common-lisp:cons "EBSOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-options))
      (common-lisp:list
       (common-lisp:cons "SnapshotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcoptions))
      (common-lisp:list
       (common-lisp:cons "VPCOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cognito-options))
      (common-lisp:list
       (common-lisp:cons "CognitoOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-options))
      (common-lisp:list
       (common-lisp:cons "LogPublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-security-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedSecurityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-to-node-encryption-options))
      (common-lisp:list
       (common-lisp:cons "NodeToNodeEncryptionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-at-rest-options))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRestOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-tune-options))
      (common-lisp:list
       (common-lisp:cons "AutoTuneOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-elasticsearch-domain-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-elasticsearch-domain-config-response
                       common-lisp:nil
                       ((domain-config :initarg :domain-config :initform
                         (common-lisp:error ":domain-config is required") :type
                         (common-lisp:or elasticsearch-domain-config
                                         common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-response-domain-config
                         :shape "ElasticsearchDomainConfig" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (dry-run-results :initarg :dry-run-results :initform
                         common-lisp:nil :type
                         (common-lisp:or dry-run-results common-lisp:null)
                         :accessor
                         struct-shape-update-elasticsearch-domain-config-response-dry-run-results
                         :shape "DryRunResults" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-elasticsearch-domain-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-elasticsearch-domain-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-elasticsearch-domain-config-response
                    'make-update-elasticsearch-domain-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-elasticsearch-domain-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-elasticsearch-domain-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-config))
      (common-lisp:list
       (common-lisp:cons "DomainConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run-results))
      (common-lisp:list
       (common-lisp:cons "DryRunResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-elasticsearch-domain-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-package-request common-lisp:nil
                       ((package-id :initarg :package-id :initform
                         (common-lisp:error ":package-id is required") :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         struct-shape-update-package-request-package-id :shape
                         "PackageID" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (package-source :initarg :package-source :initform
                         (common-lisp:error ":package-source is required")
                         :type (common-lisp:or package-source common-lisp:null)
                         :accessor
                         struct-shape-update-package-request-package-source
                         :shape "PackageSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (package-description :initarg :package-description
                         :initform common-lisp:nil :type
                         (common-lisp:or package-description common-lisp:null)
                         :accessor
                         struct-shape-update-package-request-package-description
                         :shape "PackageDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (commit-message :initarg :commit-message :initform
                         common-lisp:nil :type
                         (common-lisp:or commit-message common-lisp:null)
                         :accessor
                         struct-shape-update-package-request-commit-message
                         :shape "CommitMessage" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-package-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-package-request 'make-update-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-source))
      (common-lisp:list
       (common-lisp:cons "PackageSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-description))
      (common-lisp:list
       (common-lisp:cons "PackageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-message))
      (common-lisp:list
       (common-lisp:cons "CommitMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-package-response common-lisp:nil
                       ((package-details :initarg :package-details :initform
                         common-lisp:nil :type
                         (common-lisp:or package-details common-lisp:null)
                         :accessor
                         struct-shape-update-package-response-package-details
                         :shape "PackageDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-package-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-package-response 'make-update-package-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-details))
      (common-lisp:list
       (common-lisp:cons "PackageDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-response))
   common-lisp:nil))
(common-lisp:deftype update-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-vpc-endpoint-request common-lisp:nil
                       ((vpc-endpoint-id :initarg :vpc-endpoint-id :initform
                         (common-lisp:error ":vpc-endpoint-id is required")
                         :type
                         (common-lisp:or vpc-endpoint-id common-lisp:null)
                         :accessor
                         struct-shape-update-vpc-endpoint-request-vpc-endpoint-id
                         :shape "VpcEndpointId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-options :initarg :vpc-options :initform
                         (common-lisp:error ":vpc-options is required") :type
                         (common-lisp:or vpcoptions common-lisp:null) :accessor
                         struct-shape-update-vpc-endpoint-request-vpc-options
                         :shape "VPCOptions" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vpc-endpoint-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-vpc-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vpc-endpoint-request
                    'make-update-vpc-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-options))
      (common-lisp:list
       (common-lisp:cons "VpcOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vpc-endpoint-response common-lisp:nil
                       ((vpc-endpoint :initarg :vpc-endpoint :initform
                         (common-lisp:error ":vpc-endpoint is required") :type
                         (common-lisp:or vpc-endpoint common-lisp:null)
                         :accessor
                         struct-shape-update-vpc-endpoint-response-vpc-endpoint
                         :shape "VpcEndpoint" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-update-vpc-endpoint-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'update-vpc-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'update-vpc-endpoint-response
                    'make-update-vpc-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint))
      (common-lisp:list
       (common-lisp:cons "VpcEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upgrade-elasticsearch-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         (common-lisp:error ":domain-name is required") :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-upgrade-elasticsearch-domain-request-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-version :initarg :target-version :initform
                         (common-lisp:error ":target-version is required")
                         :type
                         (common-lisp:or elasticsearch-version-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-upgrade-elasticsearch-domain-request-target-version
                         :shape "ElasticsearchVersionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (perform-check-only :initarg :perform-check-only
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-upgrade-elasticsearch-domain-request-perform-check-only
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upgrade-elasticsearch-domain-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'upgrade-elasticsearch-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upgrade-elasticsearch-domain-request
                    'make-upgrade-elasticsearch-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-elasticsearch-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-elasticsearch-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-version))
      (common-lisp:list
       (common-lisp:cons "TargetVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'perform-check-only))
      (common-lisp:list
       (common-lisp:cons "PerformCheckOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-elasticsearch-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upgrade-elasticsearch-domain-response common-lisp:nil
                       ((domain-name :initarg :domain-name :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         struct-shape-upgrade-elasticsearch-domain-response-domain-name
                         :shape "DomainName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-version :initarg :target-version :initform
                         common-lisp:nil :type
                         (common-lisp:or elasticsearch-version-string
                                         common-lisp:null)
                         :accessor
                         struct-shape-upgrade-elasticsearch-domain-response-target-version
                         :shape "ElasticsearchVersionString" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (perform-check-only :initarg :perform-check-only
                         :initform common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-upgrade-elasticsearch-domain-response-perform-check-only
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (change-progress-details :initarg
                         :change-progress-details :initform common-lisp:nil
                         :type
                         (common-lisp:or change-progress-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-upgrade-elasticsearch-domain-response-change-progress-details
                         :shape "ChangeProgressDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upgrade-elasticsearch-domain-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'upgrade-elasticsearch-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upgrade-elasticsearch-domain-response
                    'make-upgrade-elasticsearch-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-elasticsearch-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-elasticsearch-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-version))
      (common-lisp:list
       (common-lisp:cons "TargetVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'perform-check-only))
      (common-lisp:list
       (common-lisp:cons "PerformCheckOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-progress-details))
      (common-lisp:list
       (common-lisp:cons "ChangeProgressDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-elasticsearch-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upgrade-history common-lisp:nil
                       ((upgrade-name :initarg :upgrade-name :initform
                         common-lisp:nil :type
                         (common-lisp:or upgrade-name common-lisp:null)
                         :accessor struct-shape-upgrade-history-upgrade-name
                         :shape "UpgradeName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-timestamp :initarg :start-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or start-timestamp common-lisp:null)
                         :accessor struct-shape-upgrade-history-start-timestamp
                         :shape "StartTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upgrade-status :initarg :upgrade-status :initform
                         common-lisp:nil :type
                         (common-lisp:or upgrade-status common-lisp:null)
                         :accessor struct-shape-upgrade-history-upgrade-status
                         :shape "UpgradeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (steps-list :initarg :steps-list :initform
                         common-lisp:nil :type
                         (common-lisp:or upgrade-steps-list common-lisp:null)
                         :accessor struct-shape-upgrade-history-steps-list
                         :shape "UpgradeStepsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upgrade-history
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upgrade-history
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'upgrade-history 'make-upgrade-history))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upgrade-history))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upgrade-history))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-name))
      (common-lisp:list
       (common-lisp:cons "UpgradeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-status))
      (common-lisp:list
       (common-lisp:cons "UpgradeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps-list))
      (common-lisp:list
       (common-lisp:cons "StepsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upgrade-history))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype upgrade-history-list ()
   '(trivial-types:proper-list upgrade-history))
 (common-lisp:defun make-upgrade-history-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list upgrade-history))
   aws-sdk/generator/shape::members))
(common-lisp:deftype upgrade-name () 'common-lisp:string)
(common-lisp:deftype upgrade-status () 'common-lisp:string)
(common-lisp:deftype upgrade-step () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass upgrade-step-item common-lisp:nil
                       ((upgrade-step :initarg :upgrade-step :initform
                         common-lisp:nil :type
                         (common-lisp:or upgrade-step common-lisp:null)
                         :accessor struct-shape-upgrade-step-item-upgrade-step
                         :shape "UpgradeStep" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (upgrade-step-status :initarg :upgrade-step-status
                         :initform common-lisp:nil :type
                         (common-lisp:or upgrade-status common-lisp:null)
                         :accessor
                         struct-shape-upgrade-step-item-upgrade-step-status
                         :shape "UpgradeStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (issues :initarg :issues :initform common-lisp:nil
                         :type (common-lisp:or issues common-lisp:null)
                         :accessor struct-shape-upgrade-step-item-issues :shape
                         "Issues" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (progress-percent :initarg :progress-percent :initform
                         common-lisp:nil :type
                         (common-lisp:or double common-lisp:null) :accessor
                         struct-shape-upgrade-step-item-progress-percent :shape
                         "Double" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-upgrade-step-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'upgrade-step-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'upgrade-step-item 'make-upgrade-step-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upgrade-step-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upgrade-step-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-step))
      (common-lisp:list
       (common-lisp:cons "UpgradeStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-step-status))
      (common-lisp:list
       (common-lisp:cons "UpgradeStepStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues))
      (common-lisp:list
       (common-lisp:cons "Issues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-percent))
      (common-lisp:list
       (common-lisp:cons "ProgressPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upgrade-step-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype upgrade-steps-list ()
   '(trivial-types:proper-list upgrade-step-item))
 (common-lisp:defun make-upgrade-steps-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list upgrade-step-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-pool-id () 'common-lisp:string)
(common-lisp:deftype username () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpcderived-info common-lisp:nil
                       ((vpcid :initarg :vpcid :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-vpcderived-info-vpcid :shape "String"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-vpcderived-info-subnet-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (availability-zones :initarg :availability-zones
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-vpcderived-info-availability-zones :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         struct-shape-vpcderived-info-security-group-ids :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpcderived-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpcderived-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vpcderived-info 'make-vpcderived-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpcderived-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpcderived-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcid))
      (common-lisp:list
       (common-lisp:cons "VPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpcderived-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpcderived-info-status common-lisp:nil
                       ((options :initarg :options :initform
                         (common-lisp:error ":options is required") :type
                         (common-lisp:or vpcderived-info common-lisp:null)
                         :accessor struct-shape-vpcderived-info-status-options
                         :shape "VPCDerivedInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor struct-shape-vpcderived-info-status-status
                         :shape "OptionStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpcderived-info-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpcderived-info-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpcderived-info-status 'make-vpcderived-info-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpcderived-info-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpcderived-info-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpcderived-info-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpcoptions common-lisp:nil
                       ((subnet-ids :initarg :subnet-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-vpcoptions-subnet-ids :shape
                         "StringList" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (security-group-ids :initarg :security-group-ids
                         :initform common-lisp:nil :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor struct-shape-vpcoptions-security-group-ids
                         :shape "StringList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpcoptions
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpcoptions
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vpcoptions 'make-vpcoptions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpcoptions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpcoptions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpcoptions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (es-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'validation-exception)))
(common-lisp:progn
 (common-lisp:deftype value-string-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-value-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype volume-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-endpoint common-lisp:nil
                       ((vpc-endpoint-id :initarg :vpc-endpoint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-endpoint-id common-lisp:null)
                         :accessor struct-shape-vpc-endpoint-vpc-endpoint-id
                         :shape "VpcEndpointId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-endpoint-owner :initarg :vpc-endpoint-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or awsaccount common-lisp:null) :accessor
                         struct-shape-vpc-endpoint-vpc-endpoint-owner :shape
                         "AWSAccount" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (domain-arn :initarg :domain-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-arn common-lisp:null) :accessor
                         struct-shape-vpc-endpoint-domain-arn :shape
                         "DomainArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (vpc-options :initarg :vpc-options :initform
                         common-lisp:nil :type
                         (common-lisp:or vpcderived-info common-lisp:null)
                         :accessor struct-shape-vpc-endpoint-vpc-options :shape
                         "VPCDerivedInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-endpoint-status common-lisp:null)
                         :accessor struct-shape-vpc-endpoint-status :shape
                         "VpcEndpointStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (endpoint :initarg :endpoint :initform common-lisp:nil
                         :type (common-lisp:or endpoint common-lisp:null)
                         :accessor struct-shape-vpc-endpoint-endpoint :shape
                         "Endpoint" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-endpoint
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'vpc-endpoint 'make-vpc-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-owner))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-arn))
      (common-lisp:list
       (common-lisp:cons "DomainArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-options))
      (common-lisp:list
       (common-lisp:cons "VpcOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-endpoint-error common-lisp:nil
                       ((vpc-endpoint-id :initarg :vpc-endpoint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-endpoint-id common-lisp:null)
                         :accessor
                         struct-shape-vpc-endpoint-error-vpc-endpoint-id :shape
                         "VpcEndpointId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-endpoint-error-code
                                         common-lisp:null)
                         :accessor struct-shape-vpc-endpoint-error-error-code
                         :shape "VpcEndpointErrorCode" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-vpc-endpoint-error-error-message :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-endpoint-error
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-endpoint-error
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-endpoint-error 'make-vpc-endpoint-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-endpoint-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-endpoint-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-endpoint-error))
   common-lisp:nil))
(common-lisp:deftype vpc-endpoint-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vpc-endpoint-error-list ()
   '(trivial-types:proper-list vpc-endpoint-error))
 (common-lisp:defun make-vpc-endpoint-error-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-endpoint-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vpc-endpoint-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vpc-endpoint-id-list ()
   '(trivial-types:proper-list vpc-endpoint-id))
 (common-lisp:defun make-vpc-endpoint-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-endpoint-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vpc-endpoint-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-endpoint-summary common-lisp:nil
                       ((vpc-endpoint-id :initarg :vpc-endpoint-id :initform
                         common-lisp:nil :type
                         (common-lisp:or vpc-endpoint-id common-lisp:null)
                         :accessor
                         struct-shape-vpc-endpoint-summary-vpc-endpoint-id
                         :shape "VpcEndpointId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (vpc-endpoint-owner :initarg :vpc-endpoint-owner
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-vpc-endpoint-summary-vpc-endpoint-owner
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (domain-arn :initarg :domain-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or domain-arn common-lisp:null) :accessor
                         struct-shape-vpc-endpoint-summary-domain-arn :shape
                         "DomainArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or vpc-endpoint-status common-lisp:null)
                         :accessor struct-shape-vpc-endpoint-summary-status
                         :shape "VpcEndpointStatus" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-vpc-endpoint-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-endpoint-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'vpc-endpoint-summary 'make-vpc-endpoint-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-endpoint-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-endpoint-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-owner))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-arn))
      (common-lisp:list
       (common-lisp:cons "DomainArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-endpoint-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-endpoint-summary-list ()
   '(trivial-types:proper-list vpc-endpoint-summary))
 (common-lisp:defun make-vpc-endpoint-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-endpoint-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpc-endpoints ()
   '(trivial-types:proper-list vpc-endpoint))
 (common-lisp:defun make-vpc-endpoints
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass zone-awareness-config common-lisp:nil
                       ((availability-zone-count :initarg
                         :availability-zone-count :initform common-lisp:nil
                         :type (common-lisp:or integer-class common-lisp:null)
                         :accessor
                         struct-shape-zone-awareness-config-availability-zone-count
                         :shape "IntegerClass" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-zone-awareness-config
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'zone-awareness-config
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'zone-awareness-config 'make-zone-awareness-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zone-awareness-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zone-awareness-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-count))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zone-awareness-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun accept-inbound-cross-cluster-search-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cross-cluster-search-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable cross-cluster-search-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-inbound-cross-cluster-search-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/ccs/inboundConnection/~A/accept"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connection-id))))
                                                        "AcceptInboundCrossClusterSearchConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'accept-inbound-cross-cluster-search-connection))
(common-lisp:progn
 (common-lisp:defun add-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tag-list)
   (common-lisp:declare (common-lisp:ignorable arn tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/tags"
                                                        "AddTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'add-tags))
(common-lisp:progn
 (common-lisp:defun associate-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-id domain-name)
   (common-lisp:declare (common-lisp:ignorable package-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/packages/associate/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "AssociatePackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'associate-package))
(common-lisp:progn
 (common-lisp:defun authorize-vpc-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name account)
   (common-lisp:declare (common-lisp:ignorable domain-name account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-authorize-vpc-endpoint-access-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A/authorizeVpcEndpointAccess"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "AuthorizeVpcEndpointAccess"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'authorize-vpc-endpoint-access))
(common-lisp:progn
 (common-lisp:defun cancel-domain-config-change
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name dry-run)
   (common-lisp:declare (common-lisp:ignorable domain-name dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-domain-config-change-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A/config/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "CancelDomainConfigChange"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-domain-config-change))
(common-lisp:progn
 (common-lisp:defun cancel-elasticsearch-service-software-update
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-elasticsearch-service-software-update-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/es/serviceSoftwareUpdate/cancel"
                                                        "CancelElasticsearchServiceSoftwareUpdate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'cancel-elasticsearch-service-software-update))
(common-lisp:progn
 (common-lisp:defun create-elasticsearch-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name elasticsearch-version
                     elasticsearch-cluster-config ebsoptions access-policies
                     snapshot-options vpcoptions cognito-options
                     encryption-at-rest-options node-to-node-encryption-options
                     advanced-options log-publishing-options
                     domain-endpoint-options advanced-security-options
                     auto-tune-options tag-list)
   (common-lisp:declare
    (common-lisp:ignorable domain-name elasticsearch-version
     elasticsearch-cluster-config ebsoptions access-policies snapshot-options
     vpcoptions cognito-options encryption-at-rest-options
     node-to-node-encryption-options advanced-options log-publishing-options
     domain-endpoint-options advanced-security-options auto-tune-options
     tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-elasticsearch-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/es/domain"
                                                        "CreateElasticsearchDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-elasticsearch-domain))
(common-lisp:progn
 (common-lisp:defun create-outbound-cross-cluster-search-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-domain-info
                     destination-domain-info connection-alias)
   (common-lisp:declare
    (common-lisp:ignorable source-domain-info destination-domain-info
     connection-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-outbound-cross-cluster-search-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/es/ccs/outboundConnection"
                                                        "CreateOutboundCrossClusterSearchConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-outbound-cross-cluster-search-connection))
(common-lisp:progn
 (common-lisp:defun create-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name package-type
                     package-description package-source)
   (common-lisp:declare
    (common-lisp:ignorable package-name package-type package-description
     package-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/packages"
                                                        "CreatePackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-package))
(common-lisp:progn
 (common-lisp:defun create-vpc-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-arn vpc-options client-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-arn vpc-options client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vpc-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/es/vpcEndpoints"
                                                        "CreateVpcEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'create-vpc-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-elasticsearch-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-elasticsearch-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DeleteElasticsearchDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-elasticsearch-domain))
(common-lisp:progn
 (common-lisp:defun delete-elasticsearch-service-role ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'es-request :method "DELETE" :path
                                "/2015-01-01/es/role" :operation
                                "DeleteElasticsearchServiceRole"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-elasticsearch-service-role))
(common-lisp:progn
 (common-lisp:defun delete-inbound-cross-cluster-search-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cross-cluster-search-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable cross-cluster-search-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-inbound-cross-cluster-search-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/ccs/inboundConnection/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connection-id))))
                                                        "DeleteInboundCrossClusterSearchConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-inbound-cross-cluster-search-connection))
(common-lisp:progn
 (common-lisp:defun delete-outbound-cross-cluster-search-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cross-cluster-search-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable cross-cluster-search-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-outbound-cross-cluster-search-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/ccs/outboundConnection/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connection-id))))
                                                        "DeleteOutboundCrossClusterSearchConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-outbound-cross-cluster-search-connection))
(common-lisp:progn
 (common-lisp:defun delete-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-id)
   (common-lisp:declare (common-lisp:ignorable package-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))))
                                                        "DeletePackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-package))
(common-lisp:progn
 (common-lisp:defun delete-vpc-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-endpoint-id)
   (common-lisp:declare (common-lisp:ignorable vpc-endpoint-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vpc-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/vpcEndpoints/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vpc-endpoint-id))))
                                                        "DeleteVpcEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-vpc-endpoint))
(common-lisp:progn
 (common-lisp:defun describe-domain-auto-tunes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-domain-auto-tunes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A/autoTunes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DescribeDomainAutoTunes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-domain-auto-tunes))
(common-lisp:progn
 (common-lisp:defun describe-domain-change-progress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name change-id)
   (common-lisp:declare (common-lisp:ignorable domain-name change-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-domain-change-progress-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A/progress"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DescribeDomainChangeProgress"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-domain-change-progress))
(common-lisp:progn
 (common-lisp:defun describe-elasticsearch-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-elasticsearch-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DescribeElasticsearchDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-elasticsearch-domain))
(common-lisp:progn
 (common-lisp:defun describe-elasticsearch-domain-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-elasticsearch-domain-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DescribeElasticsearchDomainConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-elasticsearch-domain-config))
(common-lisp:progn
 (common-lisp:defun describe-elasticsearch-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-names)
   (common-lisp:declare (common-lisp:ignorable domain-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-elasticsearch-domains-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/es/domain-info"
                                                        "DescribeElasticsearchDomains"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-elasticsearch-domains))
(common-lisp:progn
 (common-lisp:defun describe-elasticsearch-instance-type-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name instance-type
                     elasticsearch-version)
   (common-lisp:declare
    (common-lisp:ignorable domain-name instance-type elasticsearch-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-elasticsearch-instance-type-limits-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/instanceTypeLimits/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'elasticsearch-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-type))))
                                                        "DescribeElasticsearchInstanceTypeLimits"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-elasticsearch-instance-type-limits))
(common-lisp:progn
 (common-lisp:defun describe-inbound-cross-cluster-search-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-inbound-cross-cluster-search-connections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/es/ccs/inboundConnection/search"
                                                        "DescribeInboundCrossClusterSearchConnections"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-inbound-cross-cluster-search-connections))
(common-lisp:progn
 (common-lisp:defun describe-outbound-cross-cluster-search-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-outbound-cross-cluster-search-connections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/es/ccs/outboundConnection/search"
                                                        "DescribeOutboundCrossClusterSearchConnections"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-outbound-cross-cluster-search-connections))
(common-lisp:progn
 (common-lisp:defun describe-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/packages/describe"
                                                        "DescribePackages"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-packages))
(common-lisp:progn
 (common-lisp:defun describe-reserved-elasticsearch-instance-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key
                     reserved-elasticsearch-instance-offering-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable reserved-elasticsearch-instance-offering-id
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-elasticsearch-instance-offerings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2015-01-01/es/reservedInstanceOfferings"
                                                        "DescribeReservedElasticsearchInstanceOfferings"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-reserved-elasticsearch-instance-offerings))
(common-lisp:progn
 (common-lisp:defun describe-reserved-elasticsearch-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-elasticsearch-instance-id
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable reserved-elasticsearch-instance-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-elasticsearch-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2015-01-01/es/reservedInstances"
                                                        "DescribeReservedElasticsearchInstances"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-reserved-elasticsearch-instances))
(common-lisp:progn
 (common-lisp:defun describe-vpc-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-endpoint-ids)
   (common-lisp:declare (common-lisp:ignorable vpc-endpoint-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-vpc-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/es/vpcEndpoints/describe"
                                                        "DescribeVpcEndpoints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-vpc-endpoints))
(common-lisp:progn
 (common-lisp:defun dissociate-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-id domain-name)
   (common-lisp:declare (common-lisp:ignorable package-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-dissociate-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/packages/dissociate/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DissociatePackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'dissociate-package))
(common-lisp:progn
 (common-lisp:defun get-compatible-elasticsearch-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-compatible-elasticsearch-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2015-01-01/es/compatibleVersions"
                                                        "GetCompatibleElasticsearchVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-compatible-elasticsearch-versions))
(common-lisp:progn
 (common-lisp:defun get-package-version-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable package-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-package-version-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/packages/~A/history"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))))
                                                        "GetPackageVersionHistory"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-package-version-history))
(common-lisp:progn
 (common-lisp:defun get-upgrade-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-upgrade-history-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/upgradeDomain/~A/history"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "GetUpgradeHistory"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-upgrade-history))
(common-lisp:progn
 (common-lisp:defun get-upgrade-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-upgrade-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/upgradeDomain/~A/status"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "GetUpgradeStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-upgrade-status))
(common-lisp:progn
 (common-lisp:defun list-domain-names
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine-type)
   (common-lisp:declare (common-lisp:ignorable engine-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domain-names-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2015-01-01/domain"
                                                        "ListDomainNames"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-domain-names))
(common-lisp:progn
 (common-lisp:defun list-domains-for-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable package-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domains-for-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/packages/~A/domains"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))))
                                                        "ListDomainsForPackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-domains-for-package))
(common-lisp:progn
 (common-lisp:defun list-elasticsearch-instance-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key elasticsearch-version domain-name
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable elasticsearch-version domain-name max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-elasticsearch-instance-types-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/instanceTypes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'elasticsearch-version))))
                                                        "ListElasticsearchInstanceTypes"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-elasticsearch-instance-types))
(common-lisp:progn
 (common-lisp:defun list-elasticsearch-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-elasticsearch-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2015-01-01/es/versions"
                                                        "ListElasticsearchVersions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-elasticsearch-versions))
(common-lisp:progn
 (common-lisp:defun list-packages-for-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-packages-for-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/domain/~A/packages"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "ListPackagesForDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-packages-for-domain))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2015-01-01/tags/"
                                                        "ListTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun list-vpc-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name next-token)
   (common-lisp:declare (common-lisp:ignorable domain-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vpc-endpoint-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A/listVpcEndpointAccess"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "ListVpcEndpointAccess"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-vpc-endpoint-access))
(common-lisp:progn
 (common-lisp:defun list-vpc-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vpc-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/2015-01-01/es/vpcEndpoints"
                                                        "ListVpcEndpoints"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-vpc-endpoints))
(common-lisp:progn
 (common-lisp:defun list-vpc-endpoints-for-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name next-token)
   (common-lisp:declare (common-lisp:ignorable domain-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-vpc-endpoints-for-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A/vpcEndpoints"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "ListVpcEndpointsForDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-vpc-endpoints-for-domain))
(common-lisp:progn
 (common-lisp:defun purchase-reserved-elasticsearch-instance-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key
                     reserved-elasticsearch-instance-offering-id
                     reservation-name instance-count)
   (common-lisp:declare
    (common-lisp:ignorable reserved-elasticsearch-instance-offering-id
     reservation-name instance-count))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-purchase-reserved-elasticsearch-instance-offering-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/es/purchaseReservedInstanceOffering"
                                                        "PurchaseReservedElasticsearchInstanceOffering"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'purchase-reserved-elasticsearch-instance-offering))
(common-lisp:progn
 (common-lisp:defun reject-inbound-cross-cluster-search-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cross-cluster-search-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable cross-cluster-search-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-inbound-cross-cluster-search-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/ccs/inboundConnection/~A/reject"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connection-id))))
                                                        "RejectInboundCrossClusterSearchConnection"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'reject-inbound-cross-cluster-search-connection))
(common-lisp:progn
 (common-lisp:defun remove-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/tags-removal"
                                                        "RemoveTags"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'remove-tags))
(common-lisp:progn
 (common-lisp:defun revoke-vpc-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name account)
   (common-lisp:declare (common-lisp:ignorable domain-name account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-revoke-vpc-endpoint-access-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A/revokeVpcEndpointAccess"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "RevokeVpcEndpointAccess"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'revoke-vpc-endpoint-access))
(common-lisp:progn
 (common-lisp:defun start-elasticsearch-service-software-update
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-elasticsearch-service-software-update-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/es/serviceSoftwareUpdate/start"
                                                        "StartElasticsearchServiceSoftwareUpdate"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-elasticsearch-service-software-update))
(common-lisp:progn
 (common-lisp:defun update-elasticsearch-domain-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name elasticsearch-cluster-config
                     ebsoptions snapshot-options vpcoptions cognito-options
                     advanced-options access-policies log-publishing-options
                     domain-endpoint-options advanced-security-options
                     node-to-node-encryption-options encryption-at-rest-options
                     auto-tune-options dry-run)
   (common-lisp:declare
    (common-lisp:ignorable domain-name elasticsearch-cluster-config ebsoptions
     snapshot-options vpcoptions cognito-options advanced-options
     access-policies log-publishing-options domain-endpoint-options
     advanced-security-options node-to-node-encryption-options
     encryption-at-rest-options auto-tune-options dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-elasticsearch-domain-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2015-01-01/es/domain/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "UpdateElasticsearchDomainConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-elasticsearch-domain-config))
(common-lisp:progn
 (common-lisp:defun update-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-id package-source
                     package-description commit-message)
   (common-lisp:declare
    (common-lisp:ignorable package-id package-source package-description
     commit-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/packages/update"
                                                        "UpdatePackage"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-package))
(common-lisp:progn
 (common-lisp:defun update-vpc-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-endpoint-id vpc-options)
   (common-lisp:declare (common-lisp:ignorable vpc-endpoint-id vpc-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-vpc-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/es/vpcEndpoints/update"
                                                        "UpdateVpcEndpoint"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'update-vpc-endpoint))
(common-lisp:progn
 (common-lisp:defun upgrade-elasticsearch-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name target-version
                     perform-check-only)
   (common-lisp:declare
    (common-lisp:ignorable domain-name target-version perform-check-only))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-upgrade-elasticsearch-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'es-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/2015-01-01/es/upgradeDomain"
                                                        "UpgradeElasticsearchDomain"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'upgrade-elasticsearch-domain))
