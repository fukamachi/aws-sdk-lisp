;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(uiop/package:define-package #:aws-sdk/services/config/api (:use)
                             (:nicknames #:aws/config)
                             (:import-from #:aws-sdk/generator/shape)
                             (:import-from #:aws-sdk/generator/operation)
                             (:import-from #:aws-sdk/api)
                             (:import-from #:aws-sdk/request)
                             (:import-from #:aws-sdk/json-request)
                             (:import-from #:aws-sdk/rest-json-request)
                             (:import-from #:aws-sdk/rest-xml-request)
                             (:import-from #:aws-sdk/query-request)
                             (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/config/api)
(common-lisp:progn
 (common-lisp:define-condition config-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'config-error))
(common-lisp:progn
 (common-lisp:defclass config-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "config" :api-version
                        "2014-11-12" :host-prefix "config" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "StarlingDoveService" :json-version
                        "1.1"))
 (common-lisp:export 'config-request))
(common-lisp:defvar *error-map*
  '(("ConformancePackTemplateValidationException"
     . conformance-pack-template-validation-exception)
    ("IdempotentParameterMismatch" . idempotent-parameter-mismatch)
    ("InsufficientDeliveryPolicyException"
     . insufficient-delivery-policy-exception)
    ("InsufficientPermissionsException" . insufficient-permissions-exception)
    ("InvalidConfigurationRecorderNameException"
     . invalid-configuration-recorder-name-exception)
    ("InvalidDeliveryChannelNameException"
     . invalid-delivery-channel-name-exception)
    ("InvalidExpressionException" . invalid-expression-exception)
    ("InvalidLimitException" . invalid-limit-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidParameterValueException" . invalid-parameter-value-exception)
    ("InvalidRecordingGroupException" . invalid-recording-group-exception)
    ("InvalidResultTokenException" . invalid-result-token-exception)
    ("InvalidRoleException" . invalid-role-exception)
    ("InvalidS3KeyPrefixException" . invalid-s3key-prefix-exception)
    ("InvalidS3KmsKeyArnException" . invalid-s3kms-key-arn-exception)
    ("InvalidSNSTopicARNException" . invalid-snstopic-arnexception)
    ("InvalidTimeRangeException" . invalid-time-range-exception)
    ("LastDeliveryChannelDeleteFailedException"
     . last-delivery-channel-delete-failed-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MaxActiveResourcesExceededException"
     . max-active-resources-exceeded-exception)
    ("MaxNumberOfConfigRulesExceededException"
     . max-number-of-config-rules-exceeded-exception)
    ("MaxNumberOfConfigurationRecordersExceededException"
     . max-number-of-configuration-recorders-exceeded-exception)
    ("MaxNumberOfConformancePacksExceededException"
     . max-number-of-conformance-packs-exceeded-exception)
    ("MaxNumberOfDeliveryChannelsExceededException"
     . max-number-of-delivery-channels-exceeded-exception)
    ("MaxNumberOfOrganizationConfigRulesExceededException"
     . max-number-of-organization-config-rules-exceeded-exception)
    ("MaxNumberOfOrganizationConformancePacksExceededException"
     . max-number-of-organization-conformance-packs-exceeded-exception)
    ("MaxNumberOfRetentionConfigurationsExceededException"
     . max-number-of-retention-configurations-exceeded-exception)
    ("NoAvailableConfigurationRecorderException"
     . no-available-configuration-recorder-exception)
    ("NoAvailableDeliveryChannelException"
     . no-available-delivery-channel-exception)
    ("NoAvailableOrganizationException" . no-available-organization-exception)
    ("NoRunningConfigurationRecorderException"
     . no-running-configuration-recorder-exception)
    ("NoSuchBucketException" . no-such-bucket-exception)
    ("NoSuchConfigRuleException" . no-such-config-rule-exception)
    ("NoSuchConfigRuleInConformancePackException"
     . no-such-config-rule-in-conformance-pack-exception)
    ("NoSuchConfigurationAggregatorException"
     . no-such-configuration-aggregator-exception)
    ("NoSuchConfigurationRecorderException"
     . no-such-configuration-recorder-exception)
    ("NoSuchConformancePackException" . no-such-conformance-pack-exception)
    ("NoSuchDeliveryChannelException" . no-such-delivery-channel-exception)
    ("NoSuchOrganizationConfigRuleException"
     . no-such-organization-config-rule-exception)
    ("NoSuchOrganizationConformancePackException"
     . no-such-organization-conformance-pack-exception)
    ("NoSuchRemediationConfigurationException"
     . no-such-remediation-configuration-exception)
    ("NoSuchRemediationExceptionException"
     . no-such-remediation-exception-exception)
    ("NoSuchRetentionConfigurationException"
     . no-such-retention-configuration-exception)
    ("OrganizationAccessDeniedException"
     . organization-access-denied-exception)
    ("OrganizationAllFeaturesNotEnabledException"
     . organization-all-features-not-enabled-exception)
    ("OrganizationConformancePackTemplateValidationException"
     . organization-conformance-pack-template-validation-exception)
    ("OversizedConfigurationItemException"
     . oversized-configuration-item-exception)
    ("RemediationInProgressException" . remediation-in-progress-exception)
    ("ResourceConcurrentModificationException"
     . resource-concurrent-modification-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotDiscoveredException" . resource-not-discovered-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass account-aggregation-source common-lisp:nil
                       ((account-ids :initarg :account-ids :initform
                         (common-lisp:error ":account-ids is required") :type
                         (common-lisp:or
                          account-aggregation-source-account-list
                          common-lisp:null)
                         :accessor
                         struct-shape-account-aggregation-source-account-ids
                         :shape "AccountAggregationSourceAccountList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (all-aws-regions :initarg :all-aws-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-account-aggregation-source-all-aws-regions
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-regions :initarg :aws-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or aggregator-region-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-account-aggregation-source-aws-regions
                         :shape "AggregatorRegionList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-account-aggregation-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'account-aggregation-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'account-aggregation-source
                    'make-account-aggregation-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-aggregation-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-aggregation-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-ids))
      (common-lisp:list
       (common-lisp:cons "AccountIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-aws-regions))
      (common-lisp:list
       (common-lisp:cons "AllAwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-regions))
      (common-lisp:list
       (common-lisp:cons "AwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-aggregation-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-aggregation-source-account-list ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun make-account-aggregation-source-account-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype account-aggregation-source-list ()
   '(trivial-types:proper-list account-aggregation-source))
 (common-lisp:defun make-account-aggregation-source-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            account-aggregation-source))
   aws-sdk/generator/shape::members))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aggregate-compliance-by-config-rule common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-aggregate-compliance-by-config-rule-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance :initarg :compliance :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance common-lisp:null) :accessor
                         struct-shape-aggregate-compliance-by-config-rule-compliance
                         :shape "Compliance" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-aggregate-compliance-by-config-rule-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-aggregate-compliance-by-config-rule-aws-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregate-compliance-by-config-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregate-compliance-by-config-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregate-compliance-by-config-rule
                    'make-aggregate-compliance-by-config-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-compliance-by-config-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-compliance-by-config-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance))
      (common-lisp:list
       (common-lisp:cons "Compliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "AwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-compliance-by-config-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregate-compliance-by-config-rule-list ()
   '(trivial-types:proper-list aggregate-compliance-by-config-rule))
 (common-lisp:defun make-aggregate-compliance-by-config-rule-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregate-compliance-by-config-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aggregate-compliance-by-conformance-pack common-lisp:nil
                       ((conformance-pack-name :initarg :conformance-pack-name
                         :initform common-lisp:nil :type
                         (common-lisp:or conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregate-compliance-by-conformance-pack-conformance-pack-name
                         :shape "ConformancePackName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance :initarg :compliance :initform
                         common-lisp:nil :type
                         (common-lisp:or aggregate-conformance-pack-compliance
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregate-compliance-by-conformance-pack-compliance
                         :shape "AggregateConformancePackCompliance" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-aggregate-compliance-by-conformance-pack-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-aggregate-compliance-by-conformance-pack-aws-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregate-compliance-by-conformance-pack
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregate-compliance-by-conformance-pack
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregate-compliance-by-conformance-pack
                    'make-aggregate-compliance-by-conformance-pack))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-compliance-by-conformance-pack))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-compliance-by-conformance-pack))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "ConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance))
      (common-lisp:list
       (common-lisp:cons "Compliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "AwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-compliance-by-conformance-pack))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregate-compliance-by-conformance-pack-list ()
   '(trivial-types:proper-list aggregate-compliance-by-conformance-pack))
 (common-lisp:defun make-aggregate-compliance-by-conformance-pack-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregate-compliance-by-conformance-pack))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aggregate-compliance-count common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregate-compliance-count-group-name
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance-summary :initarg :compliance-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or compliance-summary common-lisp:null)
                         :accessor
                         struct-shape-aggregate-compliance-count-compliance-summary
                         :shape "ComplianceSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregate-compliance-count
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aggregate-compliance-count
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregate-compliance-count
                    'make-aggregate-compliance-count))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-compliance-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-compliance-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-summary))
      (common-lisp:list
       (common-lisp:cons "ComplianceSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-compliance-count))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregate-compliance-count-list ()
   '(trivial-types:proper-list aggregate-compliance-count))
 (common-lisp:defun make-aggregate-compliance-count-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregate-compliance-count))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aggregate-conformance-pack-compliance common-lisp:nil
                       ((compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or conformance-pack-compliance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregate-conformance-pack-compliance-compliance-type
                         :shape "ConformancePackComplianceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliant-rule-count :initarg :compliant-rule-count
                         :initform common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-aggregate-conformance-pack-compliance-compliant-rule-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (non-compliant-rule-count :initarg
                         :non-compliant-rule-count :initform common-lisp:nil
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor
                         struct-shape-aggregate-conformance-pack-compliance-non-compliant-rule-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (total-rule-count :initarg :total-rule-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-aggregate-conformance-pack-compliance-total-rule-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregate-conformance-pack-compliance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregate-conformance-pack-compliance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregate-conformance-pack-compliance
                    'make-aggregate-conformance-pack-compliance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-rule-count))
      (common-lisp:list
       (common-lisp:cons "CompliantRuleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-rule-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantRuleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-rule-count))
      (common-lisp:list
       (common-lisp:cons "TotalRuleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aggregate-conformance-pack-compliance-count
                       common-lisp:nil
                       ((compliant-conformance-pack-count :initarg
                         :compliant-conformance-pack-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-aggregate-conformance-pack-compliance-count-compliant-conformance-pack-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (non-compliant-conformance-pack-count :initarg
                         :non-compliant-conformance-pack-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-aggregate-conformance-pack-compliance-count-non-compliant-conformance-pack-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregate-conformance-pack-compliance-count
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregate-conformance-pack-compliance-count
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregate-conformance-pack-compliance-count
                    'make-aggregate-conformance-pack-compliance-count))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-conformance-pack-count))
      (common-lisp:list
       (common-lisp:cons "CompliantConformancePackCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-conformance-pack-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantConformancePackCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance-count))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aggregate-conformance-pack-compliance-filters
                       common-lisp:nil
                       ((conformance-pack-name :initarg :conformance-pack-name
                         :initform common-lisp:nil :type
                         (common-lisp:or conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregate-conformance-pack-compliance-filters-conformance-pack-name
                         :shape "ConformancePackName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or conformance-pack-compliance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregate-conformance-pack-compliance-filters-compliance-type
                         :shape "ConformancePackComplianceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-aggregate-conformance-pack-compliance-filters-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-aggregate-conformance-pack-compliance-filters-aws-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregate-conformance-pack-compliance-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregate-conformance-pack-compliance-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregate-conformance-pack-compliance-filters
                    'make-aggregate-conformance-pack-compliance-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "ConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "AwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aggregate-conformance-pack-compliance-summary
                       common-lisp:nil
                       ((compliance-summary :initarg :compliance-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or
                          aggregate-conformance-pack-compliance-count
                          common-lisp:null)
                         :accessor
                         struct-shape-aggregate-conformance-pack-compliance-summary-compliance-summary
                         :shape "AggregateConformancePackComplianceCount"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-name :initarg :group-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregate-conformance-pack-compliance-summary-group-name
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregate-conformance-pack-compliance-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregate-conformance-pack-compliance-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregate-conformance-pack-compliance-summary
                    'make-aggregate-conformance-pack-compliance-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-summary))
      (common-lisp:list
       (common-lisp:cons "ComplianceSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aggregate-conformance-pack-compliance-summary-filters
                       common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-aggregate-conformance-pack-compliance-summary-filters-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-aggregate-conformance-pack-compliance-summary-filters-aws-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregate-conformance-pack-compliance-summary-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregate-conformance-pack-compliance-summary-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregate-conformance-pack-compliance-summary-filters
                    'make-aggregate-conformance-pack-compliance-summary-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance-summary-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance-summary-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "AwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-conformance-pack-compliance-summary-filters))
   common-lisp:nil))
(common-lisp:deftype aggregate-conformance-pack-compliance-summary-group-key ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aggregate-conformance-pack-compliance-summary-list ()
   '(trivial-types:proper-list aggregate-conformance-pack-compliance-summary))
 (common-lisp:defun make-aggregate-conformance-pack-compliance-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregate-conformance-pack-compliance-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aggregate-evaluation-result common-lisp:nil
                       ((evaluation-result-identifier :initarg
                         :evaluation-result-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluation-result-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregate-evaluation-result-evaluation-result-identifier
                         :shape "EvaluationResultIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor
                         struct-shape-aggregate-evaluation-result-compliance-type
                         :shape "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-recorded-time :initarg :result-recorded-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-aggregate-evaluation-result-result-recorded-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (config-rule-invoked-time :initarg
                         :config-rule-invoked-time :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-aggregate-evaluation-result-config-rule-invoked-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (annotation :initarg :annotation :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregate-evaluation-result-annotation
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-aggregate-evaluation-result-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-aggregate-evaluation-result-aws-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregate-evaluation-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aggregate-evaluation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregate-evaluation-result
                    'make-aggregate-evaluation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-evaluation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-evaluation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-result-identifier))
      (common-lisp:list
       (common-lisp:cons "EvaluationResultIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-recorded-time))
      (common-lisp:list
       (common-lisp:cons "ResultRecordedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'config-rule-invoked-time))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleInvokedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'annotation))
      (common-lisp:list
       (common-lisp:cons "Annotation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "AwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-evaluation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregate-evaluation-result-list ()
   '(trivial-types:proper-list aggregate-evaluation-result))
 (common-lisp:defun make-aggregate-evaluation-result-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregate-evaluation-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass aggregate-resource-identifier common-lisp:nil
                       ((source-account-id :initarg :source-account-id
                         :initform
                         (common-lisp:error ":source-account-id is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-aggregate-resource-identifier-source-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-region :initarg :source-region :initform
                         (common-lisp:error ":source-region is required") :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-aggregate-resource-identifier-source-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-aggregate-resource-identifier-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resource-type is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-aggregate-resource-identifier-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-aggregate-resource-identifier-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregate-resource-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'aggregate-resource-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregate-resource-identifier
                    'make-aggregate-resource-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-resource-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-resource-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-account-id))
      (common-lisp:list
       (common-lisp:cons "SourceAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "SourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregate-resource-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass aggregated-source-status common-lisp:nil
                       ((source-id :initarg :source-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-aggregated-source-status-source-id :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source-type :initarg :source-type :initform
                         common-lisp:nil :type
                         (common-lisp:or aggregated-source-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregated-source-status-source-type
                         :shape "AggregatedSourceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-aggregated-source-status-aws-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-status :initarg :last-update-status
                         :initform common-lisp:nil :type
                         (common-lisp:or aggregated-source-status-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-aggregated-source-status-last-update-status
                         :shape "AggregatedSourceStatusType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-aggregated-source-status-last-update-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-error-code :initarg :last-error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-aggregated-source-status-last-error-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-error-message :initarg :last-error-message
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-aggregated-source-status-last-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregated-source-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aggregated-source-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregated-source-status 'make-aggregated-source-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-source-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-source-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "AwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-status))
      (common-lisp:list
       (common-lisp:cons "LastUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-error-code))
      (common-lisp:list
       (common-lisp:cons "LastErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-error-message))
      (common-lisp:list
       (common-lisp:cons "LastErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-source-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregated-source-status-list ()
   '(trivial-types:proper-list aggregated-source-status))
 (common-lisp:defun make-aggregated-source-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregated-source-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aggregated-source-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aggregated-source-status-type-list ()
   '(trivial-types:proper-list aggregated-source-status-type))
 (common-lisp:defun make-aggregated-source-status-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregated-source-status-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aggregated-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass aggregation-authorization common-lisp:nil
                       ((aggregation-authorization-arn :initarg
                         :aggregation-authorization-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-aggregation-authorization-aggregation-authorization-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorized-account-id :initarg :authorized-account-id
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-aggregation-authorization-authorized-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorized-aws-region :initarg :authorized-aws-region
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-aggregation-authorization-authorized-aws-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-aggregation-authorization-creation-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-aggregation-authorization
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'aggregation-authorization
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'aggregation-authorization
                    'make-aggregation-authorization))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-authorization))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-authorization))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-authorization-arn))
      (common-lisp:list
       (common-lisp:cons "AggregationAuthorizationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-account-id))
      (common-lisp:list
       (common-lisp:cons "AuthorizedAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-aws-region))
      (common-lisp:list
       (common-lisp:cons "AuthorizedAwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregation-authorization))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregation-authorization-list ()
   '(trivial-types:proper-list aggregation-authorization))
 (common-lisp:defun make-aggregation-authorization-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregation-authorization))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype aggregator-region-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun make-aggregator-region-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype all-supported () 'common-lisp:boolean)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype annotation () 'common-lisp:string)
(common-lisp:deftype auto-remediation-attempt-seconds () 'common-lisp:integer)
(common-lisp:deftype auto-remediation-attempts () 'common-lisp:integer)
(common-lisp:deftype availability-zone () 'common-lisp:string)
(common-lisp:deftype aws-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass base-configuration-item common-lisp:nil
                       ((version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor struct-shape-base-configuration-item-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-base-configuration-item-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-item-capture-time :initarg
                         :configuration-item-capture-time :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-item-capture-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-base-configuration-item-configuration-item-capture-time
                         :shape "ConfigurationItemCaptureTime" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration-item-status :initarg
                         :configuration-item-status :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-item-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-base-configuration-item-configuration-item-status
                         :shape "ConfigurationItemStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration-state-id :initarg
                         :configuration-state-id :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-state-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-base-configuration-item-configuration-state-id
                         :shape "ConfigurationStateId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-base-configuration-item-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-base-configuration-item-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-base-configuration-item-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-base-configuration-item-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-base-configuration-item-aws-region :shape
                         "AwsRegion" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone common-lisp:null)
                         :accessor
                         struct-shape-base-configuration-item-availability-zone
                         :shape "AvailabilityZone" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-creation-time :initarg
                         :resource-creation-time :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-creation-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-base-configuration-item-resource-creation-time
                         :shape "ResourceCreationTime" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration common-lisp:null)
                         :accessor
                         struct-shape-base-configuration-item-configuration
                         :shape "Configuration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supplementary-configuration :initarg
                         :supplementary-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or supplementary-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-base-configuration-item-supplementary-configuration
                         :shape "SupplementaryConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recording-frequency :initarg :recording-frequency
                         :initform common-lisp:nil :type
                         (common-lisp:or recording-frequency common-lisp:null)
                         :accessor
                         struct-shape-base-configuration-item-recording-frequency
                         :shape "RecordingFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-item-delivery-time :initarg
                         :configuration-item-delivery-time :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-item-delivery-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-base-configuration-item-configuration-item-delivery-time
                         :shape "ConfigurationItemDeliveryTime" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-base-configuration-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'base-configuration-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'base-configuration-item 'make-base-configuration-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          base-configuration-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          base-configuration-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-item-capture-time))
      (common-lisp:list
       (common-lisp:cons "configurationItemCaptureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-item-status))
      (common-lisp:list
       (common-lisp:cons "configurationItemStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-state-id))
      (common-lisp:list
       (common-lisp:cons "configurationStateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-creation-time))
      (common-lisp:list
       (common-lisp:cons "resourceCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supplementary-configuration))
      (common-lisp:list
       (common-lisp:cons "supplementaryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recording-frequency))
      (common-lisp:list
       (common-lisp:cons "recordingFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-item-delivery-time))
      (common-lisp:list
       (common-lisp:cons "configurationItemDeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          base-configuration-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype base-configuration-items ()
   '(trivial-types:proper-list base-configuration-item))
 (common-lisp:defun make-base-configuration-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list base-configuration-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype base-resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-get-aggregate-resource-config-request
                       common-lisp:nil
                       ((configuration-aggregator-name :initarg
                         :configuration-aggregator-name :initform
                         (common-lisp:error
                          ":configuration-aggregator-name is required")
                         :type
                         (common-lisp:or configuration-aggregator-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-aggregate-resource-config-request-configuration-aggregator-name
                         :shape "ConfigurationAggregatorName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-identifiers :initarg :resource-identifiers
                         :initform
                         (common-lisp:error
                          ":resource-identifiers is required")
                         :type
                         (common-lisp:or resource-identifiers-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-aggregate-resource-config-request-resource-identifiers
                         :shape "ResourceIdentifiersList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-aggregate-resource-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-aggregate-resource-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-aggregate-resource-config-request
                    'make-batch-get-aggregate-resource-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-aggregate-resource-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-aggregate-resource-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-identifiers))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-aggregate-resource-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-aggregate-resource-config-response
                       common-lisp:nil
                       ((base-configuration-items :initarg
                         :base-configuration-items :initform common-lisp:nil
                         :type
                         (common-lisp:or base-configuration-items
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-aggregate-resource-config-response-base-configuration-items
                         :shape "BaseConfigurationItems" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unprocessed-resource-identifiers :initarg
                         :unprocessed-resource-identifiers :initform
                         common-lisp:nil :type
                         (common-lisp:or unprocessed-resource-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-aggregate-resource-config-response-unprocessed-resource-identifiers
                         :shape "UnprocessedResourceIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-aggregate-resource-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-aggregate-resource-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-aggregate-resource-config-response
                    'make-batch-get-aggregate-resource-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-aggregate-resource-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-aggregate-resource-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-configuration-items))
      (common-lisp:list
       (common-lisp:cons "BaseConfigurationItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-resource-identifiers))
      (common-lisp:list
       (common-lisp:cons "UnprocessedResourceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-aggregate-resource-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-resource-config-request common-lisp:nil
                       ((resource-keys :initarg :resource-keys :initform
                         (common-lisp:error ":resourcekeys is required") :type
                         (common-lisp:or resource-keys common-lisp:null)
                         :accessor
                         struct-shape-batch-get-resource-config-request-resource-keys
                         :shape "ResourceKeys" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-resource-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-resource-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-resource-config-request
                    'make-batch-get-resource-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-resource-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-resource-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-keys))
      (common-lisp:list
       (common-lisp:cons "resourceKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-resource-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-resource-config-response common-lisp:nil
                       ((base-configuration-items :initarg
                         :base-configuration-items :initform common-lisp:nil
                         :type
                         (common-lisp:or base-configuration-items
                                         common-lisp:null)
                         :accessor
                         struct-shape-batch-get-resource-config-response-base-configuration-items
                         :shape "BaseConfigurationItems" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (unprocessed-resource-keys :initarg
                         :unprocessed-resource-keys :initform common-lisp:nil
                         :type (common-lisp:or resource-keys common-lisp:null)
                         :accessor
                         struct-shape-batch-get-resource-config-response-unprocessed-resource-keys
                         :shape "ResourceKeys" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-batch-get-resource-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-resource-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'batch-get-resource-config-response
                    'make-batch-get-resource-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-resource-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-resource-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'base-configuration-items))
      (common-lisp:list
       (common-lisp:cons "baseConfigurationItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-resource-keys))
      (common-lisp:list
       (common-lisp:cons "unprocessedResourceKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-resource-config-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype channel-name () 'common-lisp:string)
(common-lisp:deftype chronological-order () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass compliance common-lisp:nil
                       ((compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor struct-shape-compliance-compliance-type
                         :shape "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance-contributor-count :initarg
                         :compliance-contributor-count :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-contributor-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-compliance-compliance-contributor-count
                         :shape "ComplianceContributorCount" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compliance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compliance
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'compliance 'make-compliance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compliance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compliance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-contributor-count))
      (common-lisp:list
       (common-lisp:cons "ComplianceContributorCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compliance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass compliance-by-config-rule common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit64
                                         common-lisp:null)
                         :accessor
                         struct-shape-compliance-by-config-rule-config-rule-name
                         :shape "StringWithCharLimit64" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance :initarg :compliance :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance common-lisp:null) :accessor
                         struct-shape-compliance-by-config-rule-compliance
                         :shape "Compliance" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compliance-by-config-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compliance-by-config-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compliance-by-config-rule
                    'make-compliance-by-config-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compliance-by-config-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compliance-by-config-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance))
      (common-lisp:list
       (common-lisp:cons "Compliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compliance-by-config-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compliance-by-config-rules ()
   '(trivial-types:proper-list compliance-by-config-rule))
 (common-lisp:defun make-compliance-by-config-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            compliance-by-config-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass compliance-by-resource common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-compliance-by-resource-resource-type
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or base-resource-id common-lisp:null)
                         :accessor
                         struct-shape-compliance-by-resource-resource-id :shape
                         "BaseResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance :initarg :compliance :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance common-lisp:null) :accessor
                         struct-shape-compliance-by-resource-compliance :shape
                         "Compliance" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compliance-by-resource
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compliance-by-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compliance-by-resource 'make-compliance-by-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compliance-by-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compliance-by-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance))
      (common-lisp:list
       (common-lisp:cons "Compliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compliance-by-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compliance-by-resources ()
   '(trivial-types:proper-list compliance-by-resource))
 (common-lisp:defun make-compliance-by-resources
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compliance-by-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass compliance-contributor-count common-lisp:nil
                       ((capped-count :initarg :capped-count :initform
                         common-lisp:nil :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         struct-shape-compliance-contributor-count-capped-count
                         :shape "Integer" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (cap-exceeded :initarg :cap-exceeded :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-compliance-contributor-count-cap-exceeded
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compliance-contributor-count
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compliance-contributor-count
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compliance-contributor-count
                    'make-compliance-contributor-count))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compliance-contributor-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compliance-contributor-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capped-count))
      (common-lisp:list
       (common-lisp:cons "CappedCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cap-exceeded))
      (common-lisp:list
       (common-lisp:cons "CapExceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compliance-contributor-count))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype compliance-resource-types ()
   '(trivial-types:proper-list string-with-char-limit256))
 (common-lisp:defun make-compliance-resource-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            string-with-char-limit256))
   aws-sdk/generator/shape::members))
(common-lisp:deftype compliance-score () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compliance-summaries-by-resource-type ()
   '(trivial-types:proper-list compliance-summary-by-resource-type))
 (common-lisp:defun make-compliance-summaries-by-resource-type
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            compliance-summary-by-resource-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass compliance-summary common-lisp:nil
                       ((compliant-resource-count :initarg
                         :compliant-resource-count :initform common-lisp:nil
                         :type
                         (common-lisp:or compliance-contributor-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-compliance-summary-compliant-resource-count
                         :shape "ComplianceContributorCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (non-compliant-resource-count :initarg
                         :non-compliant-resource-count :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-contributor-count
                                         common-lisp:null)
                         :accessor
                         struct-shape-compliance-summary-non-compliant-resource-count
                         :shape "ComplianceContributorCount" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance-summary-timestamp :initarg
                         :compliance-summary-timestamp :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-compliance-summary-compliance-summary-timestamp
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compliance-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'compliance-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compliance-summary 'make-compliance-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input compliance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input compliance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliant-resource-count))
      (common-lisp:list
       (common-lisp:cons "CompliantResourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-compliant-resource-count))
      (common-lisp:list
       (common-lisp:cons "NonCompliantResourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-summary-timestamp))
      (common-lisp:list
       (common-lisp:cons "ComplianceSummaryTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input compliance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass compliance-summary-by-resource-type common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-compliance-summary-by-resource-type-resource-type
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance-summary :initarg :compliance-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or compliance-summary common-lisp:null)
                         :accessor
                         struct-shape-compliance-summary-by-resource-type-compliance-summary
                         :shape "ComplianceSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-compliance-summary-by-resource-type
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'compliance-summary-by-resource-type
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'compliance-summary-by-resource-type
                    'make-compliance-summary-by-resource-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compliance-summary-by-resource-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compliance-summary-by-resource-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-summary))
      (common-lisp:list
       (common-lisp:cons "ComplianceSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compliance-summary-by-resource-type))
   common-lisp:nil))
(common-lisp:deftype compliance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compliance-types ()
   '(trivial-types:proper-list compliance-type))
 (common-lisp:defun make-compliance-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compliance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass config-export-delivery-info common-lisp:nil
                       ((last-status :initarg :last-status :initform
                         common-lisp:nil :type
                         (common-lisp:or delivery-status common-lisp:null)
                         :accessor
                         struct-shape-config-export-delivery-info-last-status
                         :shape "DeliveryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-error-code :initarg :last-error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-config-export-delivery-info-last-error-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-error-message :initarg :last-error-message
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-config-export-delivery-info-last-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-attempt-time :initarg :last-attempt-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-config-export-delivery-info-last-attempt-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-successful-time :initarg :last-successful-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-config-export-delivery-info-last-successful-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-delivery-time :initarg :next-delivery-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-config-export-delivery-info-next-delivery-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-config-export-delivery-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'config-export-delivery-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'config-export-delivery-info
                    'make-config-export-delivery-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          config-export-delivery-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          config-export-delivery-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status))
      (common-lisp:list
       (common-lisp:cons "lastStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-error-code))
      (common-lisp:list
       (common-lisp:cons "lastErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-error-message))
      (common-lisp:list
       (common-lisp:cons "lastErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-attempt-time))
      (common-lisp:list
       (common-lisp:cons "lastAttemptTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-time))
      (common-lisp:list
       (common-lisp:cons "lastSuccessfulTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-delivery-time))
      (common-lisp:list
       (common-lisp:cons "nextDeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          config-export-delivery-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass config-rule common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor struct-shape-config-rule-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (config-rule-arn :initarg :config-rule-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor struct-shape-config-rule-config-rule-arn
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (config-rule-id :initarg :config-rule-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit64
                                         common-lisp:null)
                         :accessor struct-shape-config-rule-config-rule-id
                         :shape "StringWithCharLimit64" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or emptiable-string-with-char-limit256
                                         common-lisp:null)
                         :accessor struct-shape-config-rule-description :shape
                         "EmptiableStringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (scope :initarg :scope :initform common-lisp:nil :type
                         (common-lisp:or scope common-lisp:null) :accessor
                         struct-shape-config-rule-scope :shape "Scope"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (source :initarg :source :initform
                         (common-lisp:error ":source is required") :type
                         (common-lisp:or source common-lisp:null) :accessor
                         struct-shape-config-rule-source :shape "Source"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input-parameters :initarg :input-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit1024
                                         common-lisp:null)
                         :accessor struct-shape-config-rule-input-parameters
                         :shape "StringWithCharLimit1024" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-execution-frequency :initarg
                         :maximum-execution-frequency :initform common-lisp:nil
                         :type
                         (common-lisp:or maximum-execution-frequency
                                         common-lisp:null)
                         :accessor
                         struct-shape-config-rule-maximum-execution-frequency
                         :shape "MaximumExecutionFrequency" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (config-rule-state :initarg :config-rule-state
                         :initform common-lisp:nil :type
                         (common-lisp:or config-rule-state common-lisp:null)
                         :accessor struct-shape-config-rule-config-rule-state
                         :shape "ConfigRuleState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor struct-shape-config-rule-created-by :shape
                         "StringWithCharLimit256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-modes :initarg :evaluation-modes :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluation-modes common-lisp:null)
                         :accessor struct-shape-config-rule-evaluation-modes
                         :shape "EvaluationModes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-config-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'config-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'config-rule 'make-config-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input config-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input config-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-id))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-parameters))
      (common-lisp:list
       (common-lisp:cons "InputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-execution-frequency))
      (common-lisp:list
       (common-lisp:cons "MaximumExecutionFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-state))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-modes))
      (common-lisp:list
       (common-lisp:cons "EvaluationModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input config-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass config-rule-compliance-filters common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-config-rule-compliance-filters-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor
                         struct-shape-config-rule-compliance-filters-compliance-type
                         :shape "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-config-rule-compliance-filters-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-config-rule-compliance-filters-aws-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-config-rule-compliance-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'config-rule-compliance-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'config-rule-compliance-filters
                    'make-config-rule-compliance-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          config-rule-compliance-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          config-rule-compliance-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "AwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          config-rule-compliance-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass config-rule-compliance-summary-filters common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-config-rule-compliance-summary-filters-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-config-rule-compliance-summary-filters-aws-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-config-rule-compliance-summary-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'config-rule-compliance-summary-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'config-rule-compliance-summary-filters
                    'make-config-rule-compliance-summary-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          config-rule-compliance-summary-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          config-rule-compliance-summary-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "AwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          config-rule-compliance-summary-filters))
   common-lisp:nil))
(common-lisp:deftype config-rule-compliance-summary-group-key ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass config-rule-evaluation-status common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-config-rule-evaluation-status-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (config-rule-arn :initarg :config-rule-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-config-rule-evaluation-status-config-rule-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (config-rule-id :initarg :config-rule-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-config-rule-evaluation-status-config-rule-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-successful-invocation-time :initarg
                         :last-successful-invocation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-config-rule-evaluation-status-last-successful-invocation-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-failed-invocation-time :initarg
                         :last-failed-invocation-time :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-config-rule-evaluation-status-last-failed-invocation-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-successful-evaluation-time :initarg
                         :last-successful-evaluation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-config-rule-evaluation-status-last-successful-evaluation-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-failed-evaluation-time :initarg
                         :last-failed-evaluation-time :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-config-rule-evaluation-status-last-failed-evaluation-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (first-activated-time :initarg :first-activated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-config-rule-evaluation-status-first-activated-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-deactivated-time :initarg :last-deactivated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-config-rule-evaluation-status-last-deactivated-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-error-code :initarg :last-error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-config-rule-evaluation-status-last-error-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-error-message :initarg :last-error-message
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-config-rule-evaluation-status-last-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (first-evaluation-started :initarg
                         :first-evaluation-started :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-config-rule-evaluation-status-first-evaluation-started
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-debug-log-delivery-status :initarg
                         :last-debug-log-delivery-status :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-config-rule-evaluation-status-last-debug-log-delivery-status
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-debug-log-delivery-status-reason :initarg
                         :last-debug-log-delivery-status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-config-rule-evaluation-status-last-debug-log-delivery-status-reason
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-debug-log-delivery-time :initarg
                         :last-debug-log-delivery-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-config-rule-evaluation-status-last-debug-log-delivery-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-config-rule-evaluation-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'config-rule-evaluation-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'config-rule-evaluation-status
                    'make-config-rule-evaluation-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          config-rule-evaluation-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          config-rule-evaluation-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-id))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-invocation-time))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulInvocationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-failed-invocation-time))
      (common-lisp:list
       (common-lisp:cons "LastFailedInvocationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-successful-evaluation-time))
      (common-lisp:list
       (common-lisp:cons "LastSuccessfulEvaluationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-failed-evaluation-time))
      (common-lisp:list
       (common-lisp:cons "LastFailedEvaluationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-activated-time))
      (common-lisp:list
       (common-lisp:cons "FirstActivatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deactivated-time))
      (common-lisp:list
       (common-lisp:cons "LastDeactivatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-error-code))
      (common-lisp:list
       (common-lisp:cons "LastErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-error-message))
      (common-lisp:list
       (common-lisp:cons "LastErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'first-evaluation-started))
      (common-lisp:list
       (common-lisp:cons "FirstEvaluationStarted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-debug-log-delivery-status))
      (common-lisp:list
       (common-lisp:cons "LastDebugLogDeliveryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-debug-log-delivery-status-reason))
      (common-lisp:list
       (common-lisp:cons "LastDebugLogDeliveryStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-debug-log-delivery-time))
      (common-lisp:list
       (common-lisp:cons "LastDebugLogDeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          config-rule-evaluation-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype config-rule-evaluation-status-list ()
   '(trivial-types:proper-list config-rule-evaluation-status))
 (common-lisp:defun make-config-rule-evaluation-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            config-rule-evaluation-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype config-rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype config-rule-names ()
   '(trivial-types:proper-list config-rule-name))
 (common-lisp:defun make-config-rule-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list config-rule-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype config-rule-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype config-rules () '(trivial-types:proper-list config-rule))
 (common-lisp:defun make-config-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list config-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass config-snapshot-delivery-properties common-lisp:nil
                       ((delivery-frequency :initarg :delivery-frequency
                         :initform common-lisp:nil :type
                         (common-lisp:or maximum-execution-frequency
                                         common-lisp:null)
                         :accessor
                         struct-shape-config-snapshot-delivery-properties-delivery-frequency
                         :shape "MaximumExecutionFrequency" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-config-snapshot-delivery-properties
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'config-snapshot-delivery-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'config-snapshot-delivery-properties
                    'make-config-snapshot-delivery-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          config-snapshot-delivery-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          config-snapshot-delivery-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-frequency))
      (common-lisp:list
       (common-lisp:cons "deliveryFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          config-snapshot-delivery-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass config-stream-delivery-info common-lisp:nil
                       ((last-status :initarg :last-status :initform
                         common-lisp:nil :type
                         (common-lisp:or delivery-status common-lisp:null)
                         :accessor
                         struct-shape-config-stream-delivery-info-last-status
                         :shape "DeliveryStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-error-code :initarg :last-error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-config-stream-delivery-info-last-error-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-error-message :initarg :last-error-message
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-config-stream-delivery-info-last-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-status-change-time :initarg
                         :last-status-change-time :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-config-stream-delivery-info-last-status-change-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-config-stream-delivery-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'config-stream-delivery-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'config-stream-delivery-info
                    'make-config-stream-delivery-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          config-stream-delivery-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          config-stream-delivery-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status))
      (common-lisp:list
       (common-lisp:cons "lastStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-error-code))
      (common-lisp:list
       (common-lisp:cons "lastErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-error-message))
      (common-lisp:list
       (common-lisp:cons "lastErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-status-change-time))
      (common-lisp:list
       (common-lisp:cons "lastStatusChangeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          config-stream-delivery-info))
   common-lisp:nil))
(common-lisp:deftype configuration () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration-aggregator common-lisp:nil
                       ((configuration-aggregator-name :initarg
                         :configuration-aggregator-name :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-aggregator-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-aggregator-configuration-aggregator-name
                         :shape "ConfigurationAggregatorName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration-aggregator-arn :initarg
                         :configuration-aggregator-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-aggregator-arn
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-aggregator-configuration-aggregator-arn
                         :shape "ConfigurationAggregatorArn" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (account-aggregation-sources :initarg
                         :account-aggregation-sources :initform common-lisp:nil
                         :type
                         (common-lisp:or account-aggregation-source-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-aggregator-account-aggregation-sources
                         :shape "AccountAggregationSourceList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-aggregation-source :initarg
                         :organization-aggregation-source :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-aggregation-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-aggregator-organization-aggregation-source
                         :shape "OrganizationAggregationSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (creation-time :initarg :creation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-configuration-aggregator-creation-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-configuration-aggregator-last-updated-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-aggregator-created-by
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration-aggregator
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-aggregator
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configuration-aggregator 'make-configuration-aggregator))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-aggregator))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-aggregator))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-aggregation-sources))
      (common-lisp:list
       (common-lisp:cons "AccountAggregationSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-aggregation-source))
      (common-lisp:list
       (common-lisp:cons "OrganizationAggregationSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-aggregator))
   common-lisp:nil))
(common-lisp:deftype configuration-aggregator-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration-aggregator-list ()
   '(trivial-types:proper-list configuration-aggregator))
 (common-lisp:defun make-configuration-aggregator-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-aggregator))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-aggregator-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration-aggregator-name-list ()
   '(trivial-types:proper-list configuration-aggregator-name))
 (common-lisp:defun make-configuration-aggregator-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-aggregator-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass configuration-item common-lisp:nil
                       ((version :initarg :version :initform common-lisp:nil
                         :type (common-lisp:or version common-lisp:null)
                         :accessor struct-shape-configuration-item-version
                         :shape "Version" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-configuration-item-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (configuration-item-capture-time :initarg
                         :configuration-item-capture-time :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-item-capture-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-item-configuration-item-capture-time
                         :shape "ConfigurationItemCaptureTime" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration-item-status :initarg
                         :configuration-item-status :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-item-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-item-configuration-item-status
                         :shape "ConfigurationItemStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration-state-id :initarg
                         :configuration-state-id :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-state-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-item-configuration-state-id
                         :shape "ConfigurationStateId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (configuration-item-md5hash :initarg
                         :configuration-item-md5hash :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-item-md5hash
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-item-configuration-item-md5hash
                         :shape "ConfigurationItemMD5Hash" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         struct-shape-configuration-item-arn :shape "ARN"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-configuration-item-resource-type :shape
                         "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-configuration-item-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-configuration-item-resource-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-configuration-item-aws-region :shape
                         "AwsRegion" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (availability-zone :initarg :availability-zone
                         :initform common-lisp:nil :type
                         (common-lisp:or availability-zone common-lisp:null)
                         :accessor
                         struct-shape-configuration-item-availability-zone
                         :shape "AvailabilityZone" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-creation-time :initarg
                         :resource-creation-time :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-creation-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-item-resource-creation-time
                         :shape "ResourceCreationTime" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-configuration-item-tags :shape "Tags"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (related-events :initarg :related-events :initform
                         common-lisp:nil :type
                         (common-lisp:or related-event-list common-lisp:null)
                         :accessor
                         struct-shape-configuration-item-related-events :shape
                         "RelatedEventList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relationships :initarg :relationships :initform
                         common-lisp:nil :type
                         (common-lisp:or relationship-list common-lisp:null)
                         :accessor
                         struct-shape-configuration-item-relationships :shape
                         "RelationshipList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration common-lisp:null)
                         :accessor
                         struct-shape-configuration-item-configuration :shape
                         "Configuration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (supplementary-configuration :initarg
                         :supplementary-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or supplementary-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-item-supplementary-configuration
                         :shape "SupplementaryConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recording-frequency :initarg :recording-frequency
                         :initform common-lisp:nil :type
                         (common-lisp:or recording-frequency common-lisp:null)
                         :accessor
                         struct-shape-configuration-item-recording-frequency
                         :shape "RecordingFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-item-delivery-time :initarg
                         :configuration-item-delivery-time :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-item-delivery-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-configuration-item-configuration-item-delivery-time
                         :shape "ConfigurationItemDeliveryTime" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration-item
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-item
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configuration-item 'make-configuration-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "accountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-item-capture-time))
      (common-lisp:list
       (common-lisp:cons "configurationItemCaptureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-item-status))
      (common-lisp:list
       (common-lisp:cons "configurationItemStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-state-id))
      (common-lisp:list
       (common-lisp:cons "configurationStateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-item-md5hash))
      (common-lisp:list
       (common-lisp:cons "configurationItemMD5Hash"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "awsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-creation-time))
      (common-lisp:list
       (common-lisp:cons "resourceCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'related-events))
      (common-lisp:list
       (common-lisp:cons "relatedEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationships))
      (common-lisp:list
       (common-lisp:cons "relationships"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supplementary-configuration))
      (common-lisp:list
       (common-lisp:cons "supplementaryConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recording-frequency))
      (common-lisp:list
       (common-lisp:cons "recordingFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-item-delivery-time))
      (common-lisp:list
       (common-lisp:cons "configurationItemDeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-item))
   common-lisp:nil))
(common-lisp:deftype configuration-item-capture-time () 'common-lisp:string)
(common-lisp:deftype configuration-item-delivery-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration-item-list ()
   '(trivial-types:proper-list configuration-item))
 (common-lisp:defun make-configuration-item-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-item-md5hash () 'common-lisp:string)
(common-lisp:deftype configuration-item-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration-recorder common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or recorder-name common-lisp:null)
                         :accessor struct-shape-configuration-recorder-name
                         :shape "RecorderName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (role-arn :initarg :role-arn :initform common-lisp:nil
                         :type (common-lisp:or string common-lisp:null)
                         :accessor struct-shape-configuration-recorder-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recording-group :initarg :recording-group :initform
                         common-lisp:nil :type
                         (common-lisp:or recording-group common-lisp:null)
                         :accessor
                         struct-shape-configuration-recorder-recording-group
                         :shape "RecordingGroup" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recording-mode :initarg :recording-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or recording-mode common-lisp:null)
                         :accessor
                         struct-shape-configuration-recorder-recording-mode
                         :shape "RecordingMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration-recorder
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-recorder
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configuration-recorder 'make-configuration-recorder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-recorder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-recorder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recording-group))
      (common-lisp:list
       (common-lisp:cons "recordingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recording-mode))
      (common-lisp:list
       (common-lisp:cons "recordingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-recorder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-recorder-list ()
   '(trivial-types:proper-list configuration-recorder))
 (common-lisp:defun make-configuration-recorder-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration-recorder))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype configuration-recorder-name-list ()
   '(trivial-types:proper-list recorder-name))
 (common-lisp:defun make-configuration-recorder-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recorder-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass configuration-recorder-status common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-configuration-recorder-status-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-start-time :initarg :last-start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-configuration-recorder-status-last-start-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-stop-time :initarg :last-stop-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-configuration-recorder-status-last-stop-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (recording :initarg :recording :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-configuration-recorder-status-recording
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-status :initarg :last-status :initform
                         common-lisp:nil :type
                         (common-lisp:or recorder-status common-lisp:null)
                         :accessor
                         struct-shape-configuration-recorder-status-last-status
                         :shape "RecorderStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-error-code :initarg :last-error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-configuration-recorder-status-last-error-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-error-message :initarg :last-error-message
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-configuration-recorder-status-last-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-status-change-time :initarg
                         :last-status-change-time :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-configuration-recorder-status-last-status-change-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-configuration-recorder-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'configuration-recorder-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'configuration-recorder-status
                    'make-configuration-recorder-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-recorder-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-recorder-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-start-time))
      (common-lisp:list
       (common-lisp:cons "lastStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-stop-time))
      (common-lisp:list
       (common-lisp:cons "lastStopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recording))
      (common-lisp:list
       (common-lisp:cons "recording"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-status))
      (common-lisp:list
       (common-lisp:cons "lastStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-error-code))
      (common-lisp:list
       (common-lisp:cons "lastErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-error-message))
      (common-lisp:list
       (common-lisp:cons "lastErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-status-change-time))
      (common-lisp:list
       (common-lisp:cons "lastStatusChangeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-recorder-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype configuration-recorder-status-list ()
   '(trivial-types:proper-list configuration-recorder-status))
 (common-lisp:defun make-configuration-recorder-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            configuration-recorder-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-state-id () 'common-lisp:string)
(common-lisp:deftype conformance-pack-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass conformance-pack-compliance-filters common-lisp:nil
                       ((config-rule-names :initarg :config-rule-names
                         :initform common-lisp:nil :type
                         (common-lisp:or conformance-pack-config-rule-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-compliance-filters-config-rule-names
                         :shape "ConformancePackConfigRuleNames" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or conformance-pack-compliance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-compliance-filters-compliance-type
                         :shape "ConformancePackComplianceType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conformance-pack-compliance-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conformance-pack-compliance-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conformance-pack-compliance-filters
                    'make-conformance-pack-compliance-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-compliance-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-compliance-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-names))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-compliance-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conformance-pack-compliance-resource-ids ()
   '(trivial-types:proper-list string-with-char-limit256))
 (common-lisp:defun make-conformance-pack-compliance-resource-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            string-with-char-limit256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass conformance-pack-compliance-score common-lisp:nil
                       ((score :initarg :score :initform common-lisp:nil :type
                         (common-lisp:or compliance-score common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-compliance-score-score
                         :shape "ComplianceScore" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-name :initarg :conformance-pack-name
                         :initform common-lisp:nil :type
                         (common-lisp:or conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-compliance-score-conformance-pack-name
                         :shape "ConformancePackName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or last-updated-time common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-compliance-score-last-updated-time
                         :shape "LastUpdatedTime" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conformance-pack-compliance-score
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conformance-pack-compliance-score
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conformance-pack-compliance-score
                    'make-conformance-pack-compliance-score))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-compliance-score))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-compliance-score))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "Score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "ConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-compliance-score))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conformance-pack-compliance-scores ()
   '(trivial-types:proper-list conformance-pack-compliance-score))
 (common-lisp:defun make-conformance-pack-compliance-scores
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            conformance-pack-compliance-score))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass conformance-pack-compliance-scores-filters
                       common-lisp:nil
                       ((conformance-pack-names :initarg
                         :conformance-pack-names :initform
                         (common-lisp:error
                          ":conformance-pack-names is required")
                         :type
                         (common-lisp:or conformance-pack-name-filter
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-compliance-scores-filters-conformance-pack-names
                         :shape "ConformancePackNameFilter" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conformance-pack-compliance-scores-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conformance-pack-compliance-scores-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conformance-pack-compliance-scores-filters
                    'make-conformance-pack-compliance-scores-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-compliance-scores-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-compliance-scores-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-names))
      (common-lisp:list
       (common-lisp:cons "ConformancePackNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-compliance-scores-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conformance-pack-compliance-summary common-lisp:nil
                       ((conformance-pack-name :initarg :conformance-pack-name
                         :initform
                         (common-lisp:error
                          ":conformance-pack-name is required")
                         :type
                         (common-lisp:or conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-compliance-summary-conformance-pack-name
                         :shape "ConformancePackName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-compliance-status :initarg
                         :conformance-pack-compliance-status :initform
                         (common-lisp:error
                          ":conformance-pack-compliance-status is required")
                         :type
                         (common-lisp:or conformance-pack-compliance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-compliance-summary-conformance-pack-compliance-status
                         :shape "ConformancePackComplianceType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conformance-pack-compliance-summary
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conformance-pack-compliance-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conformance-pack-compliance-summary
                    'make-conformance-pack-compliance-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-compliance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-compliance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "ConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-compliance-status))
      (common-lisp:list
       (common-lisp:cons "ConformancePackComplianceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-compliance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conformance-pack-compliance-summary-list ()
   '(trivial-types:proper-list conformance-pack-compliance-summary))
 (common-lisp:defun make-conformance-pack-compliance-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            conformance-pack-compliance-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype conformance-pack-compliance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype conformance-pack-config-rule-names ()
   '(trivial-types:proper-list string-with-char-limit64))
 (common-lisp:defun make-conformance-pack-config-rule-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            string-with-char-limit64))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass conformance-pack-detail common-lisp:nil
                       ((conformance-pack-name :initarg :conformance-pack-name
                         :initform
                         (common-lisp:error
                          ":conformance-pack-name is required")
                         :type
                         (common-lisp:or conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-detail-conformance-pack-name
                         :shape "ConformancePackName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-arn :initarg :conformance-pack-arn
                         :initform
                         (common-lisp:error
                          ":conformance-pack-arn is required")
                         :type
                         (common-lisp:or conformance-pack-arn common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-detail-conformance-pack-arn
                         :shape "ConformancePackArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-id :initarg :conformance-pack-id
                         :initform
                         (common-lisp:error ":conformance-pack-id is required")
                         :type
                         (common-lisp:or conformance-pack-id common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-detail-conformance-pack-id
                         :shape "ConformancePackId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-s3bucket :initarg :delivery-s3bucket
                         :initform common-lisp:nil :type
                         (common-lisp:or delivery-s3bucket common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-detail-delivery-s3bucket
                         :shape "DeliveryS3Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-s3key-prefix :initarg :delivery-s3key-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or delivery-s3key-prefix
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-detail-delivery-s3key-prefix
                         :shape "DeliveryS3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-input-parameters :initarg
                         :conformance-pack-input-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or conformance-pack-input-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-detail-conformance-pack-input-parameters
                         :shape "ConformancePackInputParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-update-requested-time :initarg
                         :last-update-requested-time :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-conformance-pack-detail-last-update-requested-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (created-by :initarg :created-by :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-detail-created-by :shape
                         "StringWithCharLimit256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-ssmdocument-details :initarg
                         :template-ssmdocument-details :initform
                         common-lisp:nil :type
                         (common-lisp:or template-ssmdocument-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-detail-template-ssmdocument-details
                         :shape "TemplateSSMDocumentDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conformance-pack-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'conformance-pack-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conformance-pack-detail 'make-conformance-pack-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "ConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-arn))
      (common-lisp:list
       (common-lisp:cons "ConformancePackArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conformance-pack-id))
      (common-lisp:list
       (common-lisp:cons "ConformancePackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-s3bucket))
      (common-lisp:list
       (common-lisp:cons "DeliveryS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-s3key-prefix))
      (common-lisp:list
       (common-lisp:cons "DeliveryS3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-input-parameters))
      (common-lisp:list
       (common-lisp:cons "ConformancePackInputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-requested-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateRequestedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-ssmdocument-details))
      (common-lisp:list
       (common-lisp:cons "TemplateSSMDocumentDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conformance-pack-detail-list ()
   '(trivial-types:proper-list conformance-pack-detail))
 (common-lisp:defun make-conformance-pack-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list conformance-pack-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass conformance-pack-evaluation-filters common-lisp:nil
                       ((config-rule-names :initarg :config-rule-names
                         :initform common-lisp:nil :type
                         (common-lisp:or conformance-pack-config-rule-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-evaluation-filters-config-rule-names
                         :shape "ConformancePackConfigRuleNames" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or conformance-pack-compliance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-evaluation-filters-compliance-type
                         :shape "ConformancePackComplianceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-evaluation-filters-resource-type
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-ids :initarg :resource-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          conformance-pack-compliance-resource-ids
                          common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-evaluation-filters-resource-ids
                         :shape "ConformancePackComplianceResourceIds"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conformance-pack-evaluation-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conformance-pack-evaluation-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conformance-pack-evaluation-filters
                    'make-conformance-pack-evaluation-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-evaluation-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-evaluation-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-names))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "ResourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-evaluation-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass conformance-pack-evaluation-result common-lisp:nil
                       ((compliance-type :initarg :compliance-type :initform
                         (common-lisp:error ":compliance-type is required")
                         :type
                         (common-lisp:or conformance-pack-compliance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-evaluation-result-compliance-type
                         :shape "ConformancePackComplianceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (evaluation-result-identifier :initarg
                         :evaluation-result-identifier :initform
                         (common-lisp:error
                          ":evaluation-result-identifier is required")
                         :type
                         (common-lisp:or evaluation-result-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-evaluation-result-evaluation-result-identifier
                         :shape "EvaluationResultIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (config-rule-invoked-time :initarg
                         :config-rule-invoked-time :initform
                         (common-lisp:error
                          ":config-rule-invoked-time is required")
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-conformance-pack-evaluation-result-config-rule-invoked-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (result-recorded-time :initarg :result-recorded-time
                         :initform
                         (common-lisp:error
                          ":result-recorded-time is required")
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-conformance-pack-evaluation-result-result-recorded-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (annotation :initarg :annotation :initform
                         common-lisp:nil :type
                         (common-lisp:or annotation common-lisp:null) :accessor
                         struct-shape-conformance-pack-evaluation-result-annotation
                         :shape "Annotation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conformance-pack-evaluation-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conformance-pack-evaluation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conformance-pack-evaluation-result
                    'make-conformance-pack-evaluation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-evaluation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-evaluation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-result-identifier))
      (common-lisp:list
       (common-lisp:cons "EvaluationResultIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'config-rule-invoked-time))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleInvokedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-recorded-time))
      (common-lisp:list
       (common-lisp:cons "ResultRecordedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'annotation))
      (common-lisp:list
       (common-lisp:cons "Annotation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-evaluation-result))
   common-lisp:nil))
(common-lisp:deftype conformance-pack-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass conformance-pack-input-parameter common-lisp:nil
                       ((parameter-name :initarg :parameter-name :initform
                         (common-lisp:error ":parameter-name is required")
                         :type (common-lisp:or parameter-name common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-input-parameter-parameter-name
                         :shape "ParameterName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameter-value :initarg :parameter-value :initform
                         (common-lisp:error ":parameter-value is required")
                         :type
                         (common-lisp:or parameter-value common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-input-parameter-parameter-value
                         :shape "ParameterValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conformance-pack-input-parameter
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conformance-pack-input-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conformance-pack-input-parameter
                    'make-conformance-pack-input-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-input-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-input-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "ParameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-input-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conformance-pack-input-parameters ()
   '(trivial-types:proper-list conformance-pack-input-parameter))
 (common-lisp:defun make-conformance-pack-input-parameters
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            conformance-pack-input-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype conformance-pack-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype conformance-pack-name-filter ()
   '(trivial-types:proper-list conformance-pack-name))
 (common-lisp:defun make-conformance-pack-name-filter
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list conformance-pack-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype conformance-pack-names-list ()
   '(trivial-types:proper-list conformance-pack-name))
 (common-lisp:defun make-conformance-pack-names-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list conformance-pack-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype conformance-pack-names-to-summarize-list ()
   '(trivial-types:proper-list conformance-pack-name))
 (common-lisp:defun make-conformance-pack-names-to-summarize-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list conformance-pack-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass conformance-pack-rule-compliance common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-rule-compliance-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or conformance-pack-compliance-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-rule-compliance-compliance-type
                         :shape "ConformancePackComplianceType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (controls :initarg :controls :initform common-lisp:nil
                         :type (common-lisp:or controls-list common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-rule-compliance-controls
                         :shape "ControlsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conformance-pack-rule-compliance
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conformance-pack-rule-compliance
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conformance-pack-rule-compliance
                    'make-conformance-pack-rule-compliance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-rule-compliance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-rule-compliance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'controls))
      (common-lisp:list
       (common-lisp:cons "Controls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-rule-compliance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conformance-pack-rule-compliance-list ()
   '(trivial-types:proper-list conformance-pack-rule-compliance))
 (common-lisp:defun make-conformance-pack-rule-compliance-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            conformance-pack-rule-compliance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype conformance-pack-rule-evaluation-results-list ()
   '(trivial-types:proper-list conformance-pack-evaluation-result))
 (common-lisp:defun make-conformance-pack-rule-evaluation-results-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            conformance-pack-evaluation-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype conformance-pack-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass conformance-pack-status-detail common-lisp:nil
                       ((conformance-pack-name :initarg :conformance-pack-name
                         :initform
                         (common-lisp:error
                          ":conformance-pack-name is required")
                         :type
                         (common-lisp:or conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-status-detail-conformance-pack-name
                         :shape "ConformancePackName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-id :initarg :conformance-pack-id
                         :initform
                         (common-lisp:error ":conformance-pack-id is required")
                         :type
                         (common-lisp:or conformance-pack-id common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-status-detail-conformance-pack-id
                         :shape "ConformancePackId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-arn :initarg :conformance-pack-arn
                         :initform
                         (common-lisp:error
                          ":conformance-pack-arn is required")
                         :type
                         (common-lisp:or conformance-pack-arn common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-status-detail-conformance-pack-arn
                         :shape "ConformancePackArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-state :initarg
                         :conformance-pack-state :initform
                         (common-lisp:error
                          ":conformance-pack-state is required")
                         :type
                         (common-lisp:or conformance-pack-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-status-detail-conformance-pack-state
                         :shape "ConformancePackState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (stack-arn :initarg :stack-arn :initform
                         (common-lisp:error ":stack-arn is required") :type
                         (common-lisp:or stack-arn common-lisp:null) :accessor
                         struct-shape-conformance-pack-status-detail-stack-arn
                         :shape "StackArn" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-status-reason :initarg
                         :conformance-pack-status-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or conformance-pack-status-reason
                                         common-lisp:null)
                         :accessor
                         struct-shape-conformance-pack-status-detail-conformance-pack-status-reason
                         :shape "ConformancePackStatusReason" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (last-update-requested-time :initarg
                         :last-update-requested-time :initform
                         (common-lisp:error
                          ":last-update-requested-time is required")
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-conformance-pack-status-detail-last-update-requested-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-update-completed-time :initarg
                         :last-update-completed-time :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-conformance-pack-status-detail-last-update-completed-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-conformance-pack-status-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'conformance-pack-status-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'conformance-pack-status-detail
                    'make-conformance-pack-status-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-status-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-status-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "ConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conformance-pack-id))
      (common-lisp:list
       (common-lisp:cons "ConformancePackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-arn))
      (common-lisp:list
       (common-lisp:cons "ConformancePackArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-state))
      (common-lisp:list
       (common-lisp:cons "ConformancePackState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-arn))
      (common-lisp:list
       (common-lisp:cons "StackArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-status-reason))
      (common-lisp:list
       (common-lisp:cons "ConformancePackStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-requested-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateRequestedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-update-completed-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateCompletedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          conformance-pack-status-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype conformance-pack-status-details-list ()
   '(trivial-types:proper-list conformance-pack-status-detail))
 (common-lisp:defun make-conformance-pack-status-details-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            conformance-pack-status-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype conformance-pack-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conformance-pack-template-validation-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'conformance-pack-template-validation-exception)))
(common-lisp:progn
 (common-lisp:deftype controls-list ()
   '(trivial-types:proper-list string-with-char-limit128))
 (common-lisp:defun make-controls-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            string-with-char-limit128))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cosmos-page-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass custom-policy-details common-lisp:nil
                       ((policy-runtime :initarg :policy-runtime :initform
                         (common-lisp:error ":policy-runtime is required")
                         :type (common-lisp:or policy-runtime common-lisp:null)
                         :accessor
                         struct-shape-custom-policy-details-policy-runtime
                         :shape "PolicyRuntime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-text :initarg :policy-text :initform
                         (common-lisp:error ":policy-text is required") :type
                         (common-lisp:or policy-text common-lisp:null)
                         :accessor
                         struct-shape-custom-policy-details-policy-text :shape
                         "PolicyText" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (enable-debug-log-delivery :initarg
                         :enable-debug-log-delivery :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-custom-policy-details-enable-debug-log-delivery
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-custom-policy-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'custom-policy-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'custom-policy-details 'make-custom-policy-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          custom-policy-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          custom-policy-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-runtime))
      (common-lisp:list
       (common-lisp:cons "PolicyRuntime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "PolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-debug-log-delivery))
      (common-lisp:list
       (common-lisp:cons "EnableDebugLogDelivery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          custom-policy-details))
   common-lisp:nil))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype debug-log-delivery-accounts ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun make-debug-log-delivery-accounts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-aggregation-authorization-request common-lisp:nil
                       ((authorized-account-id :initarg :authorized-account-id
                         :initform
                         (common-lisp:error
                          ":authorized-account-id is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-delete-aggregation-authorization-request-authorized-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorized-aws-region :initarg :authorized-aws-region
                         :initform
                         (common-lisp:error
                          ":authorized-aws-region is required")
                         :type (common-lisp:or aws-region common-lisp:null)
                         :accessor
                         struct-shape-delete-aggregation-authorization-request-authorized-aws-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-aggregation-authorization-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-aggregation-authorization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-aggregation-authorization-request
                    'make-delete-aggregation-authorization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-aggregation-authorization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-aggregation-authorization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-account-id))
      (common-lisp:list
       (common-lisp:cons "AuthorizedAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-aws-region))
      (common-lisp:list
       (common-lisp:cons "AuthorizedAwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-aggregation-authorization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-config-rule-request common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         (common-lisp:error ":config-rule-name is required")
                         :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-delete-config-rule-request-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-config-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-config-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-config-rule-request
                    'make-delete-config-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-config-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-config-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-config-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-aggregator-request common-lisp:nil
                       ((configuration-aggregator-name :initarg
                         :configuration-aggregator-name :initform
                         (common-lisp:error
                          ":configuration-aggregator-name is required")
                         :type
                         (common-lisp:or configuration-aggregator-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-configuration-aggregator-request-configuration-aggregator-name
                         :shape "ConfigurationAggregatorName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configuration-aggregator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configuration-aggregator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-aggregator-request
                    'make-delete-configuration-aggregator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-aggregator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-aggregator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-aggregator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-configuration-recorder-request common-lisp:nil
                       ((configuration-recorder-name :initarg
                         :configuration-recorder-name :initform
                         (common-lisp:error
                          ":configuration-recorder-name is required")
                         :type (common-lisp:or recorder-name common-lisp:null)
                         :accessor
                         struct-shape-delete-configuration-recorder-request-configuration-recorder-name
                         :shape "RecorderName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-configuration-recorder-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-configuration-recorder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-configuration-recorder-request
                    'make-delete-configuration-recorder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-recorder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-recorder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-recorder-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationRecorderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-configuration-recorder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-conformance-pack-request common-lisp:nil
                       ((conformance-pack-name :initarg :conformance-pack-name
                         :initform
                         (common-lisp:error
                          ":conformance-pack-name is required")
                         :type
                         (common-lisp:or conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-conformance-pack-request-conformance-pack-name
                         :shape "ConformancePackName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-conformance-pack-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-conformance-pack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-conformance-pack-request
                    'make-delete-conformance-pack-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-conformance-pack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-conformance-pack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "ConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-conformance-pack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-delivery-channel-request common-lisp:nil
                       ((delivery-channel-name :initarg :delivery-channel-name
                         :initform
                         (common-lisp:error
                          ":delivery-channel-name is required")
                         :type (common-lisp:or channel-name common-lisp:null)
                         :accessor
                         struct-shape-delete-delivery-channel-request-delivery-channel-name
                         :shape "ChannelName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-delivery-channel-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-delivery-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-delivery-channel-request
                    'make-delete-delivery-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-channel-name))
      (common-lisp:list
       (common-lisp:cons "DeliveryChannelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-delivery-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-evaluation-results-request common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         (common-lisp:error ":config-rule-name is required")
                         :type
                         (common-lisp:or string-with-char-limit64
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-evaluation-results-request-config-rule-name
                         :shape "StringWithCharLimit64" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-evaluation-results-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-evaluation-results-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-evaluation-results-request
                    'make-delete-evaluation-results-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-results-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-results-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-results-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-evaluation-results-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-evaluation-results-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-evaluation-results-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-evaluation-results-response
                    'make-delete-evaluation-results-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-results-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-results-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-evaluation-results-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-organization-config-rule-request common-lisp:nil
                       ((organization-config-rule-name :initarg
                         :organization-config-rule-name :initform
                         (common-lisp:error
                          ":organization-config-rule-name is required")
                         :type
                         (common-lisp:or organization-config-rule-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-organization-config-rule-request-organization-config-rule-name
                         :shape "OrganizationConfigRuleName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-organization-config-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-organization-config-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-organization-config-rule-request
                    'make-delete-organization-config-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-config-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-config-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-config-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-organization-conformance-pack-request
                       common-lisp:nil
                       ((organization-conformance-pack-name :initarg
                         :organization-conformance-pack-name :initform
                         (common-lisp:error
                          ":organization-conformance-pack-name is required")
                         :type
                         (common-lisp:or organization-conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-organization-conformance-pack-request-organization-conformance-pack-name
                         :shape "OrganizationConformancePackName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-organization-conformance-pack-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-organization-conformance-pack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-organization-conformance-pack-request
                    'make-delete-organization-conformance-pack-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-conformance-pack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-conformance-pack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-organization-conformance-pack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-pending-aggregation-request-request
                       common-lisp:nil
                       ((requester-account-id :initarg :requester-account-id
                         :initform
                         (common-lisp:error
                          ":requester-account-id is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-delete-pending-aggregation-request-request-requester-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requester-aws-region :initarg :requester-aws-region
                         :initform
                         (common-lisp:error
                          ":requester-aws-region is required")
                         :type (common-lisp:or aws-region common-lisp:null)
                         :accessor
                         struct-shape-delete-pending-aggregation-request-request-requester-aws-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-pending-aggregation-request-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-pending-aggregation-request-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-pending-aggregation-request-request
                    'make-delete-pending-aggregation-request-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pending-aggregation-request-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pending-aggregation-request-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requester-account-id))
      (common-lisp:list
       (common-lisp:cons "RequesterAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requester-aws-region))
      (common-lisp:list
       (common-lisp:cons "RequesterAwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pending-aggregation-request-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-remediation-configuration-request common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         (common-lisp:error ":config-rule-name is required")
                         :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-delete-remediation-configuration-request-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delete-remediation-configuration-request-resource-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-remediation-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-remediation-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-remediation-configuration-request
                    'make-delete-remediation-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-remediation-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-remediation-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-remediation-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-remediation-configuration-response
                       common-lisp:nil common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-remediation-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-remediation-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-remediation-configuration-response
                    'make-delete-remediation-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-remediation-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-remediation-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-remediation-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-remediation-exceptions-request common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         (common-lisp:error ":config-rule-name is required")
                         :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-delete-remediation-exceptions-request-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-keys :initarg :resource-keys :initform
                         (common-lisp:error ":resource-keys is required") :type
                         (common-lisp:or remediation-exception-resource-keys
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-remediation-exceptions-request-resource-keys
                         :shape "RemediationExceptionResourceKeys" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-remediation-exceptions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-remediation-exceptions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-remediation-exceptions-request
                    'make-delete-remediation-exceptions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-remediation-exceptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-remediation-exceptions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-keys))
      (common-lisp:list
       (common-lisp:cons "ResourceKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-remediation-exceptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-remediation-exceptions-response common-lisp:nil
                       ((failed-batches :initarg :failed-batches :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          failed-delete-remediation-exceptions-batches
                          common-lisp:null)
                         :accessor
                         struct-shape-delete-remediation-exceptions-response-failed-batches
                         :shape "FailedDeleteRemediationExceptionsBatches"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-remediation-exceptions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-remediation-exceptions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-remediation-exceptions-response
                    'make-delete-remediation-exceptions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-remediation-exceptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-remediation-exceptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-batches))
      (common-lisp:list
       (common-lisp:cons "FailedBatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-remediation-exceptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-config-request common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resource-type is required") :type
                         (common-lisp:or resource-type-string common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-config-request-resource-type
                         :shape "ResourceTypeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-delete-resource-config-request-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-resource-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-resource-config-request
                    'make-delete-resource-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-retention-configuration-request common-lisp:nil
                       ((retention-configuration-name :initarg
                         :retention-configuration-name :initform
                         (common-lisp:error
                          ":retention-configuration-name is required")
                         :type
                         (common-lisp:or retention-configuration-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-delete-retention-configuration-request-retention-configuration-name
                         :shape "RetentionConfigurationName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-retention-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-retention-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-retention-configuration-request
                    'make-delete-retention-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-configuration-name))
      (common-lisp:list
       (common-lisp:cons "RetentionConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-retention-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-stored-query-request common-lisp:nil
                       ((query-name :initarg :query-name :initform
                         (common-lisp:error ":query-name is required") :type
                         (common-lisp:or query-name common-lisp:null) :accessor
                         struct-shape-delete-stored-query-request-query-name
                         :shape "QueryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-stored-query-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-stored-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-stored-query-request
                    'make-delete-stored-query-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stored-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stored-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-name))
      (common-lisp:list
       (common-lisp:cons "QueryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stored-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-stored-query-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delete-stored-query-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delete-stored-query-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delete-stored-query-response
                    'make-delete-stored-query-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stored-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stored-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stored-query-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deliver-config-snapshot-request common-lisp:nil
                       ((delivery-channel-name :initarg :delivery-channel-name
                         :initform
                         (common-lisp:error ":deliverychannelname is required")
                         :type (common-lisp:or channel-name common-lisp:null)
                         :accessor
                         struct-shape-deliver-config-snapshot-request-delivery-channel-name
                         :shape "ChannelName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deliver-config-snapshot-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deliver-config-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deliver-config-snapshot-request
                    'make-deliver-config-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deliver-config-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deliver-config-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-channel-name))
      (common-lisp:list
       (common-lisp:cons "deliveryChannelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deliver-config-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deliver-config-snapshot-response common-lisp:nil
                       ((config-snapshot-id :initarg :config-snapshot-id
                         :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-deliver-config-snapshot-response-config-snapshot-id
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-deliver-config-snapshot-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'deliver-config-snapshot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'deliver-config-snapshot-response
                    'make-deliver-config-snapshot-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deliver-config-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deliver-config-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-snapshot-id))
      (common-lisp:list
       (common-lisp:cons "configSnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deliver-config-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delivery-channel common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or channel-name common-lisp:null)
                         :accessor struct-shape-delivery-channel-name :shape
                         "ChannelName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delivery-channel-s3bucket-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3key-prefix :initarg :s3key-prefix :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delivery-channel-s3key-prefix :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (s3kms-key-arn :initarg :s3kms-key-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delivery-channel-s3kms-key-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sns-topic-arn :initarg :sns-topic-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delivery-channel-sns-topic-arn :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (config-snapshot-delivery-properties :initarg
                         :config-snapshot-delivery-properties :initform
                         common-lisp:nil :type
                         (common-lisp:or config-snapshot-delivery-properties
                                         common-lisp:null)
                         :accessor
                         struct-shape-delivery-channel-config-snapshot-delivery-properties
                         :shape "ConfigSnapshotDeliveryProperties" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delivery-channel
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delivery-channel
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delivery-channel 'make-delivery-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delivery-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delivery-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "s3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "s3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "s3KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "snsTopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'config-snapshot-delivery-properties))
      (common-lisp:list
       (common-lisp:cons "configSnapshotDeliveryProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delivery-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype delivery-channel-list ()
   '(trivial-types:proper-list delivery-channel))
 (common-lisp:defun make-delivery-channel-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delivery-channel))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype delivery-channel-name-list ()
   '(trivial-types:proper-list channel-name))
 (common-lisp:defun make-delivery-channel-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delivery-channel-status common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-delivery-channel-status-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (config-snapshot-delivery-info :initarg
                         :config-snapshot-delivery-info :initform
                         common-lisp:nil :type
                         (common-lisp:or config-export-delivery-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-delivery-channel-status-config-snapshot-delivery-info
                         :shape "ConfigExportDeliveryInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (config-history-delivery-info :initarg
                         :config-history-delivery-info :initform
                         common-lisp:nil :type
                         (common-lisp:or config-export-delivery-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-delivery-channel-status-config-history-delivery-info
                         :shape "ConfigExportDeliveryInfo" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (config-stream-delivery-info :initarg
                         :config-stream-delivery-info :initform common-lisp:nil
                         :type
                         (common-lisp:or config-stream-delivery-info
                                         common-lisp:null)
                         :accessor
                         struct-shape-delivery-channel-status-config-stream-delivery-info
                         :shape "ConfigStreamDeliveryInfo" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-delivery-channel-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'delivery-channel-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'delivery-channel-status 'make-delivery-channel-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delivery-channel-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delivery-channel-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'config-snapshot-delivery-info))
      (common-lisp:list
       (common-lisp:cons "configSnapshotDeliveryInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'config-history-delivery-info))
      (common-lisp:list
       (common-lisp:cons "configHistoryDeliveryInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'config-stream-delivery-info))
      (common-lisp:list
       (common-lisp:cons "configStreamDeliveryInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delivery-channel-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype delivery-channel-status-list ()
   '(trivial-types:proper-list delivery-channel-status))
 (common-lisp:defun make-delivery-channel-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delivery-channel-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype delivery-s3bucket () 'common-lisp:string)
(common-lisp:deftype delivery-s3key-prefix () 'common-lisp:string)
(common-lisp:deftype delivery-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-aggregate-compliance-by-config-rules-request
                       common-lisp:nil
                       ((configuration-aggregator-name :initarg
                         :configuration-aggregator-name :initform
                         (common-lisp:error
                          ":configuration-aggregator-name is required")
                         :type
                         (common-lisp:or configuration-aggregator-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-aggregate-compliance-by-config-rules-request-configuration-aggregator-name
                         :shape "ConfigurationAggregatorName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or config-rule-compliance-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-aggregate-compliance-by-config-rules-request-filters
                         :shape "ConfigRuleComplianceFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or group-by-apilimit common-lisp:null)
                         :accessor
                         struct-shape-describe-aggregate-compliance-by-config-rules-request-limit
                         :shape "GroupByAPILimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-aggregate-compliance-by-config-rules-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-aggregate-compliance-by-config-rules-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-aggregate-compliance-by-config-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-aggregate-compliance-by-config-rules-request
                    'make-describe-aggregate-compliance-by-config-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregate-compliance-by-config-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregate-compliance-by-config-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregate-compliance-by-config-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-aggregate-compliance-by-config-rules-response
                       common-lisp:nil
                       ((aggregate-compliance-by-config-rules :initarg
                         :aggregate-compliance-by-config-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          aggregate-compliance-by-config-rule-list
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-aggregate-compliance-by-config-rules-response-aggregate-compliance-by-config-rules
                         :shape "AggregateComplianceByConfigRuleList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-aggregate-compliance-by-config-rules-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-aggregate-compliance-by-config-rules-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-aggregate-compliance-by-config-rules-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-aggregate-compliance-by-config-rules-response
                    'make-describe-aggregate-compliance-by-config-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregate-compliance-by-config-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregate-compliance-by-config-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregate-compliance-by-config-rules))
      (common-lisp:list
       (common-lisp:cons "AggregateComplianceByConfigRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregate-compliance-by-config-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  describe-aggregate-compliance-by-conformance-packs-request common-lisp:nil
  ((configuration-aggregator-name :initarg :configuration-aggregator-name
    :initform (common-lisp:error ":configuration-aggregator-name is required")
    :type (common-lisp:or configuration-aggregator-name common-lisp:null)
    :accessor
    struct-shape-describe-aggregate-compliance-by-conformance-packs-request-configuration-aggregator-name
    :shape "ConfigurationAggregatorName" :location common-lisp:nil
    :location-name common-lisp:nil)
   (filters :initarg :filters :initform common-lisp:nil :type
    (common-lisp:or aggregate-conformance-pack-compliance-filters
                    common-lisp:null)
    :accessor
    struct-shape-describe-aggregate-compliance-by-conformance-packs-request-filters
    :shape "AggregateConformancePackComplianceFilters" :location
    common-lisp:nil :location-name common-lisp:nil)
   (limit :initarg :limit :initform common-lisp:nil :type
    (common-lisp:or limit common-lisp:null) :accessor
    struct-shape-describe-aggregate-compliance-by-conformance-packs-request-limit
    :shape "Limit" :location common-lisp:nil :location-name common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null) :accessor
    struct-shape-describe-aggregate-compliance-by-conformance-packs-request-next-token
    :shape "NextToken" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-aggregate-compliance-by-conformance-packs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-aggregate-compliance-by-conformance-packs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-aggregate-compliance-by-conformance-packs-request
                    'make-describe-aggregate-compliance-by-conformance-packs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregate-compliance-by-conformance-packs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregate-compliance-by-conformance-packs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregate-compliance-by-conformance-packs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  describe-aggregate-compliance-by-conformance-packs-response common-lisp:nil
  ((aggregate-compliance-by-conformance-packs :initarg
    :aggregate-compliance-by-conformance-packs :initform common-lisp:nil :type
    (common-lisp:or aggregate-compliance-by-conformance-pack-list
                    common-lisp:null)
    :accessor
    struct-shape-describe-aggregate-compliance-by-conformance-packs-response-aggregate-compliance-by-conformance-packs
    :shape "AggregateComplianceByConformancePackList" :location common-lisp:nil
    :location-name common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null) :accessor
    struct-shape-describe-aggregate-compliance-by-conformance-packs-response-next-token
    :shape "NextToken" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-aggregate-compliance-by-conformance-packs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-aggregate-compliance-by-conformance-packs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list
   'describe-aggregate-compliance-by-conformance-packs-response
   'make-describe-aggregate-compliance-by-conformance-packs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregate-compliance-by-conformance-packs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregate-compliance-by-conformance-packs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregate-compliance-by-conformance-packs))
      (common-lisp:list
       (common-lisp:cons "AggregateComplianceByConformancePacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregate-compliance-by-conformance-packs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-aggregation-authorizations-request
                       common-lisp:nil
                       ((limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-describe-aggregation-authorizations-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-aggregation-authorizations-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-aggregation-authorizations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-aggregation-authorizations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-aggregation-authorizations-request
                    'make-describe-aggregation-authorizations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregation-authorizations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregation-authorizations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregation-authorizations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-aggregation-authorizations-response
                       common-lisp:nil
                       ((aggregation-authorizations :initarg
                         :aggregation-authorizations :initform common-lisp:nil
                         :type
                         (common-lisp:or aggregation-authorization-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-aggregation-authorizations-response-aggregation-authorizations
                         :shape "AggregationAuthorizationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-aggregation-authorizations-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-aggregation-authorizations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-aggregation-authorizations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-aggregation-authorizations-response
                    'make-describe-aggregation-authorizations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregation-authorizations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregation-authorizations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-authorizations))
      (common-lisp:list
       (common-lisp:cons "AggregationAuthorizations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-aggregation-authorizations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-compliance-by-config-rule-request
                       common-lisp:nil
                       ((config-rule-names :initarg :config-rule-names
                         :initform common-lisp:nil :type
                         (common-lisp:or config-rule-names common-lisp:null)
                         :accessor
                         struct-shape-describe-compliance-by-config-rule-request-config-rule-names
                         :shape "ConfigRuleNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance-types :initarg :compliance-types :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-types common-lisp:null)
                         :accessor
                         struct-shape-describe-compliance-by-config-rule-request-compliance-types
                         :shape "ComplianceTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-compliance-by-config-rule-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-compliance-by-config-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-compliance-by-config-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-compliance-by-config-rule-request
                    'make-describe-compliance-by-config-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-compliance-by-config-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-compliance-by-config-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-names))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-types))
      (common-lisp:list
       (common-lisp:cons "ComplianceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-compliance-by-config-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-compliance-by-config-rule-response
                       common-lisp:nil
                       ((compliance-by-config-rules :initarg
                         :compliance-by-config-rules :initform common-lisp:nil
                         :type
                         (common-lisp:or compliance-by-config-rules
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-compliance-by-config-rule-response-compliance-by-config-rules
                         :shape "ComplianceByConfigRules" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-compliance-by-config-rule-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-compliance-by-config-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-compliance-by-config-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-compliance-by-config-rule-response
                    'make-describe-compliance-by-config-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-compliance-by-config-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-compliance-by-config-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-by-config-rules))
      (common-lisp:list
       (common-lisp:cons "ComplianceByConfigRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-compliance-by-config-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-compliance-by-resource-request common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-compliance-by-resource-request-resource-type
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or base-resource-id common-lisp:null)
                         :accessor
                         struct-shape-describe-compliance-by-resource-request-resource-id
                         :shape "BaseResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance-types :initarg :compliance-types :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-types common-lisp:null)
                         :accessor
                         struct-shape-describe-compliance-by-resource-request-compliance-types
                         :shape "ComplianceTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-describe-compliance-by-resource-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-compliance-by-resource-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-compliance-by-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-compliance-by-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-compliance-by-resource-request
                    'make-describe-compliance-by-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-compliance-by-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-compliance-by-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-types))
      (common-lisp:list
       (common-lisp:cons "ComplianceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-compliance-by-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-compliance-by-resource-response common-lisp:nil
                       ((compliance-by-resources :initarg
                         :compliance-by-resources :initform common-lisp:nil
                         :type
                         (common-lisp:or compliance-by-resources
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-compliance-by-resource-response-compliance-by-resources
                         :shape "ComplianceByResources" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-compliance-by-resource-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-compliance-by-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-compliance-by-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-compliance-by-resource-response
                    'make-describe-compliance-by-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-compliance-by-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-compliance-by-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-by-resources))
      (common-lisp:list
       (common-lisp:cons "ComplianceByResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-compliance-by-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-config-rule-evaluation-status-request
                       common-lisp:nil
                       ((config-rule-names :initarg :config-rule-names
                         :initform common-lisp:nil :type
                         (common-lisp:or config-rule-names common-lisp:null)
                         :accessor
                         struct-shape-describe-config-rule-evaluation-status-request-config-rule-names
                         :shape "ConfigRuleNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-config-rule-evaluation-status-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or rule-limit common-lisp:null) :accessor
                         struct-shape-describe-config-rule-evaluation-status-request-limit
                         :shape "RuleLimit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-config-rule-evaluation-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-config-rule-evaluation-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-config-rule-evaluation-status-request
                    'make-describe-config-rule-evaluation-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rule-evaluation-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rule-evaluation-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-names))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rule-evaluation-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-config-rule-evaluation-status-response
                       common-lisp:nil
                       ((config-rules-evaluation-status :initarg
                         :config-rules-evaluation-status :initform
                         common-lisp:nil :type
                         (common-lisp:or config-rule-evaluation-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-config-rule-evaluation-status-response-config-rules-evaluation-status
                         :shape "ConfigRuleEvaluationStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-config-rule-evaluation-status-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-config-rule-evaluation-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-config-rule-evaluation-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-config-rule-evaluation-status-response
                    'make-describe-config-rule-evaluation-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rule-evaluation-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rule-evaluation-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'config-rules-evaluation-status))
      (common-lisp:list
       (common-lisp:cons "ConfigRulesEvaluationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rule-evaluation-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-config-rules-filters common-lisp:nil
                       ((evaluation-mode :initarg :evaluation-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluation-mode common-lisp:null)
                         :accessor
                         struct-shape-describe-config-rules-filters-evaluation-mode
                         :shape "EvaluationMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-config-rules-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-config-rules-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-config-rules-filters
                    'make-describe-config-rules-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rules-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rules-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-mode))
      (common-lisp:list
       (common-lisp:cons "EvaluationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rules-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-config-rules-request common-lisp:nil
                       ((config-rule-names :initarg :config-rule-names
                         :initform common-lisp:nil :type
                         (common-lisp:or config-rule-names common-lisp:null)
                         :accessor
                         struct-shape-describe-config-rules-request-config-rule-names
                         :shape "ConfigRuleNames" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-config-rules-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or describe-config-rules-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-config-rules-request-filters
                         :shape "DescribeConfigRulesFilters" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-config-rules-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-config-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-config-rules-request
                    'make-describe-config-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-names))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-config-rules-response common-lisp:nil
                       ((config-rules :initarg :config-rules :initform
                         common-lisp:nil :type
                         (common-lisp:or config-rules common-lisp:null)
                         :accessor
                         struct-shape-describe-config-rules-response-config-rules
                         :shape "ConfigRules" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-config-rules-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-config-rules-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-config-rules-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-config-rules-response
                    'make-describe-config-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rules))
      (common-lisp:list
       (common-lisp:cons "ConfigRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-config-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-aggregator-sources-status-request
                       common-lisp:nil
                       ((configuration-aggregator-name :initarg
                         :configuration-aggregator-name :initform
                         (common-lisp:error
                          ":configuration-aggregator-name is required")
                         :type
                         (common-lisp:or configuration-aggregator-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-aggregator-sources-status-request-configuration-aggregator-name
                         :shape "ConfigurationAggregatorName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (update-status :initarg :update-status :initform
                         common-lisp:nil :type
                         (common-lisp:or aggregated-source-status-type-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-aggregator-sources-status-request-update-status
                         :shape "AggregatedSourceStatusTypeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-configuration-aggregator-sources-status-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-describe-configuration-aggregator-sources-status-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configuration-aggregator-sources-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-aggregator-sources-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-aggregator-sources-status-request
                    'make-describe-configuration-aggregator-sources-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-aggregator-sources-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-aggregator-sources-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-aggregator-sources-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  describe-configuration-aggregator-sources-status-response common-lisp:nil
  ((aggregated-source-status-list :initarg :aggregated-source-status-list
    :initform common-lisp:nil :type
    (common-lisp:or aggregated-source-status-list common-lisp:null) :accessor
    struct-shape-describe-configuration-aggregator-sources-status-response-aggregated-source-status-list
    :shape "AggregatedSourceStatusList" :location common-lisp:nil
    :location-name common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or string common-lisp:null) :accessor
    struct-shape-describe-configuration-aggregator-sources-status-response-next-token
    :shape "String" :location common-lisp:nil :location-name common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configuration-aggregator-sources-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-aggregator-sources-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-aggregator-sources-status-response
                    'make-describe-configuration-aggregator-sources-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-aggregator-sources-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-aggregator-sources-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregated-source-status-list))
      (common-lisp:list
       (common-lisp:cons "AggregatedSourceStatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-aggregator-sources-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-aggregators-request
                       common-lisp:nil
                       ((configuration-aggregator-names :initarg
                         :configuration-aggregator-names :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-aggregator-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-aggregators-request-configuration-aggregator-names
                         :shape "ConfigurationAggregatorNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-configuration-aggregators-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-describe-configuration-aggregators-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configuration-aggregators-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-aggregators-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-aggregators-request
                    'make-describe-configuration-aggregators-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-aggregators-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-aggregators-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-names))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-aggregators-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-aggregators-response
                       common-lisp:nil
                       ((configuration-aggregators :initarg
                         :configuration-aggregators :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-aggregator-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-aggregators-response-configuration-aggregators
                         :shape "ConfigurationAggregatorList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-configuration-aggregators-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configuration-aggregators-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-aggregators-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-aggregators-response
                    'make-describe-configuration-aggregators-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-aggregators-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-aggregators-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregators))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregators"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-aggregators-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-recorder-status-request
                       common-lisp:nil
                       ((configuration-recorder-names :initarg
                         :configuration-recorder-names :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-recorder-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-recorder-status-request-configuration-recorder-names
                         :shape "ConfigurationRecorderNameList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configuration-recorder-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-recorder-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-recorder-status-request
                    'make-describe-configuration-recorder-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-recorder-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-recorder-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-recorder-names))
      (common-lisp:list
       (common-lisp:cons "ConfigurationRecorderNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-recorder-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-recorder-status-response
                       common-lisp:nil
                       ((configuration-recorders-status :initarg
                         :configuration-recorders-status :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-recorder-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-recorder-status-response-configuration-recorders-status
                         :shape "ConfigurationRecorderStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configuration-recorder-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-recorder-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-recorder-status-response
                    'make-describe-configuration-recorder-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-recorder-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-recorder-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-recorders-status))
      (common-lisp:list
       (common-lisp:cons "ConfigurationRecordersStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-recorder-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-recorders-request common-lisp:nil
                       ((configuration-recorder-names :initarg
                         :configuration-recorder-names :initform
                         common-lisp:nil :type
                         (common-lisp:or configuration-recorder-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-recorders-request-configuration-recorder-names
                         :shape "ConfigurationRecorderNameList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configuration-recorders-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-recorders-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-recorders-request
                    'make-describe-configuration-recorders-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-recorders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-recorders-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-recorder-names))
      (common-lisp:list
       (common-lisp:cons "ConfigurationRecorderNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-recorders-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-configuration-recorders-response
                       common-lisp:nil
                       ((configuration-recorders :initarg
                         :configuration-recorders :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-recorder-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-configuration-recorders-response-configuration-recorders
                         :shape "ConfigurationRecorderList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-configuration-recorders-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-configuration-recorders-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-configuration-recorders-response
                    'make-describe-configuration-recorders-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-recorders-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-recorders-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-recorders))
      (common-lisp:list
       (common-lisp:cons "ConfigurationRecorders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-configuration-recorders-response))
   common-lisp:nil))
(common-lisp:deftype describe-conformance-pack-compliance-limit ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass describe-conformance-pack-compliance-request
                       common-lisp:nil
                       ((conformance-pack-name :initarg :conformance-pack-name
                         :initform
                         (common-lisp:error
                          ":conformance-pack-name is required")
                         :type
                         (common-lisp:or conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-conformance-pack-compliance-request-conformance-pack-name
                         :shape "ConformancePackName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or conformance-pack-compliance-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-conformance-pack-compliance-request-filters
                         :shape "ConformancePackComplianceFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or
                          describe-conformance-pack-compliance-limit
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-conformance-pack-compliance-request-limit
                         :shape "DescribeConformancePackComplianceLimit"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-conformance-pack-compliance-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-conformance-pack-compliance-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-conformance-pack-compliance-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-conformance-pack-compliance-request
                    'make-describe-conformance-pack-compliance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-pack-compliance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-pack-compliance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "ConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-pack-compliance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-conformance-pack-compliance-response
                       common-lisp:nil
                       ((conformance-pack-name :initarg :conformance-pack-name
                         :initform
                         (common-lisp:error
                          ":conformance-pack-name is required")
                         :type
                         (common-lisp:or conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-conformance-pack-compliance-response-conformance-pack-name
                         :shape "ConformancePackName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-rule-compliance-list :initarg
                         :conformance-pack-rule-compliance-list :initform
                         (common-lisp:error
                          ":conformance-pack-rule-compliance-list is required")
                         :type
                         (common-lisp:or conformance-pack-rule-compliance-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-conformance-pack-compliance-response-conformance-pack-rule-compliance-list
                         :shape "ConformancePackRuleComplianceList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-conformance-pack-compliance-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-conformance-pack-compliance-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-conformance-pack-compliance-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-conformance-pack-compliance-response
                    'make-describe-conformance-pack-compliance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-pack-compliance-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-pack-compliance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "ConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-rule-compliance-list))
      (common-lisp:list
       (common-lisp:cons "ConformancePackRuleComplianceList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-pack-compliance-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-conformance-pack-status-request common-lisp:nil
                       ((conformance-pack-names :initarg
                         :conformance-pack-names :initform common-lisp:nil
                         :type
                         (common-lisp:or conformance-pack-names-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-conformance-pack-status-request-conformance-pack-names
                         :shape "ConformancePackNamesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or page-size-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-conformance-pack-status-request-limit
                         :shape "PageSizeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-conformance-pack-status-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-conformance-pack-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-conformance-pack-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-conformance-pack-status-request
                    'make-describe-conformance-pack-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-pack-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-pack-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-names))
      (common-lisp:list
       (common-lisp:cons "ConformancePackNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-pack-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-conformance-pack-status-response
                       common-lisp:nil
                       ((conformance-pack-status-details :initarg
                         :conformance-pack-status-details :initform
                         common-lisp:nil :type
                         (common-lisp:or conformance-pack-status-details-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-conformance-pack-status-response-conformance-pack-status-details
                         :shape "ConformancePackStatusDetailsList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-conformance-pack-status-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-conformance-pack-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-conformance-pack-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-conformance-pack-status-response
                    'make-describe-conformance-pack-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-pack-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-pack-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-status-details))
      (common-lisp:list
       (common-lisp:cons "ConformancePackStatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-pack-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-conformance-packs-request common-lisp:nil
                       ((conformance-pack-names :initarg
                         :conformance-pack-names :initform common-lisp:nil
                         :type
                         (common-lisp:or conformance-pack-names-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-conformance-packs-request-conformance-pack-names
                         :shape "ConformancePackNamesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or page-size-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-conformance-packs-request-limit
                         :shape "PageSizeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-conformance-packs-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-conformance-packs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-conformance-packs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-conformance-packs-request
                    'make-describe-conformance-packs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-packs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-packs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-names))
      (common-lisp:list
       (common-lisp:cons "ConformancePackNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-packs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-conformance-packs-response common-lisp:nil
                       ((conformance-pack-details :initarg
                         :conformance-pack-details :initform common-lisp:nil
                         :type
                         (common-lisp:or conformance-pack-detail-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-conformance-packs-response-conformance-pack-details
                         :shape "ConformancePackDetailList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-conformance-packs-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-conformance-packs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-conformance-packs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-conformance-packs-response
                    'make-describe-conformance-packs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-packs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-packs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-details))
      (common-lisp:list
       (common-lisp:cons "ConformancePackDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-conformance-packs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-delivery-channel-status-request common-lisp:nil
                       ((delivery-channel-names :initarg
                         :delivery-channel-names :initform common-lisp:nil
                         :type
                         (common-lisp:or delivery-channel-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-delivery-channel-status-request-delivery-channel-names
                         :shape "DeliveryChannelNameList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-delivery-channel-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-delivery-channel-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-delivery-channel-status-request
                    'make-describe-delivery-channel-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-channel-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-channel-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-channel-names))
      (common-lisp:list
       (common-lisp:cons "DeliveryChannelNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-channel-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-delivery-channel-status-response
                       common-lisp:nil
                       ((delivery-channels-status :initarg
                         :delivery-channels-status :initform common-lisp:nil
                         :type
                         (common-lisp:or delivery-channel-status-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-delivery-channel-status-response-delivery-channels-status
                         :shape "DeliveryChannelStatusList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-delivery-channel-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-delivery-channel-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-delivery-channel-status-response
                    'make-describe-delivery-channel-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-channel-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-channel-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-channels-status))
      (common-lisp:list
       (common-lisp:cons "DeliveryChannelsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-channel-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-delivery-channels-request common-lisp:nil
                       ((delivery-channel-names :initarg
                         :delivery-channel-names :initform common-lisp:nil
                         :type
                         (common-lisp:or delivery-channel-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-delivery-channels-request-delivery-channel-names
                         :shape "DeliveryChannelNameList" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-delivery-channels-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-delivery-channels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-delivery-channels-request
                    'make-describe-delivery-channels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-channels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-channel-names))
      (common-lisp:list
       (common-lisp:cons "DeliveryChannelNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-delivery-channels-response common-lisp:nil
                       ((delivery-channels :initarg :delivery-channels
                         :initform common-lisp:nil :type
                         (common-lisp:or delivery-channel-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-delivery-channels-response-delivery-channels
                         :shape "DeliveryChannelList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-delivery-channels-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-delivery-channels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-delivery-channels-response
                    'make-describe-delivery-channels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-channels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-channels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-channels))
      (common-lisp:list
       (common-lisp:cons "DeliveryChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-delivery-channels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-config-rule-statuses-request
                       common-lisp:nil
                       ((organization-config-rule-names :initarg
                         :organization-config-rule-names :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-config-rule-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-config-rule-statuses-request-organization-config-rule-names
                         :shape "OrganizationConfigRuleNames" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or cosmos-page-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-config-rule-statuses-request-limit
                         :shape "CosmosPageLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-config-rule-statuses-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-organization-config-rule-statuses-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-config-rule-statuses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-organization-config-rule-statuses-request
                    'make-describe-organization-config-rule-statuses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-config-rule-statuses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-config-rule-statuses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-names))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-config-rule-statuses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-config-rule-statuses-response
                       common-lisp:nil
                       ((organization-config-rule-statuses :initarg
                         :organization-config-rule-statuses :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-config-rule-statuses
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-config-rule-statuses-response-organization-config-rule-statuses
                         :shape "OrganizationConfigRuleStatuses" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-config-rule-statuses-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-organization-config-rule-statuses-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-config-rule-statuses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-organization-config-rule-statuses-response
                    'make-describe-organization-config-rule-statuses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-config-rule-statuses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-config-rule-statuses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-statuses))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-config-rule-statuses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-config-rules-request
                       common-lisp:nil
                       ((organization-config-rule-names :initarg
                         :organization-config-rule-names :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-config-rule-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-config-rules-request-organization-config-rule-names
                         :shape "OrganizationConfigRuleNames" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or cosmos-page-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-config-rules-request-limit
                         :shape "CosmosPageLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-config-rules-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-organization-config-rules-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-config-rules-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-organization-config-rules-request
                    'make-describe-organization-config-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-config-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-config-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-names))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-config-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-config-rules-response
                       common-lisp:nil
                       ((organization-config-rules :initarg
                         :organization-config-rules :initform common-lisp:nil
                         :type
                         (common-lisp:or organization-config-rules
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-config-rules-response-organization-config-rules
                         :shape "OrganizationConfigRules" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-config-rules-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-organization-config-rules-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-config-rules-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-organization-config-rules-response
                    'make-describe-organization-config-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-config-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-config-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rules))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-config-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-conformance-pack-statuses-request
                       common-lisp:nil
                       ((organization-conformance-pack-names :initarg
                         :organization-conformance-pack-names :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-conformance-pack-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-conformance-pack-statuses-request-organization-conformance-pack-names
                         :shape "OrganizationConformancePackNames" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or cosmos-page-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-conformance-pack-statuses-request-limit
                         :shape "CosmosPageLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-conformance-pack-statuses-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-organization-conformance-pack-statuses-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-conformance-pack-statuses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-organization-conformance-pack-statuses-request
                    'make-describe-organization-conformance-pack-statuses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-conformance-pack-statuses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-conformance-pack-statuses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-conformance-pack-names))
      (common-lisp:list
       (common-lisp:cons "OrganizationConformancePackNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-conformance-pack-statuses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-conformance-pack-statuses-response
                       common-lisp:nil
                       ((organization-conformance-pack-statuses :initarg
                         :organization-conformance-pack-statuses :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-conformance-pack-statuses
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-conformance-pack-statuses-response-organization-conformance-pack-statuses
                         :shape "OrganizationConformancePackStatuses" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-conformance-pack-statuses-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-organization-conformance-pack-statuses-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-conformance-pack-statuses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-organization-conformance-pack-statuses-response
                    'make-describe-organization-conformance-pack-statuses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-conformance-pack-statuses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-conformance-pack-statuses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-conformance-pack-statuses))
      (common-lisp:list
       (common-lisp:cons "OrganizationConformancePackStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-conformance-pack-statuses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-conformance-packs-request
                       common-lisp:nil
                       ((organization-conformance-pack-names :initarg
                         :organization-conformance-pack-names :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-conformance-pack-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-conformance-packs-request-organization-conformance-pack-names
                         :shape "OrganizationConformancePackNames" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or cosmos-page-limit common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-conformance-packs-request-limit
                         :shape "CosmosPageLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-conformance-packs-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-organization-conformance-packs-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-conformance-packs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-organization-conformance-packs-request
                    'make-describe-organization-conformance-packs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-conformance-packs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-conformance-packs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-conformance-pack-names))
      (common-lisp:list
       (common-lisp:cons "OrganizationConformancePackNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-conformance-packs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-organization-conformance-packs-response
                       common-lisp:nil
                       ((organization-conformance-packs :initarg
                         :organization-conformance-packs :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-conformance-packs
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-organization-conformance-packs-response-organization-conformance-packs
                         :shape "OrganizationConformancePacks" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-organization-conformance-packs-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-organization-conformance-packs-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-organization-conformance-packs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-organization-conformance-packs-response
                    'make-describe-organization-conformance-packs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-conformance-packs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-conformance-packs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-conformance-packs))
      (common-lisp:list
       (common-lisp:cons "OrganizationConformancePacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-organization-conformance-packs-response))
   common-lisp:nil))
(common-lisp:deftype describe-pending-aggregation-requests-limit ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass describe-pending-aggregation-requests-request
                       common-lisp:nil
                       ((limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or
                          describe-pending-aggregation-requests-limit
                          common-lisp:null)
                         :accessor
                         struct-shape-describe-pending-aggregation-requests-request-limit
                         :shape "DescribePendingAggregationRequestsLimit"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-pending-aggregation-requests-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-pending-aggregation-requests-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-pending-aggregation-requests-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-pending-aggregation-requests-request
                    'make-describe-pending-aggregation-requests-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-aggregation-requests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-aggregation-requests-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-aggregation-requests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-pending-aggregation-requests-response
                       common-lisp:nil
                       ((pending-aggregation-requests :initarg
                         :pending-aggregation-requests :initform
                         common-lisp:nil :type
                         (common-lisp:or pending-aggregation-request-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-pending-aggregation-requests-response-pending-aggregation-requests
                         :shape "PendingAggregationRequestList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-pending-aggregation-requests-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-pending-aggregation-requests-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-pending-aggregation-requests-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-pending-aggregation-requests-response
                    'make-describe-pending-aggregation-requests-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-aggregation-requests-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-aggregation-requests-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-aggregation-requests))
      (common-lisp:list
       (common-lisp:cons "PendingAggregationRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pending-aggregation-requests-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-remediation-configurations-request
                       common-lisp:nil
                       ((config-rule-names :initarg :config-rule-names
                         :initform
                         (common-lisp:error ":config-rule-names is required")
                         :type
                         (common-lisp:or config-rule-names common-lisp:null)
                         :accessor
                         struct-shape-describe-remediation-configurations-request-config-rule-names
                         :shape "ConfigRuleNames" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-remediation-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-remediation-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-remediation-configurations-request
                    'make-describe-remediation-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-names))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-remediation-configurations-response
                       common-lisp:nil
                       ((remediation-configurations :initarg
                         :remediation-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or remediation-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-remediation-configurations-response-remediation-configurations
                         :shape "RemediationConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-remediation-configurations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-remediation-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-remediation-configurations-response
                    'make-describe-remediation-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remediation-configurations))
      (common-lisp:list
       (common-lisp:cons "RemediationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-remediation-exceptions-request common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         (common-lisp:error ":config-rule-name is required")
                         :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-describe-remediation-exceptions-request-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-keys :initarg :resource-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or remediation-exception-resource-keys
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-remediation-exceptions-request-resource-keys
                         :shape "RemediationExceptionResourceKeys" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-describe-remediation-exceptions-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-remediation-exceptions-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-remediation-exceptions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-remediation-exceptions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-remediation-exceptions-request
                    'make-describe-remediation-exceptions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-exceptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-exceptions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-keys))
      (common-lisp:list
       (common-lisp:cons "ResourceKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-exceptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-remediation-exceptions-response common-lisp:nil
                       ((remediation-exceptions :initarg
                         :remediation-exceptions :initform common-lisp:nil
                         :type
                         (common-lisp:or remediation-exceptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-remediation-exceptions-response-remediation-exceptions
                         :shape "RemediationExceptions" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-remediation-exceptions-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-remediation-exceptions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-remediation-exceptions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-remediation-exceptions-response
                    'make-describe-remediation-exceptions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-exceptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-exceptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remediation-exceptions))
      (common-lisp:list
       (common-lisp:cons "RemediationExceptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-exceptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-remediation-execution-status-request
                       common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         (common-lisp:error ":config-rule-name is required")
                         :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-describe-remediation-execution-status-request-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-keys :initarg :resource-keys :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-keys common-lisp:null)
                         :accessor
                         struct-shape-describe-remediation-execution-status-request-resource-keys
                         :shape "ResourceKeys" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-describe-remediation-execution-status-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-remediation-execution-status-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-remediation-execution-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-remediation-execution-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-remediation-execution-status-request
                    'make-describe-remediation-execution-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-execution-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-execution-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-keys))
      (common-lisp:list
       (common-lisp:cons "ResourceKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-execution-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-remediation-execution-status-response
                       common-lisp:nil
                       ((remediation-execution-statuses :initarg
                         :remediation-execution-statuses :initform
                         common-lisp:nil :type
                         (common-lisp:or remediation-execution-statuses
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-remediation-execution-status-response-remediation-execution-statuses
                         :shape "RemediationExecutionStatuses" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-describe-remediation-execution-status-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-remediation-execution-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-remediation-execution-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-remediation-execution-status-response
                    'make-describe-remediation-execution-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-execution-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-execution-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remediation-execution-statuses))
      (common-lisp:list
       (common-lisp:cons "RemediationExecutionStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-remediation-execution-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-retention-configurations-request
                       common-lisp:nil
                       ((retention-configuration-names :initarg
                         :retention-configuration-names :initform
                         common-lisp:nil :type
                         (common-lisp:or retention-configuration-name-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-retention-configurations-request-retention-configuration-names
                         :shape "RetentionConfigurationNameList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-retention-configurations-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-retention-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-retention-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-retention-configurations-request
                    'make-describe-retention-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-retention-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-retention-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-configuration-names))
      (common-lisp:list
       (common-lisp:cons "RetentionConfigurationNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-retention-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-retention-configurations-response
                       common-lisp:nil
                       ((retention-configurations :initarg
                         :retention-configurations :initform common-lisp:nil
                         :type
                         (common-lisp:or retention-configuration-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-describe-retention-configurations-response-retention-configurations
                         :shape "RetentionConfigurationList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-describe-retention-configurations-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-describe-retention-configurations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-retention-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'describe-retention-configurations-response
                    'make-describe-retention-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-retention-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-retention-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-configurations))
      (common-lisp:list
       (common-lisp:cons "RetentionConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-retention-configurations-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype discovered-resource-identifier-list ()
   '(trivial-types:proper-list aggregate-resource-identifier))
 (common-lisp:defun make-discovered-resource-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregate-resource-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype earlier-time () 'common-lisp:string)
(common-lisp:deftype emptiable-string-with-char-limit256 () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass evaluation common-lisp:nil
                       ((compliance-resource-type :initarg
                         :compliance-resource-type :initform
                         (common-lisp:error
                          ":compliance-resource-type is required")
                         :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluation-compliance-resource-type
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance-resource-id :initarg
                         :compliance-resource-id :initform
                         (common-lisp:error
                          ":compliance-resource-id is required")
                         :type
                         (common-lisp:or base-resource-id common-lisp:null)
                         :accessor
                         struct-shape-evaluation-compliance-resource-id :shape
                         "BaseResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         (common-lisp:error ":compliance-type is required")
                         :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor struct-shape-evaluation-compliance-type
                         :shape "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (annotation :initarg :annotation :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor struct-shape-evaluation-annotation :shape
                         "StringWithCharLimit256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (ordering-timestamp :initarg :ordering-timestamp
                         :initform
                         (common-lisp:error ":ordering-timestamp is required")
                         :type
                         (common-lisp:or ordering-timestamp common-lisp:null)
                         :accessor struct-shape-evaluation-ordering-timestamp
                         :shape "OrderingTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluation
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'evaluation 'make-evaluation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-resource-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-resource-id))
      (common-lisp:list
       (common-lisp:cons "ComplianceResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'annotation))
      (common-lisp:list
       (common-lisp:cons "Annotation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ordering-timestamp))
      (common-lisp:list
       (common-lisp:cons "OrderingTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluation-context common-lisp:nil
                       ((evaluation-context-identifier :initarg
                         :evaluation-context-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluation-context-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluation-context-evaluation-context-identifier
                         :shape "EvaluationContextIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluation-context
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluation-context
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluation-context 'make-evaluation-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-context-identifier))
      (common-lisp:list
       (common-lisp:cons "EvaluationContextIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-context))
   common-lisp:nil))
(common-lisp:deftype evaluation-context-identifier () 'common-lisp:string)
(common-lisp:deftype evaluation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass evaluation-mode-configuration common-lisp:nil
                       ((mode :initarg :mode :initform common-lisp:nil :type
                         (common-lisp:or evaluation-mode common-lisp:null)
                         :accessor
                         struct-shape-evaluation-mode-configuration-mode :shape
                         "EvaluationMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluation-mode-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'evaluation-mode-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluation-mode-configuration
                    'make-evaluation-mode-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-mode-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-mode-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-mode-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-modes ()
   '(trivial-types:proper-list evaluation-mode-configuration))
 (common-lisp:defun make-evaluation-modes
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            evaluation-mode-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass evaluation-result common-lisp:nil
                       ((evaluation-result-identifier :initarg
                         :evaluation-result-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluation-result-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-evaluation-result-identifier
                         :shape "EvaluationResultIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-compliance-type :shape
                         "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-recorded-time :initarg :result-recorded-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-evaluation-result-result-recorded-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (config-rule-invoked-time :initarg
                         :config-rule-invoked-time :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-evaluation-result-config-rule-invoked-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (annotation :initarg :annotation :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor struct-shape-evaluation-result-annotation
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (result-token :initarg :result-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-evaluation-result-result-token :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluation-result
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluation-result
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluation-result 'make-evaluation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-result-identifier))
      (common-lisp:list
       (common-lisp:cons "EvaluationResultIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'result-recorded-time))
      (common-lisp:list
       (common-lisp:cons "ResultRecordedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'config-rule-invoked-time))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleInvokedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'annotation))
      (common-lisp:list
       (common-lisp:cons "Annotation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-token))
      (common-lisp:list
       (common-lisp:cons "ResultToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluation-result-identifier common-lisp:nil
                       ((evaluation-result-qualifier :initarg
                         :evaluation-result-qualifier :initform common-lisp:nil
                         :type
                         (common-lisp:or evaluation-result-qualifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-identifier-evaluation-result-qualifier
                         :shape "EvaluationResultQualifier" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ordering-timestamp :initarg :ordering-timestamp
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-evaluation-result-identifier-ordering-timestamp
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-evaluation-id :initarg
                         :resource-evaluation-id :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-evaluation-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-identifier-resource-evaluation-id
                         :shape "ResourceEvaluationId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluation-result-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluation-result-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluation-result-identifier
                    'make-evaluation-result-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-result-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-result-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-result-qualifier))
      (common-lisp:list
       (common-lisp:cons "EvaluationResultQualifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ordering-timestamp))
      (common-lisp:list
       (common-lisp:cons "OrderingTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-evaluation-id))
      (common-lisp:list
       (common-lisp:cons "ResourceEvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-result-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass evaluation-result-qualifier common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-qualifier-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-qualifier-resource-type
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or base-resource-id common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-qualifier-resource-id
                         :shape "BaseResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-mode :initarg :evaluation-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluation-mode common-lisp:null)
                         :accessor
                         struct-shape-evaluation-result-qualifier-evaluation-mode
                         :shape "EvaluationMode" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluation-result-qualifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluation-result-qualifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluation-result-qualifier
                    'make-evaluation-result-qualifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-result-qualifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-result-qualifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-mode))
      (common-lisp:list
       (common-lisp:cons "EvaluationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          evaluation-result-qualifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-results ()
   '(trivial-types:proper-list evaluation-result))
 (common-lisp:defun make-evaluation-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass evaluation-status common-lisp:nil
                       ((status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or resource-evaluation-status
                                         common-lisp:null)
                         :accessor struct-shape-evaluation-status-status :shape
                         "ResourceEvaluationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failure-reason :initarg :failure-reason :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit1024
                                         common-lisp:null)
                         :accessor
                         struct-shape-evaluation-status-failure-reason :shape
                         "StringWithCharLimit1024" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-evaluation-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'evaluation-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'evaluation-status 'make-evaluation-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-status))
   common-lisp:nil))
(common-lisp:deftype evaluation-timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype evaluations () '(trivial-types:proper-list evaluation))
 (common-lisp:defun make-evaluations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype excluded-accounts ()
   '(trivial-types:proper-list account-id))
 (common-lisp:defun make-excluded-accounts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass exclusion-by-resource-types common-lisp:nil
                       ((resource-types :initarg :resource-types :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type-list common-lisp:null)
                         :accessor
                         struct-shape-exclusion-by-resource-types-resource-types
                         :shape "ResourceTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-exclusion-by-resource-types
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'exclusion-by-resource-types
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'exclusion-by-resource-types
                    'make-exclusion-by-resource-types))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          exclusion-by-resource-types))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          exclusion-by-resource-types))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "resourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          exclusion-by-resource-types))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execution-controls common-lisp:nil
                       ((ssm-controls :initarg :ssm-controls :initform
                         common-lisp:nil :type
                         (common-lisp:or ssm-controls common-lisp:null)
                         :accessor struct-shape-execution-controls-ssm-controls
                         :shape "SsmControls" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-execution-controls
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'execution-controls
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'execution-controls 'make-execution-controls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-controls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-controls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssm-controls))
      (common-lisp:list
       (common-lisp:cons "SsmControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-controls))
   common-lisp:nil))
(common-lisp:deftype expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass external-evaluation common-lisp:nil
                       ((compliance-resource-type :initarg
                         :compliance-resource-type :initform
                         (common-lisp:error
                          ":compliance-resource-type is required")
                         :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-external-evaluation-compliance-resource-type
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance-resource-id :initarg
                         :compliance-resource-id :initform
                         (common-lisp:error
                          ":compliance-resource-id is required")
                         :type
                         (common-lisp:or base-resource-id common-lisp:null)
                         :accessor
                         struct-shape-external-evaluation-compliance-resource-id
                         :shape "BaseResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         (common-lisp:error ":compliance-type is required")
                         :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor
                         struct-shape-external-evaluation-compliance-type
                         :shape "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (annotation :initarg :annotation :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor struct-shape-external-evaluation-annotation
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (ordering-timestamp :initarg :ordering-timestamp
                         :initform
                         (common-lisp:error ":ordering-timestamp is required")
                         :type
                         (common-lisp:or ordering-timestamp common-lisp:null)
                         :accessor
                         struct-shape-external-evaluation-ordering-timestamp
                         :shape "OrderingTimestamp" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-external-evaluation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'external-evaluation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'external-evaluation 'make-external-evaluation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input external-evaluation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input external-evaluation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-resource-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-resource-id))
      (common-lisp:list
       (common-lisp:cons "ComplianceResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'annotation))
      (common-lisp:list
       (common-lisp:cons "Annotation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ordering-timestamp))
      (common-lisp:list
       (common-lisp:cons "OrderingTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input external-evaluation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass failed-delete-remediation-exceptions-batch
                       common-lisp:nil
                       ((failure-message :initarg :failure-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-failed-delete-remediation-exceptions-batch-failure-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failed-items :initarg :failed-items :initform
                         common-lisp:nil :type
                         (common-lisp:or remediation-exception-resource-keys
                                         common-lisp:null)
                         :accessor
                         struct-shape-failed-delete-remediation-exceptions-batch-failed-items
                         :shape "RemediationExceptionResourceKeys" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failed-delete-remediation-exceptions-batch
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'failed-delete-remediation-exceptions-batch
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failed-delete-remediation-exceptions-batch
                    'make-failed-delete-remediation-exceptions-batch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-delete-remediation-exceptions-batch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-delete-remediation-exceptions-batch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-message))
      (common-lisp:list
       (common-lisp:cons "FailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "FailedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-delete-remediation-exceptions-batch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-delete-remediation-exceptions-batches ()
   '(trivial-types:proper-list failed-delete-remediation-exceptions-batch))
 (common-lisp:defun make-failed-delete-remediation-exceptions-batches
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-delete-remediation-exceptions-batch))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass failed-remediation-batch common-lisp:nil
                       ((failure-message :initarg :failure-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-failed-remediation-batch-failure-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failed-items :initarg :failed-items :initform
                         common-lisp:nil :type
                         (common-lisp:or remediation-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-failed-remediation-batch-failed-items
                         :shape "RemediationConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failed-remediation-batch
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'failed-remediation-batch
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failed-remediation-batch 'make-failed-remediation-batch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-remediation-batch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-remediation-batch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-message))
      (common-lisp:list
       (common-lisp:cons "FailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "FailedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-remediation-batch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-remediation-batches ()
   '(trivial-types:proper-list failed-remediation-batch))
 (common-lisp:defun make-failed-remediation-batches
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-remediation-batch))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass failed-remediation-exception-batch common-lisp:nil
                       ((failure-message :initarg :failure-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-failed-remediation-exception-batch-failure-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failed-items :initarg :failed-items :initform
                         common-lisp:nil :type
                         (common-lisp:or remediation-exceptions
                                         common-lisp:null)
                         :accessor
                         struct-shape-failed-remediation-exception-batch-failed-items
                         :shape "RemediationExceptions" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-failed-remediation-exception-batch
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'failed-remediation-exception-batch
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'failed-remediation-exception-batch
                    'make-failed-remediation-exception-batch))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failed-remediation-exception-batch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failed-remediation-exception-batch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-message))
      (common-lisp:list
       (common-lisp:cons "FailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "FailedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failed-remediation-exception-batch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-remediation-exception-batches ()
   '(trivial-types:proper-list failed-remediation-exception-batch))
 (common-lisp:defun make-failed-remediation-exception-batches
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            failed-remediation-exception-batch))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass field-info common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or field-name common-lisp:null) :accessor
                         struct-shape-field-info-name :shape "FieldName"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-field-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'field-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'field-info 'make-field-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype field-info-list ()
   '(trivial-types:proper-list field-info))
 (common-lisp:defun make-field-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype field-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-aggregate-compliance-details-by-config-rule-request
                       common-lisp:nil
                       ((configuration-aggregator-name :initarg
                         :configuration-aggregator-name :initform
                         (common-lisp:error
                          ":configuration-aggregator-name is required")
                         :type
                         (common-lisp:or configuration-aggregator-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-compliance-details-by-config-rule-request-configuration-aggregator-name
                         :shape "ConfigurationAggregatorName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (config-rule-name :initarg :config-rule-name :initform
                         (common-lisp:error ":config-rule-name is required")
                         :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-compliance-details-by-config-rule-request-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         (common-lisp:error ":account-id is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-get-aggregate-compliance-details-by-config-rule-request-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-region :initarg :aws-region :initform
                         (common-lisp:error ":aws-region is required") :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-get-aggregate-compliance-details-by-config-rule-request-aws-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance-type :initarg :compliance-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-compliance-details-by-config-rule-request-compliance-type
                         :shape "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-get-aggregate-compliance-details-by-config-rule-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-aggregate-compliance-details-by-config-rule-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-aggregate-compliance-details-by-config-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-aggregate-compliance-details-by-config-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-aggregate-compliance-details-by-config-rule-request
                    'make-get-aggregate-compliance-details-by-config-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-compliance-details-by-config-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-compliance-details-by-config-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-region))
      (common-lisp:list
       (common-lisp:cons "AwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-compliance-details-by-config-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-aggregate-compliance-details-by-config-rule-response
                       common-lisp:nil
                       ((aggregate-evaluation-results :initarg
                         :aggregate-evaluation-results :initform
                         common-lisp:nil :type
                         (common-lisp:or aggregate-evaluation-result-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-compliance-details-by-config-rule-response-aggregate-evaluation-results
                         :shape "AggregateEvaluationResultList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-aggregate-compliance-details-by-config-rule-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-aggregate-compliance-details-by-config-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-aggregate-compliance-details-by-config-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-aggregate-compliance-details-by-config-rule-response
                    'make-get-aggregate-compliance-details-by-config-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-compliance-details-by-config-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-compliance-details-by-config-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregate-evaluation-results))
      (common-lisp:list
       (common-lisp:cons "AggregateEvaluationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-compliance-details-by-config-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-aggregate-config-rule-compliance-summary-request
                       common-lisp:nil
                       ((configuration-aggregator-name :initarg
                         :configuration-aggregator-name :initform
                         (common-lisp:error
                          ":configuration-aggregator-name is required")
                         :type
                         (common-lisp:or configuration-aggregator-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-config-rule-compliance-summary-request-configuration-aggregator-name
                         :shape "ConfigurationAggregatorName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or config-rule-compliance-summary-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-config-rule-compliance-summary-request-filters
                         :shape "ConfigRuleComplianceSummaryFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (group-by-key :initarg :group-by-key :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          config-rule-compliance-summary-group-key
                          common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-config-rule-compliance-summary-request-group-by-key
                         :shape "ConfigRuleComplianceSummaryGroupKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or group-by-apilimit common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-config-rule-compliance-summary-request-limit
                         :shape "GroupByAPILimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-aggregate-config-rule-compliance-summary-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-aggregate-config-rule-compliance-summary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-aggregate-config-rule-compliance-summary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-aggregate-config-rule-compliance-summary-request
                    'make-get-aggregate-config-rule-compliance-summary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-config-rule-compliance-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-config-rule-compliance-summary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-key))
      (common-lisp:list
       (common-lisp:cons "GroupByKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-config-rule-compliance-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-aggregate-config-rule-compliance-summary-response
                       common-lisp:nil
                       ((group-by-key :initarg :group-by-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-config-rule-compliance-summary-response-group-by-key
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (aggregate-compliance-counts :initarg
                         :aggregate-compliance-counts :initform common-lisp:nil
                         :type
                         (common-lisp:or aggregate-compliance-count-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-config-rule-compliance-summary-response-aggregate-compliance-counts
                         :shape "AggregateComplianceCountList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-aggregate-config-rule-compliance-summary-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-aggregate-config-rule-compliance-summary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-aggregate-config-rule-compliance-summary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-aggregate-config-rule-compliance-summary-response
                    'make-get-aggregate-config-rule-compliance-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-config-rule-compliance-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-config-rule-compliance-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-key))
      (common-lisp:list
       (common-lisp:cons "GroupByKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregate-compliance-counts))
      (common-lisp:list
       (common-lisp:cons "AggregateComplianceCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-config-rule-compliance-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  get-aggregate-conformance-pack-compliance-summary-request common-lisp:nil
  ((configuration-aggregator-name :initarg :configuration-aggregator-name
    :initform (common-lisp:error ":configuration-aggregator-name is required")
    :type (common-lisp:or configuration-aggregator-name common-lisp:null)
    :accessor
    struct-shape-get-aggregate-conformance-pack-compliance-summary-request-configuration-aggregator-name
    :shape "ConfigurationAggregatorName" :location common-lisp:nil
    :location-name common-lisp:nil)
   (filters :initarg :filters :initform common-lisp:nil :type
    (common-lisp:or aggregate-conformance-pack-compliance-summary-filters
                    common-lisp:null)
    :accessor
    struct-shape-get-aggregate-conformance-pack-compliance-summary-request-filters
    :shape "AggregateConformancePackComplianceSummaryFilters" :location
    common-lisp:nil :location-name common-lisp:nil)
   (group-by-key :initarg :group-by-key :initform common-lisp:nil :type
    (common-lisp:or aggregate-conformance-pack-compliance-summary-group-key
                    common-lisp:null)
    :accessor
    struct-shape-get-aggregate-conformance-pack-compliance-summary-request-group-by-key
    :shape "AggregateConformancePackComplianceSummaryGroupKey" :location
    common-lisp:nil :location-name common-lisp:nil)
   (limit :initarg :limit :initform common-lisp:nil :type
    (common-lisp:or limit common-lisp:null) :accessor
    struct-shape-get-aggregate-conformance-pack-compliance-summary-request-limit
    :shape "Limit" :location common-lisp:nil :location-name common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null) :accessor
    struct-shape-get-aggregate-conformance-pack-compliance-summary-request-next-token
    :shape "NextToken" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-aggregate-conformance-pack-compliance-summary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-aggregate-conformance-pack-compliance-summary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-aggregate-conformance-pack-compliance-summary-request
                    'make-get-aggregate-conformance-pack-compliance-summary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-conformance-pack-compliance-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-conformance-pack-compliance-summary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-key))
      (common-lisp:list
       (common-lisp:cons "GroupByKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-conformance-pack-compliance-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  get-aggregate-conformance-pack-compliance-summary-response common-lisp:nil
  ((aggregate-conformance-pack-compliance-summaries :initarg
    :aggregate-conformance-pack-compliance-summaries :initform common-lisp:nil
    :type
    (common-lisp:or aggregate-conformance-pack-compliance-summary-list
                    common-lisp:null)
    :accessor
    struct-shape-get-aggregate-conformance-pack-compliance-summary-response-aggregate-conformance-pack-compliance-summaries
    :shape "AggregateConformancePackComplianceSummaryList" :location
    common-lisp:nil :location-name common-lisp:nil)
   (group-by-key :initarg :group-by-key :initform common-lisp:nil :type
    (common-lisp:or string-with-char-limit256 common-lisp:null) :accessor
    struct-shape-get-aggregate-conformance-pack-compliance-summary-response-group-by-key
    :shape "StringWithCharLimit256" :location common-lisp:nil :location-name
    common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null) :accessor
    struct-shape-get-aggregate-conformance-pack-compliance-summary-response-next-token
    :shape "NextToken" :location common-lisp:nil :location-name
    common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-aggregate-conformance-pack-compliance-summary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-aggregate-conformance-pack-compliance-summary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-aggregate-conformance-pack-compliance-summary-response
                    'make-get-aggregate-conformance-pack-compliance-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-conformance-pack-compliance-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-conformance-pack-compliance-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregate-conformance-pack-compliance-summaries))
      (common-lisp:list
       (common-lisp:cons "AggregateConformancePackComplianceSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-key))
      (common-lisp:list
       (common-lisp:cons "GroupByKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-conformance-pack-compliance-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-aggregate-discovered-resource-counts-request
                       common-lisp:nil
                       ((configuration-aggregator-name :initarg
                         :configuration-aggregator-name :initform
                         (common-lisp:error
                          ":configuration-aggregator-name is required")
                         :type
                         (common-lisp:or configuration-aggregator-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-discovered-resource-counts-request-configuration-aggregator-name
                         :shape "ConfigurationAggregatorName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-count-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-discovered-resource-counts-request-filters
                         :shape "ResourceCountFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (group-by-key :initarg :group-by-key :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-count-group-key
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-discovered-resource-counts-request-group-by-key
                         :shape "ResourceCountGroupKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or group-by-apilimit common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-discovered-resource-counts-request-limit
                         :shape "GroupByAPILimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-aggregate-discovered-resource-counts-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-aggregate-discovered-resource-counts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-aggregate-discovered-resource-counts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-aggregate-discovered-resource-counts-request
                    'make-get-aggregate-discovered-resource-counts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-discovered-resource-counts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-discovered-resource-counts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-key))
      (common-lisp:list
       (common-lisp:cons "GroupByKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-discovered-resource-counts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-aggregate-discovered-resource-counts-response
                       common-lisp:nil
                       ((total-discovered-resources :initarg
                         :total-discovered-resources :initform
                         (common-lisp:error
                          ":total-discovered-resources is required")
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-get-aggregate-discovered-resource-counts-response-total-discovered-resources
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (group-by-key :initarg :group-by-key :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-discovered-resource-counts-response-group-by-key
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (grouped-resource-counts :initarg
                         :grouped-resource-counts :initform common-lisp:nil
                         :type
                         (common-lisp:or grouped-resource-count-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-discovered-resource-counts-response-grouped-resource-counts
                         :shape "GroupedResourceCountList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-aggregate-discovered-resource-counts-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-aggregate-discovered-resource-counts-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-aggregate-discovered-resource-counts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-aggregate-discovered-resource-counts-response
                    'make-get-aggregate-discovered-resource-counts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-discovered-resource-counts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-discovered-resource-counts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-discovered-resources))
      (common-lisp:list
       (common-lisp:cons "TotalDiscoveredResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-by-key))
      (common-lisp:list
       (common-lisp:cons "GroupByKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'grouped-resource-counts))
      (common-lisp:list
       (common-lisp:cons "GroupedResourceCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-discovered-resource-counts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-aggregate-resource-config-request common-lisp:nil
                       ((configuration-aggregator-name :initarg
                         :configuration-aggregator-name :initform
                         (common-lisp:error
                          ":configuration-aggregator-name is required")
                         :type
                         (common-lisp:or configuration-aggregator-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-resource-config-request-configuration-aggregator-name
                         :shape "ConfigurationAggregatorName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :initform
                         (common-lisp:error ":resource-identifier is required")
                         :type
                         (common-lisp:or aggregate-resource-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-resource-config-request-resource-identifier
                         :shape "AggregateResourceIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-aggregate-resource-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-aggregate-resource-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-aggregate-resource-config-request
                    'make-get-aggregate-resource-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-resource-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-resource-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-resource-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-aggregate-resource-config-response common-lisp:nil
                       ((configuration-item :initarg :configuration-item
                         :initform common-lisp:nil :type
                         (common-lisp:or configuration-item common-lisp:null)
                         :accessor
                         struct-shape-get-aggregate-resource-config-response-configuration-item
                         :shape "ConfigurationItem" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-aggregate-resource-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-aggregate-resource-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-aggregate-resource-config-response
                    'make-get-aggregate-resource-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-resource-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-resource-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-item))
      (common-lisp:list
       (common-lisp:cons "ConfigurationItem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-aggregate-resource-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compliance-details-by-config-rule-request
                       common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         (common-lisp:error ":config-rule-name is required")
                         :type
                         (common-lisp:or string-with-char-limit64
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-compliance-details-by-config-rule-request-config-rule-name
                         :shape "StringWithCharLimit64" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (compliance-types :initarg :compliance-types :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-types common-lisp:null)
                         :accessor
                         struct-shape-get-compliance-details-by-config-rule-request-compliance-types
                         :shape "ComplianceTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-get-compliance-details-by-config-rule-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-compliance-details-by-config-rule-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-compliance-details-by-config-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compliance-details-by-config-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-compliance-details-by-config-rule-request
                    'make-get-compliance-details-by-config-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-details-by-config-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-details-by-config-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-types))
      (common-lisp:list
       (common-lisp:cons "ComplianceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-details-by-config-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compliance-details-by-config-rule-response
                       common-lisp:nil
                       ((evaluation-results :initarg :evaluation-results
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-results common-lisp:null)
                         :accessor
                         struct-shape-get-compliance-details-by-config-rule-response-evaluation-results
                         :shape "EvaluationResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-compliance-details-by-config-rule-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-compliance-details-by-config-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compliance-details-by-config-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-compliance-details-by-config-rule-response
                    'make-get-compliance-details-by-config-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-details-by-config-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-details-by-config-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-results))
      (common-lisp:list
       (common-lisp:cons "EvaluationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-details-by-config-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compliance-details-by-resource-request
                       common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-compliance-details-by-resource-request-resource-type
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or base-resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-compliance-details-by-resource-request-resource-id
                         :shape "BaseResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance-types :initarg :compliance-types :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-types common-lisp:null)
                         :accessor
                         struct-shape-get-compliance-details-by-resource-request-compliance-types
                         :shape "ComplianceTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-compliance-details-by-resource-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-evaluation-id :initarg
                         :resource-evaluation-id :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-evaluation-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-compliance-details-by-resource-request-resource-evaluation-id
                         :shape "ResourceEvaluationId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-compliance-details-by-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compliance-details-by-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-compliance-details-by-resource-request
                    'make-get-compliance-details-by-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-details-by-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-details-by-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-types))
      (common-lisp:list
       (common-lisp:cons "ComplianceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-evaluation-id))
      (common-lisp:list
       (common-lisp:cons "ResourceEvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-details-by-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compliance-details-by-resource-response
                       common-lisp:nil
                       ((evaluation-results :initarg :evaluation-results
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-results common-lisp:null)
                         :accessor
                         struct-shape-get-compliance-details-by-resource-response-evaluation-results
                         :shape "EvaluationResults" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-compliance-details-by-resource-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-compliance-details-by-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compliance-details-by-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-compliance-details-by-resource-response
                    'make-get-compliance-details-by-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-details-by-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-details-by-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-results))
      (common-lisp:list
       (common-lisp:cons "EvaluationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-details-by-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compliance-summary-by-config-rule-response
                       common-lisp:nil
                       ((compliance-summary :initarg :compliance-summary
                         :initform common-lisp:nil :type
                         (common-lisp:or compliance-summary common-lisp:null)
                         :accessor
                         struct-shape-get-compliance-summary-by-config-rule-response-compliance-summary
                         :shape "ComplianceSummary" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-compliance-summary-by-config-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compliance-summary-by-config-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-compliance-summary-by-config-rule-response
                    'make-get-compliance-summary-by-config-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-summary-by-config-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-summary-by-config-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance-summary))
      (common-lisp:list
       (common-lisp:cons "ComplianceSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-summary-by-config-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compliance-summary-by-resource-type-request
                       common-lisp:nil
                       ((resource-types :initarg :resource-types :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-types common-lisp:null)
                         :accessor
                         struct-shape-get-compliance-summary-by-resource-type-request-resource-types
                         :shape "ResourceTypes" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-compliance-summary-by-resource-type-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compliance-summary-by-resource-type-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-compliance-summary-by-resource-type-request
                    'make-get-compliance-summary-by-resource-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-summary-by-resource-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-summary-by-resource-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-summary-by-resource-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compliance-summary-by-resource-type-response
                       common-lisp:nil
                       ((compliance-summaries-by-resource-type :initarg
                         :compliance-summaries-by-resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-summaries-by-resource-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-compliance-summary-by-resource-type-response-compliance-summaries-by-resource-type
                         :shape "ComplianceSummariesByResourceType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-compliance-summary-by-resource-type-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compliance-summary-by-resource-type-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-compliance-summary-by-resource-type-response
                    'make-get-compliance-summary-by-resource-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-summary-by-resource-type-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-summary-by-resource-type-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-summaries-by-resource-type))
      (common-lisp:list
       (common-lisp:cons "ComplianceSummariesByResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compliance-summary-by-resource-type-response))
   common-lisp:nil))
(common-lisp:deftype get-conformance-pack-compliance-details-limit ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-conformance-pack-compliance-details-request
                       common-lisp:nil
                       ((conformance-pack-name :initarg :conformance-pack-name
                         :initform
                         (common-lisp:error
                          ":conformance-pack-name is required")
                         :type
                         (common-lisp:or conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-conformance-pack-compliance-details-request-conformance-pack-name
                         :shape "ConformancePackName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or conformance-pack-evaluation-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-conformance-pack-compliance-details-request-filters
                         :shape "ConformancePackEvaluationFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or
                          get-conformance-pack-compliance-details-limit
                          common-lisp:null)
                         :accessor
                         struct-shape-get-conformance-pack-compliance-details-request-limit
                         :shape "GetConformancePackComplianceDetailsLimit"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-conformance-pack-compliance-details-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-conformance-pack-compliance-details-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-conformance-pack-compliance-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-conformance-pack-compliance-details-request
                    'make-get-conformance-pack-compliance-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-conformance-pack-compliance-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-conformance-pack-compliance-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "ConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-conformance-pack-compliance-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-conformance-pack-compliance-details-response
                       common-lisp:nil
                       ((conformance-pack-name :initarg :conformance-pack-name
                         :initform
                         (common-lisp:error
                          ":conformance-pack-name is required")
                         :type
                         (common-lisp:or conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-conformance-pack-compliance-details-response-conformance-pack-name
                         :shape "ConformancePackName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-rule-evaluation-results :initarg
                         :conformance-pack-rule-evaluation-results :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          conformance-pack-rule-evaluation-results-list
                          common-lisp:null)
                         :accessor
                         struct-shape-get-conformance-pack-compliance-details-response-conformance-pack-rule-evaluation-results
                         :shape "ConformancePackRuleEvaluationResultsList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-conformance-pack-compliance-details-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-conformance-pack-compliance-details-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-conformance-pack-compliance-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-conformance-pack-compliance-details-response
                    'make-get-conformance-pack-compliance-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-conformance-pack-compliance-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-conformance-pack-compliance-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "ConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-rule-evaluation-results))
      (common-lisp:list
       (common-lisp:cons "ConformancePackRuleEvaluationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-conformance-pack-compliance-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-conformance-pack-compliance-summary-request
                       common-lisp:nil
                       ((conformance-pack-names :initarg
                         :conformance-pack-names :initform
                         (common-lisp:error
                          ":conformance-pack-names is required")
                         :type
                         (common-lisp:or
                          conformance-pack-names-to-summarize-list
                          common-lisp:null)
                         :accessor
                         struct-shape-get-conformance-pack-compliance-summary-request-conformance-pack-names
                         :shape "ConformancePackNamesToSummarizeList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or page-size-limit common-lisp:null)
                         :accessor
                         struct-shape-get-conformance-pack-compliance-summary-request-limit
                         :shape "PageSizeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-conformance-pack-compliance-summary-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-conformance-pack-compliance-summary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-conformance-pack-compliance-summary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-conformance-pack-compliance-summary-request
                    'make-get-conformance-pack-compliance-summary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-conformance-pack-compliance-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-conformance-pack-compliance-summary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-names))
      (common-lisp:list
       (common-lisp:cons "ConformancePackNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-conformance-pack-compliance-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-conformance-pack-compliance-summary-response
                       common-lisp:nil
                       ((conformance-pack-compliance-summary-list :initarg
                         :conformance-pack-compliance-summary-list :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          conformance-pack-compliance-summary-list
                          common-lisp:null)
                         :accessor
                         struct-shape-get-conformance-pack-compliance-summary-response-conformance-pack-compliance-summary-list
                         :shape "ConformancePackComplianceSummaryList"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-conformance-pack-compliance-summary-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-conformance-pack-compliance-summary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-conformance-pack-compliance-summary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-conformance-pack-compliance-summary-response
                    'make-get-conformance-pack-compliance-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-conformance-pack-compliance-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-conformance-pack-compliance-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-compliance-summary-list))
      (common-lisp:list
       (common-lisp:cons "ConformancePackComplianceSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-conformance-pack-compliance-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-custom-rule-policy-request common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         common-lisp:nil :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-get-custom-rule-policy-request-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-custom-rule-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-custom-rule-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-custom-rule-policy-request
                    'make-get-custom-rule-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-rule-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-rule-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-rule-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-custom-rule-policy-response common-lisp:nil
                       ((policy-text :initarg :policy-text :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-text common-lisp:null)
                         :accessor
                         struct-shape-get-custom-rule-policy-response-policy-text
                         :shape "PolicyText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-custom-rule-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-custom-rule-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-custom-rule-policy-response
                    'make-get-custom-rule-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-rule-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-rule-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "PolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-custom-rule-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-discovered-resource-counts-request common-lisp:nil
                       ((resource-types :initarg :resource-types :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-types common-lisp:null)
                         :accessor
                         struct-shape-get-discovered-resource-counts-request-resource-types
                         :shape "ResourceTypes" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-get-discovered-resource-counts-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-discovered-resource-counts-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-discovered-resource-counts-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-discovered-resource-counts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-discovered-resource-counts-request
                    'make-get-discovered-resource-counts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-discovered-resource-counts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-discovered-resource-counts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "resourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-discovered-resource-counts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-discovered-resource-counts-response common-lisp:nil
                       ((total-discovered-resources :initarg
                         :total-discovered-resources :initform common-lisp:nil
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-get-discovered-resource-counts-response-total-discovered-resources
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-counts :initarg :resource-counts :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-counts common-lisp:null)
                         :accessor
                         struct-shape-get-discovered-resource-counts-response-resource-counts
                         :shape "ResourceCounts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-discovered-resource-counts-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-discovered-resource-counts-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-discovered-resource-counts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-discovered-resource-counts-response
                    'make-get-discovered-resource-counts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-discovered-resource-counts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-discovered-resource-counts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-discovered-resources))
      (common-lisp:list
       (common-lisp:cons "totalDiscoveredResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-counts))
      (common-lisp:list
       (common-lisp:cons "resourceCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-discovered-resource-counts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-organization-config-rule-detailed-status-request
                       common-lisp:nil
                       ((organization-config-rule-name :initarg
                         :organization-config-rule-name :initform
                         (common-lisp:error
                          ":organization-config-rule-name is required")
                         :type
                         (common-lisp:or organization-config-rule-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-organization-config-rule-detailed-status-request-organization-config-rule-name
                         :shape "OrganizationConfigRuleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or status-detail-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-organization-config-rule-detailed-status-request-filters
                         :shape "StatusDetailFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or cosmos-page-limit common-lisp:null)
                         :accessor
                         struct-shape-get-organization-config-rule-detailed-status-request-limit
                         :shape "CosmosPageLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-organization-config-rule-detailed-status-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-organization-config-rule-detailed-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-organization-config-rule-detailed-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-organization-config-rule-detailed-status-request
                    'make-get-organization-config-rule-detailed-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-config-rule-detailed-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-config-rule-detailed-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-config-rule-detailed-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-organization-config-rule-detailed-status-response
                       common-lisp:nil
                       ((organization-config-rule-detailed-status :initarg
                         :organization-config-rule-detailed-status :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          organization-config-rule-detailed-status
                          common-lisp:null)
                         :accessor
                         struct-shape-get-organization-config-rule-detailed-status-response-organization-config-rule-detailed-status
                         :shape "OrganizationConfigRuleDetailedStatus"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-get-organization-config-rule-detailed-status-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-organization-config-rule-detailed-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-organization-config-rule-detailed-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-organization-config-rule-detailed-status-response
                    'make-get-organization-config-rule-detailed-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-config-rule-detailed-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-config-rule-detailed-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-detailed-status))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleDetailedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-config-rule-detailed-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  get-organization-conformance-pack-detailed-status-request common-lisp:nil
  ((organization-conformance-pack-name :initarg
    :organization-conformance-pack-name :initform
    (common-lisp:error ":organization-conformance-pack-name is required") :type
    (common-lisp:or organization-conformance-pack-name common-lisp:null)
    :accessor
    struct-shape-get-organization-conformance-pack-detailed-status-request-organization-conformance-pack-name
    :shape "OrganizationConformancePackName" :location common-lisp:nil
    :location-name common-lisp:nil)
   (filters :initarg :filters :initform common-lisp:nil :type
    (common-lisp:or organization-resource-detailed-status-filters
                    common-lisp:null)
    :accessor
    struct-shape-get-organization-conformance-pack-detailed-status-request-filters
    :shape "OrganizationResourceDetailedStatusFilters" :location
    common-lisp:nil :location-name common-lisp:nil)
   (limit :initarg :limit :initform common-lisp:nil :type
    (common-lisp:or cosmos-page-limit common-lisp:null) :accessor
    struct-shape-get-organization-conformance-pack-detailed-status-request-limit
    :shape "CosmosPageLimit" :location common-lisp:nil :location-name
    common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or string common-lisp:null) :accessor
    struct-shape-get-organization-conformance-pack-detailed-status-request-next-token
    :shape "String" :location common-lisp:nil :location-name common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-organization-conformance-pack-detailed-status-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-organization-conformance-pack-detailed-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-organization-conformance-pack-detailed-status-request
                    'make-get-organization-conformance-pack-detailed-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-conformance-pack-detailed-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-conformance-pack-detailed-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-conformance-pack-detailed-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  get-organization-conformance-pack-detailed-status-response common-lisp:nil
  ((organization-conformance-pack-detailed-statuses :initarg
    :organization-conformance-pack-detailed-statuses :initform common-lisp:nil
    :type
    (common-lisp:or organization-conformance-pack-detailed-statuses
                    common-lisp:null)
    :accessor
    struct-shape-get-organization-conformance-pack-detailed-status-response-organization-conformance-pack-detailed-statuses
    :shape "OrganizationConformancePackDetailedStatuses" :location
    common-lisp:nil :location-name common-lisp:nil)
   (next-token :initarg :next-token :initform common-lisp:nil :type
    (common-lisp:or string common-lisp:null) :accessor
    struct-shape-get-organization-conformance-pack-detailed-status-response-next-token
    :shape "String" :location common-lisp:nil :location-name common-lisp:nil))
  (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-organization-conformance-pack-detailed-status-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-organization-conformance-pack-detailed-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-organization-conformance-pack-detailed-status-response
                    'make-get-organization-conformance-pack-detailed-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-conformance-pack-detailed-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-conformance-pack-detailed-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-conformance-pack-detailed-statuses))
      (common-lisp:list
       (common-lisp:cons "OrganizationConformancePackDetailedStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-conformance-pack-detailed-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-organization-custom-rule-policy-request
                       common-lisp:nil
                       ((organization-config-rule-name :initarg
                         :organization-config-rule-name :initform
                         (common-lisp:error
                          ":organization-config-rule-name is required")
                         :type
                         (common-lisp:or organization-config-rule-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-organization-custom-rule-policy-request-organization-config-rule-name
                         :shape "OrganizationConfigRuleName" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-organization-custom-rule-policy-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-organization-custom-rule-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-organization-custom-rule-policy-request
                    'make-get-organization-custom-rule-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-custom-rule-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-custom-rule-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-custom-rule-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-organization-custom-rule-policy-response
                       common-lisp:nil
                       ((policy-text :initarg :policy-text :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-text common-lisp:null)
                         :accessor
                         struct-shape-get-organization-custom-rule-policy-response-policy-text
                         :shape "PolicyText" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-organization-custom-rule-policy-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-organization-custom-rule-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-organization-custom-rule-policy-response
                    'make-get-organization-custom-rule-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-custom-rule-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-custom-rule-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "PolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organization-custom-rule-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-config-history-request common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-get-resource-config-history-request-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resourceid is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-get-resource-config-history-request-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (later-time :initarg :later-time :initform
                         common-lisp:nil :type
                         (common-lisp:or later-time common-lisp:null) :accessor
                         struct-shape-get-resource-config-history-request-later-time
                         :shape "LaterTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (earlier-time :initarg :earlier-time :initform
                         common-lisp:nil :type
                         (common-lisp:or earlier-time common-lisp:null)
                         :accessor
                         struct-shape-get-resource-config-history-request-earlier-time
                         :shape "EarlierTime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (chronological-order :initarg :chronological-order
                         :initform common-lisp:nil :type
                         (common-lisp:or chronological-order common-lisp:null)
                         :accessor
                         struct-shape-get-resource-config-history-request-chronological-order
                         :shape "ChronologicalOrder" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-get-resource-config-history-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-resource-config-history-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-config-history-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-config-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-config-history-request
                    'make-get-resource-config-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-config-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-config-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'later-time))
      (common-lisp:list
       (common-lisp:cons "laterTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'earlier-time))
      (common-lisp:list
       (common-lisp:cons "earlierTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'chronological-order))
      (common-lisp:list
       (common-lisp:cons "chronologicalOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-config-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-config-history-response common-lisp:nil
                       ((configuration-items :initarg :configuration-items
                         :initform common-lisp:nil :type
                         (common-lisp:or configuration-item-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-resource-config-history-response-configuration-items
                         :shape "ConfigurationItemList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-get-resource-config-history-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-config-history-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-config-history-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-config-history-response
                    'make-get-resource-config-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-config-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-config-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-items))
      (common-lisp:list
       (common-lisp:cons "configurationItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-config-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-evaluation-summary-request common-lisp:nil
                       ((resource-evaluation-id :initarg
                         :resource-evaluation-id :initform
                         (common-lisp:error
                          ":resource-evaluation-id is required")
                         :type
                         (common-lisp:or resource-evaluation-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-resource-evaluation-summary-request-resource-evaluation-id
                         :shape "ResourceEvaluationId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-evaluation-summary-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-evaluation-summary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-evaluation-summary-request
                    'make-get-resource-evaluation-summary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-evaluation-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-evaluation-summary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-evaluation-id))
      (common-lisp:list
       (common-lisp:cons "ResourceEvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-evaluation-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-evaluation-summary-response common-lisp:nil
                       ((resource-evaluation-id :initarg
                         :resource-evaluation-id :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-evaluation-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-get-resource-evaluation-summary-response-resource-evaluation-id
                         :shape "ResourceEvaluationId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (evaluation-mode :initarg :evaluation-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluation-mode common-lisp:null)
                         :accessor
                         struct-shape-get-resource-evaluation-summary-response-evaluation-mode
                         :shape "EvaluationMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-status :initarg :evaluation-status
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-status common-lisp:null)
                         :accessor
                         struct-shape-get-resource-evaluation-summary-response-evaluation-status
                         :shape "EvaluationStatus" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-start-timestamp :initarg
                         :evaluation-start-timestamp :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-get-resource-evaluation-summary-response-evaluation-start-timestamp
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (compliance :initarg :compliance :initform
                         common-lisp:nil :type
                         (common-lisp:or compliance-type common-lisp:null)
                         :accessor
                         struct-shape-get-resource-evaluation-summary-response-compliance
                         :shape "ComplianceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-context :initarg :evaluation-context
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-context common-lisp:null)
                         :accessor
                         struct-shape-get-resource-evaluation-summary-response-evaluation-context
                         :shape "EvaluationContext" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-details :initarg :resource-details :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-details common-lisp:null)
                         :accessor
                         struct-shape-get-resource-evaluation-summary-response-resource-details
                         :shape "ResourceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-resource-evaluation-summary-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-evaluation-summary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-resource-evaluation-summary-response
                    'make-get-resource-evaluation-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-evaluation-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-evaluation-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-evaluation-id))
      (common-lisp:list
       (common-lisp:cons "ResourceEvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-mode))
      (common-lisp:list
       (common-lisp:cons "EvaluationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-status))
      (common-lisp:list
       (common-lisp:cons "EvaluationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-start-timestamp))
      (common-lisp:list
       (common-lisp:cons "EvaluationStartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compliance))
      (common-lisp:list
       (common-lisp:cons "Compliance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-context))
      (common-lisp:list
       (common-lisp:cons "EvaluationContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-details))
      (common-lisp:list
       (common-lisp:cons "ResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-evaluation-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-stored-query-request common-lisp:nil
                       ((query-name :initarg :query-name :initform
                         (common-lisp:error ":query-name is required") :type
                         (common-lisp:or query-name common-lisp:null) :accessor
                         struct-shape-get-stored-query-request-query-name
                         :shape "QueryName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-stored-query-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-stored-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-stored-query-request 'make-get-stored-query-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-stored-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-stored-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-name))
      (common-lisp:list
       (common-lisp:cons "QueryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-stored-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-stored-query-response common-lisp:nil
                       ((stored-query :initarg :stored-query :initform
                         common-lisp:nil :type
                         (common-lisp:or stored-query common-lisp:null)
                         :accessor
                         struct-shape-get-stored-query-response-stored-query
                         :shape "StoredQuery" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-get-stored-query-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'get-stored-query-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'get-stored-query-response
                    'make-get-stored-query-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-stored-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-stored-query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stored-query))
      (common-lisp:list
       (common-lisp:cons "StoredQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-stored-query-response))
   common-lisp:nil))
(common-lisp:deftype group-by-apilimit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass grouped-resource-count common-lisp:nil
                       ((group-name :initarg :group-name :initform
                         (common-lisp:error ":group-name is required") :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-grouped-resource-count-group-name :shape
                         "StringWithCharLimit256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-count :initarg :resource-count :initform
                         (common-lisp:error ":resource-count is required")
                         :type (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-grouped-resource-count-resource-count
                         :shape "Long" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-grouped-resource-count
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'grouped-resource-count
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'grouped-resource-count 'make-grouped-resource-count))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          grouped-resource-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          grouped-resource-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-count))
      (common-lisp:list
       (common-lisp:cons "ResourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          grouped-resource-count))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype grouped-resource-count-list ()
   '(trivial-types:proper-list grouped-resource-count))
 (common-lisp:defun make-grouped-resource-count-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list grouped-resource-count))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition idempotent-parameter-mismatch
     (config-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       idempotent-parameter-mismatch-message)))
 (common-lisp:export
  (common-lisp:list 'idempotent-parameter-mismatch
                    'idempotent-parameter-mismatch-message)))
(common-lisp:deftype include-global-resource-types () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition insufficient-delivery-policy-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-delivery-policy-exception)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-permissions-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-permissions-exception)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-configuration-recorder-name-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-configuration-recorder-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-delivery-channel-name-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-delivery-channel-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-expression-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-expression-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-limit-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-limit-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-next-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-value-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-parameter-value-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-recording-group-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-recording-group-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-result-token-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-result-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-role-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-role-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3key-prefix-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-s3key-prefix-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3kms-key-arn-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-s3kms-key-arn-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-snstopic-arnexception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-snstopic-arnexception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-time-range-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-time-range-exception)))
(common-lisp:progn
 (common-lisp:define-condition last-delivery-channel-delete-failed-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'last-delivery-channel-delete-failed-exception)))
(common-lisp:deftype last-updated-time () 'common-lisp:string)
(common-lisp:deftype later-time () 'common-lisp:string)
(common-lisp:deftype limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defclass list-aggregate-discovered-resources-request
                       common-lisp:nil
                       ((configuration-aggregator-name :initarg
                         :configuration-aggregator-name :initform
                         (common-lisp:error
                          ":configuration-aggregator-name is required")
                         :type
                         (common-lisp:or configuration-aggregator-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-aggregate-discovered-resources-request-configuration-aggregator-name
                         :shape "ConfigurationAggregatorName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resource-type is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-list-aggregate-discovered-resources-request-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-filters common-lisp:null)
                         :accessor
                         struct-shape-list-aggregate-discovered-resources-request-filters
                         :shape "ResourceFilters" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-list-aggregate-discovered-resources-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-aggregate-discovered-resources-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-aggregate-discovered-resources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-aggregate-discovered-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-aggregate-discovered-resources-request
                    'make-list-aggregate-discovered-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregate-discovered-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregate-discovered-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregate-discovered-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-aggregate-discovered-resources-response
                       common-lisp:nil
                       ((resource-identifiers :initarg :resource-identifiers
                         :initform common-lisp:nil :type
                         (common-lisp:or discovered-resource-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-aggregate-discovered-resources-response-resource-identifiers
                         :shape "DiscoveredResourceIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-aggregate-discovered-resources-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-aggregate-discovered-resources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-aggregate-discovered-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-aggregate-discovered-resources-response
                    'make-list-aggregate-discovered-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregate-discovered-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregate-discovered-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-identifiers))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-aggregate-discovered-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-conformance-pack-compliance-scores-request
                       common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or
                          conformance-pack-compliance-scores-filters
                          common-lisp:null)
                         :accessor
                         struct-shape-list-conformance-pack-compliance-scores-request-filters
                         :shape "ConformancePackComplianceScoresFilters"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (sort-order :initarg :sort-order :initform
                         common-lisp:nil :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         struct-shape-list-conformance-pack-compliance-scores-request-sort-order
                         :shape "SortOrder" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (sort-by :initarg :sort-by :initform common-lisp:nil
                         :type (common-lisp:or sort-by common-lisp:null)
                         :accessor
                         struct-shape-list-conformance-pack-compliance-scores-request-sort-by
                         :shape "SortBy" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or page-size-limit common-lisp:null)
                         :accessor
                         struct-shape-list-conformance-pack-compliance-scores-request-limit
                         :shape "PageSizeLimit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-conformance-pack-compliance-scores-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-conformance-pack-compliance-scores-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-conformance-pack-compliance-scores-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-conformance-pack-compliance-scores-request
                    'make-list-conformance-pack-compliance-scores-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-conformance-pack-compliance-scores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-conformance-pack-compliance-scores-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-conformance-pack-compliance-scores-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-conformance-pack-compliance-scores-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-conformance-pack-compliance-scores-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-compliance-scores :initarg
                         :conformance-pack-compliance-scores :initform
                         (common-lisp:error
                          ":conformance-pack-compliance-scores is required")
                         :type
                         (common-lisp:or conformance-pack-compliance-scores
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-conformance-pack-compliance-scores-response-conformance-pack-compliance-scores
                         :shape "ConformancePackComplianceScores" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-conformance-pack-compliance-scores-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-conformance-pack-compliance-scores-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-conformance-pack-compliance-scores-response
                    'make-list-conformance-pack-compliance-scores-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-conformance-pack-compliance-scores-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-conformance-pack-compliance-scores-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-compliance-scores))
      (common-lisp:list
       (common-lisp:cons "ConformancePackComplianceScores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-conformance-pack-compliance-scores-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-discovered-resources-request common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-list-discovered-resources-request-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-ids :initarg :resource-ids :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id-list common-lisp:null)
                         :accessor
                         struct-shape-list-discovered-resources-request-resource-ids
                         :shape "ResourceIdList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-discovered-resources-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-list-discovered-resources-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-deleted-resources :initarg
                         :include-deleted-resources :initform common-lisp:nil
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         struct-shape-list-discovered-resources-request-include-deleted-resources
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-discovered-resources-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-discovered-resources-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-discovered-resources-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-discovered-resources-request
                    'make-list-discovered-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-ids))
      (common-lisp:list
       (common-lisp:cons "resourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-deleted-resources))
      (common-lisp:list
       (common-lisp:cons "includeDeletedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-discovered-resources-response common-lisp:nil
                       ((resource-identifiers :initarg :resource-identifiers
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-identifier-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-discovered-resources-response-resource-identifiers
                         :shape "ResourceIdentifierList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-discovered-resources-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-discovered-resources-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-discovered-resources-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-discovered-resources-response
                    'make-list-discovered-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-identifiers))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-discovered-resources-response))
   common-lisp:nil))
(common-lisp:deftype list-resource-evaluations-page-item-limit ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-resource-evaluations-request common-lisp:nil
                       ((filters :initarg :filters :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-evaluation-filters
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-resource-evaluations-request-filters
                         :shape "ResourceEvaluationFilters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or
                          list-resource-evaluations-page-item-limit
                          common-lisp:null)
                         :accessor
                         struct-shape-list-resource-evaluations-request-limit
                         :shape "ListResourceEvaluationsPageItemLimit"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-resource-evaluations-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resource-evaluations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-evaluations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resource-evaluations-request
                    'make-list-resource-evaluations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-evaluations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-evaluations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-evaluations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-resource-evaluations-response common-lisp:nil
                       ((resource-evaluations :initarg :resource-evaluations
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-evaluations common-lisp:null)
                         :accessor
                         struct-shape-list-resource-evaluations-response-resource-evaluations
                         :shape "ResourceEvaluations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-resource-evaluations-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-resource-evaluations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-resource-evaluations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-resource-evaluations-response
                    'make-list-resource-evaluations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-evaluations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-evaluations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-evaluations))
      (common-lisp:list
       (common-lisp:cons "ResourceEvaluations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resource-evaluations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stored-queries-request common-lisp:nil
                       ((next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-stored-queries-request-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-list-stored-queries-request-max-results
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-stored-queries-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-stored-queries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-stored-queries-request
                    'make-list-stored-queries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stored-queries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stored-queries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stored-queries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stored-queries-response common-lisp:nil
                       ((stored-query-metadata :initarg :stored-query-metadata
                         :initform common-lisp:nil :type
                         (common-lisp:or stored-query-metadata-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-list-stored-queries-response-stored-query-metadata
                         :shape "StoredQueryMetadataList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-list-stored-queries-response-next-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-stored-queries-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'list-stored-queries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-stored-queries-response
                    'make-list-stored-queries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stored-queries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stored-queries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stored-query-metadata))
      (common-lisp:list
       (common-lisp:cons "StoredQueryMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stored-queries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-list-tags-for-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-tags
                         :shape "TagList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-list-tags-for-resource-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-list-tags-for-resource-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition max-active-resources-exceeded-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'max-active-resources-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition max-number-of-config-rules-exceeded-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'max-number-of-config-rules-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition max-number-of-configuration-recorders-exceeded-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'max-number-of-configuration-recorders-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition max-number-of-conformance-packs-exceeded-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'max-number-of-conformance-packs-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition max-number-of-delivery-channels-exceeded-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'max-number-of-delivery-channels-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition max-number-of-organization-config-rules-exceeded-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list
   'max-number-of-organization-config-rules-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition max-number-of-organization-conformance-packs-exceeded-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list
   'max-number-of-organization-conformance-packs-exceeded-exception)))
(common-lisp:progn
 (common-lisp:define-condition max-number-of-retention-configurations-exceeded-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list
   'max-number-of-retention-configurations-exceeded-exception)))
(common-lisp:deftype maximum-execution-frequency () 'common-lisp:string)
(common-lisp:deftype member-account-rule-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass member-account-status common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":account-id is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-member-account-status-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (config-rule-name :initarg :config-rule-name :initform
                         (common-lisp:error ":config-rule-name is required")
                         :type
                         (common-lisp:or string-with-char-limit64
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-account-status-config-rule-name
                         :shape "StringWithCharLimit64" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (member-account-rule-status :initarg
                         :member-account-rule-status :initform
                         (common-lisp:error
                          ":member-account-rule-status is required")
                         :type
                         (common-lisp:or member-account-rule-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-member-account-status-member-account-rule-status
                         :shape "MemberAccountRuleStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-member-account-status-error-code :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-member-account-status-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-member-account-status-last-update-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-member-account-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'member-account-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'member-account-status 'make-member-account-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          member-account-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          member-account-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-account-rule-status))
      (common-lisp:list
       (common-lisp:cons "MemberAccountRuleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          member-account-status))
   common-lisp:nil))
(common-lisp:deftype message-type () 'common-lisp:string)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-available-configuration-recorder-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'no-available-configuration-recorder-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-available-delivery-channel-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'no-available-delivery-channel-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-available-organization-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-available-organization-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-running-configuration-recorder-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'no-running-configuration-recorder-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-such-bucket-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-such-bucket-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-such-config-rule-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-such-config-rule-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-such-config-rule-in-conformance-pack-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'no-such-config-rule-in-conformance-pack-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-such-configuration-aggregator-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'no-such-configuration-aggregator-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-such-configuration-recorder-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'no-such-configuration-recorder-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-such-conformance-pack-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-such-conformance-pack-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-such-delivery-channel-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'no-such-delivery-channel-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-such-organization-config-rule-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'no-such-organization-config-rule-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-such-organization-conformance-pack-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'no-such-organization-conformance-pack-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-such-remediation-configuration-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'no-such-remediation-configuration-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-such-remediation-exception-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'no-such-remediation-exception-exception)))
(common-lisp:progn
 (common-lisp:define-condition no-such-retention-configuration-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'no-such-retention-configuration-exception)))
(common-lisp:deftype ordering-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition organization-access-denied-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'organization-access-denied-exception)))
(common-lisp:progn
 (common-lisp:defclass organization-aggregation-source common-lisp:nil
                       ((role-arn :initarg :role-arn :initform
                         (common-lisp:error ":role-arn is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-organization-aggregation-source-role-arn
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (aws-regions :initarg :aws-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or aggregator-region-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-aggregation-source-aws-regions
                         :shape "AggregatorRegionList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (all-aws-regions :initarg :all-aws-regions :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-organization-aggregation-source-all-aws-regions
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-aggregation-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-aggregation-source
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-aggregation-source
                    'make-organization-aggregation-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-aggregation-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-aggregation-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-regions))
      (common-lisp:list
       (common-lisp:cons "AwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-aws-regions))
      (common-lisp:list
       (common-lisp:cons "AllAwsRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-aggregation-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition organization-all-features-not-enabled-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'organization-all-features-not-enabled-exception)))
(common-lisp:progn
 (common-lisp:defclass organization-config-rule common-lisp:nil
                       ((organization-config-rule-name :initarg
                         :organization-config-rule-name :initform
                         (common-lisp:error
                          ":organization-config-rule-name is required")
                         :type
                         (common-lisp:or organization-config-rule-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-config-rule-organization-config-rule-name
                         :shape "OrganizationConfigRuleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-config-rule-arn :initarg
                         :organization-config-rule-arn :initform
                         (common-lisp:error
                          ":organization-config-rule-arn is required")
                         :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-config-rule-organization-config-rule-arn
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-managed-rule-metadata :initarg
                         :organization-managed-rule-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-managed-rule-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-config-rule-organization-managed-rule-metadata
                         :shape "OrganizationManagedRuleMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-custom-rule-metadata :initarg
                         :organization-custom-rule-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-custom-rule-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-config-rule-organization-custom-rule-metadata
                         :shape "OrganizationCustomRuleMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (excluded-accounts :initarg :excluded-accounts
                         :initform common-lisp:nil :type
                         (common-lisp:or excluded-accounts common-lisp:null)
                         :accessor
                         struct-shape-organization-config-rule-excluded-accounts
                         :shape "ExcludedAccounts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-organization-config-rule-last-update-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (organization-custom-policy-rule-metadata :initarg
                         :organization-custom-policy-rule-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          organization-custom-policy-rule-metadata-no-policy
                          common-lisp:null)
                         :accessor
                         struct-shape-organization-config-rule-organization-custom-policy-rule-metadata
                         :shape "OrganizationCustomPolicyRuleMetadataNoPolicy"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-config-rule
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'organization-config-rule
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-config-rule 'make-organization-config-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-config-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-config-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-arn))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-managed-rule-metadata))
      (common-lisp:list
       (common-lisp:cons "OrganizationManagedRuleMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-custom-rule-metadata))
      (common-lisp:list
       (common-lisp:cons "OrganizationCustomRuleMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-accounts))
      (common-lisp:list
       (common-lisp:cons "ExcludedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-custom-policy-rule-metadata))
      (common-lisp:list
       (common-lisp:cons "OrganizationCustomPolicyRuleMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-config-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype organization-config-rule-detailed-status ()
   '(trivial-types:proper-list member-account-status))
 (common-lisp:defun make-organization-config-rule-detailed-status
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-account-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype organization-config-rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organization-config-rule-names ()
   '(trivial-types:proper-list string-with-char-limit64))
 (common-lisp:defun make-organization-config-rule-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            string-with-char-limit64))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass organization-config-rule-status common-lisp:nil
                       ((organization-config-rule-name :initarg
                         :organization-config-rule-name :initform
                         (common-lisp:error
                          ":organization-config-rule-name is required")
                         :type
                         (common-lisp:or organization-config-rule-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-config-rule-status-organization-config-rule-name
                         :shape "OrganizationConfigRuleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-rule-status :initarg
                         :organization-rule-status :initform
                         (common-lisp:error
                          ":organization-rule-status is required")
                         :type
                         (common-lisp:or organization-rule-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-config-rule-status-organization-rule-status
                         :shape "OrganizationRuleStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-organization-config-rule-status-error-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-organization-config-rule-status-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-organization-config-rule-status-last-update-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-config-rule-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-config-rule-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-config-rule-status
                    'make-organization-config-rule-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-config-rule-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-config-rule-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-rule-status))
      (common-lisp:list
       (common-lisp:cons "OrganizationRuleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-config-rule-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype organization-config-rule-statuses ()
   '(trivial-types:proper-list organization-config-rule-status))
 (common-lisp:defun make-organization-config-rule-statuses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organization-config-rule-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype organization-config-rule-trigger-type ()
  'common-lisp:string)
(common-lisp:deftype organization-config-rule-trigger-type-no-sn ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organization-config-rule-trigger-type-no-sns ()
   '(trivial-types:proper-list organization-config-rule-trigger-type-no-sn))
 (common-lisp:defun make-organization-config-rule-trigger-type-no-sns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organization-config-rule-trigger-type-no-sn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype organization-config-rule-trigger-types ()
   '(trivial-types:proper-list organization-config-rule-trigger-type))
 (common-lisp:defun make-organization-config-rule-trigger-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organization-config-rule-trigger-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype organization-config-rules ()
   '(trivial-types:proper-list organization-config-rule))
 (common-lisp:defun make-organization-config-rules
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organization-config-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass organization-conformance-pack common-lisp:nil
                       ((organization-conformance-pack-name :initarg
                         :organization-conformance-pack-name :initform
                         (common-lisp:error
                          ":organization-conformance-pack-name is required")
                         :type
                         (common-lisp:or organization-conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-conformance-pack-organization-conformance-pack-name
                         :shape "OrganizationConformancePackName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-conformance-pack-arn :initarg
                         :organization-conformance-pack-arn :initform
                         (common-lisp:error
                          ":organization-conformance-pack-arn is required")
                         :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-conformance-pack-organization-conformance-pack-arn
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (delivery-s3bucket :initarg :delivery-s3bucket
                         :initform common-lisp:nil :type
                         (common-lisp:or delivery-s3bucket common-lisp:null)
                         :accessor
                         struct-shape-organization-conformance-pack-delivery-s3bucket
                         :shape "DeliveryS3Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-s3key-prefix :initarg :delivery-s3key-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or delivery-s3key-prefix
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-conformance-pack-delivery-s3key-prefix
                         :shape "DeliveryS3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-input-parameters :initarg
                         :conformance-pack-input-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or conformance-pack-input-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-conformance-pack-conformance-pack-input-parameters
                         :shape "ConformancePackInputParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (excluded-accounts :initarg :excluded-accounts
                         :initform common-lisp:nil :type
                         (common-lisp:or excluded-accounts common-lisp:null)
                         :accessor
                         struct-shape-organization-conformance-pack-excluded-accounts
                         :shape "ExcludedAccounts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         (common-lisp:error ":last-update-time is required")
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-organization-conformance-pack-last-update-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-conformance-pack
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-conformance-pack
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-conformance-pack
                    'make-organization-conformance-pack))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-conformance-pack))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-conformance-pack))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-conformance-pack-arn))
      (common-lisp:list
       (common-lisp:cons "OrganizationConformancePackArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-s3bucket))
      (common-lisp:list
       (common-lisp:cons "DeliveryS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-s3key-prefix))
      (common-lisp:list
       (common-lisp:cons "DeliveryS3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-input-parameters))
      (common-lisp:list
       (common-lisp:cons "ConformancePackInputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-accounts))
      (common-lisp:list
       (common-lisp:cons "ExcludedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-conformance-pack))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-conformance-pack-detailed-status
                       common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         (common-lisp:error ":account-id is required") :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-organization-conformance-pack-detailed-status-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-name :initarg :conformance-pack-name
                         :initform
                         (common-lisp:error
                          ":conformance-pack-name is required")
                         :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-conformance-pack-detailed-status-conformance-pack-name
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or organization-resource-detailed-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-conformance-pack-detailed-status-status
                         :shape "OrganizationResourceDetailedStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-organization-conformance-pack-detailed-status-error-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-organization-conformance-pack-detailed-status-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-organization-conformance-pack-detailed-status-last-update-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-conformance-pack-detailed-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-conformance-pack-detailed-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-conformance-pack-detailed-status
                    'make-organization-conformance-pack-detailed-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-conformance-pack-detailed-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-conformance-pack-detailed-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "ConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-conformance-pack-detailed-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype organization-conformance-pack-detailed-statuses ()
   '(trivial-types:proper-list organization-conformance-pack-detailed-status))
 (common-lisp:defun make-organization-conformance-pack-detailed-statuses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organization-conformance-pack-detailed-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype organization-conformance-pack-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organization-conformance-pack-names ()
   '(trivial-types:proper-list organization-conformance-pack-name))
 (common-lisp:defun make-organization-conformance-pack-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organization-conformance-pack-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass organization-conformance-pack-status common-lisp:nil
                       ((organization-conformance-pack-name :initarg
                         :organization-conformance-pack-name :initform
                         (common-lisp:error
                          ":organization-conformance-pack-name is required")
                         :type
                         (common-lisp:or organization-conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-conformance-pack-status-organization-conformance-pack-name
                         :shape "OrganizationConformancePackName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (status :initarg :status :initform
                         (common-lisp:error ":status is required") :type
                         (common-lisp:or organization-resource-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-conformance-pack-status-status
                         :shape "OrganizationResourceStatus" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-code :initarg :error-code :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-organization-conformance-pack-status-error-code
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-organization-conformance-pack-status-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (last-update-time :initarg :last-update-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-organization-conformance-pack-status-last-update-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-conformance-pack-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-conformance-pack-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-conformance-pack-status
                    'make-organization-conformance-pack-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-conformance-pack-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-conformance-pack-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-conformance-pack-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype organization-conformance-pack-statuses ()
   '(trivial-types:proper-list organization-conformance-pack-status))
 (common-lisp:defun make-organization-conformance-pack-statuses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organization-conformance-pack-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition organization-conformance-pack-template-validation-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list
   'organization-conformance-pack-template-validation-exception)))
(common-lisp:progn
 (common-lisp:deftype organization-conformance-packs ()
   '(trivial-types:proper-list organization-conformance-pack))
 (common-lisp:defun make-organization-conformance-packs
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            organization-conformance-pack))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass organization-custom-policy-rule-metadata common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256min0
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-description
                         :shape "StringWithCharLimit256Min0" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-config-rule-trigger-types :initarg
                         :organization-config-rule-trigger-types :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          organization-config-rule-trigger-type-no-sns
                          common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-organization-config-rule-trigger-types
                         :shape "OrganizationConfigRuleTriggerTypeNoSNs"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input-parameters :initarg :input-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit2048
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-input-parameters
                         :shape "StringWithCharLimit2048" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-execution-frequency :initarg
                         :maximum-execution-frequency :initform common-lisp:nil
                         :type
                         (common-lisp:or maximum-execution-frequency
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-maximum-execution-frequency
                         :shape "MaximumExecutionFrequency" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-types-scope :initarg :resource-types-scope
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-types-scope common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-resource-types-scope
                         :shape "ResourceTypesScope" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id-scope :initarg :resource-id-scope
                         :initform common-lisp:nil :type
                         (common-lisp:or string-with-char-limit768
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-resource-id-scope
                         :shape "StringWithCharLimit768" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-key-scope :initarg :tag-key-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit128
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-tag-key-scope
                         :shape "StringWithCharLimit128" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-value-scope :initarg :tag-value-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-tag-value-scope
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (policy-runtime :initarg :policy-runtime :initform
                         (common-lisp:error ":policy-runtime is required")
                         :type (common-lisp:or policy-runtime common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-policy-runtime
                         :shape "PolicyRuntime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (policy-text :initarg :policy-text :initform
                         (common-lisp:error ":policy-text is required") :type
                         (common-lisp:or policy-text common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-policy-text
                         :shape "PolicyText" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (debug-log-delivery-accounts :initarg
                         :debug-log-delivery-accounts :initform common-lisp:nil
                         :type
                         (common-lisp:or debug-log-delivery-accounts
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-debug-log-delivery-accounts
                         :shape "DebugLogDeliveryAccounts" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-custom-policy-rule-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-custom-policy-rule-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-custom-policy-rule-metadata
                    'make-organization-custom-policy-rule-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-custom-policy-rule-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-custom-policy-rule-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-trigger-types))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleTriggerTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-parameters))
      (common-lisp:list
       (common-lisp:cons "InputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-execution-frequency))
      (common-lisp:list
       (common-lisp:cons "MaximumExecutionFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-types-scope))
      (common-lisp:list
       (common-lisp:cons "ResourceTypesScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id-scope))
      (common-lisp:list
       (common-lisp:cons "ResourceIdScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key-scope))
      (common-lisp:list
       (common-lisp:cons "TagKeyScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-value-scope))
      (common-lisp:list
       (common-lisp:cons "TagValueScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-runtime))
      (common-lisp:list
       (common-lisp:cons "PolicyRuntime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-text))
      (common-lisp:list
       (common-lisp:cons "PolicyText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'debug-log-delivery-accounts))
      (common-lisp:list
       (common-lisp:cons "DebugLogDeliveryAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-custom-policy-rule-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-custom-policy-rule-metadata-no-policy
                       common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256min0
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-no-policy-description
                         :shape "StringWithCharLimit256Min0" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-config-rule-trigger-types :initarg
                         :organization-config-rule-trigger-types :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          organization-config-rule-trigger-type-no-sns
                          common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-no-policy-organization-config-rule-trigger-types
                         :shape "OrganizationConfigRuleTriggerTypeNoSNs"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (input-parameters :initarg :input-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit2048
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-no-policy-input-parameters
                         :shape "StringWithCharLimit2048" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-execution-frequency :initarg
                         :maximum-execution-frequency :initform common-lisp:nil
                         :type
                         (common-lisp:or maximum-execution-frequency
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-no-policy-maximum-execution-frequency
                         :shape "MaximumExecutionFrequency" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-types-scope :initarg :resource-types-scope
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-types-scope common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-no-policy-resource-types-scope
                         :shape "ResourceTypesScope" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id-scope :initarg :resource-id-scope
                         :initform common-lisp:nil :type
                         (common-lisp:or string-with-char-limit768
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-no-policy-resource-id-scope
                         :shape "StringWithCharLimit768" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-key-scope :initarg :tag-key-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit128
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-no-policy-tag-key-scope
                         :shape "StringWithCharLimit128" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-value-scope :initarg :tag-value-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-no-policy-tag-value-scope
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (policy-runtime :initarg :policy-runtime :initform
                         common-lisp:nil :type
                         (common-lisp:or policy-runtime common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-no-policy-policy-runtime
                         :shape "PolicyRuntime" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (debug-log-delivery-accounts :initarg
                         :debug-log-delivery-accounts :initform common-lisp:nil
                         :type
                         (common-lisp:or debug-log-delivery-accounts
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-policy-rule-metadata-no-policy-debug-log-delivery-accounts
                         :shape "DebugLogDeliveryAccounts" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-custom-policy-rule-metadata-no-policy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-custom-policy-rule-metadata-no-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-custom-policy-rule-metadata-no-policy
                    'make-organization-custom-policy-rule-metadata-no-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-custom-policy-rule-metadata-no-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-custom-policy-rule-metadata-no-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-trigger-types))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleTriggerTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-parameters))
      (common-lisp:list
       (common-lisp:cons "InputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-execution-frequency))
      (common-lisp:list
       (common-lisp:cons "MaximumExecutionFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-types-scope))
      (common-lisp:list
       (common-lisp:cons "ResourceTypesScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id-scope))
      (common-lisp:list
       (common-lisp:cons "ResourceIdScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key-scope))
      (common-lisp:list
       (common-lisp:cons "TagKeyScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-value-scope))
      (common-lisp:list
       (common-lisp:cons "TagValueScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-runtime))
      (common-lisp:list
       (common-lisp:cons "PolicyRuntime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'debug-log-delivery-accounts))
      (common-lisp:list
       (common-lisp:cons "DebugLogDeliveryAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-custom-policy-rule-metadata-no-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-custom-rule-metadata common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256min0
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-rule-metadata-description
                         :shape "StringWithCharLimit256Min0" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (lambda-function-arn :initarg :lambda-function-arn
                         :initform
                         (common-lisp:error ":lambda-function-arn is required")
                         :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-rule-metadata-lambda-function-arn
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-config-rule-trigger-types :initarg
                         :organization-config-rule-trigger-types :initform
                         (common-lisp:error
                          ":organization-config-rule-trigger-types is required")
                         :type
                         (common-lisp:or organization-config-rule-trigger-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-rule-metadata-organization-config-rule-trigger-types
                         :shape "OrganizationConfigRuleTriggerTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-parameters :initarg :input-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit2048
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-rule-metadata-input-parameters
                         :shape "StringWithCharLimit2048" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-execution-frequency :initarg
                         :maximum-execution-frequency :initform common-lisp:nil
                         :type
                         (common-lisp:or maximum-execution-frequency
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-rule-metadata-maximum-execution-frequency
                         :shape "MaximumExecutionFrequency" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-types-scope :initarg :resource-types-scope
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-types-scope common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-rule-metadata-resource-types-scope
                         :shape "ResourceTypesScope" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id-scope :initarg :resource-id-scope
                         :initform common-lisp:nil :type
                         (common-lisp:or string-with-char-limit768
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-rule-metadata-resource-id-scope
                         :shape "StringWithCharLimit768" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-key-scope :initarg :tag-key-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit128
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-rule-metadata-tag-key-scope
                         :shape "StringWithCharLimit128" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-value-scope :initarg :tag-value-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-custom-rule-metadata-tag-value-scope
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-custom-rule-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-custom-rule-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-custom-rule-metadata
                    'make-organization-custom-rule-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-custom-rule-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-custom-rule-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda-function-arn))
      (common-lisp:list
       (common-lisp:cons "LambdaFunctionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-trigger-types))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleTriggerTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-parameters))
      (common-lisp:list
       (common-lisp:cons "InputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-execution-frequency))
      (common-lisp:list
       (common-lisp:cons "MaximumExecutionFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-types-scope))
      (common-lisp:list
       (common-lisp:cons "ResourceTypesScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id-scope))
      (common-lisp:list
       (common-lisp:cons "ResourceIdScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key-scope))
      (common-lisp:list
       (common-lisp:cons "TagKeyScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-value-scope))
      (common-lisp:list
       (common-lisp:cons "TagValueScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-custom-rule-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass organization-managed-rule-metadata common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256min0
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-managed-rule-metadata-description
                         :shape "StringWithCharLimit256Min0" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (rule-identifier :initarg :rule-identifier :initform
                         (common-lisp:error ":rule-identifier is required")
                         :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-managed-rule-metadata-rule-identifier
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (input-parameters :initarg :input-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit2048
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-managed-rule-metadata-input-parameters
                         :shape "StringWithCharLimit2048" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (maximum-execution-frequency :initarg
                         :maximum-execution-frequency :initform common-lisp:nil
                         :type
                         (common-lisp:or maximum-execution-frequency
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-managed-rule-metadata-maximum-execution-frequency
                         :shape "MaximumExecutionFrequency" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-types-scope :initarg :resource-types-scope
                         :initform common-lisp:nil :type
                         (common-lisp:or resource-types-scope common-lisp:null)
                         :accessor
                         struct-shape-organization-managed-rule-metadata-resource-types-scope
                         :shape "ResourceTypesScope" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id-scope :initarg :resource-id-scope
                         :initform common-lisp:nil :type
                         (common-lisp:or string-with-char-limit768
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-managed-rule-metadata-resource-id-scope
                         :shape "StringWithCharLimit768" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-key-scope :initarg :tag-key-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit128
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-managed-rule-metadata-tag-key-scope
                         :shape "StringWithCharLimit128" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-value-scope :initarg :tag-value-scope :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-managed-rule-metadata-tag-value-scope
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-managed-rule-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-managed-rule-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-managed-rule-metadata
                    'make-organization-managed-rule-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-managed-rule-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-managed-rule-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-identifier))
      (common-lisp:list
       (common-lisp:cons "RuleIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-parameters))
      (common-lisp:list
       (common-lisp:cons "InputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-execution-frequency))
      (common-lisp:list
       (common-lisp:cons "MaximumExecutionFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-types-scope))
      (common-lisp:list
       (common-lisp:cons "ResourceTypesScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id-scope))
      (common-lisp:list
       (common-lisp:cons "ResourceIdScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key-scope))
      (common-lisp:list
       (common-lisp:cons "TagKeyScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-value-scope))
      (common-lisp:list
       (common-lisp:cons "TagValueScope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-managed-rule-metadata))
   common-lisp:nil))
(common-lisp:deftype organization-resource-detailed-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass organization-resource-detailed-status-filters
                       common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-organization-resource-detailed-status-filters-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (status :initarg :status :initform common-lisp:nil
                         :type
                         (common-lisp:or organization-resource-detailed-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-organization-resource-detailed-status-filters-status
                         :shape "OrganizationResourceDetailedStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-organization-resource-detailed-status-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'organization-resource-detailed-status-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'organization-resource-detailed-status-filters
                    'make-organization-resource-detailed-status-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organization-resource-detailed-status-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organization-resource-detailed-status-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organization-resource-detailed-status-filters))
   common-lisp:nil))
(common-lisp:deftype organization-resource-status () 'common-lisp:string)
(common-lisp:deftype organization-rule-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition oversized-configuration-item-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'oversized-configuration-item-exception)))
(common-lisp:deftype owner () 'common-lisp:string)
(common-lisp:deftype page-size-limit () 'common-lisp:integer)
(common-lisp:deftype parameter-name () 'common-lisp:string)
(common-lisp:deftype parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pending-aggregation-request common-lisp:nil
                       ((requester-account-id :initarg :requester-account-id
                         :initform common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-pending-aggregation-request-requester-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (requester-aws-region :initarg :requester-aws-region
                         :initform common-lisp:nil :type
                         (common-lisp:or aws-region common-lisp:null) :accessor
                         struct-shape-pending-aggregation-request-requester-aws-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-pending-aggregation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'pending-aggregation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'pending-aggregation-request
                    'make-pending-aggregation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-aggregation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-aggregation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requester-account-id))
      (common-lisp:list
       (common-lisp:cons "RequesterAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'requester-aws-region))
      (common-lisp:list
       (common-lisp:cons "RequesterAwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-aggregation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pending-aggregation-request-list ()
   '(trivial-types:proper-list pending-aggregation-request))
 (common-lisp:defun make-pending-aggregation-request-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pending-aggregation-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:deftype policy-runtime () 'common-lisp:string)
(common-lisp:deftype policy-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-aggregation-authorization-request common-lisp:nil
                       ((authorized-account-id :initarg :authorized-account-id
                         :initform
                         (common-lisp:error
                          ":authorized-account-id is required")
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         struct-shape-put-aggregation-authorization-request-authorized-account-id
                         :shape "AccountId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (authorized-aws-region :initarg :authorized-aws-region
                         :initform
                         (common-lisp:error
                          ":authorized-aws-region is required")
                         :type (common-lisp:or aws-region common-lisp:null)
                         :accessor
                         struct-shape-put-aggregation-authorization-request-authorized-aws-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-list common-lisp:null) :accessor
                         struct-shape-put-aggregation-authorization-request-tags
                         :shape "TagsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-aggregation-authorization-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-aggregation-authorization-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-aggregation-authorization-request
                    'make-put-aggregation-authorization-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-aggregation-authorization-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-aggregation-authorization-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-account-id))
      (common-lisp:list
       (common-lisp:cons "AuthorizedAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-aws-region))
      (common-lisp:list
       (common-lisp:cons "AuthorizedAwsRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-aggregation-authorization-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-aggregation-authorization-response common-lisp:nil
                       ((aggregation-authorization :initarg
                         :aggregation-authorization :initform common-lisp:nil
                         :type
                         (common-lisp:or aggregation-authorization
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-aggregation-authorization-response-aggregation-authorization
                         :shape "AggregationAuthorization" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-aggregation-authorization-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-aggregation-authorization-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-aggregation-authorization-response
                    'make-put-aggregation-authorization-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-aggregation-authorization-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-aggregation-authorization-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aggregation-authorization))
      (common-lisp:list
       (common-lisp:cons "AggregationAuthorization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-aggregation-authorization-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-config-rule-request common-lisp:nil
                       ((config-rule :initarg :config-rule :initform
                         (common-lisp:error ":config-rule is required") :type
                         (common-lisp:or config-rule common-lisp:null)
                         :accessor
                         struct-shape-put-config-rule-request-config-rule
                         :shape "ConfigRule" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-list common-lisp:null) :accessor
                         struct-shape-put-config-rule-request-tags :shape
                         "TagsList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-config-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-config-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-config-rule-request 'make-put-config-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-config-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-config-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule))
      (common-lisp:list
       (common-lisp:cons "ConfigRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-config-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-configuration-aggregator-request common-lisp:nil
                       ((configuration-aggregator-name :initarg
                         :configuration-aggregator-name :initform
                         (common-lisp:error
                          ":configuration-aggregator-name is required")
                         :type
                         (common-lisp:or configuration-aggregator-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-configuration-aggregator-request-configuration-aggregator-name
                         :shape "ConfigurationAggregatorName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (account-aggregation-sources :initarg
                         :account-aggregation-sources :initform common-lisp:nil
                         :type
                         (common-lisp:or account-aggregation-source-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-configuration-aggregator-request-account-aggregation-sources
                         :shape "AccountAggregationSourceList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-aggregation-source :initarg
                         :organization-aggregation-source :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-aggregation-source
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-configuration-aggregator-request-organization-aggregation-source
                         :shape "OrganizationAggregationSource" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-list common-lisp:null) :accessor
                         struct-shape-put-configuration-aggregator-request-tags
                         :shape "TagsList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-configuration-aggregator-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-configuration-aggregator-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-configuration-aggregator-request
                    'make-put-configuration-aggregator-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-aggregator-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-aggregator-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-aggregation-sources))
      (common-lisp:list
       (common-lisp:cons "AccountAggregationSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-aggregation-source))
      (common-lisp:list
       (common-lisp:cons "OrganizationAggregationSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-aggregator-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-configuration-aggregator-response common-lisp:nil
                       ((configuration-aggregator :initarg
                         :configuration-aggregator :initform common-lisp:nil
                         :type
                         (common-lisp:or configuration-aggregator
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-configuration-aggregator-response-configuration-aggregator
                         :shape "ConfigurationAggregator" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-configuration-aggregator-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-configuration-aggregator-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-configuration-aggregator-response
                    'make-put-configuration-aggregator-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-aggregator-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-aggregator-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-aggregator-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-configuration-recorder-request common-lisp:nil
                       ((configuration-recorder :initarg
                         :configuration-recorder :initform
                         (common-lisp:error
                          ":configuration-recorder is required")
                         :type
                         (common-lisp:or configuration-recorder
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-configuration-recorder-request-configuration-recorder
                         :shape "ConfigurationRecorder" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-configuration-recorder-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-configuration-recorder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-configuration-recorder-request
                    'make-put-configuration-recorder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-recorder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-recorder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-recorder))
      (common-lisp:list
       (common-lisp:cons "ConfigurationRecorder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-configuration-recorder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-conformance-pack-request common-lisp:nil
                       ((conformance-pack-name :initarg :conformance-pack-name
                         :initform
                         (common-lisp:error
                          ":conformance-pack-name is required")
                         :type
                         (common-lisp:or conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-conformance-pack-request-conformance-pack-name
                         :shape "ConformancePackName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-s3uri :initarg :template-s3uri :initform
                         common-lisp:nil :type
                         (common-lisp:or template-s3uri common-lisp:null)
                         :accessor
                         struct-shape-put-conformance-pack-request-template-s3uri
                         :shape "TemplateS3Uri" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-body :initarg :template-body :initform
                         common-lisp:nil :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor
                         struct-shape-put-conformance-pack-request-template-body
                         :shape "TemplateBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-s3bucket :initarg :delivery-s3bucket
                         :initform common-lisp:nil :type
                         (common-lisp:or delivery-s3bucket common-lisp:null)
                         :accessor
                         struct-shape-put-conformance-pack-request-delivery-s3bucket
                         :shape "DeliveryS3Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-s3key-prefix :initarg :delivery-s3key-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or delivery-s3key-prefix
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-conformance-pack-request-delivery-s3key-prefix
                         :shape "DeliveryS3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-input-parameters :initarg
                         :conformance-pack-input-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or conformance-pack-input-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-conformance-pack-request-conformance-pack-input-parameters
                         :shape "ConformancePackInputParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (template-ssmdocument-details :initarg
                         :template-ssmdocument-details :initform
                         common-lisp:nil :type
                         (common-lisp:or template-ssmdocument-details
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-conformance-pack-request-template-ssmdocument-details
                         :shape "TemplateSSMDocumentDetails" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-conformance-pack-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-conformance-pack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-conformance-pack-request
                    'make-put-conformance-pack-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-conformance-pack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-conformance-pack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "ConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-s3uri))
      (common-lisp:list
       (common-lisp:cons "TemplateS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-s3bucket))
      (common-lisp:list
       (common-lisp:cons "DeliveryS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-s3key-prefix))
      (common-lisp:list
       (common-lisp:cons "DeliveryS3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-input-parameters))
      (common-lisp:list
       (common-lisp:cons "ConformancePackInputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-ssmdocument-details))
      (common-lisp:list
       (common-lisp:cons "TemplateSSMDocumentDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-conformance-pack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-conformance-pack-response common-lisp:nil
                       ((conformance-pack-arn :initarg :conformance-pack-arn
                         :initform common-lisp:nil :type
                         (common-lisp:or conformance-pack-arn common-lisp:null)
                         :accessor
                         struct-shape-put-conformance-pack-response-conformance-pack-arn
                         :shape "ConformancePackArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-conformance-pack-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-conformance-pack-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-conformance-pack-response
                    'make-put-conformance-pack-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-conformance-pack-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-conformance-pack-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-arn))
      (common-lisp:list
       (common-lisp:cons "ConformancePackArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-conformance-pack-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-delivery-channel-request common-lisp:nil
                       ((delivery-channel :initarg :delivery-channel :initform
                         (common-lisp:error ":delivery-channel is required")
                         :type
                         (common-lisp:or delivery-channel common-lisp:null)
                         :accessor
                         struct-shape-put-delivery-channel-request-delivery-channel
                         :shape "DeliveryChannel" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-delivery-channel-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-delivery-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-delivery-channel-request
                    'make-put-delivery-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-channel))
      (common-lisp:list
       (common-lisp:cons "DeliveryChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-delivery-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-evaluations-request common-lisp:nil
                       ((evaluations :initarg :evaluations :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluations common-lisp:null)
                         :accessor
                         struct-shape-put-evaluations-request-evaluations
                         :shape "Evaluations" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (result-token :initarg :result-token :initform
                         (common-lisp:error ":result-token is required") :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-put-evaluations-request-result-token
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (test-mode :initarg :test-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-put-evaluations-request-test-mode :shape
                         "Boolean" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-evaluations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-evaluations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-evaluations-request 'make-put-evaluations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-evaluations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-evaluations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluations))
      (common-lisp:list
       (common-lisp:cons "Evaluations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result-token))
      (common-lisp:list
       (common-lisp:cons "ResultToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'test-mode))
      (common-lisp:list
       (common-lisp:cons "TestMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-evaluations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-evaluations-response common-lisp:nil
                       ((failed-evaluations :initarg :failed-evaluations
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluations common-lisp:null)
                         :accessor
                         struct-shape-put-evaluations-response-failed-evaluations
                         :shape "Evaluations" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-evaluations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-evaluations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-evaluations-response 'make-put-evaluations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-evaluations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-evaluations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-evaluations))
      (common-lisp:list
       (common-lisp:cons "FailedEvaluations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-evaluations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-external-evaluation-request common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         (common-lisp:error ":config-rule-name is required")
                         :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-put-external-evaluation-request-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (external-evaluation :initarg :external-evaluation
                         :initform
                         (common-lisp:error ":external-evaluation is required")
                         :type
                         (common-lisp:or external-evaluation common-lisp:null)
                         :accessor
                         struct-shape-put-external-evaluation-request-external-evaluation
                         :shape "ExternalEvaluation" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-external-evaluation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-external-evaluation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-external-evaluation-request
                    'make-put-external-evaluation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-external-evaluation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-external-evaluation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-evaluation))
      (common-lisp:list
       (common-lisp:cons "ExternalEvaluation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-external-evaluation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-external-evaluation-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-external-evaluation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-external-evaluation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-external-evaluation-response
                    'make-put-external-evaluation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-external-evaluation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-external-evaluation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-external-evaluation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-organization-config-rule-request common-lisp:nil
                       ((organization-config-rule-name :initarg
                         :organization-config-rule-name :initform
                         (common-lisp:error
                          ":organization-config-rule-name is required")
                         :type
                         (common-lisp:or organization-config-rule-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-organization-config-rule-request-organization-config-rule-name
                         :shape "OrganizationConfigRuleName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-managed-rule-metadata :initarg
                         :organization-managed-rule-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-managed-rule-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-organization-config-rule-request-organization-managed-rule-metadata
                         :shape "OrganizationManagedRuleMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (organization-custom-rule-metadata :initarg
                         :organization-custom-rule-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or organization-custom-rule-metadata
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-organization-config-rule-request-organization-custom-rule-metadata
                         :shape "OrganizationCustomRuleMetadata" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (excluded-accounts :initarg :excluded-accounts
                         :initform common-lisp:nil :type
                         (common-lisp:or excluded-accounts common-lisp:null)
                         :accessor
                         struct-shape-put-organization-config-rule-request-excluded-accounts
                         :shape "ExcludedAccounts" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (organization-custom-policy-rule-metadata :initarg
                         :organization-custom-policy-rule-metadata :initform
                         common-lisp:nil :type
                         (common-lisp:or
                          organization-custom-policy-rule-metadata
                          common-lisp:null)
                         :accessor
                         struct-shape-put-organization-config-rule-request-organization-custom-policy-rule-metadata
                         :shape "OrganizationCustomPolicyRuleMetadata"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-organization-config-rule-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-organization-config-rule-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-organization-config-rule-request
                    'make-put-organization-config-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-organization-config-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-organization-config-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-managed-rule-metadata))
      (common-lisp:list
       (common-lisp:cons "OrganizationManagedRuleMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-custom-rule-metadata))
      (common-lisp:list
       (common-lisp:cons "OrganizationCustomRuleMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-accounts))
      (common-lisp:list
       (common-lisp:cons "ExcludedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-custom-policy-rule-metadata))
      (common-lisp:list
       (common-lisp:cons "OrganizationCustomPolicyRuleMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-organization-config-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-organization-config-rule-response common-lisp:nil
                       ((organization-config-rule-arn :initarg
                         :organization-config-rule-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-organization-config-rule-response-organization-config-rule-arn
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-organization-config-rule-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-organization-config-rule-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-organization-config-rule-response
                    'make-put-organization-config-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-organization-config-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-organization-config-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-config-rule-arn))
      (common-lisp:list
       (common-lisp:cons "OrganizationConfigRuleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-organization-config-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-organization-conformance-pack-request
                       common-lisp:nil
                       ((organization-conformance-pack-name :initarg
                         :organization-conformance-pack-name :initform
                         (common-lisp:error
                          ":organization-conformance-pack-name is required")
                         :type
                         (common-lisp:or organization-conformance-pack-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-organization-conformance-pack-request-organization-conformance-pack-name
                         :shape "OrganizationConformancePackName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (template-s3uri :initarg :template-s3uri :initform
                         common-lisp:nil :type
                         (common-lisp:or template-s3uri common-lisp:null)
                         :accessor
                         struct-shape-put-organization-conformance-pack-request-template-s3uri
                         :shape "TemplateS3Uri" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (template-body :initarg :template-body :initform
                         common-lisp:nil :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor
                         struct-shape-put-organization-conformance-pack-request-template-body
                         :shape "TemplateBody" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-s3bucket :initarg :delivery-s3bucket
                         :initform common-lisp:nil :type
                         (common-lisp:or delivery-s3bucket common-lisp:null)
                         :accessor
                         struct-shape-put-organization-conformance-pack-request-delivery-s3bucket
                         :shape "DeliveryS3Bucket" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (delivery-s3key-prefix :initarg :delivery-s3key-prefix
                         :initform common-lisp:nil :type
                         (common-lisp:or delivery-s3key-prefix
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-organization-conformance-pack-request-delivery-s3key-prefix
                         :shape "DeliveryS3KeyPrefix" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (conformance-pack-input-parameters :initarg
                         :conformance-pack-input-parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or conformance-pack-input-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-organization-conformance-pack-request-conformance-pack-input-parameters
                         :shape "ConformancePackInputParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (excluded-accounts :initarg :excluded-accounts
                         :initform common-lisp:nil :type
                         (common-lisp:or excluded-accounts common-lisp:null)
                         :accessor
                         struct-shape-put-organization-conformance-pack-request-excluded-accounts
                         :shape "ExcludedAccounts" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-organization-conformance-pack-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-organization-conformance-pack-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-organization-conformance-pack-request
                    'make-put-organization-conformance-pack-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-organization-conformance-pack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-organization-conformance-pack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-conformance-pack-name))
      (common-lisp:list
       (common-lisp:cons "OrganizationConformancePackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-s3uri))
      (common-lisp:list
       (common-lisp:cons "TemplateS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-s3bucket))
      (common-lisp:list
       (common-lisp:cons "DeliveryS3Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-s3key-prefix))
      (common-lisp:list
       (common-lisp:cons "DeliveryS3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'conformance-pack-input-parameters))
      (common-lisp:list
       (common-lisp:cons "ConformancePackInputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-accounts))
      (common-lisp:list
       (common-lisp:cons "ExcludedAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-organization-conformance-pack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-organization-conformance-pack-response
                       common-lisp:nil
                       ((organization-conformance-pack-arn :initarg
                         :organization-conformance-pack-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-organization-conformance-pack-response-organization-conformance-pack-arn
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-organization-conformance-pack-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-organization-conformance-pack-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-organization-conformance-pack-response
                    'make-put-organization-conformance-pack-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-organization-conformance-pack-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-organization-conformance-pack-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-conformance-pack-arn))
      (common-lisp:list
       (common-lisp:cons "OrganizationConformancePackArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-organization-conformance-pack-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-remediation-configurations-request common-lisp:nil
                       ((remediation-configurations :initarg
                         :remediation-configurations :initform
                         (common-lisp:error
                          ":remediation-configurations is required")
                         :type
                         (common-lisp:or remediation-configurations
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-remediation-configurations-request-remediation-configurations
                         :shape "RemediationConfigurations" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-remediation-configurations-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-remediation-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-remediation-configurations-request
                    'make-put-remediation-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-remediation-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-remediation-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remediation-configurations))
      (common-lisp:list
       (common-lisp:cons "RemediationConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-remediation-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-remediation-configurations-response common-lisp:nil
                       ((failed-batches :initarg :failed-batches :initform
                         common-lisp:nil :type
                         (common-lisp:or failed-remediation-batches
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-remediation-configurations-response-failed-batches
                         :shape "FailedRemediationBatches" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-remediation-configurations-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-remediation-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-remediation-configurations-response
                    'make-put-remediation-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-remediation-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-remediation-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-batches))
      (common-lisp:list
       (common-lisp:cons "FailedBatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-remediation-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-remediation-exceptions-request common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         (common-lisp:error ":config-rule-name is required")
                         :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-put-remediation-exceptions-request-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-keys :initarg :resource-keys :initform
                         (common-lisp:error ":resource-keys is required") :type
                         (common-lisp:or remediation-exception-resource-keys
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-remediation-exceptions-request-resource-keys
                         :shape "RemediationExceptionResourceKeys" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or string-with-char-limit1024
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-remediation-exceptions-request-message
                         :shape "StringWithCharLimit1024" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (expiration-time :initarg :expiration-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-put-remediation-exceptions-request-expiration-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-remediation-exceptions-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-remediation-exceptions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-remediation-exceptions-request
                    'make-put-remediation-exceptions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-remediation-exceptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-remediation-exceptions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-keys))
      (common-lisp:list
       (common-lisp:cons "ResourceKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-remediation-exceptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-remediation-exceptions-response common-lisp:nil
                       ((failed-batches :initarg :failed-batches :initform
                         common-lisp:nil :type
                         (common-lisp:or failed-remediation-exception-batches
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-remediation-exceptions-response-failed-batches
                         :shape "FailedRemediationExceptionBatches" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-remediation-exceptions-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-remediation-exceptions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-remediation-exceptions-response
                    'make-put-remediation-exceptions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-remediation-exceptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-remediation-exceptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-batches))
      (common-lisp:list
       (common-lisp:cons "FailedBatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-remediation-exceptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-config-request common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resource-type is required") :type
                         (common-lisp:or resource-type-string common-lisp:null)
                         :accessor
                         struct-shape-put-resource-config-request-resource-type
                         :shape "ResourceTypeString" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (schema-version-id :initarg :schema-version-id
                         :initform
                         (common-lisp:error ":schema-version-id is required")
                         :type
                         (common-lisp:or schema-version-id common-lisp:null)
                         :accessor
                         struct-shape-put-resource-config-request-schema-version-id
                         :shape "SchemaVersionId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor
                         struct-shape-put-resource-config-request-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-put-resource-config-request-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration :initarg :configuration :initform
                         (common-lisp:error ":configuration is required") :type
                         (common-lisp:or configuration common-lisp:null)
                         :accessor
                         struct-shape-put-resource-config-request-configuration
                         :shape "Configuration" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         struct-shape-put-resource-config-request-tags :shape
                         "Tags" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-resource-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-resource-config-request
                    'make-put-resource-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version-id))
      (common-lisp:list
       (common-lisp:cons "SchemaVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-retention-configuration-request common-lisp:nil
                       ((retention-period-in-days :initarg
                         :retention-period-in-days :initform
                         (common-lisp:error
                          ":retention-period-in-days is required")
                         :type
                         (common-lisp:or retention-period-in-days
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-retention-configuration-request-retention-period-in-days
                         :shape "RetentionPeriodInDays" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-retention-configuration-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-retention-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-retention-configuration-request
                    'make-put-retention-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-period-in-days))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-retention-configuration-response common-lisp:nil
                       ((retention-configuration :initarg
                         :retention-configuration :initform common-lisp:nil
                         :type
                         (common-lisp:or retention-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-put-retention-configuration-response-retention-configuration
                         :shape "RetentionConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-retention-configuration-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-retention-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-retention-configuration-response
                    'make-put-retention-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-configuration))
      (common-lisp:list
       (common-lisp:cons "RetentionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-retention-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-stored-query-request common-lisp:nil
                       ((stored-query :initarg :stored-query :initform
                         (common-lisp:error ":stored-query is required") :type
                         (common-lisp:or stored-query common-lisp:null)
                         :accessor
                         struct-shape-put-stored-query-request-stored-query
                         :shape "StoredQuery" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform common-lisp:nil :type
                         (common-lisp:or tags-list common-lisp:null) :accessor
                         struct-shape-put-stored-query-request-tags :shape
                         "TagsList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-stored-query-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-stored-query-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-stored-query-request 'make-put-stored-query-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-stored-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-stored-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stored-query))
      (common-lisp:list
       (common-lisp:cons "StoredQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-stored-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-stored-query-response common-lisp:nil
                       ((query-arn :initarg :query-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or query-arn common-lisp:null) :accessor
                         struct-shape-put-stored-query-response-query-arn
                         :shape "QueryArn" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-put-stored-query-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'put-stored-query-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'put-stored-query-response
                    'make-put-stored-query-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-stored-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-stored-query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-arn))
      (common-lisp:list
       (common-lisp:cons "QueryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-stored-query-response))
   common-lisp:nil))
(common-lisp:deftype query-arn () 'common-lisp:string)
(common-lisp:deftype query-description () 'common-lisp:string)
(common-lisp:deftype query-expression () 'common-lisp:string)
(common-lisp:deftype query-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass query-info common-lisp:nil
                       ((select-fields :initarg :select-fields :initform
                         common-lisp:nil :type
                         (common-lisp:or field-info-list common-lisp:null)
                         :accessor struct-shape-query-info-select-fields :shape
                         "FieldInfoList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-query-info
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'query-info
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'query-info 'make-query-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'select-fields))
      (common-lisp:list
       (common-lisp:cons "SelectFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-info))
   common-lisp:nil))
(common-lisp:deftype query-name () 'common-lisp:string)
(common-lisp:deftype recorder-name () 'common-lisp:string)
(common-lisp:deftype recorder-status () 'common-lisp:string)
(common-lisp:deftype recording-frequency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass recording-group common-lisp:nil
                       ((all-supported :initarg :all-supported :initform
                         common-lisp:nil :type
                         (common-lisp:or all-supported common-lisp:null)
                         :accessor struct-shape-recording-group-all-supported
                         :shape "AllSupported" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (include-global-resource-types :initarg
                         :include-global-resource-types :initform
                         common-lisp:nil :type
                         (common-lisp:or include-global-resource-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-recording-group-include-global-resource-types
                         :shape "IncludeGlobalResourceTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-types :initarg :resource-types :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type-list common-lisp:null)
                         :accessor struct-shape-recording-group-resource-types
                         :shape "ResourceTypeList" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (exclusion-by-resource-types :initarg
                         :exclusion-by-resource-types :initform common-lisp:nil
                         :type
                         (common-lisp:or exclusion-by-resource-types
                                         common-lisp:null)
                         :accessor
                         struct-shape-recording-group-exclusion-by-resource-types
                         :shape "ExclusionByResourceTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recording-strategy :initarg :recording-strategy
                         :initform common-lisp:nil :type
                         (common-lisp:or recording-strategy common-lisp:null)
                         :accessor
                         struct-shape-recording-group-recording-strategy :shape
                         "RecordingStrategy" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recording-group
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recording-group
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'recording-group 'make-recording-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recording-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recording-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-supported))
      (common-lisp:list
       (common-lisp:cons "allSupported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-global-resource-types))
      (common-lisp:list
       (common-lisp:cons "includeGlobalResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "resourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclusion-by-resource-types))
      (common-lisp:list
       (common-lisp:cons "exclusionByResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recording-strategy))
      (common-lisp:list
       (common-lisp:cons "recordingStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recording-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recording-mode common-lisp:nil
                       ((recording-frequency :initarg :recording-frequency
                         :initform
                         (common-lisp:error ":recordingfrequency is required")
                         :type
                         (common-lisp:or recording-frequency common-lisp:null)
                         :accessor
                         struct-shape-recording-mode-recording-frequency :shape
                         "RecordingFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (recording-mode-overrides :initarg
                         :recording-mode-overrides :initform common-lisp:nil
                         :type
                         (common-lisp:or recording-mode-overrides
                                         common-lisp:null)
                         :accessor
                         struct-shape-recording-mode-recording-mode-overrides
                         :shape "RecordingModeOverrides" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recording-mode
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recording-mode
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'recording-mode 'make-recording-mode))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recording-mode))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recording-mode))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recording-frequency))
      (common-lisp:list
       (common-lisp:cons "recordingFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recording-mode-overrides))
      (common-lisp:list
       (common-lisp:cons "recordingModeOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recording-mode))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recording-mode-override common-lisp:nil
                       ((description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         struct-shape-recording-mode-override-description
                         :shape "Description" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-types :initarg :resource-types :initform
                         (common-lisp:error ":resourcetypes is required") :type
                         (common-lisp:or recording-mode-resource-types-list
                                         common-lisp:null)
                         :accessor
                         struct-shape-recording-mode-override-resource-types
                         :shape "RecordingModeResourceTypesList" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (recording-frequency :initarg :recording-frequency
                         :initform
                         (common-lisp:error ":recordingfrequency is required")
                         :type
                         (common-lisp:or recording-frequency common-lisp:null)
                         :accessor
                         struct-shape-recording-mode-override-recording-frequency
                         :shape "RecordingFrequency" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recording-mode-override
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recording-mode-override
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recording-mode-override 'make-recording-mode-override))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recording-mode-override))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recording-mode-override))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "resourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recording-frequency))
      (common-lisp:list
       (common-lisp:cons "recordingFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recording-mode-override))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recording-mode-overrides ()
   '(trivial-types:proper-list recording-mode-override))
 (common-lisp:defun make-recording-mode-overrides
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recording-mode-override))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype recording-mode-resource-types-list ()
   '(trivial-types:proper-list resource-type))
 (common-lisp:defun make-recording-mode-resource-types-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass recording-strategy common-lisp:nil
                       ((use-only :initarg :use-only :initform common-lisp:nil
                         :type
                         (common-lisp:or recording-strategy-type
                                         common-lisp:null)
                         :accessor struct-shape-recording-strategy-use-only
                         :shape "RecordingStrategyType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-recording-strategy
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'recording-strategy
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'recording-strategy 'make-recording-strategy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recording-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recording-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-only))
      (common-lisp:list
       (common-lisp:cons "useOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recording-strategy))
   common-lisp:nil))
(common-lisp:deftype recording-strategy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype reevaluate-config-rule-names ()
   '(trivial-types:proper-list config-rule-name))
 (common-lisp:defun make-reevaluate-config-rule-names
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list config-rule-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype related-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype related-event-list ()
   '(trivial-types:proper-list related-event))
 (common-lisp:defun make-related-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list related-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass relationship common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-relationship-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-relationship-resource-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-relationship-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (relationship-name :initarg :relationship-name
                         :initform common-lisp:nil :type
                         (common-lisp:or relationship-name common-lisp:null)
                         :accessor struct-shape-relationship-relationship-name
                         :shape "RelationshipName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-relationship
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'relationship
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'relationship 'make-relationship))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relationship))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relationship))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-name))
      (common-lisp:list
       (common-lisp:cons "relationshipName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relationship))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relationship-list ()
   '(trivial-types:proper-list relationship))
 (common-lisp:defun make-relationship-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list relationship))
   aws-sdk/generator/shape::members))
(common-lisp:deftype relationship-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass remediation-configuration common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         (common-lisp:error ":config-rule-name is required")
                         :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-remediation-configuration-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (target-type :initarg :target-type :initform
                         (common-lisp:error ":target-type is required") :type
                         (common-lisp:or remediation-target-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-remediation-configuration-target-type
                         :shape "RemediationTargetType" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-id :initarg :target-id :initform
                         (common-lisp:error ":target-id is required") :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-remediation-configuration-target-id
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (target-version :initarg :target-version :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remediation-configuration-target-version
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (parameters :initarg :parameters :initform
                         common-lisp:nil :type
                         (common-lisp:or remediation-parameters
                                         common-lisp:null)
                         :accessor
                         struct-shape-remediation-configuration-parameters
                         :shape "RemediationParameters" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remediation-configuration-resource-type
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (automatic :initarg :automatic :initform
                         common-lisp:nil :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         struct-shape-remediation-configuration-automatic
                         :shape "Boolean" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (execution-controls :initarg :execution-controls
                         :initform common-lisp:nil :type
                         (common-lisp:or execution-controls common-lisp:null)
                         :accessor
                         struct-shape-remediation-configuration-execution-controls
                         :shape "ExecutionControls" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-automatic-attempts :initarg
                         :maximum-automatic-attempts :initform common-lisp:nil
                         :type
                         (common-lisp:or auto-remediation-attempts
                                         common-lisp:null)
                         :accessor
                         struct-shape-remediation-configuration-maximum-automatic-attempts
                         :shape "AutoRemediationAttempts" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (retry-attempt-seconds :initarg :retry-attempt-seconds
                         :initform common-lisp:nil :type
                         (common-lisp:or auto-remediation-attempt-seconds
                                         common-lisp:null)
                         :accessor
                         struct-shape-remediation-configuration-retry-attempt-seconds
                         :shape "AutoRemediationAttemptSeconds" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (arn :initarg :arn :initform common-lisp:nil :type
                         (common-lisp:or string-with-char-limit1024
                                         common-lisp:null)
                         :accessor struct-shape-remediation-configuration-arn
                         :shape "StringWithCharLimit1024" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (created-by-service :initarg :created-by-service
                         :initform common-lisp:nil :type
                         (common-lisp:or string-with-char-limit1024
                                         common-lisp:null)
                         :accessor
                         struct-shape-remediation-configuration-created-by-service
                         :shape "StringWithCharLimit1024" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remediation-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remediation-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remediation-configuration
                    'make-remediation-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remediation-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remediation-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-id))
      (common-lisp:list
       (common-lisp:cons "TargetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-version))
      (common-lisp:list
       (common-lisp:cons "TargetVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automatic))
      (common-lisp:list
       (common-lisp:cons "Automatic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-controls))
      (common-lisp:list
       (common-lisp:cons "ExecutionControls"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-automatic-attempts))
      (common-lisp:list
       (common-lisp:cons "MaximumAutomaticAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retry-attempt-seconds))
      (common-lisp:list
       (common-lisp:cons "RetryAttemptSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by-service))
      (common-lisp:list
       (common-lisp:cons "CreatedByService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remediation-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype remediation-configurations ()
   '(trivial-types:proper-list remediation-configuration))
 (common-lisp:defun make-remediation-configurations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            remediation-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass remediation-exception common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         (common-lisp:error ":config-rule-name is required")
                         :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-remediation-exception-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resource-type is required") :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-remediation-exception-resource-type
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or string-with-char-limit1024
                                         common-lisp:null)
                         :accessor
                         struct-shape-remediation-exception-resource-id :shape
                         "StringWithCharLimit1024" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message :initarg :message :initform common-lisp:nil
                         :type
                         (common-lisp:or string-with-char-limit1024
                                         common-lisp:null)
                         :accessor struct-shape-remediation-exception-message
                         :shape "StringWithCharLimit1024" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (expiration-time :initarg :expiration-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-remediation-exception-expiration-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remediation-exception
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remediation-exception
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remediation-exception 'make-remediation-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remediation-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remediation-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remediation-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remediation-exception-resource-key common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor
                         struct-shape-remediation-exception-resource-key-resource-type
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit1024
                                         common-lisp:null)
                         :accessor
                         struct-shape-remediation-exception-resource-key-resource-id
                         :shape "StringWithCharLimit1024" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remediation-exception-resource-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'remediation-exception-resource-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remediation-exception-resource-key
                    'make-remediation-exception-resource-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remediation-exception-resource-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remediation-exception-resource-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remediation-exception-resource-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype remediation-exception-resource-keys ()
   '(trivial-types:proper-list remediation-exception-resource-key))
 (common-lisp:defun make-remediation-exception-resource-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            remediation-exception-resource-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype remediation-exceptions ()
   '(trivial-types:proper-list remediation-exception))
 (common-lisp:defun make-remediation-exceptions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list remediation-exception))
   aws-sdk/generator/shape::members))
(common-lisp:deftype remediation-execution-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass remediation-execution-status common-lisp:nil
                       ((resource-key :initarg :resource-key :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-key common-lisp:null)
                         :accessor
                         struct-shape-remediation-execution-status-resource-key
                         :shape "ResourceKey" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or remediation-execution-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-remediation-execution-status-state :shape
                         "RemediationExecutionState" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (step-details :initarg :step-details :initform
                         common-lisp:nil :type
                         (common-lisp:or remediation-execution-steps
                                         common-lisp:null)
                         :accessor
                         struct-shape-remediation-execution-status-step-details
                         :shape "RemediationExecutionSteps" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (invocation-time :initarg :invocation-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-remediation-execution-status-invocation-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time
                         :initform common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-remediation-execution-status-last-updated-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remediation-execution-status
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remediation-execution-status
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remediation-execution-status
                    'make-remediation-execution-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remediation-execution-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remediation-execution-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-key))
      (common-lisp:list
       (common-lisp:cons "ResourceKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-details))
      (common-lisp:list
       (common-lisp:cons "StepDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-time))
      (common-lisp:list
       (common-lisp:cons "InvocationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remediation-execution-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype remediation-execution-statuses ()
   '(trivial-types:proper-list remediation-execution-status))
 (common-lisp:defun make-remediation-execution-statuses
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            remediation-execution-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass remediation-execution-step common-lisp:nil
                       ((name :initarg :name :initform common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remediation-execution-step-name :shape
                         "String" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (state :initarg :state :initform common-lisp:nil :type
                         (common-lisp:or remediation-execution-step-state
                                         common-lisp:null)
                         :accessor
                         struct-shape-remediation-execution-step-state :shape
                         "RemediationExecutionStepState" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (error-message :initarg :error-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-remediation-execution-step-error-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-remediation-execution-step-start-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (stop-time :initarg :stop-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-remediation-execution-step-stop-time
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remediation-execution-step
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remediation-execution-step
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remediation-execution-step
                    'make-remediation-execution-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remediation-execution-step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remediation-execution-step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-time))
      (common-lisp:list
       (common-lisp:cons "StopTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remediation-execution-step))
   common-lisp:nil))
(common-lisp:deftype remediation-execution-step-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype remediation-execution-steps ()
   '(trivial-types:proper-list remediation-execution-step))
 (common-lisp:defun make-remediation-execution-steps
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            remediation-execution-step))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition remediation-in-progress-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'remediation-in-progress-exception)))
(common-lisp:progn
 (common-lisp:defclass remediation-parameter-value common-lisp:nil
                       ((resource-value :initarg :resource-value :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-value common-lisp:null)
                         :accessor
                         struct-shape-remediation-parameter-value-resource-value
                         :shape "ResourceValue" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (static-value :initarg :static-value :initform
                         common-lisp:nil :type
                         (common-lisp:or static-value common-lisp:null)
                         :accessor
                         struct-shape-remediation-parameter-value-static-value
                         :shape "StaticValue" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-remediation-parameter-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'remediation-parameter-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'remediation-parameter-value
                    'make-remediation-parameter-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remediation-parameter-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remediation-parameter-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-value))
      (common-lisp:list
       (common-lisp:cons "ResourceValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-value))
      (common-lisp:list
       (common-lisp:cons "StaticValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remediation-parameter-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype remediation-parameters () 'common-lisp:hash-table)
 (common-lisp:defun make-remediation-parameters
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype remediation-target-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-concurrent-modification-exception
     (config-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-concurrent-modification-exception
                    'resource-concurrent-modification-exception-message)))
(common-lisp:deftype resource-configuration () 'common-lisp:string)
(common-lisp:deftype resource-configuration-schema-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-count common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-resource-count-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (count :initarg :count :initform common-lisp:nil :type
                         (common-lisp:or long common-lisp:null) :accessor
                         struct-shape-resource-count-count :shape "Long"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-count
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-count
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource-count 'make-resource-count))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-count))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-count))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-count))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-count-filters common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-resource-count-filters-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-resource-count-filters-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or aws-region common-lisp:null)
                         :accessor struct-shape-resource-count-filters-region
                         :shape "AwsRegion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-count-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-count-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-count-filters 'make-resource-count-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-count-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-count-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-count-filters))
   common-lisp:nil))
(common-lisp:deftype resource-count-group-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-counts ()
   '(trivial-types:proper-list resource-count))
 (common-lisp:defun make-resource-counts
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-count))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-creation-time () 'common-lisp:string)
(common-lisp:deftype resource-deletion-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-details common-lisp:nil
                       ((resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resource-id is required") :type
                         (common-lisp:or base-resource-id common-lisp:null)
                         :accessor struct-shape-resource-details-resource-id
                         :shape "BaseResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resource-type is required") :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor struct-shape-resource-details-resource-type
                         :shape "StringWithCharLimit256" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-configuration :initarg
                         :resource-configuration :initform
                         (common-lisp:error
                          ":resource-configuration is required")
                         :type
                         (common-lisp:or resource-configuration
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-details-resource-configuration
                         :shape "ResourceConfiguration" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (resource-configuration-schema-type :initarg
                         :resource-configuration-schema-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-configuration-schema-type
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-details-resource-configuration-schema-type
                         :shape "ResourceConfigurationSchemaType" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-details 'make-resource-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-configuration))
      (common-lisp:list
       (common-lisp:cons "ResourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-configuration-schema-type))
      (common-lisp:list
       (common-lisp:cons "ResourceConfigurationSchemaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-evaluation common-lisp:nil
                       ((resource-evaluation-id :initarg
                         :resource-evaluation-id :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-evaluation-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-evaluation-resource-evaluation-id
                         :shape "ResourceEvaluationId" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (evaluation-mode :initarg :evaluation-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluation-mode common-lisp:null)
                         :accessor
                         struct-shape-resource-evaluation-evaluation-mode
                         :shape "EvaluationMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-start-timestamp :initarg
                         :evaluation-start-timestamp :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-resource-evaluation-evaluation-start-timestamp
                         :shape "Date" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-evaluation
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-evaluation
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-evaluation 'make-resource-evaluation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-evaluation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-evaluation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-evaluation-id))
      (common-lisp:list
       (common-lisp:cons "ResourceEvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-mode))
      (common-lisp:list
       (common-lisp:cons "EvaluationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-start-timestamp))
      (common-lisp:list
       (common-lisp:cons "EvaluationStartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-evaluation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-evaluation-filters common-lisp:nil
                       ((evaluation-mode :initarg :evaluation-mode :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluation-mode common-lisp:null)
                         :accessor
                         struct-shape-resource-evaluation-filters-evaluation-mode
                         :shape "EvaluationMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (time-window :initarg :time-window :initform
                         common-lisp:nil :type
                         (common-lisp:or time-window common-lisp:null)
                         :accessor
                         struct-shape-resource-evaluation-filters-time-window
                         :shape "TimeWindow" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-context-identifier :initarg
                         :evaluation-context-identifier :initform
                         common-lisp:nil :type
                         (common-lisp:or evaluation-context-identifier
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-evaluation-filters-evaluation-context-identifier
                         :shape "EvaluationContextIdentifier" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-evaluation-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-evaluation-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-evaluation-filters
                    'make-resource-evaluation-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-evaluation-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-evaluation-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-mode))
      (common-lisp:list
       (common-lisp:cons "EvaluationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-window))
      (common-lisp:list
       (common-lisp:cons "TimeWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-context-identifier))
      (common-lisp:list
       (common-lisp:cons "EvaluationContextIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-evaluation-filters))
   common-lisp:nil))
(common-lisp:deftype resource-evaluation-id () 'common-lisp:string)
(common-lisp:deftype resource-evaluation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-evaluations ()
   '(trivial-types:proper-list resource-evaluation))
 (common-lisp:defun make-resource-evaluations
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-evaluation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource-filters common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-resource-filters-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resource-filters-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor struct-shape-resource-filters-resource-name
                         :shape "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (region :initarg :region :initform common-lisp:nil
                         :type (common-lisp:or aws-region common-lisp:null)
                         :accessor struct-shape-resource-filters-region :shape
                         "AwsRegion" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-filters 'make-resource-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-filters))
   common-lisp:nil))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-id-list ()
   '(trivial-types:proper-list resource-id))
 (common-lisp:defun make-resource-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource-identifier common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         struct-shape-resource-identifier-resource-type :shape
                         "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resource-identifier-resource-id
                         :shape "ResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-name :initarg :resource-name :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor
                         struct-shape-resource-identifier-resource-name :shape
                         "ResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-deletion-time :initarg
                         :resource-deletion-time :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-deletion-time
                                         common-lisp:null)
                         :accessor
                         struct-shape-resource-identifier-resource-deletion-time
                         :shape "ResourceDeletionTime" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-identifier
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'resource-identifier 'make-resource-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-deletion-time))
      (common-lisp:list
       (common-lisp:cons "resourceDeletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-identifier-list ()
   '(trivial-types:proper-list resource-identifier))
 (common-lisp:defun make-resource-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-identifiers-list ()
   '(trivial-types:proper-list aggregate-resource-identifier))
 (common-lisp:defun make-resource-identifiers-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregate-resource-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-in-use-exception)))
(common-lisp:progn
 (common-lisp:defclass resource-key common-lisp:nil
                       ((resource-type :initarg :resource-type :initform
                         (common-lisp:error ":resourcetype is required") :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor struct-shape-resource-key-resource-type
                         :shape "ResourceType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-id :initarg :resource-id :initform
                         (common-lisp:error ":resourceid is required") :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor struct-shape-resource-key-resource-id :shape
                         "ResourceId" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-key
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-key
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource-key 'make-resource-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-keys ()
   '(trivial-types:proper-list resource-key))
 (common-lisp:defun make-resource-keys
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-discovered-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-discovered-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-type-list ()
   '(trivial-types:proper-list resource-type))
 (common-lisp:defun make-resource-type-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-types ()
   '(trivial-types:proper-list string-with-char-limit256))
 (common-lisp:defun make-resource-types
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            string-with-char-limit256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-types-scope ()
   '(trivial-types:proper-list string-with-char-limit256))
 (common-lisp:defun make-resource-types-scope
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            string-with-char-limit256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource-value common-lisp:nil
                       ((value :initarg :value :initform
                         (common-lisp:error ":value is required") :type
                         (common-lisp:or resource-value-type common-lisp:null)
                         :accessor struct-shape-resource-value-value :shape
                         "ResourceValueType" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-resource-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'resource-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'resource-value 'make-resource-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-value))
   common-lisp:nil))
(common-lisp:deftype resource-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype results () '(trivial-types:proper-list string))
 (common-lisp:defun make-results
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass retention-configuration common-lisp:nil
                       ((name :initarg :name :initform
                         (common-lisp:error ":name is required") :type
                         (common-lisp:or retention-configuration-name
                                         common-lisp:null)
                         :accessor struct-shape-retention-configuration-name
                         :shape "RetentionConfigurationName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (retention-period-in-days :initarg
                         :retention-period-in-days :initform
                         (common-lisp:error
                          ":retention-period-in-days is required")
                         :type
                         (common-lisp:or retention-period-in-days
                                         common-lisp:null)
                         :accessor
                         struct-shape-retention-configuration-retention-period-in-days
                         :shape "RetentionPeriodInDays" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-retention-configuration
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'retention-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'retention-configuration 'make-retention-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retention-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retention-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retention-period-in-days))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriodInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retention-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype retention-configuration-list ()
   '(trivial-types:proper-list retention-configuration))
 (common-lisp:defun make-retention-configuration-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list retention-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype retention-configuration-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype retention-configuration-name-list ()
   '(trivial-types:proper-list retention-configuration-name))
 (common-lisp:defun make-retention-configuration-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            retention-configuration-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype retention-period-in-days () 'common-lisp:integer)
(common-lisp:deftype rule-limit () 'common-lisp:integer)
(common-lisp:deftype ssmdocument-name () 'common-lisp:string)
(common-lisp:deftype ssmdocument-version () 'common-lisp:string)
(common-lisp:deftype schema-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scope common-lisp:nil
                       ((compliance-resource-types :initarg
                         :compliance-resource-types :initform common-lisp:nil
                         :type
                         (common-lisp:or compliance-resource-types
                                         common-lisp:null)
                         :accessor struct-shape-scope-compliance-resource-types
                         :shape "ComplianceResourceTypes" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (tag-key :initarg :tag-key :initform common-lisp:nil
                         :type
                         (common-lisp:or string-with-char-limit128
                                         common-lisp:null)
                         :accessor struct-shape-scope-tag-key :shape
                         "StringWithCharLimit128" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-value :initarg :tag-value :initform
                         common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor struct-shape-scope-tag-value :shape
                         "StringWithCharLimit256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (compliance-resource-id :initarg
                         :compliance-resource-id :initform common-lisp:nil
                         :type
                         (common-lisp:or base-resource-id common-lisp:null)
                         :accessor struct-shape-scope-compliance-resource-id
                         :shape "BaseResourceId" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-scope
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'scope
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'scope 'make-scope))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-resource-types))
      (common-lisp:list
       (common-lisp:cons "ComplianceResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-key))
      (common-lisp:list
       (common-lisp:cons "TagKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-value))
      (common-lisp:list
       (common-lisp:cons "TagValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compliance-resource-id))
      (common-lisp:list
       (common-lisp:cons "ComplianceResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scope))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass select-aggregate-resource-config-request common-lisp:nil
                       ((expression :initarg :expression :initform
                         (common-lisp:error ":expression is required") :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-select-aggregate-resource-config-request-expression
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (configuration-aggregator-name :initarg
                         :configuration-aggregator-name :initform
                         (common-lisp:error
                          ":configuration-aggregator-name is required")
                         :type
                         (common-lisp:or configuration-aggregator-name
                                         common-lisp:null)
                         :accessor
                         struct-shape-select-aggregate-resource-config-request-configuration-aggregator-name
                         :shape "ConfigurationAggregatorName" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-select-aggregate-resource-config-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (max-results :initarg :max-results :initform
                         common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-select-aggregate-resource-config-request-max-results
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-select-aggregate-resource-config-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-select-aggregate-resource-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'select-aggregate-resource-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'select-aggregate-resource-config-request
                    'make-select-aggregate-resource-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-aggregate-resource-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-aggregate-resource-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-aggregator-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAggregatorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-aggregate-resource-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass select-aggregate-resource-config-response
                       common-lisp:nil
                       ((results :initarg :results :initform common-lisp:nil
                         :type (common-lisp:or results common-lisp:null)
                         :accessor
                         struct-shape-select-aggregate-resource-config-response-results
                         :shape "Results" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-info :initarg :query-info :initform
                         common-lisp:nil :type
                         (common-lisp:or query-info common-lisp:null) :accessor
                         struct-shape-select-aggregate-resource-config-response-query-info
                         :shape "QueryInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-select-aggregate-resource-config-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-select-aggregate-resource-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'select-aggregate-resource-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'select-aggregate-resource-config-response
                    'make-select-aggregate-resource-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-aggregate-resource-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-aggregate-resource-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-info))
      (common-lisp:list
       (common-lisp:cons "QueryInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-aggregate-resource-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass select-resource-config-request common-lisp:nil
                       ((expression :initarg :expression :initform
                         (common-lisp:error ":expression is required") :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         struct-shape-select-resource-config-request-expression
                         :shape "Expression" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (limit :initarg :limit :initform common-lisp:nil :type
                         (common-lisp:or limit common-lisp:null) :accessor
                         struct-shape-select-resource-config-request-limit
                         :shape "Limit" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-select-resource-config-request-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-select-resource-config-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'select-resource-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'select-resource-config-request
                    'make-select-resource-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-resource-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-resource-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-resource-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass select-resource-config-response common-lisp:nil
                       ((results :initarg :results :initform common-lisp:nil
                         :type (common-lisp:or results common-lisp:null)
                         :accessor
                         struct-shape-select-resource-config-response-results
                         :shape "Results" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (query-info :initarg :query-info :initform
                         common-lisp:nil :type
                         (common-lisp:or query-info common-lisp:null) :accessor
                         struct-shape-select-resource-config-response-query-info
                         :shape "QueryInfo" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (next-token :initarg :next-token :initform
                         common-lisp:nil :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         struct-shape-select-resource-config-response-next-token
                         :shape "NextToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-select-resource-config-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'select-resource-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'select-resource-config-response
                    'make-select-resource-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          select-resource-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          select-resource-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-info))
      (common-lisp:list
       (common-lisp:cons "QueryInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          select-resource-config-response))
   common-lisp:nil))
(common-lisp:deftype sort-by () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source common-lisp:nil
                       ((owner :initarg :owner :initform
                         (common-lisp:error ":owner is required") :type
                         (common-lisp:or owner common-lisp:null) :accessor
                         struct-shape-source-owner :shape "Owner" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (source-identifier :initarg :source-identifier
                         :initform common-lisp:nil :type
                         (common-lisp:or string-with-char-limit256
                                         common-lisp:null)
                         :accessor struct-shape-source-source-identifier :shape
                         "StringWithCharLimit256" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (source-details :initarg :source-details :initform
                         common-lisp:nil :type
                         (common-lisp:or source-details common-lisp:null)
                         :accessor struct-shape-source-source-details :shape
                         "SourceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (custom-policy-details :initarg :custom-policy-details
                         :initform common-lisp:nil :type
                         (common-lisp:or custom-policy-details
                                         common-lisp:null)
                         :accessor struct-shape-source-custom-policy-details
                         :shape "CustomPolicyDetails" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'source 'make-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "Owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identifier))
      (common-lisp:list
       (common-lisp:cons "SourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-details))
      (common-lisp:list
       (common-lisp:cons "SourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-policy-details))
      (common-lisp:list
       (common-lisp:cons "CustomPolicyDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass source-detail common-lisp:nil
                       ((event-source :initarg :event-source :initform
                         common-lisp:nil :type
                         (common-lisp:or event-source common-lisp:null)
                         :accessor struct-shape-source-detail-event-source
                         :shape "EventSource" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (message-type :initarg :message-type :initform
                         common-lisp:nil :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor struct-shape-source-detail-message-type
                         :shape "MessageType" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (maximum-execution-frequency :initarg
                         :maximum-execution-frequency :initform common-lisp:nil
                         :type
                         (common-lisp:or maximum-execution-frequency
                                         common-lisp:null)
                         :accessor
                         struct-shape-source-detail-maximum-execution-frequency
                         :shape "MaximumExecutionFrequency" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-source-detail
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'source-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'source-detail 'make-source-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source))
      (common-lisp:list
       (common-lisp:cons "EventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-execution-frequency))
      (common-lisp:list
       (common-lisp:cons "MaximumExecutionFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-details ()
   '(trivial-types:proper-list source-detail))
 (common-lisp:defun make-source-details
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass ssm-controls common-lisp:nil
                       ((concurrent-execution-rate-percentage :initarg
                         :concurrent-execution-rate-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-ssm-controls-concurrent-execution-rate-percentage
                         :shape "Percentage" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (error-percentage :initarg :error-percentage :initform
                         common-lisp:nil :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         struct-shape-ssm-controls-error-percentage :shape
                         "Percentage" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-ssm-controls
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'ssm-controls
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'ssm-controls 'make-ssm-controls))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssm-controls))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssm-controls))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'concurrent-execution-rate-percentage))
      (common-lisp:list
       (common-lisp:cons "ConcurrentExecutionRatePercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-percentage))
      (common-lisp:list
       (common-lisp:cons "ErrorPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssm-controls))
   common-lisp:nil))
(common-lisp:deftype stack-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-config-rules-evaluation-request common-lisp:nil
                       ((config-rule-names :initarg :config-rule-names
                         :initform common-lisp:nil :type
                         (common-lisp:or reevaluate-config-rule-names
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-config-rules-evaluation-request-config-rule-names
                         :shape "ReevaluateConfigRuleNames" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-config-rules-evaluation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-config-rules-evaluation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-config-rules-evaluation-request
                    'make-start-config-rules-evaluation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-config-rules-evaluation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-config-rules-evaluation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-names))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-config-rules-evaluation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-config-rules-evaluation-response common-lisp:nil
                       common-lisp:nil
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-config-rules-evaluation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-config-rules-evaluation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-config-rules-evaluation-response
                    'make-start-config-rules-evaluation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-config-rules-evaluation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-config-rules-evaluation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-config-rules-evaluation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-configuration-recorder-request common-lisp:nil
                       ((configuration-recorder-name :initarg
                         :configuration-recorder-name :initform
                         (common-lisp:error
                          ":configuration-recorder-name is required")
                         :type (common-lisp:or recorder-name common-lisp:null)
                         :accessor
                         struct-shape-start-configuration-recorder-request-configuration-recorder-name
                         :shape "RecorderName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-configuration-recorder-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-configuration-recorder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-configuration-recorder-request
                    'make-start-configuration-recorder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-configuration-recorder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-configuration-recorder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-recorder-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationRecorderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-configuration-recorder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-remediation-execution-request common-lisp:nil
                       ((config-rule-name :initarg :config-rule-name :initform
                         (common-lisp:error ":config-rule-name is required")
                         :type
                         (common-lisp:or config-rule-name common-lisp:null)
                         :accessor
                         struct-shape-start-remediation-execution-request-config-rule-name
                         :shape "ConfigRuleName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (resource-keys :initarg :resource-keys :initform
                         (common-lisp:error ":resource-keys is required") :type
                         (common-lisp:or resource-keys common-lisp:null)
                         :accessor
                         struct-shape-start-remediation-execution-request-resource-keys
                         :shape "ResourceKeys" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-remediation-execution-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-remediation-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-remediation-execution-request
                    'make-start-remediation-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-remediation-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-remediation-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-rule-name))
      (common-lisp:list
       (common-lisp:cons "ConfigRuleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-keys))
      (common-lisp:list
       (common-lisp:cons "ResourceKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-remediation-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-remediation-execution-response common-lisp:nil
                       ((failure-message :initarg :failure-message :initform
                         common-lisp:nil :type
                         (common-lisp:or string common-lisp:null) :accessor
                         struct-shape-start-remediation-execution-response-failure-message
                         :shape "String" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (failed-items :initarg :failed-items :initform
                         common-lisp:nil :type
                         (common-lisp:or resource-keys common-lisp:null)
                         :accessor
                         struct-shape-start-remediation-execution-response-failed-items
                         :shape "ResourceKeys" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-remediation-execution-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-remediation-execution-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-remediation-execution-response
                    'make-start-remediation-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-remediation-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-remediation-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-message))
      (common-lisp:list
       (common-lisp:cons "FailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "FailedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-remediation-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-resource-evaluation-request common-lisp:nil
                       ((resource-details :initarg :resource-details :initform
                         (common-lisp:error ":resource-details is required")
                         :type
                         (common-lisp:or resource-details common-lisp:null)
                         :accessor
                         struct-shape-start-resource-evaluation-request-resource-details
                         :shape "ResourceDetails" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-context :initarg :evaluation-context
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-context common-lisp:null)
                         :accessor
                         struct-shape-start-resource-evaluation-request-evaluation-context
                         :shape "EvaluationContext" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-mode :initarg :evaluation-mode :initform
                         (common-lisp:error ":evaluation-mode is required")
                         :type
                         (common-lisp:or evaluation-mode common-lisp:null)
                         :accessor
                         struct-shape-start-resource-evaluation-request-evaluation-mode
                         :shape "EvaluationMode" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (evaluation-timeout :initarg :evaluation-timeout
                         :initform common-lisp:nil :type
                         (common-lisp:or evaluation-timeout common-lisp:null)
                         :accessor
                         struct-shape-start-resource-evaluation-request-evaluation-timeout
                         :shape "EvaluationTimeout" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (client-token :initarg :client-token :initform
                         common-lisp:nil :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor
                         struct-shape-start-resource-evaluation-request-client-token
                         :shape "ClientToken" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-resource-evaluation-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-resource-evaluation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-resource-evaluation-request
                    'make-start-resource-evaluation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-evaluation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-evaluation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-details))
      (common-lisp:list
       (common-lisp:cons "ResourceDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-context))
      (common-lisp:list
       (common-lisp:cons "EvaluationContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-mode))
      (common-lisp:list
       (common-lisp:cons "EvaluationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-timeout))
      (common-lisp:list
       (common-lisp:cons "EvaluationTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-evaluation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-resource-evaluation-response common-lisp:nil
                       ((resource-evaluation-id :initarg
                         :resource-evaluation-id :initform common-lisp:nil
                         :type
                         (common-lisp:or resource-evaluation-id
                                         common-lisp:null)
                         :accessor
                         struct-shape-start-resource-evaluation-response-resource-evaluation-id
                         :shape "ResourceEvaluationId" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-start-resource-evaluation-response
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-resource-evaluation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'start-resource-evaluation-response
                    'make-start-resource-evaluation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-evaluation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-evaluation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-evaluation-id))
      (common-lisp:list
       (common-lisp:cons "ResourceEvaluationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-resource-evaluation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype static-parameter-values ()
   '(trivial-types:proper-list string-with-char-limit256))
 (common-lisp:defun make-static-parameter-values
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            string-with-char-limit256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass static-value common-lisp:nil
                       ((values :initarg :values :initform
                         (common-lisp:error ":values is required") :type
                         (common-lisp:or static-parameter-values
                                         common-lisp:null)
                         :accessor struct-shape-static-value-values :shape
                         "StaticParameterValues" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-static-value
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'static-value
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'static-value 'make-static-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input static-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input static-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input static-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass status-detail-filters common-lisp:nil
                       ((account-id :initarg :account-id :initform
                         common-lisp:nil :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         struct-shape-status-detail-filters-account-id :shape
                         "AccountId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (member-account-rule-status :initarg
                         :member-account-rule-status :initform common-lisp:nil
                         :type
                         (common-lisp:or member-account-rule-status
                                         common-lisp:null)
                         :accessor
                         struct-shape-status-detail-filters-member-account-rule-status
                         :shape "MemberAccountRuleStatus" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-status-detail-filters
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'status-detail-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'status-detail-filters 'make-status-detail-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          status-detail-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          status-detail-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'member-account-rule-status))
      (common-lisp:list
       (common-lisp:cons "MemberAccountRuleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          status-detail-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-configuration-recorder-request common-lisp:nil
                       ((configuration-recorder-name :initarg
                         :configuration-recorder-name :initform
                         (common-lisp:error
                          ":configuration-recorder-name is required")
                         :type (common-lisp:or recorder-name common-lisp:null)
                         :accessor
                         struct-shape-stop-configuration-recorder-request-configuration-recorder-name
                         :shape "RecorderName" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stop-configuration-recorder-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-configuration-recorder-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stop-configuration-recorder-request
                    'make-stop-configuration-recorder-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-configuration-recorder-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-configuration-recorder-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-recorder-name))
      (common-lisp:list
       (common-lisp:cons "ConfigurationRecorderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-configuration-recorder-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stored-query common-lisp:nil
                       ((query-id :initarg :query-id :initform common-lisp:nil
                         :type (common-lisp:or query-id common-lisp:null)
                         :accessor struct-shape-stored-query-query-id :shape
                         "QueryId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-arn :initarg :query-arn :initform
                         common-lisp:nil :type
                         (common-lisp:or query-arn common-lisp:null) :accessor
                         struct-shape-stored-query-query-arn :shape "QueryArn"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-name :initarg :query-name :initform
                         (common-lisp:error ":query-name is required") :type
                         (common-lisp:or query-name common-lisp:null) :accessor
                         struct-shape-stored-query-query-name :shape
                         "QueryName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or query-description common-lisp:null)
                         :accessor struct-shape-stored-query-description :shape
                         "QueryDescription" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (expression :initarg :expression :initform
                         common-lisp:nil :type
                         (common-lisp:or query-expression common-lisp:null)
                         :accessor struct-shape-stored-query-expression :shape
                         "QueryExpression" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stored-query
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stored-query
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'stored-query 'make-stored-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stored-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stored-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-arn))
      (common-lisp:list
       (common-lisp:cons "QueryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-name))
      (common-lisp:list
       (common-lisp:cons "QueryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stored-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stored-query-metadata common-lisp:nil
                       ((query-id :initarg :query-id :initform
                         (common-lisp:error ":query-id is required") :type
                         (common-lisp:or query-id common-lisp:null) :accessor
                         struct-shape-stored-query-metadata-query-id :shape
                         "QueryId" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-arn :initarg :query-arn :initform
                         (common-lisp:error ":query-arn is required") :type
                         (common-lisp:or query-arn common-lisp:null) :accessor
                         struct-shape-stored-query-metadata-query-arn :shape
                         "QueryArn" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (query-name :initarg :query-name :initform
                         (common-lisp:error ":query-name is required") :type
                         (common-lisp:or query-name common-lisp:null) :accessor
                         struct-shape-stored-query-metadata-query-name :shape
                         "QueryName" :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (description :initarg :description :initform
                         common-lisp:nil :type
                         (common-lisp:or query-description common-lisp:null)
                         :accessor
                         struct-shape-stored-query-metadata-description :shape
                         "QueryDescription" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-stored-query-metadata
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'stored-query-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'stored-query-metadata 'make-stored-query-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stored-query-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stored-query-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-arn))
      (common-lisp:list
       (common-lisp:cons "QueryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-name))
      (common-lisp:list
       (common-lisp:cons "QueryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stored-query-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stored-query-metadata-list ()
   '(trivial-types:proper-list stored-query-metadata))
 (common-lisp:defun make-stored-query-metadata-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stored-query-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string-with-char-limit1024 () 'common-lisp:string)
(common-lisp:deftype string-with-char-limit128 () 'common-lisp:string)
(common-lisp:deftype string-with-char-limit2048 () 'common-lisp:string)
(common-lisp:deftype string-with-char-limit256 () 'common-lisp:string)
(common-lisp:deftype string-with-char-limit256min0 () 'common-lisp:string)
(common-lisp:deftype string-with-char-limit64 () 'common-lisp:string)
(common-lisp:deftype string-with-char-limit768 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype supplementary-configuration () 'common-lisp:hash-table)
 (common-lisp:defun make-supplementary-configuration
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype supplementary-configuration-name () 'common-lisp:string)
(common-lisp:deftype supplementary-configuration-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((key :initarg :key :initform common-lisp:nil :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         struct-shape-tag-key :shape "TagKey" :location
                         common-lisp:nil :location-name common-lisp:nil)
                        (value :initarg :value :initform common-lisp:nil :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         struct-shape-tag-value :shape "TagValue" :location
                         common-lisp:nil :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-tag-resource-request-resource-arn :shape
                         "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tags :initarg :tags :initform
                         (common-lisp:error ":tags is required") :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         struct-shape-tag-resource-request-tags :shape
                         "TagList" :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-tag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun make-tags (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype tags-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tags-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype template-body () 'common-lisp:string)
(common-lisp:deftype template-s3uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass template-ssmdocument-details common-lisp:nil
                       ((document-name :initarg :document-name :initform
                         (common-lisp:error ":document-name is required") :type
                         (common-lisp:or ssmdocument-name common-lisp:null)
                         :accessor
                         struct-shape-template-ssmdocument-details-document-name
                         :shape "SSMDocumentName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (document-version :initarg :document-version :initform
                         common-lisp:nil :type
                         (common-lisp:or ssmdocument-version common-lisp:null)
                         :accessor
                         struct-shape-template-ssmdocument-details-document-version
                         :shape "SSMDocumentVersion" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-template-ssmdocument-details
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'template-ssmdocument-details
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'template-ssmdocument-details
                    'make-template-ssmdocument-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          template-ssmdocument-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          template-ssmdocument-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-name))
      (common-lisp:list
       (common-lisp:cons "DocumentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-version))
      (common-lisp:list
       (common-lisp:cons "DocumentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          template-ssmdocument-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass time-window common-lisp:nil
                       ((start-time :initarg :start-time :initform
                         common-lisp:nil :type
                         (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-time-window-start-time :shape "Date"
                         :location common-lisp:nil :location-name
                         common-lisp:nil)
                        (end-time :initarg :end-time :initform common-lisp:nil
                         :type (common-lisp:or date common-lisp:null) :accessor
                         struct-shape-time-window-end-time :shape "Date"
                         :location common-lisp:nil :location-name
                         common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-time-window
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'time-window
                      aws-sdk/generator/shape::args))
 (common-lisp:export (common-lisp:list 'time-window 'make-time-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-window))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'too-many-tags-exception)))
(common-lisp:progn
 (common-lisp:deftype unprocessed-resource-identifier-list ()
   '(trivial-types:proper-list aggregate-resource-identifier))
 (common-lisp:defun make-unprocessed-resource-identifier-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            aggregate-resource-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :initform
                         (common-lisp:error ":resource-arn is required") :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor
                         struct-shape-untag-resource-request-resource-arn
                         :shape "AmazonResourceName" :location common-lisp:nil
                         :location-name common-lisp:nil)
                        (tag-keys :initarg :tag-keys :initform
                         (common-lisp:error ":tag-keys is required") :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor struct-shape-untag-resource-request-tag-keys
                         :shape "TagKeyList" :location common-lisp:nil
                         :location-name common-lisp:nil))
                       (:metaclass aws-sdk/generator/shape::members-class))
 (common-lisp:defun make-untag-resource-request
                    (common-lisp:&rest aws-sdk/generator/shape::args)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (config-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'validation-exception)))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-get-aggregate-resource-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-aggregator-name
                     resource-identifiers)
   (common-lisp:declare
    (common-lisp:ignorable configuration-aggregator-name resource-identifiers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-aggregate-resource-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetAggregateResourceConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-aggregate-resource-config))
(common-lisp:progn
 (common-lisp:defun batch-get-resource-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-keys)
   (common-lisp:declare (common-lisp:ignorable resource-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-resource-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchGetResourceConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'batch-get-resource-config))
(common-lisp:progn
 (common-lisp:defun delete-aggregation-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorized-account-id
                     authorized-aws-region)
   (common-lisp:declare
    (common-lisp:ignorable authorized-account-id authorized-aws-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-aggregation-authorization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAggregationAuthorization"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-aggregation-authorization))
(common-lisp:progn
 (common-lisp:defun delete-config-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-name)
   (common-lisp:declare (common-lisp:ignorable config-rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-config-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConfigRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-config-rule))
(common-lisp:progn
 (common-lisp:defun delete-configuration-aggregator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-aggregator-name)
   (common-lisp:declare (common-lisp:ignorable configuration-aggregator-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-configuration-aggregator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConfigurationAggregator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-configuration-aggregator))
(common-lisp:progn
 (common-lisp:defun delete-configuration-recorder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-recorder-name)
   (common-lisp:declare (common-lisp:ignorable configuration-recorder-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-configuration-recorder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConfigurationRecorder"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-configuration-recorder))
(common-lisp:progn
 (common-lisp:defun delete-conformance-pack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key conformance-pack-name)
   (common-lisp:declare (common-lisp:ignorable conformance-pack-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-conformance-pack-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConformancePack"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-conformance-pack))
(common-lisp:progn
 (common-lisp:defun delete-delivery-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delivery-channel-name)
   (common-lisp:declare (common-lisp:ignorable delivery-channel-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-delivery-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDeliveryChannel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-delivery-channel))
(common-lisp:progn
 (common-lisp:defun delete-evaluation-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-name)
   (common-lisp:declare (common-lisp:ignorable config-rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-evaluation-results-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEvaluationResults"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-evaluation-results))
(common-lisp:progn
 (common-lisp:defun delete-organization-config-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-config-rule-name)
   (common-lisp:declare (common-lisp:ignorable organization-config-rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-organization-config-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteOrganizationConfigRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-organization-config-rule))
(common-lisp:progn
 (common-lisp:defun delete-organization-conformance-pack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-conformance-pack-name)
   (common-lisp:declare
    (common-lisp:ignorable organization-conformance-pack-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-organization-conformance-pack-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteOrganizationConformancePack"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-organization-conformance-pack))
(common-lisp:progn
 (common-lisp:defun delete-pending-aggregation-request
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key requester-account-id
                     requester-aws-region)
   (common-lisp:declare
    (common-lisp:ignorable requester-account-id requester-aws-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-pending-aggregation-request-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePendingAggregationRequest"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-pending-aggregation-request))
(common-lisp:progn
 (common-lisp:defun delete-remediation-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-name resource-type)
   (common-lisp:declare (common-lisp:ignorable config-rule-name resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-remediation-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRemediationConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-remediation-configuration))
(common-lisp:progn
 (common-lisp:defun delete-remediation-exceptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-name resource-keys)
   (common-lisp:declare (common-lisp:ignorable config-rule-name resource-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-remediation-exceptions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRemediationExceptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-remediation-exceptions))
(common-lisp:progn
 (common-lisp:defun delete-resource-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-id)
   (common-lisp:declare (common-lisp:ignorable resource-type resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteResourceConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-resource-config))
(common-lisp:progn
 (common-lisp:defun delete-retention-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key retention-configuration-name)
   (common-lisp:declare (common-lisp:ignorable retention-configuration-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-retention-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRetentionConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-retention-configuration))
(common-lisp:progn
 (common-lisp:defun delete-stored-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-name)
   (common-lisp:declare (common-lisp:ignorable query-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-stored-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteStoredQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'delete-stored-query))
(common-lisp:progn
 (common-lisp:defun deliver-config-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delivery-channel-name)
   (common-lisp:declare (common-lisp:ignorable delivery-channel-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deliver-config-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeliverConfigSnapshot"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'deliver-config-snapshot))
(common-lisp:progn
 (common-lisp:defun describe-aggregate-compliance-by-config-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-aggregator-name filters
                     limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable configuration-aggregator-name filters limit
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-aggregate-compliance-by-config-rules-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAggregateComplianceByConfigRules"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-aggregate-compliance-by-config-rules))
(common-lisp:progn
 (common-lisp:defun describe-aggregate-compliance-by-conformance-packs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-aggregator-name filters
                     limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable configuration-aggregator-name filters limit
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-aggregate-compliance-by-conformance-packs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAggregateComplianceByConformancePacks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-aggregate-compliance-by-conformance-packs))
(common-lisp:progn
 (common-lisp:defun describe-aggregation-authorizations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit next-token)
   (common-lisp:declare (common-lisp:ignorable limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-aggregation-authorizations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAggregationAuthorizations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-aggregation-authorizations))
(common-lisp:progn
 (common-lisp:defun describe-compliance-by-config-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-names compliance-types
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable config-rule-names compliance-types next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-compliance-by-config-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeComplianceByConfigRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-compliance-by-config-rule))
(common-lisp:progn
 (common-lisp:defun describe-compliance-by-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-id
                     compliance-types limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-type resource-id compliance-types limit
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-compliance-by-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeComplianceByResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-compliance-by-resource))
(common-lisp:progn
 (common-lisp:defun describe-config-rule-evaluation-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-names next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable config-rule-names next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-config-rule-evaluation-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConfigRuleEvaluationStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-config-rule-evaluation-status))
(common-lisp:progn
 (common-lisp:defun describe-config-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-names next-token filters)
   (common-lisp:declare
    (common-lisp:ignorable config-rule-names next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-config-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConfigRules"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-config-rules))
(common-lisp:progn
 (common-lisp:defun describe-configuration-aggregator-sources-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-aggregator-name
                     update-status next-token limit)
   (common-lisp:declare
    (common-lisp:ignorable configuration-aggregator-name update-status
     next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-configuration-aggregator-sources-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConfigurationAggregatorSourcesStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-configuration-aggregator-sources-status))
(common-lisp:progn
 (common-lisp:defun describe-configuration-aggregators
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-aggregator-names next-token
                     limit)
   (common-lisp:declare
    (common-lisp:ignorable configuration-aggregator-names next-token limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-configuration-aggregators-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConfigurationAggregators"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-configuration-aggregators))
(common-lisp:progn
 (common-lisp:defun describe-configuration-recorder-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-recorder-names)
   (common-lisp:declare (common-lisp:ignorable configuration-recorder-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-configuration-recorder-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConfigurationRecorderStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-configuration-recorder-status))
(common-lisp:progn
 (common-lisp:defun describe-configuration-recorders
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-recorder-names)
   (common-lisp:declare (common-lisp:ignorable configuration-recorder-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-configuration-recorders-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConfigurationRecorders"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-configuration-recorders))
(common-lisp:progn
 (common-lisp:defun describe-conformance-pack-compliance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key conformance-pack-name filters limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable conformance-pack-name filters limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-conformance-pack-compliance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConformancePackCompliance"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-conformance-pack-compliance))
(common-lisp:progn
 (common-lisp:defun describe-conformance-pack-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key conformance-pack-names limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable conformance-pack-names limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-conformance-pack-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConformancePackStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-conformance-pack-status))
(common-lisp:progn
 (common-lisp:defun describe-conformance-packs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key conformance-pack-names limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable conformance-pack-names limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-conformance-packs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConformancePacks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-conformance-packs))
(common-lisp:progn
 (common-lisp:defun describe-delivery-channel-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delivery-channel-names)
   (common-lisp:declare (common-lisp:ignorable delivery-channel-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-delivery-channel-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDeliveryChannelStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-delivery-channel-status))
(common-lisp:progn
 (common-lisp:defun describe-delivery-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delivery-channel-names)
   (common-lisp:declare (common-lisp:ignorable delivery-channel-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-delivery-channels-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDeliveryChannels"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-delivery-channels))
(common-lisp:progn
 (common-lisp:defun describe-organization-config-rule-statuses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-config-rule-names limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable organization-config-rule-names limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-organization-config-rule-statuses-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOrganizationConfigRuleStatuses"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-organization-config-rule-statuses))
(common-lisp:progn
 (common-lisp:defun describe-organization-config-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-config-rule-names limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable organization-config-rule-names limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-organization-config-rules-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOrganizationConfigRules"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-organization-config-rules))
(common-lisp:progn
 (common-lisp:defun describe-organization-conformance-pack-statuses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-conformance-pack-names limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable organization-conformance-pack-names limit
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-organization-conformance-pack-statuses-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOrganizationConformancePackStatuses"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-organization-conformance-pack-statuses))
(common-lisp:progn
 (common-lisp:defun describe-organization-conformance-packs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-conformance-pack-names limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable organization-conformance-pack-names limit
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-organization-conformance-packs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeOrganizationConformancePacks"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-organization-conformance-packs))
(common-lisp:progn
 (common-lisp:defun describe-pending-aggregation-requests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit next-token)
   (common-lisp:declare (common-lisp:ignorable limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-pending-aggregation-requests-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePendingAggregationRequests"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-pending-aggregation-requests))
(common-lisp:progn
 (common-lisp:defun describe-remediation-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-names)
   (common-lisp:declare (common-lisp:ignorable config-rule-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-remediation-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRemediationConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-remediation-configurations))
(common-lisp:progn
 (common-lisp:defun describe-remediation-exceptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-name resource-keys limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable config-rule-name resource-keys limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-remediation-exceptions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRemediationExceptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-remediation-exceptions))
(common-lisp:progn
 (common-lisp:defun describe-remediation-execution-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-name resource-keys limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable config-rule-name resource-keys limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-remediation-execution-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRemediationExecutionStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-remediation-execution-status))
(common-lisp:progn
 (common-lisp:defun describe-retention-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key retention-configuration-names next-token)
   (common-lisp:declare
    (common-lisp:ignorable retention-configuration-names next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-retention-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRetentionConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'describe-retention-configurations))
(common-lisp:progn
 (common-lisp:defun get-aggregate-compliance-details-by-config-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-aggregator-name
                     config-rule-name account-id aws-region compliance-type
                     limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable configuration-aggregator-name config-rule-name
     account-id aws-region compliance-type limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-aggregate-compliance-details-by-config-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAggregateComplianceDetailsByConfigRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-aggregate-compliance-details-by-config-rule))
(common-lisp:progn
 (common-lisp:defun get-aggregate-config-rule-compliance-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-aggregator-name filters
                     group-by-key limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable configuration-aggregator-name filters group-by-key
     limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-aggregate-config-rule-compliance-summary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAggregateConfigRuleComplianceSummary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-aggregate-config-rule-compliance-summary))
(common-lisp:progn
 (common-lisp:defun get-aggregate-conformance-pack-compliance-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-aggregator-name filters
                     group-by-key limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable configuration-aggregator-name filters group-by-key
     limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-aggregate-conformance-pack-compliance-summary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAggregateConformancePackComplianceSummary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-aggregate-conformance-pack-compliance-summary))
(common-lisp:progn
 (common-lisp:defun get-aggregate-discovered-resource-counts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-aggregator-name filters
                     group-by-key limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable configuration-aggregator-name filters group-by-key
     limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-aggregate-discovered-resource-counts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAggregateDiscoveredResourceCounts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-aggregate-discovered-resource-counts))
(common-lisp:progn
 (common-lisp:defun get-aggregate-resource-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-aggregator-name
                     resource-identifier)
   (common-lisp:declare
    (common-lisp:ignorable configuration-aggregator-name resource-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-aggregate-resource-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAggregateResourceConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-aggregate-resource-config))
(common-lisp:progn
 (common-lisp:defun get-compliance-details-by-config-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-name compliance-types limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable config-rule-name compliance-types limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-compliance-details-by-config-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetComplianceDetailsByConfigRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-compliance-details-by-config-rule))
(common-lisp:progn
 (common-lisp:defun get-compliance-details-by-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-id
                     compliance-types next-token resource-evaluation-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-type resource-id compliance-types
     next-token resource-evaluation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-compliance-details-by-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetComplianceDetailsByResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-compliance-details-by-resource))
(common-lisp:progn
 (common-lisp:defun get-compliance-summary-by-config-rule ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'config-request :method "POST" :path "/"
                                :operation "GetComplianceSummaryByConfigRule"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-compliance-summary-by-config-rule))
(common-lisp:progn
 (common-lisp:defun get-compliance-summary-by-resource-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-types)
   (common-lisp:declare (common-lisp:ignorable resource-types))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-compliance-summary-by-resource-type-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetComplianceSummaryByResourceType"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-compliance-summary-by-resource-type))
(common-lisp:progn
 (common-lisp:defun get-conformance-pack-compliance-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key conformance-pack-name filters limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable conformance-pack-name filters limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-conformance-pack-compliance-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetConformancePackComplianceDetails"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-conformance-pack-compliance-details))
(common-lisp:progn
 (common-lisp:defun get-conformance-pack-compliance-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key conformance-pack-names limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable conformance-pack-names limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-conformance-pack-compliance-summary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetConformancePackComplianceSummary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-conformance-pack-compliance-summary))
(common-lisp:progn
 (common-lisp:defun get-custom-rule-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-name)
   (common-lisp:declare (common-lisp:ignorable config-rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-custom-rule-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCustomRulePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-custom-rule-policy))
(common-lisp:progn
 (common-lisp:defun get-discovered-resource-counts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-types limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-types limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-discovered-resource-counts-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDiscoveredResourceCounts"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-discovered-resource-counts))
(common-lisp:progn
 (common-lisp:defun get-organization-config-rule-detailed-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-config-rule-name filters
                     limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable organization-config-rule-name filters limit
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-organization-config-rule-detailed-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOrganizationConfigRuleDetailedStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-organization-config-rule-detailed-status))
(common-lisp:progn
 (common-lisp:defun get-organization-conformance-pack-detailed-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-conformance-pack-name
                     filters limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable organization-conformance-pack-name filters limit
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-organization-conformance-pack-detailed-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOrganizationConformancePackDetailedStatus"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-organization-conformance-pack-detailed-status))
(common-lisp:progn
 (common-lisp:defun get-organization-custom-rule-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-config-rule-name)
   (common-lisp:declare (common-lisp:ignorable organization-config-rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-organization-custom-rule-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOrganizationCustomRulePolicy"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-organization-custom-rule-policy))
(common-lisp:progn
 (common-lisp:defun get-resource-config-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-id later-time
                     earlier-time chronological-order limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-type resource-id later-time earlier-time
     chronological-order limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-resource-config-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetResourceConfigHistory"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resource-config-history))
(common-lisp:progn
 (common-lisp:defun get-resource-evaluation-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-evaluation-id)
   (common-lisp:declare (common-lisp:ignorable resource-evaluation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-resource-evaluation-summary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetResourceEvaluationSummary"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-resource-evaluation-summary))
(common-lisp:progn
 (common-lisp:defun get-stored-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-name)
   (common-lisp:declare (common-lisp:ignorable query-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-stored-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetStoredQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'get-stored-query))
(common-lisp:progn
 (common-lisp:defun list-aggregate-discovered-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-aggregator-name
                     resource-type filters limit next-token)
   (common-lisp:declare
    (common-lisp:ignorable configuration-aggregator-name resource-type filters
     limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-aggregate-discovered-resources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAggregateDiscoveredResources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-aggregate-discovered-resources))
(common-lisp:progn
 (common-lisp:defun list-conformance-pack-compliance-scores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters sort-order sort-by limit
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable filters sort-order sort-by limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-conformance-pack-compliance-scores-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListConformancePackComplianceScores"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-conformance-pack-compliance-scores))
(common-lisp:progn
 (common-lisp:defun list-discovered-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-ids resource-name
                     limit include-deleted-resources next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-type resource-ids resource-name limit
     include-deleted-resources next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-discovered-resources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDiscoveredResources"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-discovered-resources))
(common-lisp:progn
 (common-lisp:defun list-resource-evaluations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters limit next-token)
   (common-lisp:declare (common-lisp:ignorable filters limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resource-evaluations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListResourceEvaluations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-resource-evaluations))
(common-lisp:progn
 (common-lisp:defun list-stored-queries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-stored-queries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStoredQueries"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-stored-queries))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn limit next-token)
   (common-lisp:declare (common-lisp:ignorable resource-arn limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-aggregation-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key authorized-account-id
                     authorized-aws-region tags)
   (common-lisp:declare
    (common-lisp:ignorable authorized-account-id authorized-aws-region tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-aggregation-authorization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutAggregationAuthorization"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-aggregation-authorization))
(common-lisp:progn
 (common-lisp:defun put-config-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule tags)
   (common-lisp:declare (common-lisp:ignorable config-rule tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-config-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutConfigRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-config-rule))
(common-lisp:progn
 (common-lisp:defun put-configuration-aggregator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-aggregator-name
                     account-aggregation-sources
                     organization-aggregation-source tags)
   (common-lisp:declare
    (common-lisp:ignorable configuration-aggregator-name
     account-aggregation-sources organization-aggregation-source tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-configuration-aggregator-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutConfigurationAggregator"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-configuration-aggregator))
(common-lisp:progn
 (common-lisp:defun put-configuration-recorder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-recorder)
   (common-lisp:declare (common-lisp:ignorable configuration-recorder))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-configuration-recorder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutConfigurationRecorder"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-configuration-recorder))
(common-lisp:progn
 (common-lisp:defun put-conformance-pack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key conformance-pack-name template-s3uri
                     template-body delivery-s3bucket delivery-s3key-prefix
                     conformance-pack-input-parameters
                     template-ssmdocument-details)
   (common-lisp:declare
    (common-lisp:ignorable conformance-pack-name template-s3uri template-body
     delivery-s3bucket delivery-s3key-prefix conformance-pack-input-parameters
     template-ssmdocument-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-conformance-pack-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutConformancePack"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-conformance-pack))
(common-lisp:progn
 (common-lisp:defun put-delivery-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delivery-channel)
   (common-lisp:declare (common-lisp:ignorable delivery-channel))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-delivery-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutDeliveryChannel"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-delivery-channel))
(common-lisp:progn
 (common-lisp:defun put-evaluations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key evaluations result-token test-mode)
   (common-lisp:declare
    (common-lisp:ignorable evaluations result-token test-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-evaluations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutEvaluations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-evaluations))
(common-lisp:progn
 (common-lisp:defun put-external-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-name external-evaluation)
   (common-lisp:declare
    (common-lisp:ignorable config-rule-name external-evaluation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-external-evaluation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutExternalEvaluation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-external-evaluation))
(common-lisp:progn
 (common-lisp:defun put-organization-config-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-config-rule-name
                     organization-managed-rule-metadata
                     organization-custom-rule-metadata excluded-accounts
                     organization-custom-policy-rule-metadata)
   (common-lisp:declare
    (common-lisp:ignorable organization-config-rule-name
     organization-managed-rule-metadata organization-custom-rule-metadata
     excluded-accounts organization-custom-policy-rule-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-organization-config-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutOrganizationConfigRule"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-organization-config-rule))
(common-lisp:progn
 (common-lisp:defun put-organization-conformance-pack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key organization-conformance-pack-name
                     template-s3uri template-body delivery-s3bucket
                     delivery-s3key-prefix conformance-pack-input-parameters
                     excluded-accounts)
   (common-lisp:declare
    (common-lisp:ignorable organization-conformance-pack-name template-s3uri
     template-body delivery-s3bucket delivery-s3key-prefix
     conformance-pack-input-parameters excluded-accounts))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-organization-conformance-pack-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutOrganizationConformancePack"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-organization-conformance-pack))
(common-lisp:progn
 (common-lisp:defun put-remediation-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key remediation-configurations)
   (common-lisp:declare (common-lisp:ignorable remediation-configurations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-remediation-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRemediationConfigurations"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-remediation-configurations))
(common-lisp:progn
 (common-lisp:defun put-remediation-exceptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-name resource-keys message
                     expiration-time)
   (common-lisp:declare
    (common-lisp:ignorable config-rule-name resource-keys message
     expiration-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-remediation-exceptions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRemediationExceptions"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-remediation-exceptions))
(common-lisp:progn
 (common-lisp:defun put-resource-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type schema-version-id
                     resource-id resource-name configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable resource-type schema-version-id resource-id
     resource-name configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutResourceConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-resource-config))
(common-lisp:progn
 (common-lisp:defun put-retention-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key retention-period-in-days)
   (common-lisp:declare (common-lisp:ignorable retention-period-in-days))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-retention-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRetentionConfiguration"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-retention-configuration))
(common-lisp:progn
 (common-lisp:defun put-stored-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stored-query tags)
   (common-lisp:declare (common-lisp:ignorable stored-query tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-stored-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutStoredQuery"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'put-stored-query))
(common-lisp:progn
 (common-lisp:defun select-aggregate-resource-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key expression configuration-aggregator-name
                     limit max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable expression configuration-aggregator-name limit
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-select-aggregate-resource-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SelectAggregateResourceConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'select-aggregate-resource-config))
(common-lisp:progn
 (common-lisp:defun select-resource-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key expression limit next-token)
   (common-lisp:declare (common-lisp:ignorable expression limit next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-select-resource-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SelectResourceConfig"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'select-resource-config))
(common-lisp:progn
 (common-lisp:defun start-config-rules-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-names)
   (common-lisp:declare (common-lisp:ignorable config-rule-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-config-rules-evaluation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartConfigRulesEvaluation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-config-rules-evaluation))
(common-lisp:progn
 (common-lisp:defun start-configuration-recorder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-recorder-name)
   (common-lisp:declare (common-lisp:ignorable configuration-recorder-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-configuration-recorder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartConfigurationRecorder"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-configuration-recorder))
(common-lisp:progn
 (common-lisp:defun start-remediation-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key config-rule-name resource-keys)
   (common-lisp:declare (common-lisp:ignorable config-rule-name resource-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-remediation-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartRemediationExecution"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-remediation-execution))
(common-lisp:progn
 (common-lisp:defun start-resource-evaluation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-details evaluation-context
                     evaluation-mode evaluation-timeout client-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-details evaluation-context evaluation-mode
     evaluation-timeout client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-resource-evaluation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartResourceEvaluation"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'start-resource-evaluation))
(common-lisp:progn
 (common-lisp:defun stop-configuration-recorder
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-recorder-name)
   (common-lisp:declare (common-lisp:ignorable configuration-recorder-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-configuration-recorder-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopConfigurationRecorder"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'stop-configuration-recorder))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'config-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map* "application/json")))
 (common-lisp:export 'untag-resource))
